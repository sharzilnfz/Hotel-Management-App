This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  placeholder.svg
  robots.txt
src/
  components/
    profile/
      ProfileForm.tsx
    restaurant/
      MenuItemCard.tsx
    spa/
      DurationSelector.tsx
      ServiceCard.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      booking-confirmation.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      date-picker.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      mobile-layout.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      promotional-banner.tsx
      radio-group.tsx
      resizable.tsx
      room-card.tsx
      scroll-area.tsx
      select.tsx
      selector-group.tsx
      separator.tsx
      service-menu.tsx
      sheet.tsx
      side-menu.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
  contexts/
    AuthContext.tsx
    BookingContext.tsx
  hooks/
    use-mobile.tsx
    use-toast.ts
  lib/
    booking-utils.ts
    utils.ts
  pages/
    auth/
      Login.tsx
      Onboarding.tsx
      Register.tsx
    bookings/
      BookingsList.tsx
    events/
      EventsPage.tsx
    loyalty/
      LoyaltyProgram.tsx
    profile/
      EditProfile.tsx
      ProfilePage.tsx
    restaurant/
      RestaurantPage.tsx
    rooms/
      RoomDetail.tsx
      RoomsList.tsx
    settings/
      components/
        MoreOptions.tsx
        PaymentMethods.tsx
      SettingsPage.tsx
    spa/
      SpaServices.tsx
    Home.tsx
    Index.tsx
    NotFound.tsx
  services/
    api.ts
    authService.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
AUTHENTICATION_INTEGRATION.md
capacitor.config.ts
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="public/robots.txt">
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /
</file>

<file path="src/components/profile/ProfileForm.tsx">
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Camera, Pencil } from "lucide-react";
import { User } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "sonner";

const profileSchema = z.object({
  name: z.string().min(2).max(50),
  email: z.string().email(),
  phone: z.string().optional(),
  currentPassword: z.string().min(6).optional(),
  newPassword: z.string().min(6).optional(),
  confirmPassword: z.string().optional(),
}).refine((data) => {
  if (data.newPassword && data.newPassword !== data.confirmPassword) {
    return false;
  }
  return true;
}, {
  message: "Passwords do not match",
  path: ["confirmPassword"],
});

interface ProfileFormProps {
  user: User;
}

export function ProfileForm({ user }: ProfileFormProps) {
  const { updateLanguage } = useAuth();
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  
  const form = useForm<z.infer<typeof profileSchema>>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      name: user.name,
      email: user.email,
      phone: user.phone || "",
    },
  });

  const onSubmit = async (data: z.infer<typeof profileSchema>) => {
    try {
      // In a real app, you would call an API to update the user profile
      console.log("Updating profile:", data);
      toast.success("Profile updated successfully");
    } catch (error) {
      toast.error("Failed to update profile");
    }
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // In a real app, you would upload the image to a storage service
      console.log("Uploading image:", file);
      toast.success("Profile picture updated successfully");
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col items-center gap-4">
        <div className="relative">
          <Avatar className="h-24 w-24">
            <AvatarImage src={user.profileImage} />
            <AvatarFallback className="text-2xl">
              {user.name.charAt(0)}
            </AvatarFallback>
          </Avatar>
          <label
            htmlFor="profileImage"
            className="absolute bottom-0 right-0 p-2 rounded-full bg-hotel-burgundy text-white cursor-pointer hover:bg-hotel-burgundy/90 transition-colors"
          >
            <Camera size={16} />
            <input
              type="file"
              id="profileImage"
              className="hidden"
              accept="image/*"
              onChange={handleImageUpload}
            />
          </label>
        </div>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Name</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input {...field} type="email" />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="phone"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Phone (optional)</FormLabel>
                <FormControl>
                  <Input {...field} type="tel" />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="space-y-4">
            <Button
              type="button"
              variant="outline"
              className="w-full"
              onClick={() => setIsChangingPassword(!isChangingPassword)}
            >
              <Pencil className="mr-2 h-4 w-4" />
              {isChangingPassword ? "Cancel Password Change" : "Change Password"}
            </Button>

            {isChangingPassword && (
              <>
                <FormField
                  control={form.control}
                  name="currentPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Current Password</FormLabel>
                      <FormControl>
                        <Input {...field} type="password" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="newPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>New Password</FormLabel>
                      <FormControl>
                        <Input {...field} type="password" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Confirm New Password</FormLabel>
                      <FormControl>
                        <Input {...field} type="password" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </>
            )}
          </div>

          <Button type="submit" className="w-full">
            Save Changes
          </Button>
        </form>
      </Form>
    </div>
  );
}
</file>

<file path="src/components/restaurant/MenuItemCard.tsx">
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Plus, Minus } from "lucide-react";

interface MenuItemCardProps {
  name: string;
  description: string;
  price: number;
  image: string;
  quantity?: number;
  onAdd: () => void;
  onRemove: () => void;
}

export function MenuItemCard({ 
  name, 
  description, 
  price, 
  image, 
  quantity = 0, 
  onAdd, 
  onRemove 
}: MenuItemCardProps) {
  return (
    <Card className="group overflow-hidden border-2 border-hotel-beige/30 hover:border-hotel-gold/50 transition-all duration-300 hover:shadow-luxury">
      <div className="flex h-32">
        <div className="w-1/3 overflow-hidden">
          <img 
            src={image} 
            alt={name} 
            className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
          />
        </div>
        <CardContent className="p-4 flex-1 flex flex-col justify-between">
          <div>
            <h4 className="font-playfair font-bold text-hotel-burgundy text-lg mb-2 group-hover:text-hotel-burgundy-dark transition-colors">
              {name}
            </h4>
            <p className="text-xs text-hotel-charcoal/70 font-montserrat leading-relaxed line-clamp-2">
              {description}
            </p>
          </div>
          <div className="flex justify-between items-center mt-3">
            <div className="text-xl font-bold text-hotel-burgundy font-montserrat">
              ${price}
            </div>
            <div className="flex items-center gap-3">
              {quantity > 0 ? (
                <>
                  <button 
                    onClick={onRemove}
                    className="w-8 h-8 rounded-full bg-hotel-beige hover:bg-hotel-sand flex items-center justify-center transition-colors duration-200"
                  >
                    <Minus size={14} className="text-hotel-burgundy" />
                  </button>
                  <span className="w-6 text-center font-semibold text-hotel-burgundy font-montserrat">
                    {quantity}
                  </span>
                  <button 
                    onClick={onAdd}
                    className="w-8 h-8 rounded-full bg-luxury-gradient text-white flex items-center justify-center shadow-elegant hover:shadow-luxury transition-all duration-200 transform hover:scale-105"
                  >
                    <Plus size={14} />
                  </button>
                </>
              ) : (
                <Button 
                  onClick={onAdd}
                  size="sm"
                  className="bg-luxury-gradient hover:bg-luxury-gradient/90 text-white rounded-full px-4 py-2 text-xs font-semibold shadow-elegant hover:shadow-luxury transition-all duration-200 transform hover:scale-105"
                >
                  <Plus size={12} className="mr-1" /> Add
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </div>
      
      {/* Shimmer effect on hover */}
      <div className="absolute inset-0 rounded-2xl overflow-hidden opacity-0 group-hover:opacity-100 transition-opacity duration-300">
        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
      </div>
    </Card>
  );
}
</file>

<file path="src/components/spa/DurationSelector.tsx">
import React from "react";
import { Card } from "@/components/ui/card";
import { Clock } from "lucide-react";

interface Duration {
  minutes: number;
  price: number;
}

interface DurationSelectorProps {
  durations: Duration[];
  selectedDuration?: Duration;
  onSelect: (duration: Duration) => void;
}

export function DurationSelector({ durations, selectedDuration, onSelect }: DurationSelectorProps) {
  return (
    <div className="space-y-4">
      <h4 className="text-sm font-medium text-hotel-charcoal flex items-center font-montserrat">
        <Clock size={18} className="mr-2 text-hotel-gold" /> Choose Duration
      </h4>
      <div className="grid grid-cols-3 gap-3">
        {durations.map((duration) => (
          <button
            key={duration.minutes}
            onClick={() => onSelect(duration)}
            className={`group relative p-4 rounded-2xl text-center transition-all duration-300 border-2 ${
              selectedDuration?.minutes === duration.minutes
                ? "bg-luxury-gradient text-white border-hotel-gold shadow-luxury transform scale-105"
                : "bg-hotel-pearl hover:bg-hotel-cream border-hotel-beige hover:border-hotel-gold hover:shadow-gold hover:transform hover:scale-102"
            }`}
          >
            <div className="relative z-10">
              <div className="font-semibold font-montserrat text-sm">
                {duration.minutes} min
              </div>
              <div className={`text-xs mt-1 font-medium ${
                selectedDuration?.minutes === duration.minutes
                  ? "text-hotel-gold"
                  : "text-hotel-burgundy"
              }`}>
                ${duration.price}
              </div>
            </div>
            {/* Shimmer effect on hover */}
            <div className="absolute inset-0 rounded-2xl overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
            </div>
          </button>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/spa/ServiceCard.tsx">
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Clock } from "lucide-react";

interface ServiceCardProps {
  title: string;
  description: string;
  durations: string;
  fromPrice: number;
  onSelect?: () => void;
}

export function ServiceCard({ title, description, durations, fromPrice, onSelect }: ServiceCardProps) {
  return (
    <Card className="group cursor-pointer overflow-hidden border-2 border-hotel-beige/30 hover:border-hotel-gold/50 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-luxury">
      <CardContent className="p-6">
        <div className="flex justify-between items-start mb-4">
          <h3 className="font-playfair text-xl font-bold text-hotel-burgundy group-hover:text-hotel-burgundy-dark transition-colors">
            {title}
          </h3>
          <div className="text-right">
            <div className="text-sm font-montserrat font-medium text-hotel-charcoal/70 mb-1">From</div>
            <div className="text-2xl font-bold text-hotel-burgundy">${fromPrice}</div>
          </div>
        </div>
        
        <p className="text-hotel-charcoal/70 font-montserrat text-sm leading-relaxed mb-4">
          {description}
        </p>
        
        <div className="flex items-center text-hotel-charcoal/60 font-montserrat text-sm">
          <Clock size={16} className="mr-2 text-hotel-gold" />
          <span>{durations}</span>
        </div>
        
        {/* Shimmer effect on hover */}
        <div className="absolute inset-0 rounded-2xl overflow-hidden opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/booking-confirmation.tsx">
import React from "react";
import { motion } from "framer-motion";
import { QRCodeSVG } from "qrcode.react";
import { Check, Calendar, Clock, MapPin, Phone, Mail, Award, Gift, Tag } from "lucide-react";

export interface BookingExtra {
  id: string;
  name?: string;
  price?: number;
}

interface BookingConfirmationProps {
  bookingType: "room" | "spa" | "event" | "restaurant" | "meeting";
  confirmationCode: string;
  title: string;
  date: string;
  time?: string;
  location?: string;
  details: string;
  name: string;
  contact: string;
  email: string;
  extras?: BookingExtra[];
  addons?: BookingExtra[];
  totalPrice?: number;
  loyaltyPoints?: number;
}

export function BookingConfirmation({
  bookingType,
  confirmationCode,
  title,
  date,
  time,
  location,
  details,
  name,
  contact,
  email,
  extras = [],
  addons = [],
  totalPrice,
  loyaltyPoints,
}: BookingConfirmationProps) {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5 }}
      className="bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden max-w-md mx-auto"
    >
      <div className="bg-hotel-burgundy text-white p-5 text-center">
        <div className="w-16 h-16 bg-white rounded-full mx-auto flex items-center justify-center mb-3">
          <Check size={32} className="text-hotel-burgundy" />
        </div>
        <h2 className="font-playfair text-xl font-semibold">Booking Confirmed!</h2>
        <p className="text-sm opacity-90 mt-1">Thank you for your reservation</p>
      </div>
      
      <div className="p-5">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h3 className="font-playfair text-lg font-semibold text-hotel-burgundy">{title}</h3>
            <p className="text-sm text-gray-600">{details}</p>
          </div>
          <div className="text-right">
            <span className="font-medium text-sm text-gray-500">Confirmation Code</span>
            <span className="block font-mono font-bold text-hotel-burgundy">{confirmationCode}</span>
          </div>
        </div>
        
        <div className="border-t border-b border-gray-100 py-4 my-4 grid gap-2">
          <div className="flex items-center gap-3 text-gray-700">
            <Calendar size={18} className="text-hotel-burgundy" />
            <span>{date}</span>
          </div>
          
          {time && (
            <div className="flex items-center gap-3 text-gray-700">
              <Clock size={18} className="text-hotel-burgundy" />
              <span>{time}</span>
            </div>
          )}
          
          {location && (
            <div className="flex items-center gap-3 text-gray-700">
              <MapPin size={18} className="text-hotel-burgundy" />
              <span>{location}</span>
            </div>
          )}
        </div>
        
        {/* Price Details Section - new */}
        {totalPrice && (
          <div className="border-b border-gray-100 pb-4 mb-4">
            <h4 className="font-medium text-gray-700 mb-2">Booking Details</h4>
            
            {/* Extras */}
            {extras && extras.length > 0 && (
              <div className="mb-2">
                <span className="text-sm text-gray-500">Selected Extras:</span>
                <ul className="text-sm">
                  {extras.map((extra, index) => (
                    <li key={index} className="flex justify-between">
                      <span>{extra.name}</span>
                      <span>${extra.price}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            {/* Add-ons */}
            {addons && addons.length > 0 && (
              <div className="mb-2">
                <span className="text-sm text-gray-500">Selected Add-ons:</span>
                <ul className="text-sm">
                  {addons.map((addon, index) => (
                    <li key={index} className="flex justify-between">
                      <span>{addon.name}</span>
                      <span>${addon.price}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            {/* Total Price */}
            <div className="flex justify-between mt-2 font-medium">
              <span>Total</span>
              <span className="text-hotel-burgundy">${totalPrice}</span>
            </div>
            
            {/* Loyalty Points */}
            {loyaltyPoints && (
              <div className="flex items-center mt-3 text-sm text-amber-700 bg-amber-50 p-2 rounded">
                <Award size={16} className="mr-1 text-amber-500" />
                <span>You've earned {loyaltyPoints} loyalty points</span>
              </div>
            )}
          </div>
        )}
        
        <div className="mb-5">
          <h4 className="font-medium text-gray-700 mb-2">Guest Information</h4>
          <div className="grid gap-2">
            <div className="flex items-center gap-3 text-gray-700">
              <span className="font-medium">Name:</span>
              <span>{name}</span>
            </div>
            <div className="flex items-center gap-3 text-gray-700">
              <Phone size={16} className="text-hotel-burgundy" />
              <span>{contact}</span>
            </div>
            <div className="flex items-center gap-3 text-gray-700">
              <Mail size={16} className="text-hotel-burgundy" />
              <span>{email}</span>
            </div>
          </div>
        </div>
        
        <div className="flex justify-center mb-4">
          <div className="p-2 bg-white border border-gray-200 rounded-lg">
            <QRCodeSVG
              value={`PARKSIDE-${bookingType.toUpperCase()}-${confirmationCode}`}
              size={120}
              bgColor="#FFFFFF"
              fgColor="#6B0F1A"
              level="H"
              includeMargin={false}
            />
          </div>
        </div>
        
        <div className="text-center text-sm text-gray-500">
          <p>Present this code at check-in/reception</p>
          <p className="mt-1">A copy has been sent to your email</p>
        </div>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-2xl text-sm font-semibold ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-hotel-gold focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 relative overflow-hidden shadow-elegant hover:shadow-luxury transform hover:-translate-y-1 active:translate-y-0 font-montserrat",
  {
    variants: {
      variant: {
        default: "bg-luxury-gradient text-white hover:shadow-lg border border-hotel-burgundy/20 before:absolute before:inset-0 before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent before:transform before:-translate-x-full hover:before:translate-x-full before:transition-transform before:duration-700",
        destructive:
          "bg-gradient-to-r from-red-600 to-red-700 text-white hover:from-red-700 hover:to-red-800 border border-red-500/20",
        outline:
          "border-2 border-hotel-burgundy/30 bg-hotel-pearl hover:bg-hotel-cream hover:text-hotel-burgundy text-hotel-burgundy hover:border-hotel-gold transition-colors",
        secondary:
          "bg-gold-gradient text-hotel-burgundy hover:shadow-gold border border-hotel-gold/20 font-semibold before:absolute before:inset-0 before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent before:transform before:-translate-x-full hover:before:translate-x-full before:transition-transform before:duration-700",
        ghost: "hover:bg-hotel-cream/50 hover:text-hotel-burgundy transition-colors",
        link: "text-hotel-burgundy underline-offset-4 hover:underline font-medium",
        creative: "bg-burgundy-gradient text-white overflow-hidden before:absolute before:inset-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent hover:before:translate-x-[100%] before:transition-transform before:duration-700 border border-hotel-burgundy/20 shadow-luxury",
        gold: "bg-gold-gradient text-hotel-burgundy overflow-hidden before:absolute before:inset-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent hover:before:translate-x-[100%] before:transition-transform before:duration-700 border border-hotel-gold/20 font-semibold shadow-gold",
        elegant: "bg-hotel-pearl text-hotel-charcoal border-2 border-hotel-beige hover:border-hotel-sand hover:bg-hotel-cream transition-all",
      },
      size: {
        default: "h-12 px-8 py-3",
        sm: "h-10 rounded-xl px-6 text-xs",
        lg: "h-14 rounded-2xl px-10 text-base",
        icon: "h-12 w-12 rounded-full",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-2xl border border-hotel-beige/30 bg-gradient-to-br from-hotel-pearl to-hotel-cream text-card-foreground shadow-elegant hover:shadow-luxury transition-all duration-300 backdrop-blur-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-2 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight font-playfair text-hotel-burgundy",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-hotel-charcoal/70 font-montserrat", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/date-picker.tsx">
import * as React from "react";
import { format } from "date-fns";
import { Calendar as CalendarIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

interface DatePickerProps {
  date: Date | undefined;
  setDate: (date: Date | undefined) => void;
  label?: string;
  placeholder?: string;
  className?: string;
  fromDate?: Date;
}

export function DatePicker({ 
  date, 
  setDate, 
  label = "Select date", 
  placeholder = "Pick a date",
  className,
  fromDate
}: DatePickerProps) {
  return (
    <div className={className}>
      {label && (
        <label className="block text-sm font-semibold mb-3 text-hotel-burgundy font-montserrat tracking-wide">
          {label}
        </label>
      )}
      <Popover>
        <PopoverTrigger asChild>
          <Button
            variant={"outline"}
            className={cn(
              "w-full h-14 justify-start text-left font-montserrat bg-gradient-to-br from-hotel-pearl to-hotel-cream border-2 border-hotel-beige/50 hover:bg-gradient-to-br hover:from-hotel-cream hover:to-hotel-pearl hover:border-hotel-gold/70 focus:border-hotel-gold rounded-2xl shadow-elegant hover:shadow-luxury transition-all duration-300",
              !date && "text-hotel-charcoal/50"
            )}
          >
            <CalendarIcon className="mr-3 h-5 w-5 text-hotel-burgundy" strokeWidth={2} />
            {date ? (
              <span className="font-medium text-hotel-charcoal">
                {format(date, "PPP")}
              </span>
            ) : (
              <span className="font-medium">{placeholder}</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0 pointer-events-auto bg-white border-2 border-hotel-beige/30 shadow-luxury rounded-2xl">
          <Calendar
            mode="single"
            selected={date}
            onSelect={setDate}
            disabled={(date) => fromDate ? date < fromDate : false}
            initialFocus
            className="p-4 pointer-events-auto"
          />
        </PopoverContent>
      </Popover>
    </div>
  );
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-14 w-full rounded-2xl border-2 border-hotel-beige/50 bg-gradient-to-br from-hotel-pearl to-hotel-cream px-5 py-4 text-base font-montserrat ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-hotel-charcoal/50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-hotel-gold focus-visible:border-hotel-gold/70 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-300 shadow-elegant focus-visible:shadow-luxury text-hotel-charcoal",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-semibold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mb-3 text-hotel-burgundy font-montserrat tracking-wide"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/mobile-layout.tsx">
import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Link, useLocation } from "react-router-dom";
import { Home, Calendar, Clock, User, Utensils, Search, Bell, Star, Award, Flower2, LayoutGrid } from "lucide-react";
import { SideMenu } from "@/components/ui/side-menu";

interface MobileLayoutProps {
  children: React.ReactNode;
  showBackButton?: boolean;
  title?: string;
  showLogo?: boolean;
  showBottomNav?: boolean;
  hideHeader?: boolean;
}
export function MobileLayout({
  children,
  showBackButton = false,
  title,
  showLogo = true,
  showBottomNav = true,
  hideHeader = false
}: MobileLayoutProps) {
  const location = useLocation();
  const isActive = (path: string) => {
    return location.pathname === path;
  };
  const navItems = [{
    path: "/",
    label: "Home",
    icon: <Home size={20} strokeWidth={2.5} />
  }, {
    path: "/rooms",
    label: "Rooms",
    icon: <Star size={20} strokeWidth={2.5} />
  }, {
    path: "/restaurant",
    label: "Dining",
    icon: <Utensils size={20} strokeWidth={2.5} />
  }, {
    path: "/spa",
    label: "Spa",
    icon: <Flower2 size={20} strokeWidth={2.5} />
  }, {
    path: "/events",
    label: "Events",
    icon: <Calendar size={20} strokeWidth={2.5} />
  }];

  // Page transition variants
  const pageVariants = {
    initial: {
      opacity: 0,
      y: 10
    },
    animate: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.4,
        ease: "easeInOut"
      }
    },
    exit: {
      opacity: 0,
      y: -10,
      transition: {
        duration: 0.3,
        ease: "easeInOut"
      }
    }
  };
  return <div className="flex flex-col min-h-screen bg-gradient-to-br from-hotel-light via-hotel-pearl to-hotel-cream">
      {!hideHeader && <header className="sticky top-0 z-50 relative">
          {/* Classic Luxury Background */}
          <div className="bg-white/95 backdrop-blur-xl border-b border-hotel-beige/30 shadow-lg relative">
            {/* Subtle luxury accent line */}
            <div className="absolute top-0 left-0 right-0 h-[2px] bg-gradient-to-r from-hotel-gold/30 via-hotel-gold to-hotel-gold/30"></div>
            
            {/* Content */}
            <div className="relative px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  {showBackButton && <motion.button onClick={() => window.history.back()} className="w-10 h-10 flex items-center justify-center text-hotel-charcoal bg-hotel-pearl/80 hover:bg-hotel-beige/80 rounded-xl border border-hotel-beige/50 transition-all duration-200 shadow-sm" whileTap={{
                scale: 0.95
              }} whileHover={{
                scale: 1.02
              }}>
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 12H5M5 12L12 19M5 12L12 5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                      </svg>
                    </motion.button>}
                  {showLogo && <div className="flex items-center gap-3">
                      <img alt="Parkside Plaza Hotel" src="/lovable-uploads/e00f85de-b767-4bf4-bc3a-9ba4cf0e2a9d.png" className="h-14 w-auto object-contain" />
                    </div>}
                  {title && <h1 className="text-xl font-playfair font-bold text-hotel-burgundy tracking-tight">
                      {title}
                    </h1>}
                </div>
                <div className="flex items-center gap-3">
                  <Link to="/profile" className="w-10 h-10 flex items-center justify-center text-hotel-charcoal bg-hotel-pearl/80 hover:bg-hotel-beige/80 rounded-xl border border-hotel-beige/50 transition-all duration-200 shadow-sm">
                    <User size={16} strokeWidth={2} />
                  </Link>
                  <SideMenu trigger={<button className="w-10 h-10 flex items-center justify-center text-hotel-charcoal bg-hotel-pearl/80 hover:bg-hotel-beige/80 rounded-xl border border-hotel-beige/50 transition-all duration-200 shadow-sm">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M3 12H21M3 6H21M3 18H21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                      </button>} />
                </div>
              </div>
            </div>
            
            {/* Bottom subtle shadow */}
            <div className="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-b from-hotel-beige/10 to-transparent"></div>
          </div>
        </header>}

      <main className="flex-1 overflow-auto pb-28">
        <AnimatePresence mode="wait">
          <motion.div key={location.pathname} initial="initial" animate="animate" exit="exit" variants={pageVariants} className="min-h-[calc(100vh-180px)]">
            {children}
          </motion.div>
        </AnimatePresence>
      </main>

      {showBottomNav && <nav className="fixed bottom-0 left-0 right-0 z-50 bg-white/98 border-t-2 border-hotel-beige/20 shadow-luxury backdrop-blur-xl py-3 px-4">
          <div className="max-w-md mx-auto">
            <div className="flex justify-between items-center px-2">
              {navItems.map(item => {
            const active = isActive(item.path);
            return <Link key={item.path} to={item.path} className="relative flex flex-col items-center py-2 px-3 min-w-[60px]">
                    <motion.div className={`flex flex-col items-center justify-center rounded-2xl p-3 transition-all duration-300 ${active ? "bg-luxury-gradient text-white shadow-luxury" : "text-hotel-charcoal/70 hover:text-hotel-burgundy"}`} initial={false} animate={active ? {
                scale: 1.1,
                y: -2
              } : {
                scale: 1,
                y: 0
              }} whileHover={{
                scale: active ? 1.1 : 1.05
              }} whileTap={{
                scale: 0.95
              }}>
                      <div className="mb-1">
                        {item.icon}
                      </div>
                      <span className={`text-xs font-medium font-montserrat ${active ? "text-hotel-gold" : "text-current"}`}>
                        {item.label}
                      </span>
                    </motion.div>
                  </Link>;
          })}
            </div>
          </div>
        </nav>}
    </div>;
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/promotional-banner.tsx">
import React, { useState } from "react";
import { Link } from "react-router-dom";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export interface PromoItem {
  id: string;
  image: string;
  title: string;
  description: string;
  buttonText: string;
  link: string;
}

interface PromotionalBannerProps {
  items: PromoItem[];
}

export function PromotionalBanner({ items }: PromotionalBannerProps) {
  const [currentIndex, setCurrentIndex] = useState(0);

  const handleNext = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === items.length - 1 ? 0 : prevIndex + 1
    );
  };

  const handlePrev = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === 0 ? items.length - 1 : prevIndex - 1
    );
  };

  return (
    <div className="relative overflow-hidden rounded-3xl h-80 w-full shadow-luxury bg-gradient-to-br from-hotel-cream to-hotel-pearl">
      <AnimatePresence mode="wait">
        <motion.div
          key={currentIndex}
          initial={{ opacity: 0, scale: 1.05 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.98 }}
          transition={{ ease: "easeInOut", duration: 0.6 }}
          className="absolute inset-0"
        >
          <div
            className="w-full h-full bg-cover bg-center bg-no-repeat relative"
            style={{ backgroundImage: `url(${items[currentIndex].image})` }}
          >
            {/* Luxury gradient overlay matching hotel theme */}
            <div className="absolute inset-0 bg-gradient-to-tr from-hotel-burgundy/85 via-hotel-charcoal/40 to-transparent"></div>
            <div className="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-hotel-burgundy/70"></div>
            
            {/* Content positioned below arrows and above indicators */}
            <div className="absolute inset-0 flex flex-col justify-center items-start px-8 pt-16 pb-20">
              <div className="max-w-sm">
                <motion.div
                  initial={{ y: 25, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.3, duration: 0.6 }}
                  className="space-y-4"
                >
                  <h2 className="font-playfair text-3xl font-bold text-white mb-3 leading-tight drop-shadow-xl">
                    {items[currentIndex].title}
                  </h2>
                  <p className="text-hotel-cream/95 text-base mb-6 leading-relaxed font-montserrat font-light drop-shadow-lg">
                    {items[currentIndex].description}
                  </p>
                </motion.div>
              </div>
            </div>

            {/* Button positioned above indicators */}
            <div className="absolute bottom-16 left-8">
              <motion.div
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ delay: 0.4, duration: 0.5 }}
              >
                <Link
                  to={items[currentIndex].link}
                  className="inline-flex items-center px-6 py-3 bg-hotel-gold/90 backdrop-blur-md text-hotel-burgundy rounded-2xl text-sm font-bold font-montserrat border-2 border-hotel-gold hover:bg-hotel-gold hover:border-hotel-gold-light transform hover:scale-105 transition-all duration-300 shadow-luxury"
                >
                  {items[currentIndex].buttonText}
                  <svg className="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M9 5l7 7-7 7" />
                  </svg>
                </Link>
              </motion.div>
            </div>
          </div>
        </motion.div>
      </AnimatePresence>

      {/* Navigation Buttons - matching hotel theme */}
      <button
        onClick={handlePrev}
        className="absolute left-6 top-1/2 -translate-y-1/2 w-12 h-12 bg-hotel-gold/20 backdrop-blur-md rounded-full flex items-center justify-center text-hotel-gold border-2 border-hotel-gold/30 hover:bg-hotel-gold/30 hover:border-hotel-gold hover:scale-110 transition-all duration-300 z-30 shadow-gold"
        aria-label="Previous slide"
      >
        <ChevronLeft size={22} strokeWidth={2.5} />
      </button>
      
      <button
        onClick={handleNext}
        className="absolute right-6 top-1/2 -translate-y-1/2 w-12 h-12 bg-hotel-gold/20 backdrop-blur-md rounded-full flex items-center justify-center text-hotel-gold border-2 border-hotel-gold/30 hover:bg-hotel-gold/30 hover:border-hotel-gold hover:scale-110 transition-all duration-300 z-30 shadow-gold"
        aria-label="Next slide"
      >
        <ChevronRight size={22} strokeWidth={2.5} />
      </button>

      {/* Indicator System - positioned at bottom with hotel theme colors */}
      <div className="absolute bottom-6 left-1/2 -translate-x-1/2 flex items-center gap-3 z-30">
        {items.map((_, index) => (
          <button
            key={index}
            onClick={() => setCurrentIndex(index)}
            className={`transition-all duration-400 ${
              index === currentIndex
                ? "w-8 h-3 bg-hotel-gold rounded-full shadow-gold border border-hotel-gold-light"
                : "w-3 h-3 bg-hotel-gold/40 rounded-full hover:bg-hotel-gold/70 hover:scale-125 border border-hotel-gold/20"
            }`}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>

      {/* Decorative corner accents with hotel theme */}
      <div className="absolute top-6 right-6 w-8 h-8 border-t-2 border-r-2 border-hotel-gold/40 rounded-tr-xl z-20"></div>
      <div className="absolute bottom-6 left-6 w-8 h-8 border-b-2 border-l-2 border-hotel-gold/40 rounded-bl-xl z-20"></div>
    </div>
  );
}
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/room-card.tsx">
import React from "react";
import { motion } from "framer-motion";
import { Bath, Users, Wifi, Coffee } from "lucide-react";

interface RoomCardProps {
  id: string;
  name: string;
  description: string;
  price: number;
  currency?: string;
  image: string;
  amenities: string[];
  capacity: number;
  onClick?: () => void;
}

export function RoomCard({
  id,
  name,
  description,
  price,
  currency = "$",
  image,
  amenities,
  capacity,
  onClick,
}: RoomCardProps) {
  return (
    <motion.div
      whileHover={{ y: -5 }}
      className="overflow-hidden rounded-xl bg-white shadow-md border border-gray-100 hover:border-hotel-gold/50 transition-all"
      onClick={onClick}
    >
      <div className="relative h-48 overflow-hidden">
        <img 
          src={image} 
          alt={name}
          className="w-full h-full object-cover transition-transform duration-500 hover:scale-110" 
        />
      </div>
      <div className="p-4">
        <div className="flex justify-between items-start">
          <h3 className="font-playfair text-lg font-semibold text-hotel-burgundy">{name}</h3>
          <div className="text-right">
            <span className="text-lg font-semibold text-hotel-burgundy">{currency}{price}</span>
            <span className="text-sm text-gray-500 block">per night</span>
          </div>
        </div>
        
        <p className="text-sm text-gray-600 mt-2 mb-3 line-clamp-2">{description}</p>
        
        <div className="flex items-center gap-4 text-sm text-gray-600 mb-3">
          <div className="flex items-center gap-1">
            <Users size={16} className="text-hotel-burgundy" />
            <span>{capacity}</span>
          </div>
          {amenities.includes("wifi") && (
            <div className="flex items-center gap-1">
              <Wifi size={16} className="text-hotel-burgundy" />
            </div>
          )}
          {amenities.includes("bathroom") && (
            <div className="flex items-center gap-1">
              <Bath size={16} className="text-hotel-burgundy" />
            </div>
          )}
          {amenities.includes("breakfast") && (
            <div className="flex items-center gap-1">
              <Coffee size={16} className="text-hotel-burgundy" />
            </div>
          )}
        </div>
        
        <button 
          className="w-full py-2 bg-hotel-burgundy text-white rounded-md hover:bg-opacity-90 transition-colors"
          onClick={(e) => {
            e.stopPropagation();
            onClick && onClick();
          }}
        >
          Book Now
        </button>
      </div>
    </motion.div>
  );
}
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-14 w-full items-center justify-between rounded-2xl border-2 border-hotel-beige/50 bg-gradient-to-br from-hotel-pearl to-hotel-cream px-5 py-4 text-base font-montserrat ring-offset-background placeholder:text-hotel-charcoal/50 focus:outline-none focus:ring-2 focus:ring-hotel-gold focus:border-hotel-gold/70 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 transition-all duration-300 shadow-elegant focus:shadow-luxury text-hotel-charcoal hover:border-hotel-gold/50",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-5 w-5 opacity-70 text-hotel-burgundy" strokeWidth={2} />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-2xl border-2 border-hotel-beige/30 bg-gradient-to-br from-hotel-pearl to-hotel-cream text-hotel-charcoal shadow-luxury data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-2",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-2 pl-8 pr-2 text-sm font-semibold text-hotel-burgundy font-montserrat", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-xl py-3 pl-8 pr-2 text-sm font-medium font-montserrat outline-none focus:bg-hotel-cream/80 focus:text-hotel-burgundy data-[disabled]:pointer-events-none data-[disabled]:opacity-50 hover:bg-hotel-cream/60 transition-colors duration-200",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4 text-hotel-gold" strokeWidth={2.5} />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-hotel-beige/50", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/selector-group.tsx">
import React from "react";
import { Card } from "@/components/ui/card";

interface SelectorOption {
  id: string;
  label: string;
  sublabel?: string;
  price?: number;
}

interface SelectorGroupProps {
  title: string;
  icon: React.ReactNode;
  options: SelectorOption[];
  selectedId?: string;
  onSelect: (option: SelectorOption) => void;
  columns?: number;
}

export function SelectorGroup({ 
  title, 
  icon, 
  options, 
  selectedId, 
  onSelect, 
  columns = 3 
}: SelectorGroupProps) {
  const gridClass = columns === 1 ? "grid grid-cols-1 gap-3" : `grid grid-cols-${columns} gap-3`;
  
  return (
    <div className="space-y-4">
      <h4 className="text-sm font-medium text-hotel-charcoal flex items-center font-montserrat">
        {icon} {title}
      </h4>
      <div className={gridClass}>
        {options.map((option) => (
          <button
            key={option.id}
            onClick={() => onSelect(option)}
            className={`group relative p-4 rounded-2xl text-center transition-all duration-300 border-2 ${
              selectedId === option.id
                ? "bg-luxury-gradient text-white border-hotel-gold shadow-luxury transform scale-105"
                : "bg-hotel-pearl hover:bg-hotel-cream border-hotel-beige hover:border-hotel-gold hover:shadow-gold hover:transform hover:scale-102"
            } ${columns === 1 ? "text-left flex items-center" : ""}`}
          >
            {columns === 1 ? (
              <>
                <div className="w-10 h-10 bg-hotel-burgundy/10 rounded-full flex items-center justify-center mr-3 relative z-10">
                  <div className={`w-4 h-4 rounded-full ${selectedId === option.id ? "bg-hotel-gold" : "bg-hotel-burgundy"}`} />
                </div>
                <div className="relative z-10">
                  <div className="font-medium font-montserrat text-hotel-charcoal">
                    {option.label}
                  </div>
                  {option.sublabel && (
                    <div className={`text-xs mt-1 font-medium ${
                      selectedId === option.id
                        ? "text-hotel-gold"
                        : "text-hotel-burgundy"
                    }`}>
                      {option.sublabel}
                    </div>
                  )}
                </div>
              </>
            ) : (
              <div className="relative z-10">
                <div className="font-semibold font-montserrat text-sm">
                  {option.label}
                </div>
                {option.sublabel && (
                  <div className={`text-xs mt-1 font-medium ${
                    selectedId === option.id
                      ? "text-hotel-gold"
                      : "text-hotel-burgundy"
                  }`}>
                    {option.sublabel}
                  </div>
                )}
                {option.price && (
                  <div className={`text-xs mt-1 font-medium ${
                    selectedId === option.id
                      ? "text-hotel-gold"
                      : "text-hotel-burgundy"
                  }`}>
                    ${option.price}
                  </div>
                )}
              </div>
            )}
            {/* Shimmer effect on hover */}
            <div className="absolute inset-0 rounded-2xl overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
            </div>
          </button>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/service-menu.tsx">
import React from "react";
import { motion } from "framer-motion";
import { ChevronRight } from "lucide-react";
import { Link } from "react-router-dom";

interface MenuItem {
  id: string;
  title: string;
  icon: React.ReactNode;
  description: string;
  path: string;
}

interface ServiceMenuProps {
  items: MenuItem[];
}

export function ServiceMenu({ items }: ServiceMenuProps) {
  return (
    <div className="grid gap-5">
      {items.map((item, index) => (
        <Link to={item.path} key={item.id} className="block">
          <motion.div
            initial={{ opacity: 0, y: 15 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1, duration: 0.4 }}
            className="group flex items-center gap-5 hotel-card p-6 border-2 border-hotel-beige/30 hover:border-hotel-gold/50 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-luxury"
          >
            <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-hotel-burgundy to-hotel-burgundy-light flex items-center justify-center text-white shrink-0 shadow-elegant group-hover:shadow-luxury transition-all duration-300 group-hover:scale-110">
              {item.icon}
            </div>
            <div className="flex-1 min-w-0">
              <h3 className="font-playfair text-xl font-bold text-hotel-burgundy mb-1 group-hover:text-hotel-burgundy-dark transition-colors">
                {item.title}
              </h3>
              <p className="text-sm text-hotel-charcoal/70 font-montserrat leading-relaxed">
                {item.description}
              </p>
            </div>
            <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gradient-to-br from-hotel-gold-light to-hotel-gold text-hotel-burgundy group-hover:shadow-gold transition-all duration-300 group-hover:scale-110">
              <ChevronRight size={18} strokeWidth={2.5} />
            </div>
          </motion.div>
        </Link>
      ))}
    </div>
  );
}
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/side-menu.tsx">
import React from "react";
import { Link } from "react-router-dom";
import { 
  Sheet, 
  SheetContent, 
  SheetTrigger,
  SheetClose
} from "@/components/ui/sheet";
import { 
  Home, 
  Calendar,
  User, 
  Settings, 
  LogOut, 
  CreditCard,
  Globe,
  Moon,
  HelpCircle,
  X 
} from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";

interface SideMenuProps {
  trigger: React.ReactNode;
}

export function SideMenu({ trigger }: SideMenuProps) {
  const { user, isAuthenticated, logout, toggleLanguage } = useAuth();

  const handleLogout = () => {
    logout();
  };

  return (
    <Sheet>
      <SheetTrigger asChild>
        {trigger}
      </SheetTrigger>
      <SheetContent side="left" className="w-[85vw] sm:w-[400px]">
        <div className="p-4">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-playfair font-semibold text-hotel-burgundy">Menu</h2>
            <SheetClose className="p-2 rounded-full hover:bg-gray-100">
              <X size={20} className="text-gray-600" />
            </SheetClose>
          </div>

          {isAuthenticated && user && (
            <div className="mb-6 border-b border-gray-100 pb-4">
              <div className="flex items-center gap-4">
                {user.profileImage ? (
                  <img
                    src={user.profileImage}
                    alt={user.name}
                    className="w-12 h-12 rounded-full object-cover"
                  />
                ) : (
                  <div className="w-12 h-12 rounded-full bg-hotel-burgundy text-white flex items-center justify-center text-xl font-semibold">
                    {user.name.charAt(0)}
                  </div>
                )}
                <div>
                  <h3 className="font-medium">{user.name}</h3>
                  <p className="text-sm text-gray-600">{user.email}</p>
                </div>
              </div>
            </div>
          )}

          <div className="space-y-1">
            <SheetClose asChild>
              <Link to="/" className="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 text-gray-800">
                <Home size={20} />
                <span>Home</span>
              </Link>
            </SheetClose>
            
            <SheetClose asChild>
              <Link to="/bookings" className="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 text-gray-800">
                <Calendar size={20} />
                <span>My Bookings</span>
              </Link>
            </SheetClose>
            
            <SheetClose asChild>
              <Link to="/loyalty" className="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 text-gray-800">
                <CreditCard size={20} />
                <span>Loyalty Program</span>
              </Link>
            </SheetClose>

            <SheetClose asChild>
              <Link to="/settings" className="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 text-gray-800">
                <Settings size={20} />
                <span>Settings</span>
              </Link>
            </SheetClose>
          </div>

          <div className="mt-6 border-t border-gray-100 pt-4 space-y-1">
            <button 
              onClick={toggleLanguage}
              className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 text-gray-800"
            >
              <Globe size={20} />
              <span>Change Language</span>
              <span className="ml-auto text-sm bg-gray-100 px-2 py-1 rounded">
                {user?.language === "en" ? "EN" : "AR"}
              </span>
            </button>
            
            <button className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 text-gray-800">
              <Moon size={20} />
              <span>Dark Mode</span>
            </button>
            
            <button className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-gray-100 text-gray-800">
              <HelpCircle size={20} />
              <span>Help & Support</span>
            </button>
          </div>

          {isAuthenticated ? (
            <div className="mt-6 border-t border-gray-100 pt-4">
              <button
                onClick={handleLogout}
                className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-red-50 text-red-600"
              >
                <LogOut size={20} />
                <span>Sign Out</span>
              </button>
            </div>
          ) : (
            <div className="mt-6 border-t border-gray-100 pt-4">
              <SheetClose asChild>
                <Link
                  to="/auth/login"
                  className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-hotel-burgundy/10 text-hotel-burgundy font-medium"
                >
                  <User size={20} />
                  <span>Sign In</span>
                </Link>
              </SheetClose>
            </div>
          )}
        </div>
      </SheetContent>
    </Sheet>
  );
}
</file>

<file path="src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-xl text-sm font-medium ring-offset-background transition-all hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-gradient-to-r data-[state=on]:from-hotel-burgundy data-[state=on]:to-hotel-burgundy/90 data-[state=on]:text-white shadow-sm hover:shadow-md transform hover:-translate-y-0.5 active:translate-y-0 duration-200",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border-2 border-hotel-burgundy/30 bg-transparent hover:bg-hotel-burgundy/10 hover:text-hotel-burgundy",
        creative: "bg-white border-2 border-gray-200 data-[state=on]:border-hotel-burgundy/30 overflow-hidden relative before:absolute before:inset-0 before:translate-x-[-100%] before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent hover:before:translate-x-[100%] before:transition-transform before:duration-700",
      },
      size: {
        default: "h-11 px-4",
        sm: "h-9 px-3 text-xs",
        lg: "h-12 px-6",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/contexts/AuthContext.tsx">
//AuthContext.tsx:
import React, { createContext, useContext, useEffect, useState } from 'react';
import authService from '../services/authService';

export interface User {
  id: string;
  name: string;
  email: string;
  phone?: string;
  loyaltyPoints: number;
  tier: 'standard' | 'silver' | 'gold' | 'platinum';
  profileImage?: string;
  language: 'en' | 'ar';
  role?: string;
  status?: string;
  isStaff?: boolean;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  register: (
    name: string,
    email: string,
    password: string,
    phone?: string
  ) => Promise<void>;
  socialLogin: (provider: 'google' | 'apple') => Promise<void>;
  updateLanguage: (language: 'en' | 'ar') => void;
  toggleLanguage: () => void;
  updateUser: (updatedFields: Partial<User>) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Helper function to map backend user to frontend user format
const mapBackendUserToUser = (backendUser: {
  _id: string;
  fullName: string;
  email: string;
  phone?: string;
  loyaltyPoints?: number;
  profileImage?: string;
  role?: string;
  status?: string;
  isStaff?: boolean;
}): User => {
  // Determine tier based on loyalty points
  let tier: 'standard' | 'silver' | 'gold' | 'platinum' = 'standard';
  const points = backendUser.loyaltyPoints || 0;
  if (points >= 1000) tier = 'platinum';
  else if (points >= 500) tier = 'gold';
  else if (points >= 200) tier = 'silver';

  return {
    id: backendUser._id,
    name: backendUser.fullName,
    email: backendUser.email,
    phone: backendUser.phone,
    loyaltyPoints: points,
    tier,
    profileImage: backendUser.profileImage || '',
    language: 'en', // Default language
    role: backendUser.role,
    status: backendUser.status,
    isStaff: backendUser.isStaff,
  };
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Check if user is already logged in from local storage
    const initializeAuth = async () => {
      try {
        const storedUser = authService.getStoredUser();
        if (storedUser) {
          // Validate token if it exists
          const isValidToken = await authService.validateToken();
          if (isValidToken) {
            setUser(mapBackendUserToUser(storedUser));
          } else {
            // Clear invalid session
            authService.logout();
          }
        }
      } catch (error) {
        console.error('Auth initialization error:', error);
        authService.logout();
      } finally {
        setIsLoading(false);
      }
    };

    initializeAuth();
  }, []);

  const login = async (email: string, password: string) => {
    setIsLoading(true);

    try {
      const response = await authService.login(email, password);
      const mappedUser = mapBackendUserToUser(response.user);
      setUser(mappedUser);
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    authService.logout();
    setUser(null);
  };

  const register = async (
    name: string,
    email: string,
    password: string,
    phone?: string
  ) => {
    setIsLoading(true);

    try {
      const response = await authService.register(name, email, password, phone);
      const mappedUser = mapBackendUserToUser(response.user);
      setUser(mappedUser);
    } catch (error) {
      console.error('Registration failed:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const socialLogin = async (provider: 'google' | 'apple') => {
    setIsLoading(true);

    try {
      const response = await authService.socialLogin(provider);
      const mappedUser = mapBackendUserToUser(response.user);
      setUser(mappedUser);
    } catch (error) {
      console.error(`${provider} login failed:`, error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const updateLanguage = (language: 'en' | 'ar') => {
    if (user) {
      const updatedUser = { ...user, language };
      setUser(updatedUser);
      localStorage.setItem('parkside_user', JSON.stringify(updatedUser));
    }
  };

  const toggleLanguage = () => {
    if (user) {
      const newLanguage = user.language === 'en' ? 'ar' : 'en';
      updateLanguage(newLanguage);
    }
  };

  const updateUser = (updatedFields: Partial<User>) => {
    if (user) {
      const updatedUser = { ...user, ...updatedFields };
      setUser(updatedUser);

      // Update stored user data
      const storedUser = authService.getStoredUser();
      if (storedUser) {
        const updatedStoredUser = { ...storedUser, ...updatedFields };
        localStorage.setItem(
          'parkside_user',
          JSON.stringify(updatedStoredUser)
        );
      }
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        login,
        logout,
        register,
        socialLogin,
        updateLanguage,
        toggleLanguage,
        updateUser,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
</file>

<file path="src/contexts/BookingContext.tsx">
import React, { createContext, useContext, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { generateConfirmationCode } from '@/lib/booking-utils';

export interface SpaService {
  id: number;
  name: string;
  description: string;
  basePrice: number;
  durations: {
    minutes: number;
    price: number;
  }[];
  image: string;
  specialists: string[];
}

export interface Room {
  id: string;
  name: string;
  description: string;
  price: number;
  capacity: number;
  image: string;
  amenities: string[];
}

export interface Event {
  id: number;
  title: string;
  description: string;
  date: Date;
  time: string;
  price: number;
  image: string;
  capacity: number;
  availableTickets: number;
  location: string;
  type: string;
}

export interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  image: string;
  category: string;
}

export interface BookingExtra {
  id: string;
  name?: string;
  price?: number;
}

interface BookingContextProps {
  spaServices: SpaService[];
  getSpaService: (id: number) => SpaService | undefined;
  bookSpa: (serviceId: number, date: Date, time: string, specialist: string, extras?: BookingExtra[], addons?: BookingExtra[]) => any;
  rooms: Room[];
  getRoom: (id: string) => Room | undefined;
  bookRoom: (roomId: string, checkIn: Date, checkOut: Date, guests: number, extras?: BookingExtra[], addons?: BookingExtra[]) => any;
  events: Event[];
  bookEvent: (eventId: number, tickets: number, extras?: BookingExtra[], addons?: BookingExtra[]) => any;
  menuItems: MenuItem[];
  bookRestaurant: (orderType: string, orderDetails: any, extras?: BookingExtra[], addons?: BookingExtra[]) => any;
}

const BookingContext = createContext<BookingContextProps | undefined>(undefined);

export const useBooking = () => {
  const context = useContext(BookingContext);
  if (!context) {
    throw new Error("useBooking must be used within a BookingProvider");
  }
  return context;
};

export const BookingProvider = ({ children }: { children: React.ReactNode }) => {
  const [spaServices, setSpaServices] = useState<SpaService[]>([
    {
      id: 1,
      name: "Hot Stone Massage",
      description: "A deeply relaxing massage using heated stones to soothe muscles.",
      basePrice: 90,
      durations: [
        { minutes: 30, price: 60 },
        { minutes: 60, price: 90 },
        { minutes: 90, price: 120 }
      ],
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      specialists: ["Alice Johnson", "Bob Williams", "Catherine Davis"]
    },
    {
      id: 2,
      name: "Aromatherapy Facial",
      description: "A rejuvenating facial using essential oils to nourish and hydrate the skin.",
      basePrice: 75,
      durations: [
        { minutes: 30, price: 50 },
        { minutes: 60, price: 75 },
        { minutes: 90, price: 100 }
      ],
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      specialists: ["Catherine Davis", "David Miller"]
    },
    {
      id: 3,
      name: "Deep Tissue Massage",
      description: "A therapeutic massage targeting deeper layers of muscle tissue.",
      basePrice: 110,
      durations: [
        { minutes: 30, price: 70 },
        { minutes: 60, price: 110 },
        { minutes: 90, price: 150 }
      ],
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      specialists: ["Bob Williams", "Alice Johnson"]
    },
    {
      id: 4,
      name: "Swedish Massage",
      description: "Classic massage for relaxation and improved circulation.",
      basePrice: 80,
      durations: [
        { minutes: 30, price: 55 },
        { minutes: 60, price: 80 },
        { minutes: 90, price: 110 }
      ],
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      specialists: ["Eve Taylor", "Bob Williams"]
    },
    {
      id: 5,
      name: "Reflexology",
      description: "Acupressure massage on feet to promote overall wellness.",
      basePrice: 65,
      durations: [
        { minutes: 30, price: 45 },
        { minutes: 60, price: 65 },
        { minutes: 90, price: 90 }
      ],
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      specialists: ["David Miller", "Eve Taylor"]
    }
  ]);

  const [rooms, setRooms] = useState<Room[]>([
    {
      id: "room-1",
      name: "Deluxe King Room",
      description: "Spacious room with king-sized bed and city view",
      price: 180,
      capacity: 2,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      amenities: ["wifi", "breakfast", "bathroom", "tv"]
    },
    {
      id: "room-2",
      name: "Family Suite",
      description: "Perfect for families with separate living area",
      price: 260,
      capacity: 4,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      amenities: ["wifi", "breakfast", "bathroom", "tv", "ac"]
    },
    {
      id: "room-3",
      name: "Executive Suite",
      description: "Luxurious suite with premium amenities and services",
      price: 320,
      capacity: 2,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      amenities: ["wifi", "breakfast", "bathroom", "tv", "ac", "parking"]
    }
  ]);

  const [menuItems, setMenuItems] = useState<MenuItem[]>([
    {
      id: "menu-1",
      name: "Grilled Salmon",
      description: "Fresh salmon fillet with seasonal vegetables",
      price: 24,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      category: "mains"
    },
    {
      id: "menu-2",
      name: "Beef Wellington",
      description: "Tender fillet of beef wrapped in puff pastry",
      price: 32,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      category: "mains"
    },
    {
      id: "menu-3",
      name: "Mushroom Risotto",
      description: "Creamy arborio rice with wild mushrooms",
      price: 18,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      category: "mains"
    },
    {
      id: "menu-4",
      name: "Chocolate Fondant",
      description: "Warm chocolate cake with a molten center",
      price: 10,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      category: "desserts"
    },
    {
      id: "menu-5",
      name: "Crème Brûlée",
      description: "Classic vanilla custard with caramelized sugar",
      price: 9,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      category: "desserts"
    }
  ]);

  const getSpaService = (id: number): SpaService | undefined => {
    return spaServices.find(service => service.id === id);
  };

  const getRoom = (id: string): Room | undefined => {
    return rooms.find(room => room.id === id);
  };

  const bookSpa = (serviceId: number, date: Date, time: string, specialist: string, extras: BookingExtra[] = [], addons: BookingExtra[] = []) => {
    const confirmationCode = generateConfirmationCode("SP");
    return {
      confirmationCode,
      serviceId,
      date,
      time,
      specialist,
      extras,
      addons,
      totalPrice: calculateTotalPrice(getSpaService(serviceId)?.basePrice || 0, extras, addons)
    };
  };

  const bookRoom = (roomId: string, checkIn: Date, checkOut: Date, guests: number, extras: BookingExtra[] = [], addons: BookingExtra[] = []) => {
    const confirmationCode = generateConfirmationCode("RM");
    return {
      confirmationCode,
      roomId,
      checkIn,
      checkOut,
      guests,
      extras,
      addons,
      totalPrice: calculateTotalPrice(getRoom(roomId)?.price || 0, extras, addons)
    };
  };

  const bookEvent = (eventId: number, tickets: number, extras: BookingExtra[] = [], addons: BookingExtra[] = []) => {
    const confirmationCode = generateConfirmationCode("EV");
    const event = events.find(e => e.id === eventId);
    const basePrice = event ? event.price * tickets : 0;
    
    return {
      confirmationCode,
      eventId,
      tickets,
      date: new Date(),
      extras,
      addons,
      totalPrice: calculateTotalPrice(basePrice, extras, addons)
    };
  };

  const bookRestaurant = (orderType: string, orderDetails: any, extras: BookingExtra[] = [], addons: BookingExtra[] = []) => {
    const confirmationCode = generateConfirmationCode("RS");
    return {
      confirmationCode,
      orderType,
      orderDetails,
      date: new Date(),
      extras,
      addons,
      totalPrice: calculateTotalPrice(orderDetails.basePrice || 0, extras, addons)
    };
  };

  // Helper function to calculate total price including extras and addons
  const calculateTotalPrice = (basePrice: number, extras: BookingExtra[] = [], addons: BookingExtra[] = []): number => {
    const extrasTotal = extras.reduce((total, extra) => total + (extra.price || 0), 0);
    const addonsTotal = addons.reduce((total, addon) => total + (addon.price || 0), 0);
    return basePrice + extrasTotal + addonsTotal;
  };

  const events = [
    {
      id: 1,
      title: "Summer Jazz Night",
      description: "An evening of smooth jazz under the stars",
      date: new Date(2024, 3, 20), // April 20, 2024
      time: "19:00",
      price: 75,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      capacity: 100,
      availableTickets: 50,
      location: "Hotel Garden",
      type: "music"
    },
    {
      id: 2,
      title: "Wine Tasting Experience",
      description: "Discover premium wines from around the world",
      date: new Date(2024, 3, 25), // April 25, 2024
      time: "18:00",
      price: 120,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      capacity: 40,
      availableTickets: 15,
      location: "Wine Cellar",
      type: "culinary"
    },
    {
      id: 3,
      title: "Gala Dinner",
      description: "Annual charity gala dinner with live entertainment",
      date: new Date(2024, 4, 5), // May 5, 2024
      time: "20:00",
      price: 200,
      image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
      capacity: 150,
      availableTickets: 75,
      location: "Grand Ballroom",
      type: "special"
    }
  ];

  return (
    <BookingContext.Provider value={{
      spaServices,
      getSpaService,
      bookSpa,
      rooms,
      getRoom,
      bookRoom,
      events,
      bookEvent,
      menuItems,
      bookRestaurant,
    }}>
      {children}
    </BookingContext.Provider>
  );
};
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/booking-utils.ts">
/**
 * Generate a random confirmation code
 * @param prefix Prefix for the code (e.g., R for Room, S for Spa)
 * @returns A random alphanumeric confirmation code
 */
export function generateConfirmationCode(prefix: string = "BK"): string {
  const timestamp = new Date().getTime().toString().slice(-6);
  const random = Math.random().toString(36).substring(2, 5).toUpperCase();
  return `${prefix}-${timestamp}${random}`;
}

/**
 * Format a price with currency
 * @param price Price number
 * @param currency Currency symbol
 * @returns Formatted price string
 */
export function formatPrice(price: number, currency: string = "$"): string {
  return `${currency}${price.toFixed(2)}`;
}

/**
 * Format a date in a readable format
 * @param date Date string or Date object
 * @returns Formatted date string
 */
export function formatDate(date: string | Date): string {
  const dateObj = typeof date === "string" ? new Date(date) : date;
  return dateObj.toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}

/**
 * Format a time in a readable format
 * @param time Time string (HH:MM format)
 * @returns Formatted time string
 */
export function formatTime(time: string): string {
  // Support both formats like "09:00" and "09:00 AM"
  if (time.includes(" ")) {
    return time; // Already formatted with AM/PM
  }
  
  const [hours, minutes] = time.split(":");
  const hoursNum = parseInt(hours);
  const period = hoursNum >= 12 ? "PM" : "AM";
  const hours12 = hoursNum % 12 || 12;
  return `${hours12}:${minutes} ${period}`;
}

/**
 * Generate a random number of loyalty points based on booking amount
 * @param amount Booking amount
 * @returns Loyalty points earned
 */
export function calculateLoyaltyPoints(amount: number): number {
  // Basic formula: 1 point per $1 spent, rounded to nearest integer
  return Math.round(amount);
}

/**
 * Calculate discount based on promo code type and value
 * @param subtotal Booking subtotal
 * @param promoType Type of promo (percentage or fixed)
 * @param promoValue Value of the promo
 * @returns Discount amount
 */
export function calculateDiscount(subtotal: number, promoType: string, promoValue: number): number {
  if (promoType === "percentage") {
    return Math.round((subtotal * promoValue) / 100);
  } else {
    return Math.min(promoValue, subtotal); // Can't discount more than the subtotal
  }
}

/**
 * Check if a date is in the past
 * @param date Date to check
 * @returns Boolean indicating if the date is in the past
 */
export function isDateInPast(date: Date): boolean {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return date < today;
}

/**
 * Check if a date range is valid
 * @param checkIn Check-in date
 * @param checkOut Check-out date
 * @returns Boolean indicating if the date range is valid
 */
export function isValidDateRange(checkIn: Date, checkOut: Date): boolean {
  return checkIn < checkOut && !isDateInPast(checkIn);
}

/**
 * Get available time slots for a given date
 * @param date Date to check
 * @returns Array of available time slots
 */
export function getAvailableTimeSlots(date: Date): string[] {
  // This is a mock function - in a real app, this would query a backend
  const timeSlots = [
    "09:00", "09:30", "10:00", "10:30", "11:00", "11:30",
    "12:00", "12:30", "13:00", "13:30", "14:00", "14:30",
    "15:00", "15:30", "16:00", "16:30", "17:00", "17:30",
    "18:00", "18:30", "19:00", "19:30", "20:00", "20:30"
  ];
  
  // Simulate some slots being already booked
  const today = new Date();
  if (date.getDate() === today.getDate() && 
      date.getMonth() === today.getMonth() && 
      date.getFullYear() === today.getFullYear()) {
    
    // Remove some slots for today to simulate they're already booked
    return timeSlots.filter((_, index) => index % 3 !== 0);
  }
  
  // For future dates, randomly mark some slots as booked
  return timeSlots.filter(() => Math.random() > 0.3);
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/auth/Login.tsx">
//login.tsx:
import { useAuth } from '@/contexts/AuthContext';
import { motion } from 'framer-motion';
import { AlertCircle, ArrowLeft, Lock, Mail } from 'lucide-react';
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

const Login = () => {
  const navigate = useNavigate();
  const { login, socialLogin, isLoading } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  // Email validation helper
  const isValidEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    // Frontend validation
    if (!email || !password) {
      setError('Please fill in all fields.');
      return;
    }

    if (!isValidEmail(email)) {
      setError('Please enter a valid email address.');
      return;
    }

    try {
      await login(email, password);
      toast.success('Successfully logged in!');
      navigate('/');
    } catch (err: any) {
      // Handle different types of errors
      let errorMessage = 'Login failed. Please try again.';

      if (err.message) {
        // Check for specific error messages from backend
        if (
          err.message.includes('Invalid credentials') ||
          err.message.includes('401')
        ) {
          errorMessage =
            'Invalid email or password. Please check your credentials.';
        } else if (err.message.includes('User not found')) {
          errorMessage = 'No account found with this email address.';
        } else if (err.message.includes('Network')) {
          errorMessage = 'Network error. Please check your connection.';
        } else {
          errorMessage = err.message;
        }
      }

      setError(errorMessage);
      toast.error(errorMessage);
    }
  };
  const handleSocialLogin = async (provider: 'google' | 'apple') => {
    try {
      await socialLogin(provider);
      toast.success(`Successfully logged in with ${provider}!`);
      navigate('/');
    } catch (err) {
      setError(`Could not sign in with ${provider}. Please try again.`);
      toast.error(`${provider} login failed.`);
    }
  };

  return (
    <div className="min-h-screen bg-white p-6">
      <div className="flex items-center mb-10">
        <button
          onClick={() => navigate(-1)}
          className="p-2 -ml-2 text-gray-600"
        >
          <ArrowLeft size={24} />
        </button>
        <h1 className="text-2xl font-playfair text-center flex-1 mr-8">
          Sign In
        </h1>
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="max-w-md mx-auto"
      >
        <div className="flex flex-col justify-center">
          <div className="text-center mb-8">
            <img
              src="/lovable-uploads/50d770e8-285d-4eea-b8bc-8fa0af1d3b87.png"
              alt="Parkside Plaza Hotel"
              className="h-16 mx-auto mb-4"
            />
            <p className="text-gray-600">
              Welcome back! Please sign in to continue
            </p>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-lg flex items-center">
              <AlertCircle size={20} className="mr-2 flex-shrink-0" />
              <p className="text-sm">{error}</p>
            </div>
          )}

          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail size={18} className="text-gray-400" />
                </div>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                  placeholder="your.email@example.com"
                />
              </div>
            </div>

            <div>
              <div className="flex justify-between items-center mb-1">
                <label className="block text-sm font-medium text-gray-700">
                  Password
                </label>
                <Link
                  to="/auth/forgot-password"
                  className="text-xs text-hotel-burgundy font-medium"
                >
                  Forgot Password?
                </Link>
              </div>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock size={18} className="text-gray-400" />
                </div>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                  placeholder="••••••••"
                />
              </div>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-hotel-burgundy text-white py-3 rounded-lg font-medium flex items-center justify-center"
            >
              {isLoading ? 'Signing in...' : 'Sign In'}
            </button>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">
                  Or continue with
                </span>
              </div>
            </div>

            <div className="mt-4 grid grid-cols-2 gap-4">
              <button
                onClick={() => handleSocialLogin('google')}
                className="py-3 border border-gray-300 rounded-lg flex items-center justify-center gap-2 hover:bg-gray-50"
              >
                <img
                  src="https://www.svgrepo.com/show/355037/google.svg"
                  alt="Google"
                  className="w-5 h-5"
                />
                <span>Google</span>
              </button>
              <button
                onClick={() => handleSocialLogin('apple')}
                className="py-3 border border-gray-300 rounded-lg flex items-center justify-center gap-2 hover:bg-gray-50"
              >
                <img
                  src="https://www.svgrepo.com/show/508761/apple.svg"
                  alt="Apple"
                  className="w-5 h-5 "
                />
                <span>Apple</span>
              </button>
            </div>
          </div>

          <div className="text-center mt-8">
            <p className="text-gray-600">
              Don't have an account?{' '}
              <Link
                to="/auth/register"
                className="text-hotel-burgundy font-medium"
              >
                Sign Up
              </Link>
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default Login;
</file>

<file path="src/pages/auth/Onboarding.tsx">
import React, { useState } from "react";
import { motion } from "framer-motion";
import { ChevronRight } from "lucide-react";
import { Link } from "react-router-dom";
import { Swiper, SwiperSlide } from "swiper/react";
import { Pagination } from "swiper/modules";
import "swiper/css";
import "swiper/css/pagination";

const onboardingSlides = [
  {
    id: 1,
    title: "Welcome to Parkside Plaza",
    description: "Experience luxury and comfort at its finest. Your perfect stay awaits.",
    image: "https://images.unsplash.com/photo-1564501049412-61c2a3083791?auto=format&fit=crop&q=80&w=500",
  },
  {
    id: 2,
    title: "Seamless Booking Experience",
    description: "Book rooms, spa treatments, and restaurant tables with just a few taps.",
    image: "https://images.unsplash.com/photo-1566073771259-6a8506099945?auto=format&fit=crop&q=80&w=500",
  },
  {
    id: 3,
    title: "Exclusive Benefits",
    description: "Earn loyalty points with every booking and enjoy exclusive member rewards.",
    image: "https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?auto=format&fit=crop&q=80&w=500",
  }
];

const Onboarding = () => {
  const [activeSlide, setActiveSlide] = useState(0);
  const isLastSlide = activeSlide === onboardingSlides.length - 1;

  return (
    <div className="min-h-screen bg-white flex flex-col">
      <div className="flex-1 relative">
        <Swiper
          spaceBetween={0}
          slidesPerView={1}
          pagination={{ clickable: true }}
          className="h-full"
          onSlideChange={(swiper) => setActiveSlide(swiper.activeIndex)}
        >
          {onboardingSlides.map((slide) => (
            <SwiperSlide key={slide.id}>
              <div className="h-full flex flex-col">
                <div 
                  className="h-2/3 bg-cover bg-center" 
                  style={{ backgroundImage: `url(${slide.image})` }}
                >
                  <div className="h-full w-full bg-gradient-to-t from-white to-transparent" />
                </div>
                <div className="h-1/3 flex flex-col items-center justify-center p-6 text-center">
                  <motion.h2 
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5 }}
                    className="text-2xl font-playfair text-hotel-burgundy font-semibold mb-3"
                  >
                    {slide.title}
                  </motion.h2>
                  <motion.p 
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.5, delay: 0.2 }}
                    className="text-gray-600 mb-6"
                  >
                    {slide.description}
                  </motion.p>
                </div>
              </div>
            </SwiperSlide>
          ))}
        </Swiper>
      </div>

      <div className="p-6 bg-white">
        {isLastSlide ? (
          <div className="space-y-3">
            <Link to="/auth/login">
              <button className="w-full bg-hotel-burgundy text-white py-3 rounded-lg font-medium">
                Sign In
              </button>
            </Link>
            <Link to="/auth/register">
              <button className="w-full bg-white text-hotel-burgundy border border-hotel-burgundy py-3 rounded-lg font-medium">
                Create Account
              </button>
            </Link>
            <Link to="/">
              <button className="w-full text-gray-500 py-3 font-medium">
                Continue as Guest
              </button>
            </Link>
          </div>
        ) : (
          <div className="flex justify-between items-center">
            <Link to="/" className="text-gray-500">
              Skip
            </Link>
            <button
              onClick={() => setActiveSlide(activeSlide + 1)}
              className="w-12 h-12 rounded-full bg-hotel-burgundy text-white flex items-center justify-center shadow-lg"
            >
              <ChevronRight size={24} />
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Onboarding;
</file>

<file path="src/pages/auth/Register.tsx">
//Register.tsx
import { useAuth } from '@/contexts/AuthContext';
import { motion } from 'framer-motion';
import { AlertCircle, ArrowLeft, Lock, Mail, Phone, User } from 'lucide-react';
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

const Register = () => {
  const navigate = useNavigate();
  const { register, socialLogin, isLoading } = useAuth();
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');

  const validateForm = () => {
    // Reset error
    setError('');

    // Validate name
    if (!name.trim()) {
      setError('Full name is required.');
      return false;
    }

    if (name.trim().length < 2) {
      setError('Full name must be at least 2 characters long.');
      return false;
    }

    // Validate email
    if (!email.trim()) {
      setError('Email is required.');
      return false;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setError('Please enter a valid email address.');
      return false;
    }

    // Validate phone (optional but if provided, should be valid

    // Validate password
    if (!password) {
      setError('Password is required.');
      return false;
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters long.');
      return false;
    }

    // Validate password confirmation
    if (password !== confirmPassword) {
      setError('Passwords do not match.');
      return false;
    }

    return true;
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    try {
      await register(name, email, password, phone);
      toast.success('Account created successfully!');
      navigate('/');
    } catch (err) {
      const errorMessage =
        err instanceof Error
          ? err.message
          : 'Could not create account. Please try again.';
      setError(errorMessage);
      toast.error('Registration failed. Please check your details.');
    }
  };

  const handleSocialLogin = async (provider: 'google' | 'apple') => {
    try {
      await socialLogin(provider);
      toast.success(`Successfully signed up with ${provider}!`);
      navigate('/');
    } catch (err) {
      const errorMessage =
        err instanceof Error
          ? err.message
          : `Could not sign up with ${provider}. Please try again.`;
      setError(errorMessage);
      toast.error(`${provider} signup failed.`);
    }
  };

  return (
    <div className="min-h-screen bg-white p-6">
      <div className="flex items-center mb-10">
        <button
          onClick={() => navigate(-1)}
          className="p-2 -ml-2 text-gray-600"
        >
          <ArrowLeft size={24} />
        </button>
        <h1 className="text-2xl font-playfair text-center flex-1 mr-8">
          Create Account
        </h1>
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="max-w-md mx-auto"
      >
        <div className="flex flex-col justify-center">
          <div className="text-center mb-8">
            <img
              src="/lovable-uploads/50d770e8-285d-4eea-b8bc-8fa0af1d3b87.png"
              alt="Parkside Plaza Hotel"
              className="h-16 mx-auto mb-4"
            />
            <p className="text-gray-600">
              Join us to enjoy exclusive benefits and rewards
            </p>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-lg flex items-center">
              <AlertCircle size={20} className="mr-2 flex-shrink-0" />
              <p className="text-sm">{error}</p>
            </div>
          )}

          <form onSubmit={handleRegister} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Full Name
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <User size={18} className="text-gray-400" />
                </div>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  required
                  className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                  placeholder="John Doe"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail size={18} className="text-gray-400" />
                </div>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                  placeholder="your.email@example.com"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Phone Number <span className="text-gray-400">(Optional)</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Phone size={18} className="text-gray-400" />
                </div>
                <input
                  type="tel"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                  placeholder="+1 (555) 123-4567"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Password
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock size={18} className="text-gray-400" />
                </div>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                  placeholder="••••••••"
                />
              </div>
              {password && password.length < 6 && (
                <p className="text-xs text-amber-600 mt-1">
                  Password must be at least 6 characters long
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Confirm Password
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock size={18} className="text-gray-400" />
                </div>
                <input
                  type="password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                  className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                  placeholder="••••••••"
                />
              </div>
              {confirmPassword && password !== confirmPassword && (
                <p className="text-xs text-red-600 mt-1">
                  Passwords do not match
                </p>
              )}
            </div>

            <div className="flex items-start space-x-3">
              <input
                type="checkbox"
                id="termsCheckbox"
                required
                className="mt-1 h-4 w-4 border-gray-300 rounded text-hotel-burgundy focus:ring-hotel-burgundy focus:ring-2"
              />
              <label
                htmlFor="termsCheckbox"
                className="text-sm text-gray-600 leading-relaxed"
              >
                I agree to the{' '}
                <a href="#" className="text-hotel-burgundy hover:underline">
                  Terms of Service
                </a>{' '}
                and{' '}
                <a href="#" className="text-hotel-burgundy hover:underline">
                  Privacy Policy
                </a>
              </label>
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-hotel-burgundy text-white py-3 rounded-lg font-medium flex items-center justify-center"
            >
              {isLoading ? 'Creating Account...' : 'Create Account'}
            </button>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">
                  Or sign up with
                </span>
              </div>
            </div>

            <div className="mt-4 grid grid-cols-2 gap-4">
              <button
                onClick={() => handleSocialLogin('google')}
                className="py-3 border border-gray-300 rounded-lg flex items-center justify-center gap-2 hover:bg-gray-50"
              >
                <img
                  src="https://www.svgrepo.com/show/355037/google.svg"
                  alt="Google"
                  className="w-5 h-5"
                />
                <span>Google</span>
              </button>
              <button
                onClick={() => handleSocialLogin('apple')}
                className="py-3 border border-gray-300 rounded-lg flex items-center justify-center gap-2 hover:bg-gray-50"
              >
                <img
                  src="https://www.svgrepo.com/show/494552/apple.svg"
                  alt="Apple"
                  className="w-5 h-5"
                />
                <span>Apple</span>
              </button>
            </div>
          </div>

          <div className="text-center mt-8">
            <p className="text-gray-600">
              Already have an account?{' '}
              <Link
                to="/auth/login"
                className="text-hotel-burgundy font-medium"
              >
                Sign In
              </Link>
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default Register;
</file>

<file path="src/pages/bookings/BookingsList.tsx">
import React from "react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { Calendar, Award, Sparkles } from "lucide-react";
import { Link } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";

const BookingsList = () => {
  const { isAuthenticated } = useAuth();

  return (
    <MobileLayout title="Reservations" showBackButton>
      <div className="p-6">
        {isAuthenticated ? (
          <div className="hotel-card p-8 text-center border-2 border-hotel-beige/40">
            <div className="py-8">
              <div className="w-24 h-24 mx-auto mb-6 rounded-full bg-gradient-to-br from-hotel-pearl to-hotel-beige flex items-center justify-center">
                <Calendar size={48} className="text-hotel-burgundy/60" strokeWidth={1.5} />
              </div>
              <h3 className="text-xl font-playfair font-bold text-hotel-burgundy mb-3">
                No Current Reservations
              </h3>
              <p className="text-hotel-charcoal/70 font-montserrat mb-8 leading-relaxed">
                Discover our luxury accommodations and book your perfect getaway
              </p>
              <Link to="/rooms">
                <button className="bg-luxury-gradient text-white py-4 px-8 rounded-2xl font-semibold font-montserrat shadow-luxury hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 border border-hotel-burgundy/20">
                  Explore Suites
                </button>
              </Link>
            </div>
          </div>
        ) : (
          <div className="hotel-card p-8 text-center border-2 border-hotel-beige/40">
            <div className="py-8">
              <div className="w-24 h-24 mx-auto mb-6 rounded-full bg-gradient-to-br from-hotel-gold-light to-hotel-gold flex items-center justify-center">
                <Award size={48} className="text-hotel-burgundy" strokeWidth={1.5} />
              </div>
              <h3 className="text-xl font-playfair font-bold text-hotel-burgundy mb-3">
                Exclusive Member Access
              </h3>
              <p className="text-hotel-charcoal/70 font-montserrat mb-8 leading-relaxed">
                Join our elite community to access luxury reservations and earn exclusive rewards
              </p>
              <Link to="/auth/login">
                <button className="bg-luxury-gradient text-white py-4 px-8 rounded-2xl font-semibold font-montserrat shadow-luxury hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 border border-hotel-burgundy/20">
                  Become a Member
                </button>
              </Link>
            </div>
          </div>
        )}
      </div>
    </MobileLayout>
  );
};

export default BookingsList;
</file>

<file path="src/pages/events/EventsPage.tsx">
import React, { useState } from "react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { useBooking } from "@/contexts/BookingContext";
import { DatePicker } from "@/components/ui/date-picker";
import { format, isSameDay, addDays } from "date-fns";
import { Calendar, Ticket, Clock, MapPin, Info, Coffee, Tag, Award, Gift, Heart, Utensils, CheckCircle, XCircle, Plane } from "lucide-react";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { useNavigate } from "react-router-dom";
import { BookingConfirmation } from "@/components/ui/booking-confirmation";
import { Checkbox } from "@/components/ui/checkbox";
import { cn } from "@/lib/utils";

// Available extras with their prices
const availableExtras = [
  {
    id: "vip-seating",
    name: "VIP Seating",
    description: "Priority seating with better views",
    price: 30,
    icon: <Ticket size={18} />,
    priceType: "per-ticket" // per ticket
  },
  {
    id: "welcome-drink",
    name: "Welcome Drink",
    description: "Complimentary welcome drink",
    price: 15,
    icon: <Coffee size={18} />,
    priceType: "per-person" // per person
  },
  {
    id: "transportation",
    name: "Transportation",
    description: "Hotel transport to and from event",
    price: 25,
    icon: <Plane size={18} />,
    priceType: "fixed" // fixed price
  }
];

// Premium add-ons
const premiumAddons = [
  {
    id: "dinner-package",
    name: "Pre-Event Dinner",
    description: "Enjoy a 3-course meal before the event",
    price: 120,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Utensils size={18} />
  },
  {
    id: "spa-package",
    name: "Spa Treatment",
    description: "Relax with a spa treatment before or after the event",
    price: 95,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Heart size={18} />
  },
  {
    id: "souvenir-package",
    name: "Event Souvenir",
    description: "Special commemorative item for your event",
    price: 50,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Gift size={18} />
  }
];

// Promo codes for testing
const validPromoCodes = {
  "EVENT10": { type: "percentage", value: 10 },
  "SAVE25": { type: "fixed", value: 25 },
  "SUMMER15": { type: "percentage", value: 15 }
};

const EventsPage = () => {
  const { events, bookEvent } = useBooking();
  const [ticketCounts, setTicketCounts] = useState<Record<number, number>>({});
  const [selectedExtras, setSelectedExtras] = useState<string[]>([]);
  const [selectedAddons, setSelectedAddons] = useState<string[]>([]);
  const [promoCode, setPromoCode] = useState("");
  const [appliedPromo, setAppliedPromo] = useState<{type: string, value: number} | null>(null);
  const [bookingConfirmation, setBookingConfirmation] = useState<any>(null);
  const [activeEventId, setActiveEventId] = useState<number | null>(null);
  const { toast } = useToast();
  const navigate = useNavigate();

  const incrementTicket = (eventId: number) => {
    const currentCount = ticketCounts[eventId] || 0;
    const event = events.find(e => e.id === eventId);
    
    if (event && currentCount < event.availableTickets) {
      setTicketCounts({
        ...ticketCounts,
        [eventId]: currentCount + 1
      });
      
      // When increasing tickets, set this as the active event
      setActiveEventId(eventId);
    } else {
      toast({
        title: "Maximum tickets reached",
        description: "You've reached the maximum available tickets for this event.",
        variant: "destructive"
      });
    }
  };

  const decrementTicket = (eventId: number) => {
    const currentCount = ticketCounts[eventId] || 0;
    if (currentCount > 0) {
      setTicketCounts({
        ...ticketCounts,
        [eventId]: currentCount - 1
      });
    }
  };

  const toggleExtra = (extraId: string) => {
    setSelectedExtras(prev => 
      prev.includes(extraId) 
        ? prev.filter(id => id !== extraId)
        : [...prev, extraId]
    );
  };

  const toggleAddon = (addonId: string) => {
    setSelectedAddons(prev => 
      prev.includes(addonId) 
        ? prev.filter(id => id !== addonId)
        : [...prev, addonId]
    );
  };

  const handleApplyPromoCode = () => {
    const code = promoCode.trim().toUpperCase();
    
    if (!code) {
      toast({
        title: "Please enter a promo code",
        description: "Enter a valid promo code to receive a discount.",
        variant: "destructive"
      });
      return;
    }
    
    if (validPromoCodes[code as keyof typeof validPromoCodes]) {
      const promo = validPromoCodes[code as keyof typeof validPromoCodes];
      setAppliedPromo(promo);
      
      const message = promo.type === "percentage" 
        ? `${promo.value}% discount applied!` 
        : `$${promo.value} discount applied!`;
      
      toast({
        title: "Promo code applied",
        description: message,
        variant: "default"
      });
    } else {
      toast({
        title: "Invalid promo code",
        description: "The promo code you entered is invalid or expired.",
        variant: "destructive"
      });
    }
  };

  const handleRemovePromoCode = () => {
    setAppliedPromo(null);
    setPromoCode("");
    toast({
      title: "Promo code removed",
      description: "Your promo code has been removed.",
      variant: "default"
    });
  };

  // Calculate extras cost for the active event
  const calculateExtrasCost = (eventId: number) => {
    const ticketCount = ticketCounts[eventId] || 0;
    
    return availableExtras.reduce((total, extra) => {
      if (selectedExtras.includes(extra.id)) {
        if (extra.priceType === "per-ticket" || extra.priceType === "per-person") {
          return total + (extra.price * ticketCount);
        } else {
          return total + extra.price; // fixed price
        }
      }
      return total;
    }, 0);
  };

  // Calculate addons cost
  const calculateAddonsCost = () => {
    return premiumAddons.reduce((total, addon) => {
      if (selectedAddons.includes(addon.id)) {
        return total + addon.price;
      }
      return total;
    }, 0);
  };

  // Calculate base event cost
  const calculateBaseEventCost = (eventId: number) => {
    const event = events.find(e => e.id === eventId);
    const ticketCount = ticketCounts[eventId] || 0;
    return event ? event.price * ticketCount : 0;
  };

  // Calculate discount from promo code
  const calculateDiscount = (eventId: number) => {
    if (!appliedPromo) return 0;
    
    const subtotal = calculateBaseEventCost(eventId) + calculateExtrasCost(eventId) + calculateAddonsCost();
    
    if (appliedPromo.type === "percentage") {
      return Math.round((subtotal * appliedPromo.value) / 100);
    } else {
      return appliedPromo.value;
    }
  };

  // Calculate total price for an event
  const calculateTotalPrice = (eventId: number) => {
    const baseEventCost = calculateBaseEventCost(eventId);
    const extrasCost = calculateExtrasCost(eventId);
    const addonsCost = calculateAddonsCost();
    const discount = calculateDiscount(eventId);
    
    return baseEventCost + extrasCost + addonsCost - discount;
  };

  // Calculate loyalty points (1 point per $1)
  const calculateLoyaltyPoints = (eventId: number) => {
    return Math.floor(calculateTotalPrice(eventId));
  };

  const handleBookEvent = (eventId: number) => {
    try {
      const ticketCount = ticketCounts[eventId] || 0;
      if (ticketCount <= 0) {
        toast({
          title: "No tickets selected",
          description: "Please select at least one ticket to continue.",
          variant: "destructive"
        });
        return;
      }

      const event = events.find(e => e.id === eventId);
      if (!event) return;

      const booking = bookEvent(eventId, ticketCount);
      
      // Prepare extras and addons for booking
      const bookedExtras = selectedExtras.map(id => {
        const extra = availableExtras.find(e => e.id === id);
        return {
          id,
          name: extra?.name,
          price: extra?.price
        };
      });
      
      const bookedAddons = selectedAddons.map(id => {
        const addon = premiumAddons.find(a => a.id === id);
        return {
          id,
          name: addon?.name,
          price: addon?.price
        };
      });
      
      const totalPrice = calculateTotalPrice(eventId);
      const loyaltyPoints = calculateLoyaltyPoints(eventId);
      
      // Create confirmation object
      setBookingConfirmation({
        bookingType: "event",
        confirmationCode: booking.confirmationCode,
        title: event.title,
        date: format(new Date(event.date), "MMMM d, yyyy"),
        time: event.time,
        details: `${ticketCount} ${ticketCount === 1 ? "ticket" : "tickets"}`,
        location: event.location,
        extras: bookedExtras,
        addons: bookedAddons,
        totalPrice: totalPrice,
        loyaltyPoints: loyaltyPoints,
        promoApplied: appliedPromo ? 
          (appliedPromo.type === "percentage" ? `${appliedPromo.value}%` : `$${appliedPromo.value}`) : 
          null
      });

      // Reset states
      setTicketCounts({
        ...ticketCounts,
        [eventId]: 0
      });
      setSelectedExtras([]);
      setSelectedAddons([]);
      setPromoCode("");
      setAppliedPromo(null);
      
    } catch (error) {
      toast({
        title: "Booking failed",
        description: error instanceof Error ? error.message : "Failed to book event",
        variant: "destructive"
      });
    }
  };

  if (bookingConfirmation) {
    return (
      <MobileLayout hideHeader>
        <div className="p-4 min-h-screen flex items-center justify-center">
          <BookingConfirmation {...bookingConfirmation} />
        </div>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout title="Hotel Events" showBackButton>
      <div className="max-w-md mx-auto p-4">
        {/* Page Title */}
        <div className="mb-6">
          <h1 className="text-2xl font-playfair font-bold text-hotel-burgundy text-center">
            Choose your event
          </h1>
        </div>

        {/* Events List */}
        <div className="space-y-6">
          {events.length > 0 ? (
            events.map((event) => (
              <motion.div
                key={event.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-white rounded-lg shadow-md overflow-hidden"
              >
                <img
                  src={event.image}
                  alt={event.title}
                  className="w-full h-48 object-cover"
                />
                <div className="p-4">
                  <h3 className="text-lg font-playfair font-semibold text-hotel-burgundy">
                    {event.title}
                  </h3>
                  <p className="text-gray-600 text-sm mt-1 mb-3">
                    {event.description}
                  </p>
                  
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center text-gray-600">
                      <Calendar className="w-4 h-4 mr-2 text-hotel-burgundy" />
                      <span className="text-sm">
                        {format(new Date(event.date), "MMMM d, yyyy")}
                      </span>
                    </div>
                    <div className="flex items-center text-gray-600">
                      <Clock className="w-4 h-4 mr-2 text-hotel-burgundy" />
                      <span className="text-sm">{event.time}</span>
                    </div>
                    <div className="flex items-center text-gray-600">
                      <MapPin className="w-4 h-4 mr-2 text-hotel-burgundy" />
                      <span className="text-sm">{event.location}</span>
                    </div>
                    <div className="flex items-center text-gray-600">
                      <Ticket className="w-4 h-4 mr-2 text-hotel-burgundy" />
                      <span className="text-sm">${event.price} per ticket</span>
                    </div>
                    <div className="flex items-center text-gray-600">
                      <Info className="w-4 h-4 mr-2 text-hotel-burgundy" />
                      <span className="text-sm">{event.availableTickets} tickets available</span>
                    </div>
                  </div>

                  {/* Ticket Selector */}
                  <div className="flex items-center justify-between bg-gray-50 p-3 rounded-md mb-4">
                    <span className="text-sm font-medium text-gray-700">Tickets:</span>
                    <div className="flex items-center space-x-3">
                      <button 
                        onClick={() => decrementTicket(event.id)}
                        className="w-8 h-8 rounded-full bg-hotel-cream text-hotel-burgundy flex items-center justify-center font-bold hover:bg-hotel-burgundy hover:text-white transition-colors"
                        disabled={(ticketCounts[event.id] || 0) <= 0}
                      >
                        -
                      </button>
                      <span className="w-8 text-center font-medium">
                        {ticketCounts[event.id] || 0}
                      </span>
                      <button 
                        onClick={() => incrementTicket(event.id)}
                        className="w-8 h-8 rounded-full bg-hotel-cream text-hotel-burgundy flex items-center justify-center font-bold hover:bg-hotel-burgundy hover:text-white transition-colors"
                        disabled={(ticketCounts[event.id] || 0) >= event.availableTickets}
                      >
                        +
                      </button>
                    </div>
                  </div>

                  {/* Extras, Promo Code, and Add-ons - Only show for active event with tickets */}
                  {activeEventId === event.id && (ticketCounts[event.id] || 0) > 0 && (
                    <>
                      {/* Extras Selection */}
                      <div className="mb-4">
                        <h3 className="font-medium text-md mb-2">Select Extras</h3>
                        <div className="space-y-2">
                          {availableExtras.map((extra) => (
                            <div 
                              key={extra.id}
                              className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                            >
                              <div className="flex items-center">
                                <Checkbox 
                                  id={`extra-${extra.id}`}
                                  checked={selectedExtras.includes(extra.id)}
                                  onCheckedChange={() => toggleExtra(extra.id)}
                                  className="mr-2 data-[state=checked]:bg-hotel-burgundy data-[state=checked]:text-white"
                                />
                                <div>
                                  <label 
                                    htmlFor={`extra-${extra.id}`}
                                    className="text-sm font-medium cursor-pointer"
                                  >
                                    {extra.name}
                                  </label>
                                  <p className="text-xs text-gray-500">{extra.description}</p>
                                </div>
                              </div>
                              <div className="text-right">
                                <p className="font-medium text-hotel-burgundy">
                                  ${extra.price}
                                  <span className="text-xs text-gray-500 ml-1">
                                    {extra.priceType === "per-ticket" && "/ticket"}
                                    {extra.priceType === "per-person" && "/person"}
                                  </span>
                                </p>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Promo Code */}
                      <div className="mb-4">
                        <h3 className="font-medium text-md mb-2">Promo Code</h3>
                        <div className="flex gap-2">
                          <div className="relative flex-1">
                            <Tag className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                            <input
                              type="text"
                              placeholder="Enter promo code"
                              value={promoCode}
                              onChange={(e) => setPromoCode(e.target.value)}
                              className="pl-9 w-full p-2.5 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                              disabled={!!appliedPromo}
                            />
                          </div>
                          {appliedPromo ? (
                            <Button
                              type="button"
                              variant="outline"
                              onClick={handleRemovePromoCode}
                              className="shrink-0"
                            >
                              <XCircle className="mr-1 h-4 w-4" />
                              Remove
                            </Button>
                          ) : (
                            <Button
                              type="button"
                              onClick={handleApplyPromoCode}
                              className="bg-hotel-burgundy text-white shrink-0"
                            >
                              Apply
                            </Button>
                          )}
                        </div>
                        
                        {appliedPromo && (
                          <div className="flex items-center mt-2 text-green-600 text-sm">
                            <CheckCircle className="h-4 w-4 mr-1" />
                            {appliedPromo.type === "percentage" 
                              ? `${appliedPromo.value}% discount applied` 
                              : `$${appliedPromo.value} discount applied`}
                          </div>
                        )}
                      </div>

                      {/* Price Summary */}
                      <div className="border-t border-gray-100 pt-4 mt-4 mb-4">
                        <h3 className="font-medium text-md mb-2">Price Summary</h3>
                        <div className="space-y-1 mb-3">
                          <div className="flex justify-between">
                            <span>
                              ${event.price} x {ticketCounts[event.id] || 0} {(ticketCounts[event.id] || 0) === 1 ? "ticket" : "tickets"}
                            </span>
                            <span>${calculateBaseEventCost(event.id)}</span>
                          </div>
                          
                          {calculateExtrasCost(event.id) > 0 && (
                            <div className="flex justify-between">
                              <span>Selected extras</span>
                              <span>${calculateExtrasCost(event.id)}</span>
                            </div>
                          )}
                          
                          {calculateAddonsCost() > 0 && (
                            <div className="flex justify-between">
                              <span>Selected add-ons</span>
                              <span>${calculateAddonsCost()}</span>
                            </div>
                          )}
                          
                          {calculateDiscount(event.id) > 0 && (
                            <div className="flex justify-between text-green-600">
                              <span>Discount</span>
                              <span>-${calculateDiscount(event.id)}</span>
                            </div>
                          )}
                        </div>
                        
                        <div className="flex justify-between font-semibold text-lg pt-2 border-t border-gray-100">
                          <span>Total</span>
                          <span className="text-hotel-burgundy">${calculateTotalPrice(event.id)}</span>
                        </div>
                        
                        <div className="mt-2 bg-amber-50 p-2 rounded-lg flex items-center text-amber-700 text-sm">
                          <Award className="h-4 w-4 mr-1 text-amber-500" />
                          Earn {calculateLoyaltyPoints(event.id)} loyalty points with this booking
                        </div>
                      </div>

                      {/* Premium Add-ons Section */}
                      <div className="mb-6">
                        <h2 className="font-medium text-lg mb-3">
                          <Gift className="inline-block mr-2 text-hotel-burgundy" size={18} />
                          Suggested Add-ons
                        </h2>
                        <div className="space-y-3">
                          {premiumAddons.map((addon) => (
                            <div 
                              key={addon.id}
                              className={cn(
                                "border rounded-lg p-3 transition-all",
                                selectedAddons.includes(addon.id) 
                                  ? "border-hotel-burgundy bg-hotel-burgundy/5" 
                                  : "border-gray-200"
                              )}
                            >
                              <div className="flex gap-3">
                                <div className="w-16 h-16 rounded-md overflow-hidden shrink-0">
                                  <img 
                                    src={addon.image} 
                                    alt={addon.name}
                                    className="w-full h-full object-cover" 
                                  />
                                </div>
                                <div className="flex-1">
                                  <div className="flex justify-between">
                                    <h3 className="font-medium">{addon.name}</h3>
                                    <span className="text-hotel-burgundy font-medium">${addon.price}</span>
                                  </div>
                                  <p className="text-sm text-gray-600 mb-2">{addon.description}</p>
                                  <Button
                                    type="button"
                                    size="sm"
                                    onClick={() => toggleAddon(addon.id)}
                                    variant={selectedAddons.includes(addon.id) ? "outline" : "default"}
                                    className={cn(
                                      selectedAddons.includes(addon.id) 
                                        ? "border-hotel-burgundy text-hotel-burgundy" 
                                        : "bg-hotel-burgundy text-white"
                                    )}
                                  >
                                    {selectedAddons.includes(addon.id) ? "Remove" : "Add to Booking"}
                                  </Button>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </>
                  )}

                  <Button
                    onClick={() => handleBookEvent(event.id)}
                    className="w-full bg-hotel-burgundy hover:bg-hotel-burgundy/90 text-white"
                    disabled={(ticketCounts[event.id] || 0) <= 0}
                  >
                    {(ticketCounts[event.id] || 0) > 0 
                      ? `Book Tickets ($${calculateTotalPrice(event.id)})` 
                      : "Select Tickets"}
                  </Button>
                </div>
              </motion.div>
            ))
          ) : (
            <div className="text-center py-10">
              <div className="bg-gray-50 p-6 rounded-lg">
                <Calendar className="w-12 h-12 mx-auto mb-4 text-gray-400" />
                <h3 className="text-lg font-medium text-gray-800 mb-1">No events found</h3>
                <p className="text-gray-500">
                  There are no events scheduled at the moment
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </MobileLayout>
  );
};

export default EventsPage;
</file>

<file path="src/pages/loyalty/LoyaltyProgram.tsx">
import React from "react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { Award, Gift, Star } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { Link } from "react-router-dom";

const LoyaltyProgram = () => {
  const { isAuthenticated, user } = useAuth();

  const loyaltyTiers = [
    {
      name: "Silver",
      points: 0,
      benefits: ["Free Wi-Fi", "Late checkout (when available)"]
    },
    {
      name: "Gold",
      points: 5000,
      benefits: ["Silver benefits", "Room upgrades", "Welcome amenity"]
    },
    {
      name: "Platinum",
      points: 10000,
      benefits: ["Gold benefits", "Spa credit", "Free breakfast"]
    }
  ];

  return (
    <MobileLayout title="Loyalty Program" showBackButton>
      <div className="p-4 pb-20">
        {isAuthenticated && user ? (
          <>
            <div className="bg-white rounded-xl shadow-sm p-4 mb-6">
              <div className="flex items-center mb-4">
                <div className="w-12 h-12 rounded-full bg-hotel-burgundy text-white flex items-center justify-center text-xl font-semibold mr-4">
                  {user.name.charAt(0)}
                </div>
                <div>
                  <h2 className="text-lg font-medium">{user.name}</h2>
                  <div className="flex items-center text-sm text-gray-600">
                    <Award size={16} className="text-hotel-gold mr-1" />
                    <span>{user.loyaltyPoints} points</span>
                    <span className="mx-1">•</span>
                    <span className="font-medium capitalize">{user.tier} Tier</span>
                  </div>
                </div>
              </div>
              
              <div className="mt-4">
                <h3 className="text-sm font-medium text-gray-600 mb-2">Progress to Next Tier</h3>
                <div className="w-full h-2 bg-gray-100 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-hotel-gold"
                    style={{ width: `${Math.min((user.loyaltyPoints / 5000) * 100, 100)}%` }}
                  ></div>
                </div>
                <div className="flex justify-between text-xs mt-1">
                  <span>Current: {user.loyaltyPoints} pts</span>
                  <span>Next tier: 5,000 pts</span>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-sm p-4 mb-6">
              <h3 className="font-playfair text-lg font-medium text-hotel-burgundy mb-3 flex items-center">
                <Gift size={20} className="mr-2 text-hotel-gold" />
                Available Rewards
              </h3>
              <div className="space-y-3">
                <div className="border border-gray-100 rounded-lg p-3 flex justify-between items-center">
                  <div>
                    <h4 className="font-medium">Free Night Stay</h4>
                    <p className="text-sm text-gray-600">Valid for standard rooms</p>
                  </div>
                  <button className="bg-hotel-burgundy text-white text-sm px-3 py-1 rounded">
                    25,000 pts
                  </button>
                </div>
                <div className="border border-gray-100 rounded-lg p-3 flex justify-between items-center">
                  <div>
                    <h4 className="font-medium">Spa Credit $50</h4>
                    <p className="text-sm text-gray-600">Valid for any spa service</p>
                  </div>
                  <button className="bg-hotel-burgundy text-white text-sm px-3 py-1 rounded">
                    10,000 pts
                  </button>
                </div>
                <div className="border border-gray-100 rounded-lg p-3 flex justify-between items-center">
                  <div>
                    <h4 className="font-medium">Restaurant Voucher</h4>
                    <p className="text-sm text-gray-600">$25 off your next meal</p>
                  </div>
                  <button className="bg-hotel-burgundy text-white text-sm px-3 py-1 rounded">
                    5,000 pts
                  </button>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-xl shadow-sm p-4">
              <h3 className="font-playfair text-lg font-medium text-hotel-burgundy mb-3 flex items-center">
                <Star size={20} className="mr-2 text-hotel-gold" />
                Loyalty Tiers
              </h3>
              <div className="space-y-4 mt-3">
                {loyaltyTiers.map((tier) => (
                  <div 
                    key={tier.name}
                    className={`p-3 rounded-lg ${
                      user.tier.toLowerCase() === tier.name.toLowerCase() 
                        ? 'bg-hotel-burgundy/10 border border-hotel-burgundy/20' 
                        : 'bg-gray-50'
                    }`}
                  >
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium flex items-center">
                        {user.tier.toLowerCase() === tier.name.toLowerCase() && (
                          <Award size={16} className="text-hotel-gold mr-1" />
                        )}
                        {tier.name} Tier
                      </h4>
                      <span className="text-sm text-gray-600">{tier.points}+ points</span>
                    </div>
                    <ul className="text-sm text-gray-600 space-y-1">
                      {tier.benefits.map((benefit, index) => (
                        <li key={index} className="flex items-start">
                          <span className="mr-2">•</span>
                          {benefit}
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>
          </>
        ) : (
          <div className="bg-white rounded-xl shadow-sm p-6 text-center">
            <Award size={48} className="mx-auto text-hotel-gold mb-4" />
            <h2 className="text-xl font-playfair font-semibold text-hotel-burgundy mb-3">
              Join Our Loyalty Program
            </h2>
            <p className="text-gray-600 mb-6">
              Sign in to access our exclusive loyalty program and start earning rewards with every stay.
            </p>
            <Link to="/auth/login">
              <button className="bg-hotel-burgundy text-white py-2 px-6 rounded-lg text-sm font-medium">
                Sign In
              </button>
            </Link>
          </div>
        )}
      </div>
    </MobileLayout>
  );
};

export default LoyaltyProgram;
</file>

<file path="src/pages/profile/EditProfile.tsx">
import React from "react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { ProfileForm } from "@/components/profile/ProfileForm";
import { useAuth } from "@/contexts/AuthContext";

export default function EditProfile() {
  const { user } = useAuth();

  if (!user) {
    return null;
  }

  return (
    <MobileLayout 
      showBackButton={true} 
      title="Edit Profile" 
      showBottomNav={false}
    >
      <div className="p-6">
        <div className="hotel-card p-6 border-2 border-hotel-beige/40">
          <ProfileForm user={user} />
        </div>
      </div>
    </MobileLayout>
  );
}
</file>

<file path="src/pages/profile/ProfilePage.tsx">
import React from "react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { useAuth } from "@/contexts/AuthContext";
import { Award, Mail, Phone, Edit, ChevronRight } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";

export default function ProfilePage() {
  const { user, logout } = useAuth();

  if (!user) {
    return (
      <MobileLayout title="Profile" showBackButton>
        <div className="flex flex-col items-center justify-center h-[60vh] p-6 text-center">
          <h2 className="text-xl font-semibold text-hotel-burgundy mb-4">
            Please sign in to view your profile
          </h2>
          <Link to="/auth/login">
            <Button>Sign In</Button>
          </Link>
        </div>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout title="My Profile" showBackButton showBottomNav={false}>
      <div className="p-4 space-y-6 pb-24">
        {/* Profile header */}
        <div className="bg-gradient-to-br from-hotel-burgundy to-hotel-burgundy/90 text-white p-6 rounded-xl shadow-md">
          <div className="flex items-center gap-5">
            <div className="relative">
              <Avatar className="h-24 w-24 border-4 border-white">
                <AvatarImage src={user.profileImage} />
                <AvatarFallback className="bg-hotel-cream text-hotel-burgundy text-2xl font-semibold">
                  {user.name.charAt(0)}
                </AvatarFallback>
              </Avatar>
            </div>

            <div>
              <h2 className="text-2xl font-bold">{user.name}</h2>
              <div className="flex items-center mt-1 text-white/90">
                <Award className="h-4 w-4 mr-1" />
                <span>{user.tier} Member</span>
              </div>
              <div className="mt-3">
                <Link to="/profile/edit">
                  <Button size="sm" variant="gold" className="rounded-full px-4">
                    <Edit className="h-4 w-4 mr-1" />
                    Edit Profile
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </div>

        {/* Contact Information */}
        <div className="bg-white rounded-xl shadow-sm p-4">
          <h3 className="font-medium text-lg text-hotel-burgundy mb-3">Contact Information</h3>
          <div className="space-y-3">
            <div className="flex items-center">
              <Mail className="h-5 w-5 text-hotel-burgundy mr-3" />
              <span>{user.email}</span>
            </div>
            {user.phone && (
              <div className="flex items-center">
                <Phone className="h-5 w-5 text-hotel-burgundy mr-3" />
                <span>{user.phone}</span>
              </div>
            )}
          </div>
        </div>

        {/* Loyalty Information */}
        <Link to="/loyalty" className="block">
          <div className="bg-white rounded-xl shadow-sm p-4 flex justify-between items-center">
            <div>
              <h3 className="font-medium text-lg text-hotel-burgundy">Loyalty Program</h3>
              <div className="flex items-center mt-1 text-gray-600">
                <Award className="h-4 w-4 mr-1 text-hotel-gold" />
                <span>{user.loyaltyPoints} points</span>
                <span className="mx-1">•</span>
                <span className="font-medium capitalize">{user.tier} Tier</span>
              </div>
            </div>
            <ChevronRight className="h-5 w-5 text-gray-400" />
          </div>
        </Link>

        {/* Bookings */}
        <Link to="/bookings" className="block">
          <div className="bg-white rounded-xl shadow-sm p-4 flex justify-between items-center">
            <div>
              <h3 className="font-medium text-lg text-hotel-burgundy">My Bookings</h3>
              <p className="text-gray-600 text-sm mt-1">View your current and past bookings</p>
            </div>
            <ChevronRight className="h-5 w-5 text-gray-400" />
          </div>
        </Link>

        {/* Sign Out Button */}
        <div className="pt-4">
          <Button
            variant="outline"
            className="w-full"
            onClick={() => {
              logout();
            }}
          >
            Sign Out
          </Button>
        </div>
      </div>
    </MobileLayout>
  );
}
</file>

<file path="src/pages/restaurant/RestaurantPage.tsx">
import React, { useState } from "react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { useBooking, MenuItem } from "@/contexts/BookingContext";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { BookingConfirmation } from "@/components/ui/booking-confirmation";
import { toast } from "sonner";
import { Utensils, CreditCard, Wallet, Plus, Minus, Home, Truck, MapPin } from "lucide-react";
import { motion } from "framer-motion";

type PaymentMethod = "card" | "cash";
type OrderType = "dine-in" | "room-service" | "delivery";
type OrderItem = { menuItemId: string; quantity: number; };

interface OrderDetails {
  table?: string;
  roomNumber?: string;
  address?: string;
  additionalComments?: string;
}

const RestaurantPage = () => {
  const { menuItems, bookRestaurant } = useBooking();
  const [orderType, setOrderType] = useState<OrderType>("dine-in");
  const [selectedTable, setSelectedTable] = useState<string>("");
  const [roomNumber, setRoomNumber] = useState<string>("");
  const [deliveryAddress, setDeliveryAddress] = useState<string>("");
  const [selectedItems, setSelectedItems] = useState<OrderItem[]>([]);
  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod>("card");
  const [additionalComments, setAdditionalComments] = useState<string>("");
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [confirmation, setConfirmation] = useState<any>(null);

  const tables = Array.from({ length: 20 }, (_, i) => ({
    id: `${i + 1}`,
    name: `Table ${i + 1}`,
    capacity: i < 10 ? 4 : 6
  }));

  const addToOrder = (menuItemId: string) => {
    const existingItemIndex = selectedItems.findIndex(item => item.menuItemId === menuItemId);
    
    if (existingItemIndex >= 0) {
      const updatedItems = [...selectedItems];
      updatedItems[existingItemIndex].quantity += 1;
      setSelectedItems(updatedItems);
    } else {
      setSelectedItems([...selectedItems, { menuItemId, quantity: 1 }]);
    }
  };

  const removeFromOrder = (menuItemId: string) => {
    const existingItemIndex = selectedItems.findIndex(item => item.menuItemId === menuItemId);
    
    if (existingItemIndex >= 0) {
      const updatedItems = [...selectedItems];
      if (updatedItems[existingItemIndex].quantity > 1) {
        updatedItems[existingItemIndex].quantity -= 1;
      } else {
        updatedItems.splice(existingItemIndex, 1);
      }
      setSelectedItems(updatedItems);
    }
  };

  const getOrderTotal = () => {
    return selectedItems.reduce((total, item) => {
      const menuItem = menuItems.find(m => m.id === item.menuItemId);
      return total + (menuItem ? menuItem.price * item.quantity : 0);
    }, 0);
  };

  const validateOrder = () => {
    if (orderType === "dine-in" && !selectedTable) {
      toast.error("Please select a table");
      return false;
    }

    if (orderType === "room-service" && !roomNumber) {
      toast.error("Please enter your room number");
      return false;
    }

    if (orderType === "delivery" && !deliveryAddress) {
      toast.error("Please enter delivery address");
      return false;
    }

    if (selectedItems.length === 0) {
      toast.error("Please add items to your order");
      return false;
    }

    return true;
  };

  const handlePlaceOrder = () => {
    if (!validateOrder()) return;

    try {
      const orderDetails: any = {
        items: selectedItems,
        additionalComments,
      };

      if (orderType === "dine-in") {
        orderDetails.roomNumber = selectedTable; // Using roomNumber field to store table number
      } else if (orderType === "room-service") {
        orderDetails.roomNumber = roomNumber;
      } else if (orderType === "delivery") {
        orderDetails.address = deliveryAddress;
      }

      const booking = bookRestaurant(orderType, orderDetails);
      
      setConfirmation({
        confirmationCode: booking.confirmationCode,
        type: orderType,
        location: orderType === "dine-in" 
          ? `Table ${selectedTable}` 
          : orderType === "room-service"
            ? `Room ${roomNumber}`
            : deliveryAddress,
        paymentMethod,
        items: selectedItems.map(item => {
          const menuItem = menuItems.find(m => m.id === item.menuItemId);
          return {
            name: menuItem?.name,
            quantity: item.quantity,
            price: menuItem?.price
          };
        }),
        additionalComments,
        total: getOrderTotal()
      });
      
      setShowConfirmation(true);
      toast.success("Order placed successfully!");
    } catch (error) {
      toast.error("Failed to place order");
      console.error(error);
    }
  };

  const resetOrder = () => {
    setOrderType("dine-in");
    setSelectedTable("");
    setRoomNumber("");
    setDeliveryAddress("");
    setSelectedItems([]);
    setPaymentMethod("card");
    setAdditionalComments("");
    setShowConfirmation(false);
    setConfirmation(null);
  };

  // Filter menu items by category
  const mainCourses = menuItems.filter(item => item.category === "mains");
  const desserts = menuItems.filter(item => item.category === "desserts");

  if (showConfirmation) {
    return (
      <MobileLayout title="Restaurant" showBackButton>
        <div className="p-4">
          <BookingConfirmation
            bookingType="restaurant"
            confirmationCode={confirmation.confirmationCode}
            title={`${orderType === "dine-in" ? "Dine-in" : orderType === "room-service" ? "Room Service" : "Delivery"} Order`}
            date={new Date().toLocaleDateString()}
            location={confirmation.location}
            details={`Payment: ${confirmation.paymentMethod === 'card' ? 'Credit Card' : 'Cash'}`}
            name="Guest" // Default name for now
            contact="N/A" // Default contact for now
            email="N/A" // Default email for now
          />
          
          <div className="mt-6 bg-white rounded-lg p-4 shadow-sm">
            <h3 className="text-lg font-playfair font-medium text-hotel-burgundy mb-3">Order Details</h3>
            {confirmation.items.map((item: any, index: number) => (
              <div key={index} className="flex justify-between py-2 border-b border-gray-100 last:border-0">
                <div className="flex items-center">
                  <span className="text-sm font-medium">{item.name}</span>
                  <span className="text-sm text-gray-500 ml-2">x{item.quantity}</span>
                </div>
                <div className="font-medium">${(item.price * item.quantity).toFixed(2)}</div>
              </div>
            ))}
            
            {confirmation.additionalComments && (
              <div className="mt-4 pt-2 border-t border-gray-200">
                <h4 className="text-sm font-medium text-gray-700">Additional Comments:</h4>
                <p className="text-sm text-gray-600 mt-1">{confirmation.additionalComments}</p>
              </div>
            )}
            
            <div className="flex justify-between items-center mt-4 pt-2 border-t border-gray-200">
              <div className="font-semibold">Total</div>
              <div className="font-bold text-hotel-burgundy">${confirmation.total.toFixed(2)}</div>
            </div>
          </div>
          
          <div className="mt-6 text-center">
            <Button 
              onClick={resetOrder}
              className="bg-hotel-burgundy hover:bg-hotel-burgundy/90 text-white"
            >
              Place New Order
            </Button>
          </div>
        </div>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout title="Restaurant" showBackButton>
      <div className="p-4 pb-32">
        {/* Order Type Selection */}
        <div className="bg-white rounded-lg p-4 mb-6 shadow-sm">
          <h3 className="text-lg font-playfair font-medium text-hotel-burgundy mb-3">Order Type</h3>
          <div className="grid grid-cols-3 gap-2">
            <button
              onClick={() => setOrderType("dine-in")}
              className={`flex flex-col items-center justify-center gap-2 p-3 rounded-lg border ${
                orderType === "dine-in" 
                  ? "bg-hotel-burgundy text-white border-hotel-burgundy" 
                  : "border-gray-200"
              }`}
            >
              <Utensils size={20} />
              <span className="text-sm">Dine-in</span>
            </button>
            <button
              onClick={() => setOrderType("room-service")}
              className={`flex flex-col items-center justify-center gap-2 p-3 rounded-lg border ${
                orderType === "room-service" 
                  ? "bg-hotel-burgundy text-white border-hotel-burgundy" 
                  : "border-gray-200"
              }`}
            >
              <Home size={20} />
              <span className="text-sm">Room Service</span>
            </button>
            <button
              onClick={() => setOrderType("delivery")}
              className={`flex flex-col items-center justify-center gap-2 p-3 rounded-lg border ${
                orderType === "delivery" 
                  ? "bg-hotel-burgundy text-white border-hotel-burgundy" 
                  : "border-gray-200"
              }`}
            >
              <Truck size={20} />
              <span className="text-sm">Delivery</span>
            </button>
          </div>
        </div>
        
        {/* Location Selection */}
        <div className="bg-white rounded-lg p-4 mb-6 shadow-sm">
          <h3 className="text-lg font-playfair font-medium text-hotel-burgundy mb-3">
            {orderType === "dine-in" 
              ? "Select Table" 
              : orderType === "room-service" 
                ? "Room Number"
                : "Delivery Address"
            }
          </h3>
          
          {orderType === "dine-in" && (
            <Select 
              value={selectedTable}
              onValueChange={setSelectedTable}
            >
              <SelectTrigger>
                <SelectValue placeholder="Choose a table" />
              </SelectTrigger>
              <SelectContent>
                {tables.map(table => (
                  <SelectItem key={table.id} value={table.id}>
                    {table.name} ({table.capacity} seats)
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}
          
          {orderType === "room-service" && (
            <Input
              type="text"
              placeholder="Enter your room number"
              value={roomNumber}
              onChange={(e) => setRoomNumber(e.target.value)}
            />
          )}
          
          {orderType === "delivery" && (
            <div className="space-y-4">
              <div className="h-40 bg-gray-100 rounded-lg flex items-center justify-center">
                <MapPin className="text-gray-400" size={24} />
                <span className="ml-2 text-gray-500">Map will be implemented here</span>
              </div>
              <Input
                type="text"
                placeholder="Enter delivery address"
                value={deliveryAddress}
                onChange={(e) => setDeliveryAddress(e.target.value)}
              />
            </div>
          )}
        </div>
        
        {/* Menu Items */}
        <div className="bg-white rounded-lg p-4 mb-6 shadow-sm">
          <h3 className="text-lg font-playfair font-medium text-hotel-burgundy mb-3">Main Courses</h3>
          <div className="grid gap-4">
            {mainCourses.map((item) => (
              <Card key={item.id} className="overflow-hidden">
                <div className="flex h-24">
                  <div className="w-1/3 overflow-hidden">
                    <img 
                      src={item.image} 
                      alt={item.name} 
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <CardContent className="p-3 flex-1 flex flex-col justify-between">
                    <div>
                      <h4 className="font-medium text-hotel-burgundy">{item.name}</h4>
                      <p className="text-xs text-gray-600 line-clamp-2">{item.description}</p>
                    </div>
                    <div className="flex justify-between items-center">
                      <div className="font-bold text-hotel-burgundy">${item.price}</div>
                      <div className="flex items-center gap-2">
                        {selectedItems.find(i => i.menuItemId === item.id) ? (
                          <>
                            <button 
                              onClick={() => removeFromOrder(item.id)}
                              className="w-7 h-7 rounded-full bg-gray-100 flex items-center justify-center"
                            >
                              <Minus size={14} />
                            </button>
                            <span className="w-6 text-center">
                              {selectedItems.find(i => i.menuItemId === item.id)?.quantity || 0}
                            </span>
                            <button 
                              onClick={() => addToOrder(item.id)}
                              className="w-7 h-7 rounded-full bg-hotel-burgundy text-white flex items-center justify-center"
                            >
                              <Plus size={14} />
                            </button>
                          </>
                        ) : (
                          <button 
                            onClick={() => addToOrder(item.id)}
                            className="px-3 py-1 rounded-full bg-hotel-burgundy text-white text-xs flex items-center gap-1"
                          >
                            <Plus size={12} /> Add
                          </button>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </div>
              </Card>
            ))}
          </div>
        </div>
        
        <div className="bg-white rounded-lg p-4 mb-6 shadow-sm">
          <h3 className="text-lg font-playfair font-medium text-hotel-burgundy mb-3">Desserts</h3>
          <div className="grid gap-4">
            {desserts.map((item) => (
              <Card key={item.id} className="overflow-hidden">
                <div className="flex h-24">
                  <div className="w-1/3 overflow-hidden">
                    <img 
                      src={item.image} 
                      alt={item.name} 
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <CardContent className="p-3 flex-1 flex flex-col justify-between">
                    <div>
                      <h4 className="font-medium text-hotel-burgundy">{item.name}</h4>
                      <p className="text-xs text-gray-600 line-clamp-2">{item.description}</p>
                    </div>
                    <div className="flex justify-between items-center">
                      <div className="font-bold text-hotel-burgundy">${item.price}</div>
                      <div className="flex items-center gap-2">
                        {selectedItems.find(i => i.menuItemId === item.id) ? (
                          <>
                            <button 
                              onClick={() => removeFromOrder(item.id)}
                              className="w-7 h-7 rounded-full bg-gray-100 flex items-center justify-center"
                            >
                              <Minus size={14} />
                            </button>
                            <span className="w-6 text-center">
                              {selectedItems.find(i => i.menuItemId === item.id)?.quantity || 0}
                            </span>
                            <button 
                              onClick={() => addToOrder(item.id)}
                              className="w-7 h-7 rounded-full bg-hotel-burgundy text-white flex items-center justify-center"
                            >
                              <Plus size={14} />
                            </button>
                          </>
                        ) : (
                          <button 
                            onClick={() => addToOrder(item.id)}
                            className="px-3 py-1 rounded-full bg-hotel-burgundy text-white text-xs flex items-center gap-1"
                          >
                            <Plus size={12} /> Add
                          </button>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </div>
              </Card>
            ))}
          </div>
        </div>

        {/* Additional Comments */}
        <div className="bg-white rounded-lg p-4 mb-6 shadow-sm">
          <h3 className="text-lg font-playfair font-medium text-hotel-burgundy mb-3">Additional Comments</h3>
          <Textarea
            placeholder="Any special requests or notes?"
            value={additionalComments}
            onChange={(e) => setAdditionalComments(e.target.value)}
            className="min-h-[100px]"
          />
        </div>

        {/* Payment Method and Order Summary */}
        {selectedItems.length > 0 && (
          <div className="fixed bottom-16 left-0 right-0 bg-white shadow-[0_-4px_6px_-1px_rgba(0,0,0,0.1)] p-4">
            <div className="mb-4">
              <h4 className="text-sm font-medium mb-2">Payment Method</h4>
              <div className="grid grid-cols-2 gap-2">
                <button
                  onClick={() => setPaymentMethod("card")}
                  className={`flex items-center justify-center gap-2 p-2 rounded-lg border ${
                    paymentMethod === "card" 
                      ? "bg-hotel-burgundy text-white border-hotel-burgundy" 
                      : "border-gray-200"
                  }`}
                >
                  <CreditCard size={18} />
                  <span>Card</span>
                </button>
                <button
                  onClick={() => setPaymentMethod("cash")}
                  className={`flex items-center justify-center gap-2 p-2 rounded-lg border ${
                    paymentMethod === "cash" 
                      ? "bg-hotel-burgundy text-white border-hotel-burgundy" 
                      : "border-gray-200"
                  }`}
                >
                  <Wallet size={18} />
                  <span>{orderType === "delivery" ? "Cash on Delivery" : "Cash"}</span>
                </button>
              </div>
            </div>
            
            <div className="flex justify-between items-center mb-3">
              <div className="font-medium">Order Total</div>
              <div className="font-bold text-hotel-burgundy">${getOrderTotal().toFixed(2)}</div>
            </div>
            
            <Button 
              className="w-full bg-hotel-burgundy hover:bg-hotel-burgundy/90"
              onClick={handlePlaceOrder}
            >
              Place Order
            </Button>
          </div>
        )}
      </div>
    </MobileLayout>
  );
};

export default RestaurantPage;
</file>

<file path="src/pages/rooms/RoomDetail.tsx">
import React, { useState, useEffect } from "react";
import { useParams, useNavigate, useSearchParams } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { DatePicker } from "@/components/ui/date-picker";
import { useBooking } from "@/contexts/BookingContext";
import { useAuth } from "@/contexts/AuthContext";
import { BookingConfirmation } from "@/components/ui/booking-confirmation";
import { 
  Calendar, 
  Users, 
  Wifi, 
  Coffee, 
  Bath, 
  Car, 
  Wind, 
  Tv,
  UserPlus,
  Minus,
  Plus,
  Tag,
  CheckCircle,
  XCircle,
  Award,
  Gift,
  Utensils,
  Plane,
  BedDouble,
  Heart // Replacing Spa with Heart icon
} from "lucide-react";
import { addDays, differenceInDays, isToday, isBefore } from "date-fns";
import { formatDate } from "@/lib/booking-utils";
import { Button } from "@/components/ui/button";
import { toast } from "@/components/ui/sonner";
import { Checkbox } from "@/components/ui/checkbox";
import { cn } from "@/lib/utils";
import { Form, FormControl, FormField, FormItem, FormLabel } from "@/components/ui/form";
import { useForm } from "react-hook-form";

const amenityIcons: Record<string, React.ReactNode> = {
  wifi: <Wifi size={18} />,
  breakfast: <Coffee size={18} />,
  bathroom: <Bath size={18} />,
  parking: <Car size={18} />,
  ac: <Wind size={18} />,
  tv: <Tv size={18} />,
};

// Available extras with their prices
const availableExtras = [
  {
    id: "breakfast",
    name: "Breakfast",
    description: "Daily breakfast buffet",
    price: 25,
    icon: <Coffee size={18} />,
    priceType: "per-person-night" // per person per night
  },
  {
    id: "airport-pickup",
    name: "Airport Pickup",
    description: "One-way airport transfer",
    price: 75,
    icon: <Plane size={18} />,
    priceType: "fixed" // one-time fee
  },
  {
    id: "extra-bed",
    name: "Extra Bed",
    description: "Additional bed in your room",
    price: 40,
    icon: <BedDouble size={18} />,
    priceType: "per-night" // per night
  }
];

// Premium add-ons
const premiumAddons = [
  {
    id: "spa",
    name: "Spa Package",
    description: "60-minute couples massage",
    price: 180,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Heart size={18} /> // Changed from Spa to Heart
  },
  {
    id: "romantic-dinner",
    name: "Romantic Dinner",
    description: "Private dinner for two with champagne",
    price: 250,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Utensils size={18} />
  },
  {
    id: "celebration",
    name: "Celebration Package",
    description: "Room decoration, cake and champagne",
    price: 120,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Gift size={18} />
  }
];

// Promo codes for testing
const validPromoCodes = {
  "WELCOME10": { type: "percentage", value: 10 },
  "SAVE50": { type: "fixed", value: 50 },
  "VIP25": { type: "percentage", value: 25 }
};

const RoomDetail = () => {
  const { roomId } = useParams<{ roomId: string }>();
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { getRoom, bookRoom } = useBooking();
  const { user, isAuthenticated } = useAuth();
  
  const checkInParam = searchParams.get("checkIn");
  const checkOutParam = searchParams.get("checkOut");
  const guestsParam = searchParams.get("guests");
  
  const [checkIn, setCheckIn] = useState<Date | undefined>(
    checkInParam ? new Date(checkInParam) : undefined
  );
  const [checkOut, setCheckOut] = useState<Date | undefined>(
    checkOutParam ? new Date(checkOutParam) : undefined
  );
  const [adults, setAdults] = useState(guestsParam ? parseInt(guestsParam) : 1);
  const [children, setChildren] = useState(0);
  const [childrenAges, setChildrenAges] = useState<number[]>([]);
  const [selectedExtras, setSelectedExtras] = useState<string[]>([]);
  const [selectedAddons, setSelectedAddons] = useState<string[]>([]);
  const [promoCode, setPromoCode] = useState("");
  const [appliedPromo, setAppliedPromo] = useState<{type: string, value: number} | null>(null);
  const [isBooking, setIsBooking] = useState(false);
  const [bookingConfirmation, setBookingConfirmation] = useState<any>(null);
  
  const form = useForm({
    defaultValues: {
      extras: [] as string[],
      addons: [] as string[]
    }
  });

  const room = roomId ? getRoom(roomId) : undefined;

  useEffect(() => {
    if (!room) {
      navigate("/rooms");
    }
  }, [room, navigate]);

  useEffect(() => {
    // Adjust children ages array based on number of children
    if (children > childrenAges.length) {
      // Add new children with default age 0
      setChildrenAges([...childrenAges, ...Array(children - childrenAges.length).fill(0)]);
    } else if (children < childrenAges.length) {
      // Remove extra ages
      setChildrenAges(childrenAges.slice(0, children));
    }
  }, [children]);

  if (!room) {
    return null;
  }

  const handleCheckInChange = (date: Date | undefined) => {
    setCheckIn(date);
    if (date && (!checkOut || checkOut <= date)) {
      setCheckOut(addDays(date, 1));
    }
  };

  const totalGuests = adults + children;
  const nights = checkIn && checkOut
    ? differenceInDays(checkOut, checkIn)
    : 0;
  
  // Calculate extras cost
  const calculateExtrasCost = () => {
    return availableExtras.reduce((total, extra) => {
      if (selectedExtras.includes(extra.id)) {
        if (extra.priceType === "per-person-night") {
          return total + (extra.price * totalGuests * nights);
        } else if (extra.priceType === "per-night") {
          return total + (extra.price * nights);
        } else {
          return total + extra.price; // fixed price
        }
      }
      return total;
    }, 0);
  };

  // Calculate addons cost
  const calculateAddonsCost = () => {
    return premiumAddons.reduce((total, addon) => {
      if (selectedAddons.includes(addon.id)) {
        return total + addon.price;
      }
      return total;
    }, 0);
  };
  
  // Calculate base room cost
  const baseRoomCost = nights * room.price;
  
  // Calculate discount from promo code
  const calculateDiscount = () => {
    if (!appliedPromo) return 0;
    
    const subtotal = baseRoomCost + calculateExtrasCost() + calculateAddonsCost();
    
    if (appliedPromo.type === "percentage") {
      return Math.round((subtotal * appliedPromo.value) / 100);
    } else {
      return appliedPromo.value;
    }
  };
  
  // Calculate total price
  const totalPrice = baseRoomCost + calculateExtrasCost() + calculateAddonsCost() - calculateDiscount();
  
  // Calculate loyalty points (1 point per $1)
  const loyaltyPoints = Math.floor(totalPrice);

  const handleApplyPromoCode = () => {
    const code = promoCode.trim().toUpperCase();
    
    if (!code) {
      toast.error("Please enter a promo code");
      return;
    }
    
    if (validPromoCodes[code as keyof typeof validPromoCodes]) {
      const promo = validPromoCodes[code as keyof typeof validPromoCodes];
      setAppliedPromo(promo);
      
      const message = promo.type === "percentage" 
        ? `${promo.value}% discount applied!` 
        : `$${promo.value} discount applied!`;
      
      toast.success(message);
    } else {
      toast.error("Invalid promo code");
    }
  };

  const handleRemovePromoCode = () => {
    setAppliedPromo(null);
    setPromoCode("");
    toast.info("Promo code removed");
  };

  const toggleExtra = (extraId: string) => {
    setSelectedExtras(prev => 
      prev.includes(extraId) 
        ? prev.filter(id => id !== extraId)
        : [...prev, extraId]
    );
  };

  const toggleAddon = (addonId: string) => {
    setSelectedAddons(prev => 
      prev.includes(addonId) 
        ? prev.filter(id => id !== addonId)
        : [...prev, addonId]
    );
  };

  const handleChildAgeChange = (index: number, age: number) => {
    const newAges = [...childrenAges];
    newAges[index] = age;
    setChildrenAges(newAges);
  };

  const handleBookRoom = async () => {
    if (!checkIn || !checkOut || !adults) {
      return;
    }

    if (!isAuthenticated) {
      navigate("/auth/login");
      return;
    }

    if (totalGuests > room.capacity) {
      toast.error(`This room can only accommodate ${room.capacity} guests`);
      return;
    }

    setIsBooking(true);
    
    try {
      const booking = bookRoom(roomId!, checkIn, checkOut, totalGuests);
      
      // Prepare extras and addons for booking
      const bookedExtras = selectedExtras.map(id => {
        const extra = availableExtras.find(e => e.id === id);
        return {
          id,
          name: extra?.name,
          price: extra?.price
        };
      });
      
      const bookedAddons = selectedAddons.map(id => {
        const addon = premiumAddons.find(a => a.id === id);
        return {
          id,
          name: addon?.name,
          price: addon?.price
        };
      });
      
      // Create confirmation object
      setBookingConfirmation({
        bookingType: "room",
        confirmationCode: booking.confirmationCode,
        title: room.name,
        date: `${formatDate(checkIn)} - ${formatDate(checkOut)}`,
        details: `${nights} ${nights === 1 ? "night" : "nights"}, ${totalGuests} ${totalGuests === 1 ? "guest" : "guests"}`,
        name: user?.name || "Guest",
        contact: user?.phone || "Not provided",
        email: user?.email || "Not provided",
        extras: bookedExtras,
        addons: bookedAddons,
        totalPrice: totalPrice,
        loyaltyPoints: loyaltyPoints
      });
    } catch (error) {
      console.error("Error booking room:", error);
      toast.error("There was an error processing your booking. Please try again.");
    } finally {
      setIsBooking(false);
    }
  };

  const isPastDate = (date: Date) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return isBefore(date, today) && !isToday(date);
  };

  if (bookingConfirmation) {
    return (
      <MobileLayout hideHeader>
        <div className="p-4 min-h-screen flex items-center justify-center">
          <BookingConfirmation {...bookingConfirmation} />
        </div>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout title={room.name} showBackButton>
      <div className="pb-20">
        <div className="relative h-64">
          <img
            src={room.image}
            alt={room.name}
            className="w-full h-full object-cover"
          />
        </div>

        <div className="p-4">
          <div className="flex justify-between items-start mb-3">
            <h1 className="text-2xl font-playfair font-semibold text-hotel-burgundy">
              {room.name}
            </h1>
            <div className="text-right">
              <span className="text-2xl font-semibold text-hotel-burgundy">${room.price}</span>
              <span className="text-gray-500 block text-sm">per night</span>
            </div>
          </div>

          <p className="text-gray-600 mb-4">{room.description}</p>

          <div className="mb-6">
            <h2 className="font-medium text-lg mb-2">Amenities</h2>
            <div className="grid grid-cols-3 gap-3">
              {room.amenities.map((amenity) => (
                <div
                  key={amenity}
                  className="flex items-center p-2 bg-gray-50 rounded-lg"
                >
                  <span className="mr-2 text-hotel-burgundy">
                    {amenityIcons[amenity] || null}
                  </span>
                  <span className="text-sm capitalize">{amenity}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4 mb-6">
            <h2 className="font-medium text-lg mb-3">Book This Room</h2>
            
            {/* Date Selection */}
            <div className="grid grid-cols-2 gap-4 mb-4">
              <DatePicker
                date={checkIn}
                setDate={handleCheckInChange}
                label="Check-in"
                placeholder="Select date"
                fromDate={new Date()}
              />
              <DatePicker
                date={checkOut}
                setDate={setCheckOut}
                label="Check-out"
                placeholder="Select date"
                fromDate={checkIn ? addDays(checkIn, 1) : undefined}
              />
            </div>
            
            {/* Guest Selection */}
            <div className="mb-4">
              <label className="block text-sm font-medium mb-3 text-gray-700">
                Number of Guests
              </label>
              
              {/* Adults */}
              <div className="flex items-center justify-between mb-3 bg-gray-50 p-3 rounded-lg">
                <div className="flex items-center">
                  <Users size={18} className="text-hotel-burgundy mr-2" />
                  <span>Adults</span>
                </div>
                <div className="flex items-center">
                  <button 
                    type="button"
                    className="p-1 bg-white rounded-full border border-gray-200 text-gray-500 hover:bg-gray-100 disabled:opacity-50"
                    onClick={() => setAdults(prev => Math.max(1, prev - 1))}
                    disabled={adults <= 1}
                  >
                    <Minus size={16} />
                  </button>
                  <span className="w-8 text-center">{adults}</span>
                  <button 
                    type="button"
                    className="p-1 bg-white rounded-full border border-gray-200 text-gray-500 hover:bg-gray-100 disabled:opacity-50"
                    onClick={() => setAdults(prev => prev + 1)}
                    disabled={adults + children >= room.capacity}
                  >
                    <Plus size={16} />
                  </button>
                </div>
              </div>
              
              {/* Children */}
              <div className="flex items-center justify-between mb-1 bg-gray-50 p-3 rounded-lg">
                <div className="flex items-center">
                  <UserPlus size={18} className="text-hotel-burgundy mr-2" />
                  <span>Children</span>
                </div>
                <div className="flex items-center">
                  <button 
                    type="button"
                    className="p-1 bg-white rounded-full border border-gray-200 text-gray-500 hover:bg-gray-100 disabled:opacity-50"
                    onClick={() => setChildren(prev => Math.max(0, prev - 1))}
                    disabled={children <= 0}
                  >
                    <Minus size={16} />
                  </button>
                  <span className="w-8 text-center">{children}</span>
                  <button 
                    type="button"
                    className="p-1 bg-white rounded-full border border-gray-200 text-gray-500 hover:bg-gray-100 disabled:opacity-50"
                    onClick={() => setChildren(prev => prev + 1)}
                    disabled={adults + children >= room.capacity}
                  >
                    <Plus size={16} />
                  </button>
                </div>
              </div>
              
              {/* Children Ages */}
              <AnimatePresence>
                {children > 0 && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="bg-gray-50 p-3 rounded-lg mt-2"
                  >
                    <p className="text-sm text-gray-600 mb-2">Children's ages</p>
                    <div className="grid grid-cols-2 gap-2">
                      {Array.from({ length: children }).map((_, index) => (
                        <div key={`child-${index}`} className="flex flex-col">
                          <label className="text-xs text-gray-500 mb-1">Child {index + 1}</label>
                          <select
                            value={childrenAges[index]}
                            onChange={(e) => handleChildAgeChange(index, parseInt(e.target.value))}
                            className="text-sm p-2 border border-gray-200 rounded"
                          >
                            {Array.from({ length: 18 }).map((_, age) => (
                              <option key={age} value={age}>{age} {age === 1 ? 'year' : 'years'}</option>
                            ))}
                          </select>
                        </div>
                      ))}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
              
              {totalGuests > room.capacity && (
                <p className="text-red-500 text-sm mt-2">
                  This room can only accommodate {room.capacity} guests
                </p>
              )}
            </div>
            
            {/* Extras */}
            {checkIn && checkOut && nights > 0 && (
              <div className="mb-4">
                <h3 className="font-medium text-md mb-2">Select Extras</h3>
                <div className="space-y-2">
                  {availableExtras.map((extra) => (
                    <div 
                      key={extra.id}
                      className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                    >
                      <div className="flex items-center">
                        <Checkbox 
                          id={`extra-${extra.id}`}
                          checked={selectedExtras.includes(extra.id)}
                          onCheckedChange={() => toggleExtra(extra.id)}
                          className="mr-2 data-[state=checked]:bg-hotel-burgundy data-[state=checked]:text-white"
                        />
                        <div>
                          <label 
                            htmlFor={`extra-${extra.id}`}
                            className="text-sm font-medium cursor-pointer"
                          >
                            {extra.name}
                          </label>
                          <p className="text-xs text-gray-500">{extra.description}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-medium text-hotel-burgundy">
                          ${extra.price}
                          <span className="text-xs text-gray-500 ml-1">
                            {extra.priceType === "per-person-night" && "/person/night"}
                            {extra.priceType === "per-night" && "/night"}
                          </span>
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Promo Code */}
            {checkIn && checkOut && nights > 0 && (
              <div className="mb-4">
                <h3 className="font-medium text-md mb-2">Promo Code</h3>
                <div className="flex gap-2">
                  <div className="relative flex-1">
                    <Tag className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Enter promo code"
                      value={promoCode}
                      onChange={(e) => setPromoCode(e.target.value)}
                      className="pl-9 w-full p-2.5 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
                      disabled={!!appliedPromo}
                    />
                  </div>
                  {appliedPromo ? (
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleRemovePromoCode}
                      className="shrink-0"
                    >
                      <XCircle className="mr-1 h-4 w-4" />
                      Remove
                    </Button>
                  ) : (
                    <Button
                      type="button"
                      onClick={handleApplyPromoCode}
                      className="bg-hotel-burgundy text-white shrink-0"
                    >
                      Apply
                    </Button>
                  )}
                </div>
                
                {appliedPromo && (
                  <div className="flex items-center mt-2 text-green-600 text-sm">
                    <CheckCircle className="h-4 w-4 mr-1" />
                    {appliedPromo.type === "percentage" 
                      ? `${appliedPromo.value}% discount applied` 
                      : `$${appliedPromo.value} discount applied`}
                  </div>
                )}
              </div>
            )}

            {/* Price Summary */}
            {checkIn && checkOut && nights > 0 && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="border-t border-gray-100 pt-4 mt-4"
              >
                <h3 className="font-medium text-md mb-2">Price Summary</h3>
                <div className="space-y-1 mb-3">
                  <div className="flex justify-between">
                    <span>
                      ${room.price} x {nights} {nights === 1 ? "night" : "nights"}
                    </span>
                    <span>${baseRoomCost}</span>
                  </div>
                  
                  {calculateExtrasCost() > 0 && (
                    <div className="flex justify-between">
                      <span>Selected extras</span>
                      <span>${calculateExtrasCost()}</span>
                    </div>
                  )}
                  
                  {calculateAddonsCost() > 0 && (
                    <div className="flex justify-between">
                      <span>Selected add-ons</span>
                      <span>${calculateAddonsCost()}</span>
                    </div>
                  )}
                  
                  {calculateDiscount() > 0 && (
                    <div className="flex justify-between text-green-600">
                      <span>Discount</span>
                      <span>-${calculateDiscount()}</span>
                    </div>
                  )}
                </div>
                
                <div className="flex justify-between font-semibold text-lg pt-2 border-t border-gray-100">
                  <span>Total</span>
                  <span className="text-hotel-burgundy">${totalPrice}</span>
                </div>
                
                <div className="mt-2 bg-amber-50 p-2 rounded-lg flex items-center text-amber-700 text-sm">
                  <Award className="h-4 w-4 mr-1 text-amber-500" />
                  Earn {loyaltyPoints} loyalty points with this booking
                </div>
              </motion.div>
            )}

            <button
              className={`w-full py-3 rounded-lg font-medium mt-4 ${
                checkIn && checkOut && nights > 0 && totalGuests <= room.capacity
                  ? "bg-hotel-burgundy text-white"
                  : "bg-gray-200 text-gray-500 cursor-not-allowed"
              }`}
              disabled={!checkIn || !checkOut || nights <= 0 || isBooking || totalGuests > room.capacity}
              onClick={handleBookRoom}
            >
              {isBooking
                ? "Processing..."
                : checkIn && checkOut && nights > 0
                ? `Book for $${totalPrice}`
                : "Select Dates to Book"}
            </button>
          </div>

          {/* Premium Add-ons Section */}
          {checkIn && checkOut && nights > 0 && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4 mb-6">
              <h2 className="font-medium text-lg mb-3">
                <Gift className="inline-block mr-2 text-hotel-burgundy" size={20} />
                Suggested Add-ons
              </h2>
              <div className="space-y-3">
                {premiumAddons.map((addon) => (
                  <div 
                    key={addon.id}
                    className={cn(
                      "border rounded-lg p-3 transition-all",
                      selectedAddons.includes(addon.id) 
                        ? "border-hotel-burgundy bg-hotel-burgundy/5" 
                        : "border-gray-200"
                    )}
                  >
                    <div className="flex gap-3">
                      <div className="w-16 h-16 rounded-md overflow-hidden shrink-0">
                        <img 
                          src={addon.image} 
                          alt={addon.name}
                          className="w-full h-full object-cover" 
                        />
                      </div>
                      <div className="flex-1">
                        <div className="flex justify-between">
                          <h3 className="font-medium">{addon.name}</h3>
                          <span className="text-hotel-burgundy font-medium">${addon.price}</span>
                        </div>
                        <p className="text-sm text-gray-600 mb-2">{addon.description}</p>
                        <Button
                          type="button"
                          size="sm"
                          onClick={() => toggleAddon(addon.id)}
                          variant={selectedAddons.includes(addon.id) ? "outline" : "default"}
                          className={cn(
                            selectedAddons.includes(addon.id) 
                              ? "border-hotel-burgundy text-hotel-burgundy" 
                              : "bg-hotel-burgundy text-white"
                          )}
                        >
                          {selectedAddons.includes(addon.id) ? "Remove" : "Add to Booking"}
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
            <h2 className="font-medium text-lg mb-3">Cancellation Policy</h2>
            <p className="text-sm text-gray-600">
              Free cancellation up to 24 hours before check-in. Cancellations made less than 24 hours in advance are subject to a one-night charge.
            </p>
          </div>
        </div>
      </div>
    </MobileLayout>
  );
};

export default RoomDetail;
</file>

<file path="src/pages/rooms/RoomsList.tsx">
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Users } from "lucide-react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { RoomCard } from "@/components/ui/room-card";
import { useBooking } from "@/contexts/BookingContext";
import { DatePicker } from "@/components/ui/date-picker";
import { addDays } from "date-fns";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

const RoomsList = () => {
  const navigate = useNavigate();
  const { rooms } = useBooking();
  const [checkIn, setCheckIn] = useState<Date | undefined>(undefined);
  const [checkOut, setCheckOut] = useState<Date | undefined>(undefined);
  const [guests, setGuests] = useState(1);

  const handleRoomSelect = (roomId: string) => {
    if (!checkIn || !checkOut) {
      return;
    }
    navigate(`/rooms/${roomId}?checkIn=${checkIn.toISOString()}&checkOut=${checkOut.toISOString()}&guests=${guests}`);
  };

  const handleCheckInChange = (date: Date | undefined) => {
    setCheckIn(date);
    // If check-out is earlier than check-in + 1, adjust it
    if (date && checkOut && checkOut <= date) {
      setCheckOut(addDays(date, 1));
    }
  };

  const clearFilters = () => {
    setGuests(1);
    setCheckIn(undefined);
    setCheckOut(undefined);
  };

  return (
    <MobileLayout title="Room Booking" showBackButton>
      <div className="p-4 pb-20">
        {/* Search Panel */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-4 space-y-4 mb-6">
          <h2 className="font-medium text-gray-800 mb-2">Find Your Perfect Room</h2>
          
          {/* Date Selection */}
          <div className="grid grid-cols-2 gap-4">
            <DatePicker
              date={checkIn}
              setDate={handleCheckInChange}
              label="Check-in"
              placeholder="Select date"
              fromDate={new Date()}
            />
            <DatePicker
              date={checkOut}
              setDate={setCheckOut}
              label="Check-out"
              placeholder="Select date"
              fromDate={checkIn ? addDays(checkIn, 1) : undefined}
            />
          </div>

          {/* Guests Selection */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-700">
              Number of Guests
            </label>
            <div className="relative">
              <Users className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <select
                value={guests}
                onChange={(e) => setGuests(parseInt(e.target.value))}
                className="pl-10 w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent appearance-none bg-white"
              >
                {[1, 2, 3, 4, 5, 6].map((num) => (
                  <option key={num} value={num}>
                    {num} {num === 1 ? "Guest" : "Guests"}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <Button
            variant="outline"
            onClick={clearFilters}
            className="w-full border-dashed border-gray-300 mt-2"
          >
            Clear All
          </Button>
        </div>

        {/* Results Section */}
        <div className="mb-4">
          <h2 className="text-xl font-playfair font-semibold text-hotel-burgundy mb-2">
            Available Rooms
          </h2>
          <p className="text-gray-600 text-sm">
            {rooms.length} {rooms.length === 1 ? 'room' : 'rooms'} available
          </p>
        </div>

        {/* Room Cards */}
        <div className="grid gap-6">
          {rooms.map((room) => (
            <RoomCard
              key={room.id}
              id={room.id}
              name={room.name}
              description={room.description}
              price={room.price}
              image={room.image}
              amenities={room.amenities}
              capacity={room.capacity}
              onClick={() => handleRoomSelect(room.id)}
            />
          ))}
        </div>
      </div>
    </MobileLayout>
  );
};

export default RoomsList;
</file>

<file path="src/pages/settings/components/MoreOptions.tsx">
import React from 'react';
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Bell, Globe, DollarSign, MessageSquare } from 'lucide-react';

export const MoreOptions = () => {
  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-lg font-semibold mb-4">Notifications</h3>
        
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Bell className="h-5 w-5 text-gray-500" />
            <div>
              <p className="font-medium">Push Notifications</p>
              <p className="text-sm text-gray-500">Get notified about your bookings</p>
            </div>
          </div>
          <Switch />
        </div>

        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <MessageSquare className="h-5 w-5 text-gray-500" />
            <div>
              <p className="font-medium">WhatsApp Updates</p>
              <p className="text-sm text-gray-500">Receive booking confirmations</p>
            </div>
          </div>
          <Switch />
        </div>
      </div>

      <div className="space-y-4">
        <h3 className="text-lg font-semibold mb-4">Preferences</h3>
        
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Globe className="h-5 w-5 text-gray-500" />
            <div>
              <p className="font-medium">Language</p>
              <p className="text-sm text-gray-500">Choose your preferred language</p>
            </div>
          </div>
          <Select defaultValue="en">
            <SelectTrigger className="w-[100px]">
              <SelectValue placeholder="Select" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="en">English</SelectItem>
              <SelectItem value="ar">Arabic</SelectItem>
              <SelectItem value="fr">French</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <DollarSign className="h-5 w-5 text-gray-500" />
            <div>
              <p className="font-medium">Currency</p>
              <p className="text-sm text-gray-500">Set your preferred currency</p>
            </div>
          </div>
          <Select defaultValue="usd">
            <SelectTrigger className="w-[100px]">
              <SelectValue placeholder="Select" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="usd">USD</SelectItem>
              <SelectItem value="eur">EUR</SelectItem>
              <SelectItem value="gbp">GBP</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/settings/components/PaymentMethods.tsx">
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { CreditCard, Plus, Trash2 } from 'lucide-react';

export const PaymentMethods = () => {
  const [savedMethods, setSavedMethods] = useState([
    { id: 1, type: 'visa', last4: '4242', expiryDate: '12/24' },
  ]);

  const handleDelete = (id: number) => {
    setSavedMethods(methods => methods.filter(method => method.id !== id));
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Saved Payment Methods</h3>
        <Button variant="outline" size="sm">
          <Plus size={16} className="mr-2" />
          Add New
        </Button>
      </div>

      <div className="space-y-3">
        {savedMethods.map(method => (
          <Card key={method.id} className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <CreditCard className="h-6 w-6 text-hotel-burgundy" />
                <div>
                  <p className="font-medium">•••• {method.last4}</p>
                  <p className="text-sm text-gray-500">Expires {method.expiryDate}</p>
                </div>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => handleDelete(method.id)}
                className="text-red-500 hover:text-red-600 hover:bg-red-50"
              >
                <Trash2 size={16} />
              </Button>
            </div>
          </Card>
        ))}
      </div>

      <div className="mt-6">
        <h4 className="text-sm font-medium mb-3">Add New Payment Method</h4>
        <div className="grid gap-3">
          <Button variant="outline" className="justify-start">
            <CreditCard className="mr-2 h-4 w-4" /> Add Credit/Debit Card
          </Button>
          <Button variant="outline" className="justify-start">
            <CreditCard className="mr-2 h-4 w-4" /> Connect PayPal
          </Button>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/settings/SettingsPage.tsx">
import React from 'react';
import { MobileLayout } from "@/components/ui/mobile-layout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { PaymentMethods } from './components/PaymentMethods';
import { MoreOptions } from './components/MoreOptions';

const SettingsPage = () => {
  return (
    <MobileLayout title="Preferences" showBackButton>
      <div className="p-6">
        <Tabs defaultValue="payments" className="w-full">
          <TabsList className="w-full mb-6 bg-gradient-to-r from-hotel-pearl to-hotel-cream border-2 border-hotel-beige/30 rounded-2xl p-1 shadow-elegant">
            <TabsTrigger 
              value="payments" 
              className="flex-1 rounded-xl font-montserrat font-semibold data-[state=active]:bg-luxury-gradient data-[state=active]:text-white data-[state=active]:shadow-luxury transition-all duration-300"
            >
              Payment Methods
            </TabsTrigger>
            <TabsTrigger 
              value="more" 
              className="flex-1 rounded-xl font-montserrat font-semibold data-[state=active]:bg-luxury-gradient data-[state=active]:text-white data-[state=active]:shadow-luxury transition-all duration-300"
            >
              More Options
            </TabsTrigger>
          </TabsList>
          <TabsContent value="payments">
            <PaymentMethods />
          </TabsContent>
          <TabsContent value="more">
            <MoreOptions />
          </TabsContent>
        </Tabs>
      </div>
    </MobileLayout>
  );
};

export default SettingsPage;
</file>

<file path="src/pages/spa/SpaServices.tsx">
import React, { useState } from "react";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { useBooking, SpaService } from "@/contexts/BookingContext";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { BookingConfirmation } from "@/components/ui/booking-confirmation";
import { toast } from "sonner";
import { 
  Clock, 
  User, 
  Calendar, 
  Sparkles, 
  CheckCircle, 
  XCircle, 
  Award, 
  Gift,
  Heart,
  Utensils,
  Tag
} from "lucide-react";
import { motion } from "framer-motion";
import { format } from "date-fns";
import { Checkbox } from "@/components/ui/checkbox";
import { formatPrice, calculateLoyaltyPoints } from "@/lib/booking-utils";
import { DurationSelector } from "@/components/spa/DurationSelector";
import { SelectorGroup } from "@/components/ui/selector-group";

// Available extras with their prices
const availableExtras = [
  {
    id: "aromatherapy",
    name: "Aromatherapy",
    description: "Premium essential oils for enhanced relaxation",
    price: 25,
    icon: <Sparkles size={18} />
  },
  {
    id: "hot-stones",
    name: "Hot Stones",
    description: "Add hot stone therapy to any massage",
    price: 35,
    icon: <Sparkles size={18} />
  },
  {
    id: "extended-time",
    name: "Extended Time",
    description: "Add 15 minutes to your session",
    price: 30,
    icon: <Clock size={18} />
  }
];

// Premium add-ons
const premiumAddons = [
  {
    id: "couple-package",
    name: "Couples Package",
    description: "Transform your session into a couples experience",
    price: 120,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Heart size={18} />
  },
  {
    id: "champagne",
    name: "Champagne & Chocolates",
    description: "Enjoy premium champagne and chocolates after your treatment",
    price: 75,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Gift size={18} />
  },
  {
    id: "lunch",
    name: "Spa Lunch",
    description: "Healthy gourmet lunch at our spa café",
    price: 45,
    image: "/lovable-uploads/e2a8b7e5-39b1-43d6-b1e5-9c84548e01b4.png",
    icon: <Utensils size={18} />
  }
];

// Promo codes for testing
const validPromoCodes = {
  "SPA25": { type: "percentage", value: 25 },
  "RELAX50": { type: "fixed", value: 50 },
  "WELLNESS15": { type: "percentage", value: 15 }
};

const SpaServices = () => {
  const { spaServices, getSpaService, bookSpa } = useBooking();
  const [step, setStep] = useState<"service" | "datetime" | "specialist" | "extras" | "confirmation">("service");
  const [selectedService, setSelectedService] = useState<SpaService | null>(null);
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [selectedTime, setSelectedTime] = useState<string>("");
  const [selectedSpecialist, setSelectedSpecialist] = useState<string>("");
  const [selectedExtras, setSelectedExtras] = useState<string[]>([]);
  const [selectedAddons, setSelectedAddons] = useState<string[]>([]);
  const [promoCode, setPromoCode] = useState("");
  const [appliedPromo, setAppliedPromo] = useState<{type: string, value: number} | null>(null);
  const [bookingConfirmation, setBookingConfirmation] = useState<any>(null);
  const [selectedDuration, setSelectedDuration] = useState<{ minutes: number; price: number } | null>(null);
  
  const availableTimes = [
    "09:00 AM", "10:00 AM", "11:00 AM", 
    "12:00 PM", "01:00 PM", "02:00 PM", 
    "03:00 PM", "04:00 PM", "05:00 PM"
  ];

  const handleServiceSelect = (service: SpaService) => {
    setSelectedService(service);
    setSelectedDuration(service.durations[1]); // Default to 60 min
    setStep("datetime");
  };

  const handleTimeSelect = (option: { id: string; label: string }) => {
    setSelectedTime(option.label);
    setStep("specialist");
  };

  const handleSpecialistSelect = (option: { id: string; label: string }) => {
    setSelectedSpecialist(option.label);
    setStep("extras");
  };

  const handleApplyPromoCode = () => {
    const code = promoCode.trim().toUpperCase();
    
    if (!code) {
      toast.error("Please enter a promo code");
      return;
    }
    
    if (validPromoCodes[code as keyof typeof validPromoCodes]) {
      const promo = validPromoCodes[code as keyof typeof validPromoCodes];
      setAppliedPromo(promo);
      
      const message = promo.type === "percentage" 
        ? `${promo.value}% discount applied!` 
        : `$${promo.value} discount applied!`;
      
      toast.success(message);
    } else {
      toast.error("Invalid promo code");
    }
  };

  const handleRemovePromoCode = () => {
    setAppliedPromo(null);
    setPromoCode("");
    toast.info("Promo code removed");
  };

  const toggleExtra = (extraId: string) => {
    setSelectedExtras(prev => 
      prev.includes(extraId) 
        ? prev.filter(id => id !== extraId)
        : [...prev, extraId]
    );
  };

  const toggleAddon = (addonId: string) => {
    setSelectedAddons(prev => 
      prev.includes(addonId) 
        ? prev.filter(id => id !== addonId)
        : [...prev, addonId]
    );
  };

  // Calculate extras cost
  const calculateExtrasCost = () => {
    return availableExtras.reduce((total, extra) => {
      if (selectedExtras.includes(extra.id)) {
        return total + extra.price;
      }
      return total;
    }, 0);
  };

  // Calculate addons cost
  const calculateAddonsCost = () => {
    return premiumAddons.reduce((total, addon) => {
      if (selectedAddons.includes(addon.id)) {
        return total + addon.price;
      }
      return total;
    }, 0);
  };
  
  // Update price calculations to use selected duration
  const baseServiceCost = selectedDuration?.price || 0;
  
  // Calculate discount from promo code
  const calculateDiscount = () => {
    if (!appliedPromo) return 0;
    
    const subtotal = baseServiceCost + calculateExtrasCost() + calculateAddonsCost();
    
    if (appliedPromo.type === "percentage") {
      return Math.round((subtotal * appliedPromo.value) / 100);
    } else {
      return appliedPromo.value;
    }
  };
  
  // Calculate total price
  const totalPrice = baseServiceCost + calculateExtrasCost() + calculateAddonsCost() - calculateDiscount();
  
  // Calculate loyalty points
  const loyaltyPoints = calculateLoyaltyPoints(totalPrice);

  const handleBooking = () => {
    if (!selectedService || !selectedTime || !selectedSpecialist) return;
    
    try {
      const booking = bookSpa(
        selectedService.id,
        selectedDate,
        selectedTime,
        selectedSpecialist
      );

      // Prepare extras and addons for booking
      const bookedExtras = selectedExtras.map(id => {
        const extra = availableExtras.find(e => e.id === id);
        return {
          id,
          name: extra?.name,
          price: extra?.price
        };
      });
      
      const bookedAddons = selectedAddons.map(id => {
        const addon = premiumAddons.find(a => a.id === id);
        return {
          id,
          name: addon?.name,
          price: addon?.price
        };
      });

      setBookingConfirmation({
        bookingType: "spa",
        confirmationCode: booking.confirmationCode,
        title: selectedService.name,
        date: format(selectedDate, "MMMM dd, yyyy"),
        time: selectedTime,
        location: "Spa & Wellness Center",
        details: `Specialist: ${selectedSpecialist}`,
        name: "John Doe", // This would come from user profile
        contact: "+1 (555) 123-4567", // This would come from user profile
        email: "johndoe@example.com", // This would come from user profile
        extras: bookedExtras,
        addons: bookedAddons,
        totalPrice: totalPrice,
        loyaltyPoints: loyaltyPoints
      });

      setStep("confirmation");
      toast.success("Spa service booked successfully!");
    } catch (error) {
      toast.error("Failed to book spa service");
      console.error(error);
    }
  };

  const handleBackToServices = () => {
    setSelectedService(null);
    setSelectedDate(new Date());
    setSelectedTime("");
    setSelectedSpecialist("");
    setSelectedExtras([]);
    setSelectedAddons([]);
    setPromoCode("");
    setAppliedPromo(null);
    setBookingConfirmation(null);
    setStep("service");
  };

  const renderServiceSelection = () => (
    <div className="grid gap-4">
      <h3 className="text-lg font-playfair text-center text-hotel-burgundy">Choose a Treatment</h3>
      {spaServices.map((service) => (
        <motion.div
          key={service.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          <Card className="overflow-hidden hover:border-hotel-gold cursor-pointer transition-all"
                onClick={() => handleServiceSelect(service)}>
            <div className="h-40 overflow-hidden">
              <img 
                src={service.image} 
                alt={service.name} 
                className="w-full h-full object-cover"
              />
            </div>
            <CardContent className="p-4">
              <div className="flex justify-between items-start">
                <div>
                  <h4 className="font-playfair text-lg font-medium text-hotel-burgundy">{service.name}</h4>
                  <p className="text-sm text-gray-600 mt-1">{service.description}</p>
                  <div className="flex items-center mt-2 text-sm text-gray-500">
                    <Clock size={14} className="mr-1" /> {service.durations.map(d => `${d.minutes}min`).join(', ')}
                  </div>
                </div>
                <div className="text-right">
                  <span className="font-bold text-hotel-burgundy">From ${Math.min(...service.durations.map(d => d.price))}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      ))}
    </div>
  );

  const renderDateTimeSelection = () => (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white rounded-xl shadow-sm p-6"
    >
      <Button 
        variant="ghost" 
        size="sm" 
        className="mb-4" 
        onClick={() => setStep("service")}
      >
        ← Back to Services
      </Button>
      
      <h3 className="text-lg font-playfair font-medium text-hotel-burgundy mb-4">
        {selectedService?.name}
      </h3>

      {selectedService && (
        <DurationSelector
          durations={selectedService.durations}
          selectedDuration={selectedDuration || undefined}
          onSelect={setSelectedDuration}
        />
      )}
      
      <div className="mb-6 mt-6">
        <SelectorGroup
          title="Select Date"
          icon={<Calendar size={18} className="mr-2 text-hotel-gold" />}
          options={[0, 1, 2, 3, 4, 5].map((dayOffset) => {
            const date = new Date();
            date.setDate(date.getDate() + dayOffset);
            return {
              id: date.toDateString(),
              label: format(date, "EEE"),
              sublabel: format(date, "d")
            };
          })}
          selectedId={selectedDate.toDateString()}
          onSelect={(option) => {
            const date = new Date(option.id);
            setSelectedDate(date);
          }}
          columns={3}
        />
      </div>
      
      <div>
        <SelectorGroup
          title="Select Time"
          icon={<Clock size={18} className="mr-2 text-hotel-gold" />}
          options={availableTimes.map((time) => ({
            id: time,
            label: time
          }))}
          selectedId={selectedTime}
          onSelect={handleTimeSelect}
          columns={3}
        />
      </div>
    </motion.div>
  );

  const renderSpecialistSelection = () => (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white rounded-xl shadow-sm p-6"
    >
      <Button 
        variant="ghost" 
        size="sm" 
        className="mb-4" 
        onClick={() => setStep("datetime")}
      >
        ← Back to Date & Time
      </Button>
      
      <div className="text-center mb-4">
        <h3 className="text-lg font-playfair font-medium text-hotel-burgundy">
          {selectedService?.name}
        </h3>
        <p className="text-sm text-gray-600">
          {format(selectedDate, "MMMM d, yyyy")} at {selectedTime}
        </p>
      </div>
      
      <SelectorGroup
        title="Select Specialist"
        icon={<User size={18} className="mr-2 text-hotel-gold" />}
        options={selectedService?.specialists.map((specialist) => ({
          id: specialist,
          label: specialist,
          sublabel: "Spa Specialist"
        })) || []}
        selectedId={selectedSpecialist}
        onSelect={handleSpecialistSelect}
        columns={1}
      />
    </motion.div>
  );

  const renderExtrasSelection = () => (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white rounded-xl shadow-sm p-6"
    >
      <Button 
        variant="ghost" 
        size="sm" 
        className="mb-4" 
        onClick={() => setStep("specialist")}
      >
        ← Back to Specialist Selection
      </Button>
      
      <div className="text-center mb-4">
        <h3 className="text-lg font-playfair font-medium text-hotel-burgundy">
          {selectedService?.name}
        </h3>
        <p className="text-sm text-gray-600">
          {format(selectedDate, "MMMM d, yyyy")} at {selectedTime}
        </p>
        <p className="text-sm text-gray-600">
          Specialist: {selectedSpecialist}
        </p>
      </div>

      {/* Optional Extras */}
      <div className="mb-6">
        <h4 className="text-sm font-medium text-gray-700 mb-3">Select Extras (Optional)</h4>
        <div className="space-y-2">
          {availableExtras.map((extra) => (
            <div 
              key={extra.id}
              className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
            >
              <div className="flex items-center">
                <Checkbox 
                  id={`extra-${extra.id}`}
                  checked={selectedExtras.includes(extra.id)}
                  onCheckedChange={() => toggleExtra(extra.id)}
                  className="mr-2 data-[state=checked]:bg-hotel-burgundy data-[state=checked]:text-white"
                />
                <div>
                  <label 
                    htmlFor={`extra-${extra.id}`}
                    className="text-sm font-medium cursor-pointer"
                  >
                    {extra.name}
                  </label>
                  <p className="text-xs text-gray-500">{extra.description}</p>
                </div>
              </div>
              <div className="text-right">
                <p className="font-medium text-hotel-burgundy">
                  ${extra.price}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Premium Add-ons */}
      <div className="mb-6">
        <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
          <Gift size={16} className="mr-2 text-hotel-burgundy" /> 
          Suggested Add-ons
        </h4>
        <div className="space-y-3">
          {premiumAddons.map((addon) => (
            <div 
              key={addon.id}
              className={`border rounded-lg p-3 transition-all ${
                selectedAddons.includes(addon.id) 
                  ? "border-hotel-burgundy bg-hotel-burgundy/5" 
                  : "border-gray-200"
              }`}
            >
              <div className="flex gap-3">
                <div className="w-16 h-16 rounded-md overflow-hidden shrink-0">
                  <img 
                    src={addon.image} 
                    alt={addon.name}
                    className="w-full h-full object-cover" 
                  />
                </div>
                <div className="flex-1">
                  <div className="flex justify-between">
                    <h3 className="font-medium">{addon.name}</h3>
                    <span className="text-hotel-burgundy font-medium">${addon.price}</span>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{addon.description}</p>
                  <Button
                    type="button"
                    size="sm"
                    onClick={() => toggleAddon(addon.id)}
                    variant={selectedAddons.includes(addon.id) ? "outline" : "default"}
                    className={
                      selectedAddons.includes(addon.id) 
                        ? "border-hotel-burgundy text-hotel-burgundy" 
                        : "bg-hotel-burgundy text-white"
                    }
                  >
                    {selectedAddons.includes(addon.id) ? "Remove" : "Add to Booking"}
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Promo Code */}
      <div className="mb-6">
        <h4 className="text-sm font-medium text-gray-700 mb-2">Promo Code</h4>
        <div className="flex gap-2">
          <div className="relative flex-1">
            <Tag className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <input
              type="text"
              placeholder="Enter promo code"
              value={promoCode}
              onChange={(e) => setPromoCode(e.target.value)}
              className="pl-9 w-full p-2.5 border border-gray-200 rounded-lg focus:ring-2 focus:ring-hotel-burgundy focus:border-transparent"
              disabled={!!appliedPromo}
            />
          </div>
          {appliedPromo ? (
            <Button
              type="button"
              variant="outline"
              onClick={handleRemovePromoCode}
              className="shrink-0"
            >
              <XCircle className="mr-1 h-4 w-4" />
              Remove
            </Button>
          ) : (
            <Button
              type="button"
              onClick={handleApplyPromoCode}
              className="bg-hotel-burgundy text-white shrink-0"
            >
              Apply
            </Button>
          )}
        </div>
        
        {appliedPromo && (
          <div className="flex items-center mt-2 text-green-600 text-sm">
            <CheckCircle className="h-4 w-4 mr-1" />
            {appliedPromo.type === "percentage" 
              ? `${appliedPromo.value}% discount applied` 
              : `$${appliedPromo.value} discount applied`}
          </div>
        )}
      </div>

      {/* Price Summary */}
      <div className="border-t border-gray-100 pt-4 mt-4">
        <h4 className="font-medium text-md mb-2">Price Summary</h4>
        <div className="space-y-1 mb-3">
          <div className="flex justify-between">
            <span>{selectedService?.name}</span>
            <span>${baseServiceCost}</span>
          </div>
          
          {calculateExtrasCost() > 0 && (
            <div className="flex justify-between">
              <span>Selected extras</span>
              <span>${calculateExtrasCost()}</span>
            </div>
          )}
          
          {calculateAddonsCost() > 0 && (
            <div className="flex justify-between">
              <span>Selected add-ons</span>
              <span>${calculateAddonsCost()}</span>
            </div>
          )}
          
          {calculateDiscount() > 0 && (
            <div className="flex justify-between text-green-600">
              <span>Discount</span>
              <span>-${calculateDiscount()}</span>
            </div>
          )}
        </div>
        
        <div className="flex justify-between font-semibold text-lg pt-2 border-t border-gray-100">
          <span>Total</span>
          <span className="text-hotel-burgundy">${totalPrice}</span>
        </div>
        
        <div className="mt-2 bg-amber-50 p-2 rounded-lg flex items-center text-amber-700 text-sm">
          <Award className="h-4 w-4 mr-1 text-amber-500" />
          Earn {loyaltyPoints} loyalty points with this booking
        </div>
      </div>

      <Button
        className="w-full py-3 mt-6 bg-hotel-burgundy text-white"
        onClick={handleBooking}
      >
        Book for ${totalPrice}
      </Button>
    </motion.div>
  );

  const renderConfirmation = () => (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3 }}
    >
      <BookingConfirmation
        bookingType="spa"
        confirmationCode={bookingConfirmation.confirmationCode}
        title={selectedService?.name || ""}
        date={bookingConfirmation.date}
        time={bookingConfirmation.time}
        location="Spa & Wellness Center"
        details={`Specialist: ${bookingConfirmation.specialist}`}
        name="John Doe" // This would come from user profile
        contact="+1 (555) 123-4567" // This would come from user profile
        email="johndoe@example.com" // This would come from user profile
      />
      
      <div className="mt-6 text-center">
        <Button 
          onClick={handleBackToServices}
          className="bg-hotel-burgundy hover:bg-hotel-burgundy/90 text-white"
        >
          Book Another Service
        </Button>
      </div>
    </motion.div>
  );

  const renderStepContent = () => {
    switch (step) {
      case "service":
        return renderServiceSelection();
      case "datetime":
        return renderDateTimeSelection();
      case "specialist":
        return renderSpecialistSelection();
      case "extras":
        return renderExtrasSelection();
      case "confirmation":
        return renderConfirmation();
      default:
        return renderServiceSelection();
    }
  };

  return (
    <MobileLayout title="Spa Services" showBackButton>
      <div className="p-4">
        {renderStepContent()}
      </div>
    </MobileLayout>
  );
};

export default SpaServices;
</file>

<file path="src/pages/Home.tsx">
import React from "react";
import { Link } from "react-router-dom";
import { motion } from "framer-motion";
import { MobileLayout } from "@/components/ui/mobile-layout";
import { PromoItem, PromotionalBanner } from "@/components/ui/promotional-banner";
import { ServiceMenu } from "@/components/ui/service-menu";
import { Bed, Calendar, UtensilsCrossed, LayoutGrid, Award, Flower2, Sparkles } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";

const promoItems: PromoItem[] = [
  {
    id: "promo1",
    image: "https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?auto=format&fit=crop&q=80&w=500",
    title: "Summer Getaway",
    description: "30% off on all suites for stays in June",
    buttonText: "Book Now",
    link: "/rooms",
  },
  {
    id: "promo2",
    image: "https://images.unsplash.com/photo-1540555700478-4be289fbecef?auto=format&fit=crop&q=80&w=500",
    title: "Spa Weekend",
    description: "Book any treatment and get a free 30min massage",
    buttonText: "View Offers",
    link: "/spa",
  },
  {
    id: "promo3",
    image: "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?auto=format&fit=crop&q=80&w=500",
    title: "Gourmet Experience",
    description: "5-course tasting menu with wine pairing",
    buttonText: "Reserve",
    link: "/restaurant",
  },
];

const serviceItems = [
  {
    id: "service1",
    title: "Luxury Suites",
    description: "Experience ultimate comfort",
    icon: <Bed size={26} strokeWidth={2} />,
    path: "/rooms",
  },
  {
    id: "service2",
    title: "Wellness Spa",
    description: "Rejuvenate your senses",
    icon: <Flower2 size={26} strokeWidth={2} />,
    path: "/spa",
  },
  {
    id: "service3",
    title: "Exclusive Events",
    description: "Memorable experiences await",
    icon: <Calendar size={26} strokeWidth={2} />,
    path: "/events",
  },
  {
    id: "service4",
    title: "Fine Dining",
    description: "Culinary excellence served",
    icon: <UtensilsCrossed size={26} strokeWidth={2} />,
    path: "/restaurant",
  },
  {
    id: "service5",
    title: "Grand Hall",
    description: "Perfect venue for occasions",
    icon: <LayoutGrid size={26} strokeWidth={2} />,
    path: "/meeting-hall",
  },
  {
    id: "service6",
    title: "Elite Rewards",
    description: "Exclusive member benefits",
    icon: <Award size={26} strokeWidth={2} />,
    path: "/loyalty",
  },
];

const Home = () => {
  const { user, isAuthenticated } = useAuth();

  return (
    <MobileLayout showLogo>
      <div className="p-6 pb-32">
        {isAuthenticated && user && (
          <motion.div
            initial={{ opacity: 0, y: 15 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4 }}
            className="mb-8"
          >
            <div className="hotel-card p-6 border-2 border-hotel-beige/40">
              <div className="flex items-center">
                <div className="mr-5">
                  {user.profileImage ? (
                    <img
                      src={user.profileImage}
                      alt={user.name}
                      className="w-16 h-16 rounded-full object-cover ring-4 ring-hotel-gold/30"
                    />
                  ) : (
                    <div className="w-16 h-16 rounded-full bg-luxury-gradient text-white flex items-center justify-center text-2xl font-bold font-playfair ring-4 ring-hotel-gold/30">
                      {user.name.charAt(0)}
                    </div>
                  )}
                </div>
                <div className="flex-1">
                  <h2 className="text-xl font-playfair font-bold text-hotel-burgundy mb-1">
                    Welcome back, {user.name.split(" ")[0]}
                  </h2>
                  <div className="flex items-center text-sm text-hotel-charcoal/80 font-montserrat">
                    <div className="flex items-center bg-gold-gradient px-3 py-1 rounded-full">
                      <Award size={16} className="text-hotel-burgundy mr-2" />
                      <span className="font-semibold text-hotel-burgundy">{user.loyaltyPoints} points</span>
                    </div>
                    <span className="mx-3 text-hotel-gold">•</span>
                    <div className="flex items-center">
                      <Sparkles size={16} className="text-hotel-gold mr-1" />
                      <span className="font-semibold capitalize text-hotel-burgundy">{user.tier} Tier</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        )}

        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <PromotionalBanner items={promoItems} />
        </motion.div>

        <motion.div 
          className="my-8"
          initial={{ opacity: 0, y: 15 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <div className="flex items-center mb-6">
            <h2 className="text-2xl font-playfair font-bold text-hotel-burgundy flex-1">
              Luxury Services
            </h2>
            <div className="w-12 h-[2px] bg-gold-gradient rounded-full"></div>
          </div>
          <ServiceMenu items={serviceItems} />
        </motion.div>

        <motion.div 
          className="mt-10"
          initial={{ opacity: 0, y: 15 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-playfair font-bold text-hotel-burgundy">
              Your Reservations
            </h2>
            <Link
              to="/bookings"
              className="text-sm text-hotel-burgundy font-semibold font-montserrat hover:text-hotel-gold transition-colors"
            >
              View All
            </Link>
          </div>

          {isAuthenticated ? (
            <div className="hotel-card p-8 text-center border-2 border-hotel-beige/40">
              <div className="py-8">
                <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-br from-hotel-pearl to-hotel-beige flex items-center justify-center">
                  <Calendar size={40} className="text-hotel-burgundy/60" strokeWidth={1.5} />
                </div>
                <h3 className="text-lg font-playfair font-semibold text-hotel-burgundy mb-2">
                  No Upcoming Reservations
                </h3>
                <p className="text-hotel-charcoal/70 font-montserrat mb-6">
                  Book your next luxury experience with us
                </p>
                <Link to="/rooms">
                  <button className="bg-luxury-gradient text-white py-3 px-8 rounded-2xl font-semibold font-montserrat shadow-luxury hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 border border-hotel-burgundy/20">
                    Reserve Now
                  </button>
                </Link>
              </div>
            </div>
          ) : (
            <div className="hotel-card p-8 text-center border-2 border-hotel-beige/40">
              <div className="py-8">
                <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-br from-hotel-pearl to-hotel-beige flex items-center justify-center">
                  <Award size={40} className="text-hotel-burgundy/60" strokeWidth={1.5} />
                </div>
                <h3 className="text-lg font-playfair font-semibold text-hotel-burgundy mb-2">
                  Join Our Elite Club
                </h3>
                <p className="text-hotel-charcoal/70 font-montserrat mb-6">
                  Sign in to access exclusive reservations and earn luxury rewards
                </p>
                <Link to="/auth/login">
                  <button className="bg-luxury-gradient text-white py-3 px-8 rounded-2xl font-semibold font-montserrat shadow-luxury hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 border border-hotel-burgundy/20">
                    Join Now
                  </button>
                </Link>
              </div>
            </div>
          )}
        </motion.div>
      </div>
    </MobileLayout>
  );
};

export default Home;
</file>

<file path="src/pages/Index.tsx">
// Update this page (the content is just a fallback if you fail to update the page)

const Index = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-xl text-gray-600">Start building your amazing project here!</p>
      </div>
    </div>
  );
};

export default Index;
</file>

<file path="src/pages/NotFound.tsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
</file>

<file path="src/services/api.ts">
//api.ts
import axios, { AxiosInstance, AxiosResponse } from 'axios';

// API Configuration
const API_BASE_URL = 'http://localhost:4000/api';

// Create axios instance
const api: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error) => {
    // Handle token expiration
    if (error.response?.status === 401) {
      localStorage.removeItem('auth_token');
      localStorage.removeItem('parkside_user');
      window.location.href = '/auth/login';
    }

    return Promise.reject(error);
  }
);

export default api;
</file>

<file path="src/services/authService.ts">
//authService.ts
import api from './api';

export interface LoginRequest {
  userName: string;
  password: string;
}

export interface RegisterRequest {
  fullName: string;
  userName: string;
  email: string;
  password: string;
  phone?: string;
  role?: string;
  isStaff?: boolean;
}

export interface AuthResponse {
  success: boolean;
  user: {
    _id: string;
    fullName: string;
    userName: string;
    email: string;
    phone?: string;
    loyaltyPoints: number;
    role: string;
    status: string;
    isStaff: boolean;
    registeredDate: string;
    lastLogin?: string;
  };
  token?: string;
  message?: string;
}

export interface ApiError {
  success: boolean;
  error: string;
  message?: string;
}

class AuthService {
  async login(email: string, password: string): Promise<AuthResponse> {
    try {
      const response = await api.post<AuthResponse>('/users/login', {
        userName: email, // Backend expects userName which is the email
        password,
      });

      if (response.data.success && response.data.user) {
        // Store token if provided
        if (response.data.token) {
          localStorage.setItem('auth_token', response.data.token);
        }

        // Store user data
        localStorage.setItem(
          'parkside_user',
          JSON.stringify(response.data.user)
        );

        return response.data;
      } else {
        throw new Error(response.data.message || 'Login failed');
      }
    } catch (error: unknown) {
      console.error('Login error:', error);

      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as {
          response?: { data?: { error?: string; message?: string } };
        };
        if (axiosError.response?.data?.error) {
          throw new Error(axiosError.response.data.error);
        } else if (axiosError.response?.data?.message) {
          throw new Error(axiosError.response.data.message);
        }
      } else if (error instanceof Error) {
        throw new Error(error.message);
      } else {
        throw new Error('Login failed. Please try again.');
      }
    }
  }

  async register(
    name: string,
    email: string,
    password: string,
    phone?: string
  ): Promise<AuthResponse> {
    try {
      const response = await api.post<AuthResponse>('/users/signup', {
        fullName: name,
        userName: email, // Using email as username
        email,
        password,
        phone: phone || '',
        role: 'Guest',
        isStaff: false,
      });

      if (response.data.success && response.data.user) {
        // Store token if provided
        if (response.data.token) {
          localStorage.setItem('auth_token', response.data.token);
        }

        // Store user data
        localStorage.setItem(
          'parkside_user',
          JSON.stringify(response.data.user)
        );

        return response.data;
      } else {
        throw new Error(response.data.message || 'Registration failed');
      }
    } catch (error: unknown) {
      console.error('Registration error:', error);

      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as {
          response?: { data?: { error?: string; message?: string } };
        };
        if (axiosError.response?.data?.error) {
          throw new Error(axiosError.response.data.error);
        } else if (axiosError.response?.data?.message) {
          throw new Error(axiosError.response.data.message);
        }
      } else if (error instanceof Error) {
        throw new Error(error.message);
      } else {
        throw new Error('Registration failed. Please try again.');
      }
    }
  }

  async validateToken(): Promise<boolean> {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        return false;
      }

      // You can add a token validation endpoint here if your backend supports it
      // For now, we'll assume the token is valid if it exists
      return true;
    } catch (error) {
      console.error('Token validation error:', error);
      return false;
    }
  }

  logout(): void {
    localStorage.removeItem('auth_token');
    localStorage.removeItem('parkside_user');
  }

  getStoredUser() {
    try {
      const storedUser = localStorage.getItem('parkside_user');
      return storedUser ? JSON.parse(storedUser) : null;
    } catch (error) {
      console.error('Error parsing stored user:', error);
      return null;
    }
  }

  async socialLogin(provider: 'google' | 'apple'): Promise<AuthResponse> {
    // This is a placeholder for social login implementation
    // You would integrate with actual OAuth providers here
    throw new Error(
      `${provider} login not implemented yet. Please use email/password login.`
    );
  }
}

export default new AuthService();
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import { BookingProvider } from "./contexts/BookingContext";
import Home from "./pages/Home";
import Onboarding from "./pages/auth/Onboarding";
import Login from "./pages/auth/Login";
import Register from "./pages/auth/Register";
import RoomsList from "./pages/rooms/RoomsList";
import RoomDetail from "./pages/rooms/RoomDetail";
import SpaServices from "./pages/spa/SpaServices";
import BookingsList from "./pages/bookings/BookingsList";
import LoyaltyProgram from "./pages/loyalty/LoyaltyProgram";
import RestaurantPage from "./pages/restaurant/RestaurantPage";
import NotFound from "./pages/NotFound";
import EditProfile from "./pages/profile/EditProfile";
import ProfilePage from "./pages/profile/ProfilePage";
import EventsPage from "./pages/events/EventsPage";
import SettingsPage from "./pages/settings/SettingsPage";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <AuthProvider>
      <BookingProvider>
        <TooltipProvider>
          <Toaster />
          <Sonner />
          <BrowserRouter>
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/auth/onboarding" element={<Onboarding />} />
              <Route path="/auth/login" element={<Login />} />
              <Route path="/auth/register" element={<Register />} />
              <Route path="/rooms" element={<RoomsList />} />
              <Route path="/rooms/:roomId" element={<RoomDetail />} />
              <Route path="/spa" element={<SpaServices />} />
              <Route path="/restaurant" element={<RestaurantPage />} />
              <Route path="/bookings" element={<BookingsList />} />
              <Route path="/loyalty" element={<LoyaltyProgram />} />
              <Route path="/profile" element={<ProfilePage />} />
              <Route path="/profile/edit" element={<EditProfile />} />
              <Route path="/events" element={<EventsPage />} />
              <Route path="/settings" element={<SettingsPage />} />
              <Route path="*" element={<NotFound />} />
            </Routes>
          </BrowserRouter>
        </TooltipProvider>
      </BookingProvider>
    </AuthProvider>
  </QueryClientProvider>
);

export default App;
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600;700&family=Cormorant+Garamond:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 350 77% 32%;
    --primary-foreground: 210 40% 98%;

    --secondary: 43 68% 52%;
    --secondary-foreground: 210 40% 98%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 43 68% 52%;
    --accent-foreground: 350 77% 32%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 350 77% 32%;

    --radius: 1rem;

    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-hotel-light text-foreground;
    font-family: 'Montserrat', sans-serif;
    background: linear-gradient(135deg, #fefcf8 0%, #f8f6f0 100%);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: 'Playfair Display', serif;
  }
}

@layer components {
  .hotel-container {
    @apply max-w-md mx-auto h-full bg-gradient-to-br from-hotel-light to-hotel-pearl overflow-hidden;
  }

  .hotel-heading {
    @apply font-playfair text-hotel-burgundy font-semibold;
  }

  .hotel-subheading {
    @apply font-montserrat text-hotel-charcoal font-medium;
  }

  .hotel-button-primary {
    @apply bg-luxury-gradient text-white hover:shadow-luxury transition-all rounded-2xl py-4 px-8 font-semibold shadow-elegant hover:shadow-lg transform hover:-translate-y-1 active:translate-y-0 duration-300 border border-hotel-burgundy/20;
  }

  .hotel-button-secondary {
    @apply bg-gold-gradient text-hotel-burgundy hover:shadow-gold transition-all rounded-2xl py-4 px-8 font-semibold shadow-elegant hover:shadow-lg transform hover:-translate-y-1 active:translate-y-0 duration-300 border border-hotel-gold/20;
  }

  .hotel-card {
    @apply bg-gradient-to-br from-hotel-pearl to-hotel-cream rounded-2xl shadow-elegant overflow-hidden border border-hotel-beige/30 hover:shadow-luxury transition-all duration-300 backdrop-blur-sm;
  }

  .hotel-input {
    @apply rounded-xl border-2 border-hotel-beige/50 px-4 py-3 bg-hotel-pearl focus:ring-2 focus:ring-hotel-gold focus:border-hotel-gold transition-all duration-300 font-montserrat;
  }

  /* Luxury Background Patterns */
  .pattern-bg {
    background-color: #fefcf8;
    background-image: url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23D4AF37' fill-opacity='0.08'%3E%3Cpath d='M20 20c0-5.5 4.5-10 10-10s10 4.5 10 10-4.5 10-10 10-10-4.5-10-10zm30 0c0-5.5 4.5-10 10-10s10 4.5 10 10-4.5 10-10 10-10-4.5-10-10zM20 50c0-5.5 4.5-10 10-10s10 4.5 10 10-4.5 10-10 10-10-4.5-10-10zm30 0c0-5.5 4.5-10 10-10s10 4.5 10 10-4.5 10-10 10-10-4.5-10-10z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    background-attachment: fixed;
  }

  .bg-pattern-home {
    background: linear-gradient(135deg, #fefcf8 0%, #f8f6f0 100%);
    background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M25 25c2.8 0 5-2.2 5-5s-2.2-5-5-5-5 2.2-5 5 2.2 5 5 5zm50 0c2.8 0 5-2.2 5-5s-2.2-5-5-5-5 2.2-5 5 2.2 5 5 5zm-50 50c2.8 0 5-2.2 5-5s-2.2-5-5-5-5 2.2-5 5 2.2 5 5 5zm50 0c2.8 0 5-2.2 5-5s-2.2-5-5-5-5 2.2-5 5 2.2 5 5 5z' fill='%23D4AF37' fill-opacity='0.06' fill-rule='evenodd'/%3E%3C/svg%3E");
    background-attachment: fixed;
  }

  .restaurant-pattern-bg {
    background: linear-gradient(135deg, #fefcf8 0%, #f5f3f0 100%);
    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%238B1538' fill-opacity='0.05'%3E%3Cpath d='M30 30c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6c0 3.3-2.7 6-6 6s-6-2.7-6-6 2.7-6 6-6zm-6-6c3.3 0 6-2.7 6-6s-2.7-6-6-6-6 2.7-6 6 2.7 6 6 6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    background-attachment: fixed;
  }

  .spa-pattern-bg {
    background: linear-gradient(135deg, #f8f6f0 0%, #f0ebe0 100%);
    background-image: url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23C9A96E' fill-opacity='0.06'%3E%3Cpath d='M40 40c0-6.6 5.4-12 12-12s12 5.4 12 12-5.4 12-12 12c0 6.6-5.4 12-12 12s-12-5.4-12-12 5.4-12 12-12zM16 16c0-6.6 5.4-12 12-12s12 5.4 12 12-5.4 12-12 12c0 6.6-5.4 12-12 12S4 34.6 4 28s5.4-12 12-12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    background-attachment: fixed;
  }

  .loyalty-pattern-bg {
    background: linear-gradient(135deg, #f8f6f0 0%, #e8d5b7 100%);
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='88' height='24' viewBox='0 0 88 24'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='autumn' fill='%23D4AF37' fill-opacity='0.08'%3E%3Cpath d='M10 0l30 15 2 1V2.18A10 10 0 0 0 41.76 0H39.7a8 8 0 0 1 .3 2.18v10.58L14.47 0H10zm31.76 24a10 10 0 0 0-5.29-6.76L4 1 2 0v13.82a10 10 0 0 0 5.53 8.94L10 24h4.47l-6.05-3.02A8 8 0 0 1 4 13.82V3.24l31.58 15.78A8 8 0 0 1 39.7 24h2.06z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    background-attachment: fixed;
  }

  .bookings-pattern-bg {
    background: linear-gradient(135deg, #fefcf8 0%, #f0ebe0 100%);
    background-image: url("data:image/svg+xml,%3Csvg width='42' height='44' viewBox='0 0 42 44' xmlns='http://www.w3.org/2000/svg'%3E%3Cg id='Page-1' fill='none' fill-rule='evenodd'%3E%3Cg id='brick-wall' fill='%238B1538' fill-opacity='0.04'%3E%3Cpath d='M0 0h42v44H0V0zm1 1h40v20H1V1zM0 23h20v20H0V23zm22 0h20v20H22V23z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    background-attachment: fixed;
  }

  .glass-card {
    @apply bg-gradient-to-br from-hotel-pearl/90 to-hotel-cream/80 backdrop-blur-md border border-hotel-beige/30 rounded-2xl shadow-elegant hover:shadow-luxury transition-all duration-300;
  }

  .gradient-border {
    @apply relative rounded-2xl overflow-hidden;
  }

  .gradient-border::before {
    content: '';
    @apply absolute inset-0 z-[-1] p-[2px] rounded-2xl bg-gradient-to-r from-hotel-burgundy via-hotel-gold to-hotel-burgundy;
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask: linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
  }

  .luxury-shimmer {
    position: relative;
    overflow: hidden;
  }

  .luxury-shimmer::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    animation: shimmer 2s infinite;
  }

  .fade-in {
    animation: fadeIn 0.6s ease-in-out;
  }

  .slide-up {
    animation: slideUp 0.6s ease-in-out;
  }

  .slide-in-right {
    animation: slideInRight 0.6s ease-in-out;
  }

  .toggle-input {
    @apply appearance-none w-14 rounded-full bg-hotel-beige h-7 shadow-inner transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-hotel-gold focus:ring-opacity-50 checked:bg-hotel-burgundy relative;
  }

  .toggle-input:checked::before {
    @apply translate-x-7;
  }

  .toggle-input::before {
    content: '';
    @apply absolute left-0.5 top-0.5 bg-white w-6 h-6 rounded-full shadow-md transform transition-transform duration-300;
  }

  /* Luxury Button Styles */
  .btn-luxury {
    @apply bg-luxury-gradient text-white font-semibold py-3 px-8 rounded-2xl shadow-elegant hover:shadow-luxury transform hover:-translate-y-1 active:translate-y-0 transition-all duration-300 border border-hotel-burgundy/20 relative overflow-hidden;
  }

  .btn-luxury::before {
    content: '';
    @apply absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full transition-transform duration-700;
  }

  .btn-luxury:hover::before {
    @apply translate-x-full;
  }

  .btn-gold {
    @apply bg-gold-gradient text-hotel-burgundy font-semibold py-3 px-8 rounded-2xl shadow-elegant hover:shadow-gold transform hover:-translate-y-1 active:translate-y-0 transition-all duration-300 border border-hotel-gold/20 relative overflow-hidden;
  }

  .btn-gold::before {
    content: '';
    @apply absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full transition-transform duration-700;
  }

  .btn-gold:hover::before {
    @apply translate-x-full;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideUp {
  from {
    transform: translateY(30px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideInRight {
  from {
    transform: translateX(30px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}
</file>

<file path="src/main.tsx">
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="AUTHENTICATION_INTEGRATION.md">
# Backend Authentication Integration Guide

## What was changed:

### 1. Created API Service Layer

- **File**: `src/services/api.ts`
- Sets up axios instance with interceptors for token handling
- Handles automatic token attachment to requests
- Manages token expiration and logout

### 2. Created Authentication Service

- **File**: `src/services/authService.ts`
- Handles all API calls for login, register, logout
- Maps backend user data to frontend format
- Manages token and user data storage

### 3. Updated AuthContext

- **File**: `src/contexts/AuthContext.tsx`
- Removed all mock data and simulations
- Now uses real API calls through authService
- Added proper error handling and loading states
- Maps backend user format to frontend User interface

## Key Features Added:

### ✅ Real Backend Authentication

- Login: `POST /api/users/login`
- Register: `POST /api/users/signup`
- Token-based authentication
- Persistent sessions across app restarts

### ✅ Error Handling

- Network errors
- Invalid credentials
- Backend validation errors
- Token expiration handling

### ✅ Security Features

- Automatic token attachment to requests
- Token validation on app startup
- Secure logout (clears all stored data)
- Auto-logout on token expiration

## How to Test:

### 1. Start your backend server

```bash
cd Backend
npm start  # Should run on http://localhost:4000
```

### 2. Test Login with existing user

Use the signup endpoint first or use existing users in your database:

- Email: any valid email in your database
- Password: the actual password for that user

### 3. Test Registration

- Use any new email/password combination
- Will create a new user in your database

### 4. Check Network Tab

- Open browser dev tools
- Watch for actual API calls to your backend
- Should see POST requests to `/api/users/login` and `/api/users/signup`

## Social Login Note:

- Google/Apple buttons will show an error message
- Implement real OAuth integration if needed
- Currently throws: "Google/Apple login not implemented yet"

## Next Steps for Production:

1. Add JWT token refresh mechanism
2. Implement real OAuth for social login
3. Add biometric authentication for mobile
4. Add offline support with token caching
5. Implement proper error retry mechanisms

The authentication is now fully integrated with your backend!
</file>

<file path="capacitor.config.ts">
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'app.lovable.bfe6eadf793c43dc99dd7b48463302f1',
  appName: 'Parkside Plaza Hotel',
  webDir: 'dist',
  server: {
    url: 'https://bfe6eadf-793c-43dc-99dd-7b48463302f1.lovableproject.com?forceHideBadge=true',
    cleartext: true
  },
  plugins: {
    SplashScreen: {
      launchShowDuration: 2000,
      backgroundColor: "#6B0F1A",
      splashFullScreen: true,
      splashImmersive: true
    },
  }
};

export default config;
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Parkside Plaza Hotel</title>
    <meta name="description" content="Luxury hotel mobile app experience" />
    <meta name="author" content="Lovable" />

    <meta property="og:title" content="aura-hotel-concierge" />
    <meta property="og:description" content="Lovable Generated Project" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@capacitor/android": "^7.2.0",
    "@capacitor/cli": "^7.2.0",
    "@capacitor/core": "^7.2.0",
    "@capacitor/ios": "^7.2.0",
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "@types/uuid": "^10.0.0",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.3.0",
    "framer-motion": "^12.7.3",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "qrcode.react": "^4.2.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.55.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "swiper": "^11.2.6",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/bfe6eadf-793c-43dc-99dd-7b48463302f1

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/bfe6eadf-793c-43dc-99dd-7b48463302f1) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/bfe6eadf-793c-43dc-99dd-7b48463302f1) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				// Luxurious color palette
				hotel: {
					burgundy: '#8B1538', // Deep luxurious red
					'burgundy-light': '#A8496B',
					'burgundy-dark': '#6B0F1A',
					gold: '#D4AF37', // Rich gold
					'gold-light': '#E6C866',
					'gold-dark': '#B8941F',
					cream: '#F8F6F0', // Warm cream
					'cream-dark': '#F0EBE0',
					beige: '#E8D5B7', // Sophisticated beige
					'beige-light': '#F2E8D5',
					'beige-dark': '#D4C4A8',
					sand: '#C9A96E', // Sand gold
					'sand-light': '#D9BD87',
					'sand-dark': '#B8965A',
					charcoal: '#2C2C2C',
					light: '#FEFCF8',
					pearl: '#F5F3F0', // Pearl white
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				}
			},
			fontFamily: {
				playfair: ['Playfair Display', 'serif'],
				montserrat: ['Montserrat', 'sans-serif'],
				cormorant: ['Cormorant Garamond', 'serif'],
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			backgroundImage: {
				'luxury-gradient': 'linear-gradient(135deg, #8B1538 0%, #D4AF37 100%)',
				'gold-gradient': 'linear-gradient(135deg, #D4AF37 0%, #E6C866 100%)',
				'burgundy-gradient': 'linear-gradient(135deg, #8B1538 0%, #A8496B 100%)',
				'cream-gradient': 'linear-gradient(135deg, #F8F6F0 0%, #F0EBE0 100%)',
			},
			boxShadow: {
				'luxury': '0 8px 32px rgba(139, 21, 56, 0.12)',
				'gold': '0 4px 20px rgba(212, 175, 55, 0.15)',
				'elegant': '0 2px 16px rgba(44, 44, 44, 0.08)',
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					'0%': { opacity: '0' },
					'100%': { opacity: '1' }
				},
				'fade-out': {
					'0%': { opacity: '1' },
					'100%': { opacity: '0' }
				},
				'slide-up': {
					'0%': { transform: 'translateY(20px)', opacity: '0' },
					'100%': { transform: 'translateY(0)', opacity: '1' }
				},
				'slide-down': {
					'0%': { transform: 'translateY(-20px)', opacity: '0' },
					'100%': { transform: 'translateY(0)', opacity: '1' }
				},
				'slide-in-right': {
					'0%': { transform: 'translateX(20px)', opacity: '0' },
					'100%': { transform: 'translateX(0)', opacity: '1' }
				},
				'slide-in-left': {
					'0%': { transform: 'translateX(-20px)', opacity: '0' },
					'100%': { transform: 'translateX(0)', opacity: '1' }
				},
				'scale-in': {
					'0%': { transform: 'scale(0.95)', opacity: '0' },
					'100%': { transform: 'scale(1)', opacity: '1' }
				},
				'shimmer': {
					'0%': { transform: 'translateX(-100%)' },
					'100%': { transform: 'translateX(100%)' }
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.5s ease-out',
				'fade-out': 'fade-out 0.5s ease-out',
				'slide-up': 'slide-up 0.5s ease-out',
				'slide-down': 'slide-down 0.5s ease-out',
				'slide-in-right': 'slide-in-right 0.5s ease-out',
				'slide-in-left': 'slide-in-left 0.5s ease-out',
				'scale-in': 'scale-in 0.3s ease-out',
				'shimmer': 'shimmer 2s infinite',
				'enter': 'fade-in 0.3s ease-out, scale-in 0.2s ease-out',
				'hover-lift': 'hover-lift 0.3s ease forwards'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));
</file>

</files>

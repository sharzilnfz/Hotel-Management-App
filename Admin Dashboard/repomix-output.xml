This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  placeholder.svg
  robots.txt
src/
  components/
    Admin/
      Auth/
        AuthGuard.tsx
      Availability/
        AvailabilityCalendar.tsx
      Common/
        ConfirmDeleteModal.tsx
      ContentManagement/
        ContentManagementDashboard.tsx
      Dashboard/
        AdminDashboard.tsx
        AdminDashboardContent.tsx
      Events/
        AddEventForm.tsx
        EditEventForm.tsx
        EditEventModal.tsx
        EventManagementContent.tsx
        EventsBookingsContent.tsx
        EventsManagementContent.tsx
        EventsReportsContent.tsx
        QrCodeScanner.tsx
      Housekeeping/
        HousekeepingReports.tsx
        RoomStatusDashboard.tsx
        ScheduleManagement.tsx
        StaffManagement.tsx
        SuppliesManagement.tsx
        TaskManagement.tsx
      Layout/
        AdminHeader.tsx
        AdminLayout.tsx
        AdminSidebar.tsx
      Loyalty/
        AddRewardModal.tsx
        AddTierModal.tsx
        EditRewardModal.tsx
        EditTierModal.tsx
        LoyaltyManagementContent.tsx
        LoyaltyReports.tsx
      MeetingHall/
        MeetingHallContent.tsx
      PromoCode/
        PromoCodeContent.tsx
      Refunds/
        RefundsContent.tsx
      Reports/
        ReportsContent.tsx
      Restaurant/
        AddMenuItemForm.tsx
        DeleteMenuItemModal.tsx
        EditMenuItemForm.tsx
        EditMenuItemModal.tsx
        MenuCategoriesContent.tsx
        MenuItemList.tsx
        RestaurantManagementContent.tsx
        RestaurantOrdersContent.tsx
        RestaurantReportsContent.tsx
        RestaurantTablesContent.tsx
      Rooms/
        RoomsReportsContent.tsx
      Settings/
        AppPageSettings.tsx
        NotificationManager.tsx
        PlatformVisibilitySettings.tsx
        SettingsContent.tsx
      Spa/
        AddSpaServiceForm.tsx
        AddSpecialistForm.tsx
        SpaBookingsContent.tsx
        SpaCategoriesContent.tsx
        SpaManagementContent.tsx
        SpaReportsContent.tsx
      Staff/
        AddAccessLevelContent.tsx
        AddDepartmentContent.tsx
        AddRoleContent.tsx
        AddStaffMemberForm.tsx
        DeleteStaffModal.tsx
        EditStaffModal.tsx
        StaffManagementContent.tsx
        StaffManagementPage.tsx
      Tax/
        TaxSettingsContent.tsx
      Users/
        UserBookings.tsx
        UserEditForm.tsx
        UserProfile.tsx
        UsersManagementContent.tsx
    Events/
      EventCard.tsx
      EventsList.tsx
    Home/
      FeaturedCard.tsx
      HomeScreen.tsx
      ServiceCard.tsx
    Layout/
      AppLayout.tsx
      BottomNavigation.tsx
    Loyalty/
      LoyaltyDashboard.tsx
    Restaurant/
      MenuCategories.tsx
      MenuItem.tsx
    Rooms/
      RoomBookingForm.tsx
      RoomCard.tsx
      RoomsList.tsx
    Spa/
      SpaServiceCard.tsx
      SpaServicesList.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      charts.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      date-range-picker.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
  contexts/
    SearchContext.tsx
  hooks/
    use-mobile.tsx
    use-toast.ts
  lib/
    utils.ts
  pages/
    Admin/
      Availability/
        AvailabilityManagementPage.tsx
      ContentManagement/
        ContentManagementPage.tsx
      Events/
        AddEventPage.tsx
        EventsBookingsPage.tsx
        EventsManagementPage.tsx
        EventsReportsPage.tsx
        EventsScannerPage.tsx
      Housekeeping/
        HousekeepingPage.tsx
        ReportsPage.tsx
        SchedulePage.tsx
        StaffManagementPage.tsx
        SuppliesPage.tsx
        TaskManagementPage.tsx
      Loyalty/
        LoyaltyManagementPage.tsx
      MeetingHall/
        MeetingHallPage.tsx
      PromoCode/
        PromoCodePage.tsx
      Refunds/
        RefundsPage.tsx
      Reports/
        ReportsPage.tsx
      Restaurant/
        AddMenuItemPage.tsx
        MenuCategoriesPage.tsx
        RestaurantManagementPage.tsx
        RestaurantOrdersPage.tsx
        RestaurantReportsPage.tsx
        RestaurantTablesPage.tsx
      Rooms/
        AddRoomPage.tsx
        EditRoomPage.tsx
        RoomBookingsPage.tsx
        RoomsManagementPage.tsx
        RoomsReportsPage.tsx
      Settings/
        SettingsPage.tsx
      Spa/
        AddServicePage.tsx
        AddSpecialistPage.tsx
        EditServicePage.tsx
        SpaBookingsPage.tsx
        SpaCategoriesPage.tsx
        SpaManagementPage.tsx
        SpaReportsPage.tsx
      Staff/
        AddAccessLevelPage.tsx
        AddDepartmentPage.tsx
        AddRolePage.tsx
        AddStaffMemberPage.tsx
        StaffManagementPage.tsx
      Tax/
        TaxSettingsPage.tsx
      Users/
        UsersManagementPage.tsx
      AdminDashboardPage.tsx
      AdminLoginPage.tsx
    DownloadAppPage.tsx
    EventsPage.tsx
    Index.tsx
    LoyaltyPage.tsx
    NotFound.tsx
    RestaurantPage.tsx
    RoomsPage.tsx
    SpaPage.tsx
  services/
    contentService.ts
    loyaltyService.ts
    menuItemService.ts
    restaurantService.ts
    roomService.ts
    spaService.ts
    staffService.ts
    userService.ts
  types/
    restaurant.ts
    staff.ts
    user.ts
    utils.d.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="public/robots.txt">
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /
</file>

<file path="src/components/Admin/Auth/AuthGuard.tsx">
import { ReactNode, useEffect, useState } from "react";
import { Navigate, useLocation } from "react-router-dom";
import { toast } from "sonner";

interface AuthGuardProps {
  children: ReactNode;
  requiredRoles?: string[];
  requiredDepartments?: string[];
}

interface UserData {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

const AuthGuard = ({ children, requiredRoles, requiredDepartments }: AuthGuardProps) => {
  const location = useLocation();
  const [isAuthorized, setIsAuthorized] = useState<boolean | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [authReason, setAuthReason] = useState<string | null>(null);

  useEffect(() => {
    const checkAuth = () => {
      // Reset authorization state at the beginning of each check
      setIsAuthorized(null);
      
      const userDataString = localStorage.getItem("currentUser");
      
      if (!userDataString) {
        setIsAuthorized(false);
        setAuthReason("You must be logged in to access this area");
        return;
      }

      try {
        const userData: UserData = JSON.parse(userDataString);
        setUserData(userData);
        
        // Full access can access everything
        if (userData.accessLevel === "Full Access") {
          setIsAuthorized(true);
          return;
        }
        
        // Department-based access check first (most restrictive)
        if (requiredDepartments && requiredDepartments.length > 0) {
          if (!requiredDepartments.includes(userData.department)) {
            setIsAuthorized(false);
            setAuthReason(`Access denied: This section is restricted to ${requiredDepartments.join(", ")} department`);
            toast.error(`Access denied: This section is restricted to ${requiredDepartments.join(", ")} department`);
            return;
          }
        }
        
        // Role-based access check
        if (requiredRoles && requiredRoles.length > 0) {
          if (!requiredRoles.includes(userData.role)) {
            setIsAuthorized(false);
            setAuthReason(`Access denied: This section requires ${requiredRoles.join(" or ")} role`);
            toast.error(`Access denied: This section requires ${requiredRoles.join(" or ")} role`);
            return;
          }
        }
        
        // If we've reached this point and there are specific role or department requirements,
        // check if the user has sufficient access level
        if ((requiredRoles && requiredRoles.length > 0) || (requiredDepartments && requiredDepartments.length > 0)) {
          // Administrative access can access most things except those requiring Administrator role
          if (userData.accessLevel === "Administrative" && (!requiredRoles || !requiredRoles.includes("Administrator"))) {
            setIsAuthorized(true);
            return;
          }
          
          // Standard access and Limited access users can only access their department areas
          // which we've already checked above in the department check
          if (userData.accessLevel === "Standard" || userData.accessLevel === "Limited") {
            setIsAuthorized(true);
            return;
          }
        } else {
          // If there are no specific requirements, all logged-in users can access
          setIsAuthorized(true);
          return;
        }
        
        // Default deny only if we haven't already authorized by this point
        setIsAuthorized(false);
        setAuthReason("You don't have sufficient permissions to access this area");
      } catch (error) {
        console.error("Error parsing user data:", error);
        setIsAuthorized(false);
        setAuthReason("Invalid user session. Please log in again.");
        return;
      }
    };
    
    checkAuth();
  }, [location.pathname, requiredRoles, requiredDepartments]);
  
  if (isAuthorized === null) {
    // Still checking authorization
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]" role="status">
            <span className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
          </div>
          <p className="mt-2 text-gray-600">Verifying access permissions...</p>
        </div>
      </div>
    );
  }
  
  if (!isAuthorized) {
    // Show access denied message with reason
    return (
      <Navigate 
        to="/admin-login" 
        state={{ 
          from: location.pathname,
          reason: authReason || "You don't have permission to access this area"
        }} 
        replace 
      />
    );
  }
  
  return <>{children}</>;
};

export default AuthGuard;
</file>

<file path="src/components/Admin/Availability/AvailabilityCalendar.tsx">
import { useState, useEffect, useCallback } from "react";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ChevronLeft, ChevronRight, Plus, Minus, Calendar as CalendarIcon } from "lucide-react";
import { format, addMonths, subMonths, parseISO, isSameDay, addDays, subDays, isBefore, isAfter, eachDayOfInterval } from "date-fns";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { DateRange } from "react-day-picker";
import axios from "axios";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Input } from "@/components/ui/input";

// Types for availability tracking
type ServiceType = "room" | "spa" | "restaurant" | "specialist";
type AvailabilityRecord = {
  date: Date;
  available: number;
  total: number;
  bookings: number;
};

type AvailabilityMap = Record<string, AvailabilityRecord>;

interface AvailabilityCalendarProps {
  serviceType: ServiceType;
  initialCapacity: number;
  name: string;
  serviceId?: string; // Optional since we're keeping the original design that doesn't use serviceId
}

// Use environment variable or fallback for API URL
const API_URL = "http://localhost:4000/api";

const AvailabilityCalendar = ({ serviceType, initialCapacity, name, serviceId }: AvailabilityCalendarProps) => {
  // Set initial date state using a dynamic current date instead of hardcoded value
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [month, setMonth] = useState<Date>(() => new Date());
  const [availabilityData, setAvailabilityData] = useState<AvailabilityMap>({});
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isUpdating, setIsUpdating] = useState<boolean>(false);
  const [selectedDateAvailability, setSelectedDateAvailability] = useState<AvailabilityRecord>({
    date: new Date(),
    available: initialCapacity,
    total: initialCapacity,
    bookings: 0
  });
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: undefined,
    to: undefined,
  });
  const [isDateRangeMode, setIsDateRangeMode] = useState<boolean>(false);
  const [bulkUpdateAction, setBulkUpdateAction] = useState<string>("block");
  const [customAvailability, setCustomAvailability] = useState<string>(initialCapacity.toString());
  const [directAvailabilityInput, setDirectAvailabilityInput] = useState<string>(initialCapacity.toString());

  // Get date key in yyyy-MM-dd format
  const getDateKey = (date: Date) => format(date, 'yyyy-MM-dd');

  // Fetch availability data for the current month
  const fetchAvailabilityData = useCallback(async () => {
    // If serviceId is not provided, use mock data
    if (!serviceId) {
      generateMockData();
      return;
    }

    try {
      setIsLoading(true);
      const monthNumber = month.getMonth() + 1; // JavaScript months are 0-indexed
      const yearNumber = month.getFullYear();

      const response = await axios.get(`${API_URL}/availability/${serviceType}/${serviceId}`, {
        params: { month: monthNumber, year: yearNumber }
      });

      if (response.data.success) {
        setAvailabilityData(response.data.data.availability || {});
      } else {
        console.error('Error in response:', response.data);
        // Use mock data with full availability instead of random availability
        generateMockData();
      }
    } catch (error) {
      console.error('Error fetching availability data:', error);
      // Use mock data with full availability instead of random availability
      generateMockData();
    } finally {
      setIsLoading(false);
    }
  }, [month, serviceId, serviceType, initialCapacity]);

  // Generate mock data for the current month
  const generateMockData = useCallback(() => {
    const mockData: AvailabilityMap = {};
    const daysInMonth = new Date(month.getFullYear(), month.getMonth() + 1, 0).getDate();

    for (let day = 1; day <= daysInMonth; day++) {
      const currentDate = new Date(month.getFullYear(), month.getMonth(), day);
      const key = getDateKey(currentDate);

      // Set all rooms as available instead of random values
      mockData[key] = {
        date: currentDate,
        available: initialCapacity,
        total: initialCapacity,
        bookings: 0
      };
    }

    setAvailabilityData(mockData);
  }, [month, initialCapacity]);

  // Get availability for a specific date
  const getAvailability = useCallback((day: Date): AvailabilityRecord => {
    const key = getDateKey(day);

    if (availabilityData[key]) {
      return availabilityData[key];
    }

    // Return default values if no data exists for this date - all rooms available
    return {
      date: day,
      available: initialCapacity,
      total: initialCapacity,
      bookings: 0
    };
  }, [availabilityData, initialCapacity]);

  // Effect to fetch data when month changes or when initialCapacity or serviceId changes
  useEffect(() => {
    fetchAvailabilityData();
  }, [fetchAvailabilityData]);

  // Force synchronization between selectedDate and selectedDateAvailability
  useEffect(() => {
    // Update the details panel whenever selectedDate changes
    const availability = getAvailability(selectedDate);

    setSelectedDateAvailability({
      date: new Date(selectedDate.getTime()),
      total: availability.total,
      available: availability.available,
      bookings: availability.bookings
    });
    
    // Update the direct input field to match the selected date availability
    setDirectAvailabilityInput(availability.available.toString());
  }, [selectedDate, getAvailability]);

  // Update the selected date availability when selectedDate or availability data changes
  useEffect(() => {
    // Only update if availabilityData changes and it affects the current selected date
    const currentDateKey = getDateKey(selectedDate);
    if (availabilityData[currentDateKey]) {
      const currentAvailability = availabilityData[currentDateKey];
      setSelectedDateAvailability({
        date: new Date(selectedDate.getTime()),
        total: currentAvailability.total,
        available: currentAvailability.available,
        bookings: currentAvailability.bookings
      });
      
      // Update the direct input field
      setDirectAvailabilityInput(currentAvailability.available.toString());
    }
  }, [availabilityData, selectedDate]);

  // Update local state for + and - buttons
  const updateLocalCount = (change: number) => {
    const newAvailable = selectedDateAvailability.available + change;

    // Ensure we can't go below 0 or above total
    const updatedAvailable = Math.max(0, Math.min(initialCapacity, newAvailable));

    // Only update local UI state, don't send to server
    setSelectedDateAvailability(prev => ({
      ...prev,
      available: updatedAvailable,
      bookings: prev.total - updatedAvailable
    }));
    
    // Update the direct input field to match
    setDirectAvailabilityInput(updatedAvailable.toString());
  };

  // Only update server when explicitly submitting
  const submitAvailabilityUpdate = async () => {
    // If serviceId is not provided, just update local state
    if (!serviceId) {
      return;
    }

    try {
      setIsUpdating(true);
      const dateKey = getDateKey(selectedDate);

      const response = await axios.put(`${API_URL}/availability/${serviceType}/${serviceId}`, {
        date: dateKey,
        available: selectedDateAvailability.available
      });

      if (response.data.success) {
        // Update the availabilityData state to match what's now in selectedDateAvailability
        const key = getDateKey(selectedDate);
        setAvailabilityData(prev => ({
          ...prev,
          [key]: selectedDateAvailability
        }));
      } else {
        console.error('Error in response:', response.data);
      }
    } catch (error) {
      console.error('Error updating availability:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  // Block an entire day
  const handleBlockDay = async () => {
    // Update the local state first
    setSelectedDateAvailability(prev => ({
      ...prev,
      available: 0,
      bookings: prev.total
    }));

    // If serviceId is not provided, just update local state
    if (!serviceId) {
      return;
    }

    try {
      setIsUpdating(true);
      const dateKey = getDateKey(selectedDate);

      const response = await axios.put(`${API_URL}/availability/${serviceType}/${serviceId}/block`, {
        date: dateKey
      });

      if (response.data.success) {
        // Update the local data map
        const key = getDateKey(selectedDate);
        setAvailabilityData(prev => ({
          ...prev,
          [key]: {
            ...prev[key] || getAvailability(selectedDate),
            available: 0,
            bookings: initialCapacity
          }
        }));
      } else {
        console.error('Error in response:', response.data);
      }
    } catch (error) {
      console.error('Error blocking day:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  // Reset to default capacity
  const handleResetAvailability = async () => {
    // Update the local state first
    setSelectedDateAvailability(prev => ({
      ...prev,
      available: initialCapacity,
      bookings: 0
    }));

    // If serviceId is not provided, just update local state
    if (!serviceId) {
      return;
    }

    try {
      setIsUpdating(true);
      const dateKey = getDateKey(selectedDate);

      const response = await axios.put(`${API_URL}/availability/${serviceType}/${serviceId}/bulk`, {
        dates: [dateKey],
        reset: true
      });

      if (response.data.success) {
        // Update the local data map
        const key = getDateKey(selectedDate);
        setAvailabilityData(prev => ({
          ...prev,
          [key]: {
            ...prev[key] || getAvailability(selectedDate),
            available: initialCapacity,
            bookings: 0
          }
        }));
      } else {
        console.error('Error in response:', response.data);
      }
    } catch (error) {
      console.error('Error resetting availability:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  // Handle previous month button
  const handlePrevMonth = () => {
    setMonth(prevMonth => subMonths(prevMonth, 1));
  };

  // Handle next month button
  const handleNextMonth = () => {
    setMonth(prevMonth => addMonths(prevMonth, 1));
  };

  // Handle date selection in the calendar
  const handleDateSelect = (newDate: Date | undefined) => {
    if (newDate) {
      // Make sure we create a fresh Date object
      const freshDate = new Date(newDate.getTime());

      // Update the selected date
      setSelectedDate(freshDate);

      // If the date is in a different month, update the month view
      if (freshDate.getMonth() !== month.getMonth() ||
        freshDate.getFullYear() !== month.getFullYear()) {
        setMonth(new Date(freshDate.getFullYear(), freshDate.getMonth(), 1));
      }

      // Force update the details panel
      const currentAvailability = getAvailability(freshDate);
      setSelectedDateAvailability({
        date: freshDate,
        total: currentAvailability.total,
        available: currentAvailability.available,
        bookings: currentAvailability.bookings
      });
    }
  };

  // Toggle date range mode
  const handleDateRangeToggle = (enabled: boolean) => {
    setIsDateRangeMode(enabled);
    if (!enabled) {
      // Clear date range when turning off
      setDateRange({ from: undefined, to: undefined });
    }
  };

  // Handle custom availability input change
  const handleCustomAvailabilityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    // Only allow numbers
    const val = e.target.value.replace(/[^0-9]/g, '');
    setCustomAvailability(val);
  };

  // Handle direct availability input change for the main counter
  const handleDirectAvailabilityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const val = e.target.value.replace(/[^0-9]/g, '');
    const numVal = parseInt(val) || 0;
    const clampedVal = Math.max(0, Math.min(initialCapacity, numVal));
    
    setDirectAvailabilityInput(val);
    
    // Update the selectedDateAvailability immediately
    setSelectedDateAvailability(prev => ({
      ...prev,
      available: clampedVal,
      bookings: prev.total - clampedVal
    }));
  };

  // Determine color based on availability ratio
  const getDayColor = (day: Date) => {
    const availability = getAvailability(day);
    const ratio = availability.available / availability.total;

    if (ratio === 0) return "bg-red-100 hover:bg-red-200"; // Fully booked
    if (ratio < 0.3) return "bg-orange-100 hover:bg-orange-200"; // Low availability
    if (ratio < 0.7) return "bg-yellow-100 hover:bg-yellow-200"; // Medium availability
    return "bg-green-100 hover:bg-green-200"; // High availability
  };

  // Custom day rendering for the calendar
  const renderDay = (day: Date) => {
    const availability = getAvailability(day);
    const isSelected = isSameDay(day, selectedDate);

    return (
      <div
        className={`w-full h-full rounded-md flex items-center justify-center 
          ${isSelected ? "ring-2 ring-offset-2 ring-hotel-primary bg-hotel-primary/20" : ""} 
          ${getDayColor(day)}`}
        data-date={format(day, 'yyyy-MM-dd')}
      >
        <div className="flex flex-col items-center">
          <span className={isSelected ? "font-bold" : ""}>{day.getDate()}</span>
          {availability.available === 0 ? (
            <Badge variant="destructive" className="text-[0.6rem] px-1 mt-1">Full</Badge>
          ) : (
            <span className="text-[0.6rem] text-gray-600">{availability.available}/{availability.total}</span>
          )}
        </div>
      </div>
    );
  };

  // Display labels based on service type
  const getUnitLabel = () => {
    switch (serviceType) {
      case "room": return "Rooms";
      case "spa": return "Time Slots";
      case "restaurant": return "Tables";
      case "specialist": return "Appointments";
    }
  };

  // Update availability for a date range
  const handleDateRangeUpdate = async () => {
    if (!dateRange?.from) return;

    const to = dateRange.to || dateRange.from;
    const dates = eachDayOfInterval({ start: dateRange.from, end: to });
    const dateStrings = dates.map(date => getDateKey(date));

    // Update local state for the date range
    updateLocalDateRangeAvailability(dates);

    // If serviceId is not provided, just update local state
    if (!serviceId) {
      return;
    }

    try {
      setIsUpdating(true);

      let requestData = {};

      // Determine action and prepare request data
      if (bulkUpdateAction === 'block') {
        // For blocking, set available to 0
        requestData = {
          dates: dateStrings,
          available: 0
        };
      } else if (bulkUpdateAction === 'reset') {
        // For resetting, use reset: true
        requestData = {
          dates: dateStrings,
          reset: true
        };
      } else {
        // For custom, use the custom value
        const customValue = parseInt(customAvailability) || initialCapacity;
        requestData = {
          dates: dateStrings,
          available: Math.max(0, Math.min(initialCapacity, customValue))
        };
      }

      const response = await axios.put(`${API_URL}/availability/${serviceType}/${serviceId}/bulk`, requestData);

      if (response.data.success) {
        // Close the date range popover
        setIsDateRangeMode(false);
      } else {
        console.error('Error in response:', response.data);
      }
    } catch (error) {
      console.error('Error updating date range:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  // Update local state for a date range
  const updateLocalDateRangeAvailability = (dates: Date[]) => {
    const newAvailabilityData = { ...availabilityData };

    dates.forEach(date => {
      const key = getDateKey(date);
      const currentRecord = getAvailability(date);
      let newAvailable = currentRecord.available;

      // Set the availability based on the action
      if (bulkUpdateAction === 'block') {
        newAvailable = 0;
      } else if (bulkUpdateAction === 'reset') {
        newAvailable = initialCapacity;
      } else {
        // Custom value
        newAvailable = Math.max(0, Math.min(initialCapacity, parseInt(customAvailability) || initialCapacity));
      }

      newAvailabilityData[key] = {
        ...currentRecord,
        available: newAvailable,
        bookings: currentRecord.total - newAvailable
      };
    });

    setAvailabilityData(newAvailabilityData);

    // Update selectedDateAvailability if the current date is in the range
    if (dates.some(d => isSameDay(d, selectedDate))) {
      // Force update the display for the current date
      const currentAvailability = newAvailabilityData[getDateKey(selectedDate)];
      if (currentAvailability) {
        setSelectedDateAvailability({
          date: new Date(selectedDate.getTime()),
          total: currentAvailability.total,
          available: currentAvailability.available,
          bookings: currentAvailability.bookings
        });
        
        // Update the direct input field as well
        setDirectAvailabilityInput(currentAvailability.available.toString());
      }
    }
  };

  return (
    <div className="space-y-4">
      <Card className="w-full max-w-none">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg">
            {name} - Availability Management
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-0 w-full">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="md:col-span-2">
              <div className="flex justify-between items-center mb-2">
                <Button variant="outline" size="sm" onClick={handlePrevMonth}>
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <h4 className="text-sm font-medium">
                  {format(month, 'MMMM yyyy')}
                </h4>
                <Button variant="outline" size="sm" onClick={handleNextMonth}>
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>

              <div className="w-full max-w-none">
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={(date) => {
                    // Ensure we handle null/undefined values properly
                    if (date) {
                      setSelectedDate(new Date(date.getTime()));
                    }
                  }}
                  month={month}
                  onMonthChange={(newMonth) => {
                    setMonth(newMonth);
                  }}
                  className="rounded-md border w-full max-w-none"
                  classNames={{
                    months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0 w-full",
                    month: "space-y-4 w-full",
                    table: "w-full border-collapse space-y-1",
                    head_row: "flex w-full",
                    head_cell: "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] text-center min-w-0",
                    row: "flex w-full mt-2",
                    cell: "flex-1 aspect-square min-h-12 text-center text-sm p-0 relative min-w-0 [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
                    day: "h-full w-full p-0 font-normal aria-selected:opacity-100 hover:bg-accent hover:text-accent-foreground rounded-md"
                  }}
                  components={{
                    Day: ({ date: dayDate }) => {
                      if (!dayDate) return null;

                      // Simpler day rendering to test if clicks work
                      const isSelected = dayDate && selectedDate && isSameDay(dayDate, selectedDate);
                      const availability = getAvailability(dayDate);
                      const ratio = availability.available / availability.total;

                      let bgColor = "bg-green-100";
                      if (ratio === 0) bgColor = "bg-red-100";
                      else if (ratio < 0.3) bgColor = "bg-orange-100";
                      else if (ratio < 0.7) bgColor = "bg-yellow-100";

                      return (
                        <div
                          className={`w-full h-full rounded-md flex items-center justify-center 
                            ${isSelected ? "ring-2 ring-offset-2 ring-hotel-primary" : ""} 
                            ${bgColor}`}
                          onClick={() => {
                            setSelectedDate(new Date(dayDate.getTime()));
                          }}
                        >
                          <div className="text-center">
                            <div>{dayDate.getDate()}</div>
                            <div className="text-xs">{availability.available}/{availability.total}</div>
                          </div>
                        </div>
                      );
                    }
                  }}
                  disabled={false}
                  today={new Date()}
                />
              </div>

              <div className="flex justify-between mt-2">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded bg-green-100"></div>
                  <span className="text-xs">High</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded bg-yellow-100"></div>
                  <span className="text-xs">Medium</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded bg-orange-100"></div>
                  <span className="text-xs">Low</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded bg-red-100"></div>
                  <span className="text-xs">Full</span>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div
                key={`details-${format(selectedDate, 'yyyy-MM-dd')}`}
                className="p-4 border rounded-md"
              >
                <h3 className="font-medium mb-1 text-start text-hotel-primary bg-gray-50 p-2 rounded" data-testid="selected-date">
                  {format(selectedDate, 'EEEE, MMMM d, yyyy')}
                </h3>

                <div className="space-y-4 mt-4">
                  <div>
                    <div className="flex justify-between text-sm mb-1">
                      <span>Total {getUnitLabel()}:</span>
                      <span data-testid="total-rooms">{selectedDateAvailability.total}</span>
                    </div>
                    <div className="flex justify-between text-sm mb-1">
                      <span>Booked:</span>
                      <span data-testid="booked-rooms">{selectedDateAvailability.bookings}</span>
                    </div>
                    <div className="flex justify-between font-medium">
                      <span>Available:</span>
                      <span data-testid="available-rooms">{selectedDateAvailability.available}</span>
                    </div>
                  </div>

                  <div className="flex items-center justify-center space-x-2 mt-4">
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => updateLocalCount(-1)}
                      disabled={selectedDateAvailability.available <= 0 || isUpdating}
                    >
                      <Minus className="h-4 w-4" />
                    </Button>
                    <Input
                      type="text"
                      value={directAvailabilityInput}
                      onChange={handleDirectAvailabilityChange}
                      className="w-16 text-center text-xl font-medium"
                      min="0"
                      max={initialCapacity.toString()}
                    />
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => updateLocalCount(1)}
                      disabled={selectedDateAvailability.available >= selectedDateAvailability.total || isUpdating}
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>

                  <Button
                    className="w-full bg-hotel-primary mt-2"
                    onClick={submitAvailabilityUpdate}
                    disabled={isUpdating}
                  >
                    {isUpdating ? "Updating..." : "Update Availability"}
                  </Button>
                </div>
              </div>

              <Card>
                <CardContent className="pt-4">
                  <h3 className="font-medium mb-2">Quick Actions</h3>
                  <div className="space-y-2">
                    <Button
                      variant="outline"
                      size="sm"
                      className="w-full"
                      onClick={handleBlockDay}
                      disabled={isUpdating}
                    >
                      Block entire day
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="w-full"
                      onClick={handleResetAvailability}
                      disabled={isUpdating}
                    >
                      Reset to default capacity
                    </Button>

                    {/* Date Range Control */}
                    <div className="border rounded-md p-3 mt-4 bg-gray-50">
                      <div className="flex items-center justify-between mb-2">
                        <Label htmlFor="date-range-mode" className="font-medium">Date Range Mode</Label>
                        <Switch
                          id="date-range-mode"
                          checked={isDateRangeMode}
                          onCheckedChange={handleDateRangeToggle}
                        />
                      </div>

                      {isDateRangeMode && (
                        <div className="space-y-3 mt-3 border-t pt-3">
                          <Popover>
                            <PopoverTrigger asChild>
                              <Button
                                variant="outline"
                                className="w-full justify-start text-left font-normal"
                              >
                                <CalendarIcon className="mr-2 h-4 w-4" />
                                {dateRange?.from ? (
                                  dateRange.to ? (
                                    <>
                                      {format(dateRange.from, "LLL dd, y")} -{" "}
                                      {format(dateRange.to, "LLL dd, y")}
                                    </>
                                  ) : (
                                    format(dateRange.from, "LLL dd, y")
                                  )
                                ) : (
                                  <span>Select date range</span>
                                )}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                              <Calendar
                                initialFocus
                                mode="range"
                                defaultMonth={selectedDate}
                                selected={dateRange}
                                onSelect={setDateRange}
                                numberOfMonths={2}
                              />
                            </PopoverContent>
                          </Popover>

                          <RadioGroup
                            value={bulkUpdateAction}
                            onValueChange={setBulkUpdateAction}
                            className="space-y-1"
                          >
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="block" id="block" />
                              <Label htmlFor="block">Block Dates</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="reset" id="reset" />
                              <Label htmlFor="reset">Reset to Default</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="custom" id="custom" />
                              <Label htmlFor="custom">Custom Value</Label>
                              {bulkUpdateAction === 'custom' && (
                                <Input
                                  className="w-16 h-8 ml-2"
                                  value={customAvailability}
                                  onChange={handleCustomAvailabilityChange}
                                  min="0"
                                  max={initialCapacity.toString()}
                                />
                              )}
                            </div>
                          </RadioGroup>

                          <Button
                            className="w-full mt-2"
                            onClick={handleDateRangeUpdate}
                            disabled={!dateRange?.from || isUpdating}
                          >
                            {isUpdating ? "Updating..." : "Apply to Date Range"}
                          </Button>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AvailabilityCalendar;
</file>

<file path="src/components/Admin/Common/ConfirmDeleteModal.tsx">
import { useState } from "react";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";

interface ConfirmDeleteModalProps {
  itemName: string;
  onConfirmDelete: () => void;
  buttonVariant?: "ghost" | "outline";
}

const ConfirmDeleteModal = ({ 
  itemName, 
  onConfirmDelete, 
  buttonVariant = "ghost" 
}: ConfirmDeleteModalProps) => {
  const [open, setOpen] = useState(false);

  const handleConfirm = () => {
    onConfirmDelete();
    setOpen(false);
  };

  return (
    <AlertDialog open={open} onOpenChange={setOpen}>
      <AlertDialogTrigger asChild>
        <Button 
          variant={buttonVariant} 
          size="icon" 
          className="text-red-500 hover:text-red-700"
        >
          <Trash2 size={16} />
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Are you sure?</AlertDialogTitle>
          <AlertDialogDescription>
            This will permanently delete <span className="font-semibold">{itemName}</span>. 
            This action cannot be undone.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction onClick={handleConfirm} className="bg-red-500 hover:bg-red-600">
            Delete
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};

export default ConfirmDeleteModal;
</file>

<file path="src/components/Admin/ContentManagement/ContentManagementDashboard.tsx">
import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger
} from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Edit,
  PlusCircle,
  Image as ImageIcon,
  Type,
  Palette,
  Layers,
  ListOrdered,
  Save,
  Eye,
  RotateCcw,
  Loader2,
  Trash2,
  Upload,
  X
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import {
  getHomePageContent,
  updateHomePageContent,
  HomePageContent,
  FeaturedService,
  getRoomsPageContent,
  updateRoomsPageContent,
  RoomsPageContent,
  RoomCategory,
  getSpaPageContent,
  updateSpaPageContent,
  SpaPageContent,
  getRestaurantPageContent,
  updateRestaurantPageContent,
  RestaurantPageContent,
  getEventsPageContent,
  updateEventsPageContent,
  EventsPageContent,
  getMeetingHallPageContent,
  updateMeetingHallPageContent,
  MeetingHallPageContent,
  getNavigationContent,
  updateNavigationContent,
  NavigationContent,
  getFooterContent,
  updateFooterContent,
  FooterContent
} from "@/services/contentService";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle
} from "@/components/ui/dialog";
import axios from 'axios';

const ContentManagementDashboard = () => {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("home");

  // State for each content type
  const [homePageData, setHomePageData] = useState<HomePageContent | null>(null);
  const [roomsPageData, setRoomsPageData] = useState<RoomsPageContent | null>(null);
  const [spaPageData, setSpaPageData] = useState<SpaPageContent | null>(null);
  const [restaurantPageData, setRestaurantPageData] = useState<RestaurantPageContent | null>(null);
  const [eventsPageData, setEventsPageData] = useState<EventsPageContent | null>(null);
  const [meetingHallPageData, setMeetingHallPageData] = useState<MeetingHallPageContent | null>(null);
  const [navigationData, setNavigationData] = useState<NavigationContent | null>(null);
  const [footerData, setFooterData] = useState<FooterContent | null>(null);

  // Service modal state
  const [isServiceModalOpen, setIsServiceModalOpen] = useState(false);
  const [selectedService, setSelectedService] = useState<FeaturedService | undefined>(undefined);
  const [serviceForm, setServiceForm] = useState<FeaturedService>({
    title: "",
    description: "",
    icon: "",
    order: 0
  });

  // Room category modal state
  const [isRoomCategoryModalOpen, setIsRoomCategoryModalOpen] = useState(false);
  const [selectedRoomCategory, setSelectedRoomCategory] = useState<RoomCategory | undefined>(undefined);
  const [roomCategoryForm, setRoomCategoryForm] = useState({
    name: "",
    description: "",
    order: 0
  });

  // Spa service modal state
  const [isSpaServiceModalOpen, setIsSpaServiceModalOpen] = useState(false);
  const [selectedSpaService, setSelectedSpaService] = useState(undefined);
  const [spaServiceForm, setSpaServiceForm] = useState({
    name: "",
    description: "",
    price: "",
    duration: "",
    order: 0
  });

  // Dish modal state
  const [isDishModalOpen, setIsDishModalOpen] = useState(false);
  const [selectedDish, setSelectedDish] = useState(undefined);
  const [dishForm, setDishForm] = useState({
    name: "",
    description: "",
    price: "",
    image: "",
    order: 0
  });

  // Event modal state
  const [isEventModalOpen, setIsEventModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(undefined);
  const [eventForm, setEventForm] = useState({
    name: "",
    description: "",
    image: "",
    order: 0
  });

  // Navigation item modal state
  const [isNavItemModalOpen, setIsNavItemModalOpen] = useState(false);
  const [isFooterNavItemModalOpen, setIsFooterNavItemModalOpen] = useState(false);
  const [selectedNavItem, setSelectedNavItem] = useState(undefined);
  const [navItemForm, setNavItemForm] = useState({
    label: "",
    path: "",
    order: 0
  });

  // Social media link modal state
  const [isSocialMediaModalOpen, setIsSocialMediaModalOpen] = useState(false);
  const [selectedSocialMedia, setSelectedSocialMedia] = useState(undefined);
  const [socialMediaForm, setSocialMediaForm] = useState({
    platform: "",
    url: "",
    icon: ""
  });

  // Map state from server to UI format for Home Page
  const [activeHomePage, setActiveHomePage] = useState({
    heroTitle: "Experience Luxury at Parkside Plaza",
    heroSubtitle: "Indulge in exquisite comfort and world-class amenities",
    welcomeMessage: "Welcome to Parkside Plaza, where luxury meets comfort. Our hotel offers an unforgettable experience with stunning views, exceptional service, and premier amenities. Whether you're visiting for business or leisure, our dedicated staff is committed to making your stay memorable.",
    aboutContent: "Nestled in the heart of the city, Parkside Plaza offers a sanctuary of comfort and luxury. Our hotel features elegantly designed rooms, a renowned spa, exquisite dining options, and versatile event spaces. With our commitment to excellence, we ensure every guest experiences the pinnacle of hospitality."
  });

  // Add a file input reference
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Add file input references for other pages
  const roomsFileInputRef = useRef<HTMLInputElement>(null);
  const spaFileInputRef = useRef<HTMLInputElement>(null);
  const eventsFileInputRef = useRef<HTMLInputElement>(null);
  const meetingHallFileInputRef = useRef<HTMLInputElement>(null);

  // Add restaurant cover image state
  const [restaurantCoverImagePreview, setRestaurantCoverImagePreview] = useState<string>("");
  const [selectedRestaurantCoverImage, setSelectedRestaurantCoverImage] = useState<File | null>(null);

  // Add menu PDF state
  const [menuPDFPreview, setMenuPDFPreview] = useState<string>("");
  const [selectedMenuPDF, setSelectedMenuPDF] = useState<File | null>(null);

  // Load initial data based on the active tab
  useEffect(() => {
    if (activeTab === "home") {
      fetchHomePageData();
    } else if (activeTab === "rooms") {
      fetchRoomsPageData();
    } else if (activeTab === "spa") {
      fetchSpaPageData();
    } else if (activeTab === "restaurant") {
      fetchRestaurantPageData();
    } else if (activeTab === "events") {
      fetchEventsPageData();
    } else if (activeTab === "meeting-hall") {
      fetchMeetingHallPageData();
    } else if (activeTab === "menus") {
      fetchNavigationData();
    } else if (activeTab === "footer") {
      fetchFooterData();
    }
  }, [activeTab]);

  // Map home page data from server format to UI format
  useEffect(() => {
    if (homePageData) {
      setActiveHomePage({
        heroTitle: homePageData.hero.title,
        heroSubtitle: homePageData.hero.subtitle,
        welcomeMessage: homePageData.welcome.message,
        aboutContent: homePageData.about.content
      });
    }
  }, [homePageData]);

  // Fetch home page data
  const fetchHomePageData = async () => {
    setLoading(true);
    try {
      const data = await getHomePageContent();
      console.log("Fetched home page data:", data);
      setHomePageData(data);
    } catch (error) {
      console.error("Failed to fetch home page content:", error);
      toast({
        title: "Error",
        description: "Failed to load home page content. Using default values instead.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch rooms page data
  const fetchRoomsPageData = async () => {
    setLoading(true);
    try {
      const data = await getRoomsPageContent();
      console.log("Fetched rooms page data:", data);
      setRoomsPageData(data);
    } catch (error) {
      console.error("Failed to fetch rooms page content:", error);
      toast({
        title: "Error",
        description: "Failed to load rooms page content.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch spa page data
  const fetchSpaPageData = async () => {
    setLoading(true);
    try {
      const data = await getSpaPageContent();
      console.log("Fetched spa page data:", data);
      setSpaPageData(data);
    } catch (error) {
      console.error("Failed to fetch spa page content:", error);
      toast({
        title: "Error",
        description: "Failed to load spa page content.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch restaurant page data
  const fetchRestaurantPageData = async () => {
    setLoading(true);
    try {
      const data = await getRestaurantPageContent();
      console.log("Fetched restaurant page data:", data);
      setRestaurantPageData(data);
    } catch (error) {
      console.error("Failed to fetch restaurant page content:", error);
      toast({
        title: "Error",
        description: "Failed to load restaurant page content.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch events page data
  const fetchEventsPageData = async () => {
    setLoading(true);
    try {
      const data = await getEventsPageContent();
      console.log("Fetched events page data:", data);
      setEventsPageData(data);
    } catch (error) {
      console.error("Failed to fetch events page content:", error);
      toast({
        title: "Error",
        description: "Failed to load events page content.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch meeting hall page data
  const fetchMeetingHallPageData = async () => {
    setLoading(true);
    try {
      const data = await getMeetingHallPageContent();
      console.log("Fetched meeting hall page data:", data);
      setMeetingHallPageData(data);
    } catch (error) {
      console.error("Failed to fetch meeting hall page content:", error);
      toast({
        title: "Error",
        description: "Failed to load meeting hall page content.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch navigation data
  const fetchNavigationData = async () => {
    setLoading(true);
    try {
      const data = await getNavigationContent();
      console.log("Fetched navigation data:", data);
      setNavigationData(data);
    } catch (error) {
      console.error("Failed to fetch navigation content:", error);
      toast({
        title: "Error",
        description: "Failed to load navigation content.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Fetch footer data
  const fetchFooterData = async () => {
    setLoading(true);
    try {
      const data = await getFooterContent();
      console.log("Fetched footer data:", data);
      setFooterData(data);
    } catch (error) {
      console.error("Failed to fetch footer content:", error);
      toast({
        title: "Error",
        description: "Failed to load footer content.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Handle changes to form inputs
  const handleHomePageChange = (e) => {
    const { name, value } = e.target;
    setActiveHomePage(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Save content based on active tab
  const saveContent = async () => {
    switch (activeTab) {
      case "home":
        await saveHomePageContent();
        break;
      case "rooms":
        await saveRoomsPageContent();
        break;
      case "spa":
        await saveSpaPageContent();
        break;
      case "restaurant":
        await saveRestaurantPageContent();
        break;
      case "events":
        await saveEventsPageContent();
        break;
      case "meeting-hall":
        await saveMeetingHallPageContent();
        break;
      case "menus":
        await saveNavigationContent();
        break;
      case "footer":
        await saveFooterContent();
        break;
      default:
        console.error("Unknown tab:", activeTab);
    }
  };

  // Save home page content
  const saveHomePageContent = async () => {
    if (!homePageData) return;

    setLoading(true);
    try {
      // Map UI format back to server format
      const updatedContent = {
        hero: {
          title: activeHomePage.heroTitle,
          subtitle: activeHomePage.heroSubtitle,
          backgroundImage: homePageData?.hero?.backgroundImage || ""
        },
        welcome: {
          message: activeHomePage.welcomeMessage
        },
        about: {
          content: activeHomePage.aboutContent
        },
        featuredServices: homePageData?.featuredServices || []
      };

      console.log("Sending home page update:", updatedContent);

      const result = await updateHomePageContent(updatedContent);
      console.log("API response:", result);
      setHomePageData(result);

      toast({
        title: "Success",
        description: "Home page content updated successfully"
      });
    } catch (error) {
      console.error("Failed to update home page content:", error);
      toast({
        title: "Error",
        description: "Failed to update home page content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Save rooms page content
  const saveRoomsPageContent = async () => {
    if (!roomsPageData) return;

    setLoading(true);
    try {
      // Get form values from the rooms page tab
      const title = (document.getElementById('roomsTitle') as HTMLInputElement)?.value;
      const description = (document.getElementById('roomsDescription') as HTMLTextAreaElement)?.value;

      const updatedContent = {
        title: title || "Luxurious Rooms & Suites",
        description: description || "Experience the ultimate in comfort and luxury with our selection of elegantly designed rooms and suites, each offering unique amenities to enhance your stay.",
        coverImage: roomsPageData.coverImage || "",
        categories: roomsPageData.categories || []
      };

      const result = await updateRoomsPageContent(updatedContent);
      setRoomsPageData(result);

      toast({
        title: "Success",
        description: "Rooms page content updated successfully"
      });
    } catch (error) {
      console.error("Failed to update rooms page content:", error);
      toast({
        title: "Error",
        description: "Failed to update rooms page content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Save spa page content
  const saveSpaPageContent = async () => {
    if (!spaPageData) return;

    setLoading(true);
    try {
      const title = (document.getElementById('spaTitle') as HTMLInputElement)?.value;
      const description = (document.getElementById('spaDescription') as HTMLTextAreaElement)?.value;

      const updatedContent = {
        title: title || "Spa & Wellness",
        description: description || "Indulge in a world of relaxation...",
        coverImage: spaPageData.coverImage || "",
        services: spaPageData.services || []
      };

      const result = await updateSpaPageContent(updatedContent);
      setSpaPageData(result);

      toast({
        title: "Success",
        description: "Spa page content updated successfully"
      });
    } catch (error) {
      console.error("Failed to update spa page content:", error);
      toast({
        title: "Error",
        description: "Failed to update spa page content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Handle restaurant cover image upload
  const handleRestaurantCoverImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      toast({
        title: "Invalid file type",
        description: "Please select a valid image file",
        variant: "destructive"
      });
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast({
        title: "File too large",
        description: "Image size should be less than 5MB",
        variant: "destructive"
      });
      return;
    }

    console.log('Selected restaurant cover file:', file);

    // Create form data
    const formData = new FormData();
    formData.append('image', file);

    try {
      setLoading(true);

      // Upload the image
      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/upload-image',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('Restaurant cover upload result:', uploadResult.data);

      if (uploadResult.data.success) {
        // Get the image URL from the correct response property
        const imageUrl = uploadResult.data.data.url;

        // Update the restaurantPageData
        if (restaurantPageData) {
          const updatedRestaurantPageData = {
            ...restaurantPageData,
            coverImage: imageUrl
          };

          setRestaurantPageData(updatedRestaurantPageData);
          setRestaurantCoverImagePreview("");
          setSelectedRestaurantCoverImage(null);

          toast({
            title: "Image Uploaded",
            description: "Restaurant cover image has been uploaded. Don't forget to save your changes."
          });
        }
      }
    } catch (error) {
      console.error('Error uploading restaurant cover image:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload restaurant cover image.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Remove restaurant cover image
  const removeRestaurantCoverImage = () => {
    setSelectedRestaurantCoverImage(null);
    setRestaurantCoverImagePreview("");
    
    // Also clear the existing cover image from restaurant data
    if (restaurantPageData) {
      setRestaurantPageData({
        ...restaurantPageData,
        coverImage: ""
      });
    }
  };

  // Handle menu PDF upload
  const handleMenuPDFUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (file.type !== 'application/pdf') {
      toast({
        title: "Invalid file type",
        description: "Please select a valid PDF file",
        variant: "destructive"
      });
      return;
    }

    // Validate file size (max 10MB for PDFs)
    if (file.size > 10 * 1024 * 1024) {
      toast({
        title: "File too large",
        description: "PDF size should be less than 10MB",
        variant: "destructive"
      });
      return;
    }

    console.log('Selected menu PDF file:', file);

    // Create form data
    const formData = new FormData();
    formData.append('pdf', file); // Using 'pdf' field name for the specific PDF endpoint

    try {
      setLoading(true);

      // Upload the PDF using the dedicated PDF endpoint
      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/restaurant/menu-pdf',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('Menu PDF upload result:', uploadResult.data);

      if (uploadResult.data.success) {
        // Get the PDF URL from the response
        const pdfUrl = uploadResult.data.data.url;
        
        // Update the restaurantPageData with the response data
        if (uploadResult.data.data.restaurantContent) {
          setRestaurantPageData(uploadResult.data.data.restaurantContent);
        } else {
          // Fallback: just update the PDF URL
          setRestaurantPageData(prev => prev ? {
            ...prev,
            menuItemsPDF: pdfUrl
          } : null);
        }

        setMenuPDFPreview("");
        setSelectedMenuPDF(null);

        toast({
          title: "PDF Uploaded",
          description: "Menu PDF has been uploaded successfully and updated in the system."
        });
      }
    } catch (error) {
      console.error('Error uploading menu PDF:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload menu PDF.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Remove menu PDF
  const removeMenuPDF = () => {
    setSelectedMenuPDF(null);
    setMenuPDFPreview("");
    
    // Also clear the existing PDF from restaurant data
    if (restaurantPageData) {
      setRestaurantPageData({
        ...restaurantPageData,
        menuItemsPDF: ""
      });
    }
  };

  // Save restaurant page content
  const saveRestaurantPageContent = async () => {
    if (!restaurantPageData) return;

    setLoading(true);
    try {
      const title = (document.getElementById('restaurantTitle') as HTMLInputElement)?.value;
      const description = (document.getElementById('restaurantDescription') as HTMLTextAreaElement)?.value;
      const chefName = (document.getElementById('chefName') as HTMLInputElement)?.value;
      const cuisineType = (document.getElementById('cuisineType') as HTMLInputElement)?.value;
      const openingHours = (document.getElementById('restaurantHours') as HTMLTextAreaElement)?.value;

      const updatedContent = {
        title: title || "Fine Dining Experience",
        description: description || "Savor exquisite culinary creations...",
        headChef: chefName || "Chef Michael Roberts",
        cuisineType: cuisineType || "Contemporary International",
        openingHours: openingHours || "Breakfast: 6:30 AM - 10:30 PM\nLunch: 12:00 PM - 2:30 PM\nDinner: 6:00 PM - 10:30 PM",
        coverImage: restaurantPageData.coverImage || "",
        featuredDishes: restaurantPageData.featuredDishes || [],
        menuItemsPDF: restaurantPageData.menuItemsPDF || ""
      };

      const result = await updateRestaurantPageContent(updatedContent);
      setRestaurantPageData(result);

      toast({
        title: "Success",
        description: "Restaurant page content updated successfully"
      });

      // Clean up
      setSelectedRestaurantCoverImage(null);
      setRestaurantCoverImagePreview("");
      setSelectedMenuPDF(null);
      setMenuPDFPreview("");
    } catch (error) {
      console.error("Failed to update restaurant page content:", error);
      toast({
        title: "Error",
        description: "Failed to update restaurant page content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Save events page content
  const saveEventsPageContent = async () => {
    if (!eventsPageData) return;

    setLoading(true);
    try {
      const title = (document.getElementById('eventsTitle') as HTMLInputElement)?.value;
      const description = (document.getElementById('eventsDescription') as HTMLTextAreaElement)?.value;

      const updatedContent = {
        title: title || "Events & Celebrations",
        description: description || "Host extraordinary events in our versatile venues, perfect for weddings, conferences, and special celebrations. Our dedicated team ensures every detail is flawlessly executed.",
        coverImage: eventsPageData.coverImage || "",
        featuredEvents: eventsPageData.featuredEvents || []
      };

      const result = await updateEventsPageContent(updatedContent);
      setEventsPageData(result);

      toast({
        title: "Success",
        description: "Events page content updated successfully"
      });
    } catch (error) {
      console.error("Failed to update events page content:", error);
      toast({
        title: "Error",
        description: "Failed to update events page content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Save meeting hall page content
  const saveMeetingHallPageContent = async () => {
    if (!meetingHallPageData) return;

    setLoading(true);
    try {
      const title = (document.getElementById('meetingHallTitle') as HTMLInputElement)?.value;
      const description = (document.getElementById('meetingHallDescription') as HTMLTextAreaElement)?.value;

      const updatedContent = {
        title: title || "Meeting Spaces",
        description: description || "Host meetings and events in our versatile meeting spaces. Our dedicated team ensures every detail is flawlessly executed.",
        coverImage: meetingHallPageData.coverImage || ""
      };

      const result = await updateMeetingHallPageContent(updatedContent);
      setMeetingHallPageData(result);

      toast({
        title: "Success",
        description: "Meeting hall page content updated successfully"
      });
    } catch (error) {
      console.error("Failed to update meeting hall page content:", error);
      toast({
        title: "Error",
        description: "Failed to update meeting hall page content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Save navigation content
  const saveNavigationContent = async () => {
    if (!navigationData) return;

    setLoading(true);
    try {
      // Just save the existing navigation data for now
      // In a real implementation, you would collect the updated values from the form
      const result = await updateNavigationContent(navigationData);
      setNavigationData(result);

      toast({
        title: "Success",
        description: "Navigation content updated successfully"
      });
    } catch (error) {
      console.error("Failed to update navigation content:", error);
      toast({
        title: "Error",
        description: "Failed to update navigation content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Save footer content
  const saveFooterContent = async () => {
    if (!footerData) return;

    setLoading(true);
    try {
      const aboutText = (document.getElementById('footerAbout') as HTMLTextAreaElement)?.value;
      const address = (document.getElementById('footerAddress') as HTMLInputElement)?.value;
      const phone = (document.getElementById('footerPhone') as HTMLInputElement)?.value;
      const email = (document.getElementById('footerEmail') as HTMLInputElement)?.value;
      const copyrightText = (document.getElementById('copyrightText') as HTMLInputElement)?.value;

      const updatedContent = {
        aboutText: aboutText || "Parkside Plaza Hotel offers luxury accommodations...",
        contactInfo: {
          address: address || "123 Park Avenue, New York, NY 10001",
          phone: phone || "+1 (555) 123-4567",
          email: email || "info@parksideplaza.com"
        },
        copyrightText: copyrightText || "© 2025 Parkside Plaza Hotel. All Rights Reserved.",
        socialMedia: footerData.socialMedia || []
      };

      const result = await updateFooterContent(updatedContent);
      setFooterData(result);

      toast({
        title: "Success",
        description: "Footer content updated successfully"
      });
    } catch (error) {
      console.error("Failed to update footer content:", error);
      toast({
        title: "Error",
        description: "Failed to update footer content",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Add Service handlers
  const handleAddService = () => {
    setSelectedService(undefined);
    setServiceForm({
      title: "",
      description: "",
      icon: "",
      order: 0
    });
    setIsServiceModalOpen(true);
  };

  const handleEditService = (service: FeaturedService) => {
    setSelectedService(service);
    setServiceForm({ ...service });
    setIsServiceModalOpen(true);
  };

  const handleServiceFormChange = (e) => {
    const { name, value } = e.target;
    setServiceForm(prev => ({
      ...prev,
      [name]: name === 'order' ? parseInt(value) : value
    }));
  };

  const handleServiceSave = () => {
    if (!homePageData) return;

    // Create a copy of the current featured services
    let updatedServices = [...(homePageData.featuredServices || [])];

    // Check if we're updating an existing service or adding a new one
    if (selectedService) {
      // Update existing service
      const index = updatedServices.findIndex(s =>
        s.title === selectedService.title && s.order === selectedService.order);

      if (index !== -1) {
        updatedServices[index] = serviceForm;
      }
    } else {
      // Add new service with next order number
      const maxOrder = updatedServices.length > 0
        ? Math.max(...updatedServices.map(s => s.order))
        : -1;

      serviceForm.order = maxOrder + 1;
      updatedServices.push(serviceForm);
    }

    // Update home page data with the new services
    setHomePageData({
      ...homePageData,
      featuredServices: updatedServices
    });

    toast({
      title: selectedService ? "Service Updated" : "Service Added",
      description: `The service was successfully ${selectedService ? "updated" : "added"}. Don't forget to save your changes.`
    });

    // Close the modal
    setIsServiceModalOpen(false);
  };

  // Add a function to handle hero image upload
  const handleHeroImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files || event.target.files.length === 0) {
      return;
    }

    const file = event.target.files[0];
    console.log('Selected file:', file);

    // Create form data
    const formData = new FormData();
    formData.append('image', file);

    try {
      setLoading(true);

      // Upload the image
      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/upload-image',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('Upload result:', uploadResult.data);

      if (uploadResult.data.success) {
        // Get the image URL from the correct response property
        const imageUrl = uploadResult.data.data.url;

        // Update the homePageData
        if (homePageData) {
          const updatedHomePageData = {
            ...homePageData,
            hero: {
              ...homePageData.hero,
              backgroundImage: imageUrl
            }
          };

          setHomePageData(updatedHomePageData);

          toast({
            title: "Image Uploaded",
            description: "Hero background image has been uploaded. Don't forget to save your changes."
          });
        }
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload hero background image.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Trigger file input click
  const handleChangeImageClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  // Add a function to get the full URL for images
  const getFullImageUrl = (path: string | undefined) => {
    if (!path) return "";
    if (path.startsWith('http')) return path;
    return `http://localhost:4000${path}`;
  };

  // Add Room Category handlers
  const handleAddRoomCategory = () => {
    setSelectedRoomCategory(undefined);
    setRoomCategoryForm({
      name: "",
      description: "",
      order: 0
    });
    setIsRoomCategoryModalOpen(true);
  };

  const handleEditRoomCategory = (category) => {
    setSelectedRoomCategory(category);
    setRoomCategoryForm({ ...category });
    setIsRoomCategoryModalOpen(true);
  };

  const handleRoomCategoryFormChange = (e) => {
    const { name, value } = e.target;
    setRoomCategoryForm(prev => ({
      ...prev,
      [name]: name === 'order' ? parseInt(value) : value
    }));
  };

  const handleRoomCategorySave = () => {
    if (!roomsPageData) return;

    // Create a copy of the current categories
    let updatedCategories = [...(roomsPageData.categories || [])];

    // Check if we're updating an existing category or adding a new one
    if (selectedRoomCategory) {
      // Update existing category
      const index = updatedCategories.findIndex(c =>
        c.name === selectedRoomCategory.name && c.order === selectedRoomCategory.order);

      if (index !== -1) {
        updatedCategories[index] = roomCategoryForm;
      }
    } else {
      // Add new category with next order number
      const maxOrder = updatedCategories.length > 0
        ? Math.max(...updatedCategories.map(c => c.order))
        : -1;

      roomCategoryForm.order = maxOrder + 1;
      updatedCategories.push(roomCategoryForm);
    }

    // Update rooms page data with the new categories
    setRoomsPageData({
      ...roomsPageData,
      categories: updatedCategories
    });

    toast({
      title: selectedRoomCategory ? "Category Updated" : "Category Added",
      description: `The room category was successfully ${selectedRoomCategory ? "updated" : "added"}. Don't forget to save your changes.`
    });

    // Close the modal
    setIsRoomCategoryModalOpen(false);
  };

  // Add Spa Service handlers
  const handleAddSpaService = () => {
    setSelectedSpaService(undefined);
    setSpaServiceForm({
      name: "",
      description: "",
      price: "",
      duration: "",
      order: 0
    });
    setIsSpaServiceModalOpen(true);
  };

  const handleEditSpaService = (service) => {
    setSelectedSpaService(service);
    setSpaServiceForm({ ...service });
    setIsSpaServiceModalOpen(true);
  };

  const handleSpaServiceFormChange = (e) => {
    const { name, value } = e.target;
    setSpaServiceForm(prev => ({
      ...prev,
      [name]: name === 'order' ? parseInt(value) : value
    }));
  };

  const handleSpaServiceSave = () => {
    if (!spaPageData) return;

    // Create a copy of the current services
    let updatedServices = [...(spaPageData.services || [])];

    // Check if we're updating an existing service or adding a new one
    if (selectedSpaService) {
      // Update existing service
      const index = updatedServices.findIndex(s =>
        s.name === selectedSpaService.name && s.order === selectedSpaService.order);

      if (index !== -1) {
        updatedServices[index] = spaServiceForm;
      }
    } else {
      // Add new service with next order number
      const maxOrder = updatedServices.length > 0
        ? Math.max(...updatedServices.map(s => s.order))
        : -1;

      spaServiceForm.order = maxOrder + 1;
      updatedServices.push(spaServiceForm);
    }

    // Update spa page data with the new services
    setSpaPageData({
      ...spaPageData,
      services: updatedServices
    });

    toast({
      title: selectedSpaService ? "Service Updated" : "Service Added",
      description: `The spa service was successfully ${selectedSpaService ? "updated" : "added"}. Don't forget to save your changes.`
    });

    // Close the modal
    setIsSpaServiceModalOpen(false);
  };

  // Add Dish handlers
  const handleAddDish = () => {
    setSelectedDish(undefined);
    setDishForm({
      name: "",
      description: "",
      price: "",
      image: "",
      order: 0
    });
    setIsDishModalOpen(true);
  };

  const handleEditDish = (dish) => {
    setSelectedDish(dish);
    setDishForm({ ...dish });
    setIsDishModalOpen(true);
  };

  const handleDishFormChange = (e) => {
    const { name, value } = e.target;
    setDishForm(prev => ({
      ...prev,
      [name]: name === 'order' ? parseInt(value) : value
    }));
  };

  const handleDishSave = () => {
    if (!restaurantPageData) return;

    // Create a copy of the current dishes
    let updatedDishes = [...(restaurantPageData.featuredDishes || [])];

    // Check if we're updating an existing dish or adding a new one
    if (selectedDish) {
      // Update existing dish
      const index = updatedDishes.findIndex(d =>
        d.name === selectedDish.name && d.order === selectedDish.order);

      if (index !== -1) {
        updatedDishes[index] = dishForm;
      }
    } else {
      // Add new dish with next order number
      const maxOrder = updatedDishes.length > 0
        ? Math.max(...updatedDishes.map(d => d.order))
        : -1;

      dishForm.order = maxOrder + 1;
      updatedDishes.push(dishForm);
    }

    // Update restaurant page data with the new dishes
    setRestaurantPageData({
      ...restaurantPageData,
      featuredDishes: updatedDishes
    });

    toast({
      title: selectedDish ? "Dish Updated" : "Dish Added",
      description: `The featured dish was successfully ${selectedDish ? "updated" : "added"}. Don't forget to save your changes.`
    });

    // Close the modal
    setIsDishModalOpen(false);
  };

  // Add Event handlers
  const handleAddEvent = () => {
    setSelectedEvent(undefined);
    setEventForm({
      name: "",
      description: "",
      image: "",
      order: 0
    });
    setIsEventModalOpen(true);
  };

  const handleEditEvent = (event) => {
    setSelectedEvent(event);
    setEventForm({ ...event });
    setIsEventModalOpen(true);
  };

  const handleEventFormChange = (e) => {
    const { name, value } = e.target;
    setEventForm(prev => ({
      ...prev,
      [name]: name === 'order' ? parseInt(value) : value
    }));
  };

  const handleEventSave = () => {
    if (!eventsPageData) return;

    // Create a copy of the current events
    let updatedEvents = [...(eventsPageData.featuredEvents || [])];

    // Check if we're updating an existing event or adding a new one
    if (selectedEvent) {
      // Update existing event
      const index = updatedEvents.findIndex(e =>
        e.name === selectedEvent.name && e.order === selectedEvent.order);

      if (index !== -1) {
        updatedEvents[index] = eventForm;
      }
    } else {
      // Add new event with next order number
      const maxOrder = updatedEvents.length > 0
        ? Math.max(...updatedEvents.map(e => e.order))
        : -1;

      eventForm.order = maxOrder + 1;
      updatedEvents.push(eventForm);
    }

    // Update events page data with the new events
    setEventsPageData({
      ...eventsPageData,
      featuredEvents: updatedEvents
    });

    toast({
      title: selectedEvent ? "Event Updated" : "Event Added",
      description: `The featured event was successfully ${selectedEvent ? "updated" : "added"}. Don't forget to save your changes.`
    });

    // Close the modal
    setIsEventModalOpen(false);
  };

  // Add Navigation Item handlers
  const handleAddNavItem = (isFooter = false) => {
    setSelectedNavItem(undefined);
    setNavItemForm({
      label: "",
      path: "",
      order: 0
    });

    if (isFooter) {
      setIsFooterNavItemModalOpen(true);
    } else {
      setIsNavItemModalOpen(true);
    }
  };

  const handleEditNavItem = (item, isFooter = false) => {
    setSelectedNavItem(item);
    setNavItemForm({ ...item });

    if (isFooter) {
      setIsFooterNavItemModalOpen(true);
    } else {
      setIsNavItemModalOpen(true);
    }
  };

  const handleNavItemFormChange = (e) => {
    const { name, value } = e.target;
    setNavItemForm(prev => ({
      ...prev,
      [name]: name === 'order' ? parseInt(value) : value
    }));
  };

  const handleNavItemSave = (isFooter = false) => {
    if (!navigationData) return;

    // Determine which array to update
    const navArray = isFooter ? 'footer' : 'main';
    let updatedItems = [...(navigationData[navArray] || [])];

    // Check if we're updating an existing item or adding a new one
    if (selectedNavItem) {
      // Update existing item
      const index = updatedItems.findIndex(i =>
        i.label === selectedNavItem.label && i.order === selectedNavItem.order);

      if (index !== -1) {
        updatedItems[index] = navItemForm;
      }
    } else {
      // Add new item with next order number
      const maxOrder = updatedItems.length > 0
        ? Math.max(...updatedItems.map(i => i.order))
        : -1;

      navItemForm.order = maxOrder + 1;
      updatedItems.push(navItemForm);
    }

    // Update navigation data with the new items
    setNavigationData({
      ...navigationData,
      [navArray]: updatedItems
    });

    toast({
      title: selectedNavItem ? "Navigation Item Updated" : "Navigation Item Added",
      description: `The navigation item was successfully ${selectedNavItem ? "updated" : "added"}. Don't forget to save your changes.`
    });

    // Close the modal
    if (isFooter) {
      setIsFooterNavItemModalOpen(false);
    } else {
      setIsNavItemModalOpen(false);
    }
  };

  // Add Social Media Link handlers
  const handleAddSocialMedia = () => {
    setSelectedSocialMedia(undefined);
    setSocialMediaForm({
      platform: "",
      url: "",
      icon: ""
    });
    setIsSocialMediaModalOpen(true);
  };

  const handleEditSocialMedia = (social) => {
    setSelectedSocialMedia(social);
    setSocialMediaForm({ ...social });
    setIsSocialMediaModalOpen(true);
  };

  const handleSocialMediaFormChange = (e) => {
    const { name, value } = e.target;
    setSocialMediaForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSocialMediaSave = () => {
    if (!footerData) return;

    // Create a copy of the current social media links
    let updatedSocialMedia = [...(footerData.socialMedia || [])];

    // Check if we're updating an existing link or adding a new one
    if (selectedSocialMedia) {
      // Update existing link
      const index = updatedSocialMedia.findIndex(s =>
        s.platform === selectedSocialMedia.platform && s.url === selectedSocialMedia.url);

      if (index !== -1) {
        updatedSocialMedia[index] = socialMediaForm;
      }
    } else {
      // Add new link
      updatedSocialMedia.push(socialMediaForm);
    }

    // Update footer data with the new social media links
    setFooterData({
      ...footerData,
      socialMedia: updatedSocialMedia
    });

    toast({
      title: selectedSocialMedia ? "Social Media Link Updated" : "Social Media Link Added",
      description: `The social media link was successfully ${selectedSocialMedia ? "updated" : "added"}. Don't forget to save your changes.`
    });

    // Close the modal
    setIsSocialMediaModalOpen(false);
  };

  // Add delete handlers
  const handleDeleteService = (serviceToDelete: FeaturedService) => {
    if (!homePageData) return;

    // Create a new array without the service to delete
    const updatedServices = homePageData.featuredServices.filter(
      service => service.title !== serviceToDelete.title || service.order !== serviceToDelete.order
    );

    // Update home page data
    setHomePageData({
      ...homePageData,
      featuredServices: updatedServices
    });

    toast({
      title: "Service Deleted",
      description: "The service was successfully deleted. Don't forget to save your changes."
    });
  };

  const handleDeleteRoomCategory = (categoryToDelete) => {
    if (!roomsPageData) return;

    // Create a new array without the category to delete
    const updatedCategories = roomsPageData.categories.filter(
      category => category.name !== categoryToDelete.name || category.order !== categoryToDelete.order
    );

    // Update rooms page data
    setRoomsPageData({
      ...roomsPageData,
      categories: updatedCategories
    });

    toast({
      title: "Room Category Deleted",
      description: "The room category was successfully deleted. Don't forget to save your changes."
    });
  };

  const handleDeleteSpaService = (serviceToDelete) => {
    if (!spaPageData) return;

    // Create a new array without the service to delete
    const updatedServices = spaPageData.services.filter(
      service => service.name !== serviceToDelete.name || service.order !== serviceToDelete.order
    );

    // Update spa page data
    setSpaPageData({
      ...spaPageData,
      services: updatedServices
    });

    toast({
      title: "Spa Service Deleted",
      description: "The spa service was successfully deleted. Don't forget to save your changes."
    });
  };

  const handleDeleteDish = (dishToDelete) => {
    if (!restaurantPageData) return;

    // Create a new array without the dish to delete
    const updatedDishes = restaurantPageData.featuredDishes.filter(
      dish => dish.name !== dishToDelete.name || dish.order !== dishToDelete.order
    );

    // Update restaurant page data
    setRestaurantPageData({
      ...restaurantPageData,
      featuredDishes: updatedDishes
    });

    toast({
      title: "Dish Deleted",
      description: "The featured dish was successfully deleted. Don't forget to save your changes."
    });
  };

  const handleDeleteEvent = (eventToDelete) => {
    if (!eventsPageData) return;

    // Create a new array without the event to delete
    const updatedEvents = eventsPageData.featuredEvents.filter(
      event => event.name !== eventToDelete.name || event.order !== eventToDelete.order
    );

    // Update events page data
    setEventsPageData({
      ...eventsPageData,
      featuredEvents: updatedEvents
    });

    toast({
      title: "Event Deleted",
      description: "The featured event was successfully deleted. Don't forget to save your changes."
    });
  };

  const handleDeleteNavItem = (itemToDelete, isFooter = false) => {
    if (!navigationData) return;

    // Determine which array to update
    const navArray = isFooter ? 'footer' : 'main';
    const updatedItems = navigationData[navArray].filter(
      item => item.label !== itemToDelete.label || item.order !== itemToDelete.order
    );

    // Update navigation data
    setNavigationData({
      ...navigationData,
      [navArray]: updatedItems
    });

    toast({
      title: "Navigation Item Deleted",
      description: "The navigation item was successfully deleted. Don't forget to save your changes."
    });
  };

  const handleDeleteSocialMedia = (socialToDelete) => {
    if (!footerData) return;

    // Create a new array without the social media to delete
    const updatedSocialMedia = footerData.socialMedia.filter(
      social => social.platform !== socialToDelete.platform || social.url !== socialToDelete.url
    );

    // Update footer data
    setFooterData({
      ...footerData,
      socialMedia: updatedSocialMedia
    });

    toast({
      title: "Social Media Link Deleted",
      description: "The social media link was successfully deleted. Don't forget to save your changes."
    });
  };

  // Add Rooms page image upload handler
  const handleRoomsImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files || event.target.files.length === 0) {
      return;
    }

    const file = event.target.files[0];
    console.log('Selected rooms page file:', file);

    // Create form data
    const formData = new FormData();
    formData.append('image', file);

    try {
      setLoading(true);

      // Upload the image
      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/upload-image',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('Rooms page upload result:', uploadResult.data);

      if (uploadResult.data.success) {
        // Get the image URL from the correct response property
        const imageUrl = uploadResult.data.data.url;

        // Update the roomsPageData
        if (roomsPageData) {
          const updatedRoomsPageData = {
            ...roomsPageData,
            coverImage: imageUrl
          };

          setRoomsPageData(updatedRoomsPageData);

          toast({
            title: "Image Uploaded",
            description: "Rooms page cover image has been uploaded. Don't forget to save your changes."
          });
        }
      }
    } catch (error) {
      console.error('Error uploading rooms page image:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload rooms page cover image.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Add Spa page image upload handler
  const handleSpaImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files || event.target.files.length === 0) {
      return;
    }

    const file = event.target.files[0];
    console.log('Selected spa page file:', file);

    // Create form data
    const formData = new FormData();
    formData.append('image', file);

    try {
      setLoading(true);

      // Upload the image
      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/upload-image',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('Spa page upload result:', uploadResult.data);

      if (uploadResult.data.success) {
        // Get the image URL from the correct response property
        const imageUrl = uploadResult.data.data.url;

        // Update the spaPageData
        if (spaPageData) {
          const updatedSpaPageData = {
            ...spaPageData,
            coverImage: imageUrl
          };

          setSpaPageData(updatedSpaPageData);

          toast({
            title: "Image Uploaded",
            description: "Spa page cover image has been uploaded. Don't forget to save your changes."
          });
        }
      }
    } catch (error) {
      console.error('Error uploading spa page image:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload spa page cover image.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Add Events page image upload handler
  const handleEventsImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files || event.target.files.length === 0) {
      return;
    }

    const file = event.target.files[0];
    console.log('Selected events page file:', file);

    // Create form data
    const formData = new FormData();
    formData.append('image', file);

    try {
      setLoading(true);

      // Upload the image
      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/upload-image',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('Events page upload result:', uploadResult.data);

      if (uploadResult.data.success) {
        // Get the image URL from the correct response property
        const imageUrl = uploadResult.data.data.url;

        // Update the eventsPageData
        if (eventsPageData) {
          const updatedEventsPageData = {
            ...eventsPageData,
            coverImage: imageUrl
          };

          setEventsPageData(updatedEventsPageData);

          toast({
            title: "Image Uploaded",
            description: "Events page cover image has been uploaded. Don't forget to save your changes."
          });
        }
      }
    } catch (error) {
      console.error('Error uploading events page image:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload events page cover image.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Add Meeting Hall page image upload handler
  const handleMeetingHallImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files || event.target.files.length === 0) {
      return;
    }

    const file = event.target.files[0];
    console.log('Selected meeting hall page file:', file);

    // Create form data
    const formData = new FormData();
    formData.append('image', file);

    try {
      setLoading(true);

      // Upload the image
      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/upload-image',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('Meeting hall page upload result:', uploadResult.data);

      if (uploadResult.data.success) {
        // Get the image URL from the correct response property
        const imageUrl = uploadResult.data.data.url;

        // Update the meetingHallPageData
        if (meetingHallPageData) {
          const updatedMeetingHallPageData = {
            ...meetingHallPageData,
            coverImage: imageUrl
          };

          setMeetingHallPageData(updatedMeetingHallPageData);

          toast({
            title: "Image Uploaded",
            description: "Meeting hall page cover image has been uploaded. Don't forget to save your changes."
          });
        }
      }
    } catch (error) {
      console.error('Error uploading meeting hall page image:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload meeting hall page cover image.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // Trigger file input click functions
  const handleRoomsChangeImageClick = () => {
    if (roomsFileInputRef.current) {
      roomsFileInputRef.current.click();
    }
  };

  const handleSpaChangeImageClick = () => {
    if (spaFileInputRef.current) {
      spaFileInputRef.current.click();
    }
  };

  const handleEventsChangeImageClick = () => {
    if (eventsFileInputRef.current) {
      eventsFileInputRef.current.click();
    }
  };

  const handleMeetingHallChangeImageClick = () => {
    if (meetingHallFileInputRef.current) {
      meetingHallFileInputRef.current.click();
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">Content Management</h1>
          <p className="text-gray-500">Edit website content and appearance</p>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" className="flex items-center gap-2">
            <Eye size={16} />
            <span>Preview</span>
          </Button>
          <Button
            className="flex items-center gap-2"
            onClick={saveContent}
            disabled={loading}
          >
            {loading ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : <Save size={16} />}
            <span>Save Changes</span>
          </Button>
        </div>
      </div>

      <Tabs defaultValue="home" className="w-full" onValueChange={setActiveTab}>
        <TabsList className="mb-4">
          <TabsTrigger value="home">Home Page</TabsTrigger>
          <TabsTrigger value="rooms">Rooms & Suites</TabsTrigger>
          <TabsTrigger value="spa">Spa</TabsTrigger>
          <TabsTrigger value="restaurant">Restaurant</TabsTrigger>
          <TabsTrigger value="events">Events</TabsTrigger>
          <TabsTrigger value="meeting-hall">Meeting Hall</TabsTrigger>
          <TabsTrigger value="menus">Menus</TabsTrigger>
          <TabsTrigger value="footer">Footer</TabsTrigger>
        </TabsList>

        <TabsContent value="home" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Hero Section</span>
                <Button variant="ghost" size="icon">
                  <Edit size={16} />
                </Button>
              </CardTitle>
              <CardDescription>Edit the hero section on the home page</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="heroTitle">Hero Title</Label>
                <Input
                  id="heroTitle"
                  name="heroTitle"
                  value={activeHomePage.heroTitle}
                  onChange={handleHomePageChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="heroSubtitle">Hero Subtitle</Label>
                <Input
                  id="heroSubtitle"
                  name="heroSubtitle"
                  value={activeHomePage.heroSubtitle}
                  onChange={handleHomePageChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="heroImage">Hero Background Image</Label>
                <div className="flex items-center gap-4">
                  <div className="h-24 w-40 bg-gray-100 rounded flex items-center justify-center">
                    {homePageData?.hero?.backgroundImage ? (
                      <img
                        src={getFullImageUrl(homePageData.hero.backgroundImage)}
                        alt="Hero background"
                        className="h-full w-full object-cover rounded"
                      />
                    ) : (
                      <ImageIcon size={24} className="text-gray-400" />
                    )}
                  </div>
                  <div>
                    <input
                      type="file"
                      accept="image/*"
                      ref={fileInputRef}
                      onChange={handleHeroImageUpload}
                      className="hidden"
                    />
                    <Button
                      variant="outline"
                      onClick={handleChangeImageClick}
                      disabled={loading}
                    >
                      {loading ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : null}
                      Change Image
                    </Button>
                    {homePageData?.hero?.backgroundImage && (
                      <p className="text-xs text-gray-500 mt-1">
                        {homePageData.hero.backgroundImage.split('/').pop()}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Welcome Section</span>
                <Button variant="ghost" size="icon">
                  <Edit size={16} />
                </Button>
              </CardTitle>
              <CardDescription>Edit the welcome section on the home page</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Label htmlFor="welcomeMessage">Welcome Message</Label>
                <Textarea
                  id="welcomeMessage"
                  name="welcomeMessage"
                  rows={4}
                  value={activeHomePage.welcomeMessage}
                  onChange={handleHomePageChange}
                />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>About Section</span>
                <Button variant="ghost" size="icon">
                  <Edit size={16} />
                </Button>
              </CardTitle>
              <CardDescription>Edit the about section on the home page</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Label htmlFor="aboutContent">About Content</Label>
                <Textarea
                  id="aboutContent"
                  name="aboutContent"
                  rows={4}
                  value={activeHomePage.aboutContent}
                  onChange={handleHomePageChange}
                />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Featured Services</span>
                <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={handleAddService}>
                  <PlusCircle size={14} />
                  <span>Add Service</span>
                </Button>
              </CardTitle>
              <CardDescription>Edit featured services displayed on the home page</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {homePageData?.featuredServices && homePageData.featuredServices.length > 0 ?
                  homePageData.featuredServices.map((service, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                      <div className="font-medium">{service.title}</div>
                      <div className="flex gap-2">
                        <Button variant="ghost" size="icon" onClick={() => handleEditService(service)}>
                          <Edit size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-gray-500">
                          <ListOrdered size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteService(service)}>
                          <Trash2 size={16} />
                        </Button>
                      </div>
                    </div>
                  )) :
                  ["Luxury Rooms", "Spa & Wellness", "Fine Dining", "Meeting Spaces"].map((serviceName, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                      <div className="font-medium">{serviceName}</div>
                      <div className="flex gap-2">
                        <Button variant="ghost" size="icon">
                          <Edit size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-gray-500">
                          <ListOrdered size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-red-500">
                          <Trash2 size={16} />
                        </Button>
                      </div>
                    </div>
                  ))
                }
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="rooms" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Rooms Page Header</span>
                <Button variant="ghost" size="icon">
                  <Edit size={16} />
                </Button>
              </CardTitle>
              <CardDescription>Edit the header section of the rooms page</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="roomsTitle">Page Title</Label>
                <Input
                  id="roomsTitle"
                  defaultValue={roomsPageData?.title || "Luxurious Rooms & Suites"}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="roomsDescription">Page Description</Label>
                <Textarea
                  id="roomsDescription"
                  rows={3}
                  defaultValue={roomsPageData?.description || "Experience the ultimate in comfort and luxury with our selection of elegantly designed rooms and suites, each offering unique amenities to enhance your stay."}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="roomsCoverImage">Page Cover Image</Label>
                <div className="flex items-center gap-4">
                  <div className="h-24 w-40 bg-gray-100 rounded flex items-center justify-center">
                    {roomsPageData?.coverImage ? (
                      <img
                        src={getFullImageUrl(roomsPageData.coverImage)}
                        alt="Rooms page cover"
                        className="h-full w-full object-cover rounded"
                      />
                    ) : (
                      <ImageIcon size={24} className="text-gray-400" />
                    )}
                  </div>
                  <div>
                    <input
                      type="file"
                      accept="image/*"
                      ref={roomsFileInputRef}
                      onChange={handleRoomsImageUpload}
                      className="hidden"
                    />
                    <Button
                      variant="outline"
                      onClick={handleRoomsChangeImageClick}
                      disabled={loading}
                    >
                      {loading ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : null}
                      Change Image
                    </Button>
                    {roomsPageData?.coverImage && (
                      <p className="text-xs text-gray-500 mt-1">
                        {roomsPageData.coverImage.split('/').pop()}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Room Categories</span>
                <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={handleAddRoomCategory}>
                  <PlusCircle size={14} />
                  <span>Add Room Category</span>
                </Button>
              </CardTitle>
              <CardDescription>Manage room categories and details</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {roomsPageData?.categories?.length > 0 ?
                  roomsPageData.categories.map((category, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                      <div className="font-medium">{category.name}</div>
                      <div className="flex gap-2">
                        <Button variant="ghost" size="icon" onClick={() => handleEditRoomCategory(category)}>
                          <Edit size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-gray-500">
                          <Layers size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteRoomCategory(category)}>
                          <Trash2 size={16} />
                        </Button>
                      </div>
                    </div>
                  )) :
                  ["Deluxe Room", "Executive Suite", "Presidential Suite", "Family Room"].map((room, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                      <div className="font-medium">{room}</div>
                      <div className="flex gap-2">
                        <Button variant="ghost" size="icon">
                          <Edit size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-gray-500">
                          <Layers size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-red-500">
                          <Trash2 size={16} />
                        </Button>
                      </div>
                    </div>
                  ))
                }
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="spa" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Spa Page Content</CardTitle>
              <CardDescription>Edit the spa page content and services</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="spaTitle">Page Title</Label>
                  <Input
                    id="spaTitle"
                    defaultValue={spaPageData?.title || "Spa & Wellness"}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="spaDescription">Page Description</Label>
                  <Textarea
                    id="spaDescription"
                    rows={3}
                    defaultValue={spaPageData?.description || "Indulge in a world of relaxation and rejuvenation at our luxury spa. Our treatments combine ancient techniques with modern approaches to provide a truly refreshing experience."}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="spaCoverImage">Page Cover Image</Label>
                  <div className="flex items-center gap-4">
                    <div className="h-24 w-40 bg-gray-100 rounded flex items-center justify-center">
                      {spaPageData?.coverImage ? (
                        <img
                          src={getFullImageUrl(spaPageData.coverImage)}
                          alt="Spa page cover"
                          className="h-full w-full object-cover rounded"
                        />
                      ) : (
                        <ImageIcon size={24} className="text-gray-400" />
                      )}
                    </div>
                    <div>
                      <input
                        type="file"
                        accept="image/*"
                        ref={spaFileInputRef}
                        onChange={handleSpaImageUpload}
                        className="hidden"
                      />
                      <Button
                        variant="outline"
                        onClick={handleSpaChangeImageClick}
                        disabled={loading}
                      >
                        {loading ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : null}
                        Change Image
                      </Button>
                      {spaPageData?.coverImage && (
                        <p className="text-xs text-gray-500 mt-1">
                          {spaPageData.coverImage.split('/').pop()}
                        </p>
                      )}
                    </div>
                  </div>
                </div>

                <Separator />

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label>Spa Services</Label>
                    <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={handleAddSpaService}>
                      <PlusCircle size={14} />
                      <span>Add Service</span>
                    </Button>
                  </div>

                  <div className="space-y-2">
                    {spaPageData?.services?.length > 0 ?
                      spaPageData.services.map((service, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{service.name}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon" onClick={() => handleEditSpaService(service)}>
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteSpaService(service)}>
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      )) :
                      ["Swedish Massage", "Deep Tissue Massage", "Hot Stone Therapy", "Aromatherapy", "Facial Treatment"].map((service, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{service}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon">
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500">
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      ))
                    }
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="restaurant" className="space-y-6">
          {/* Restaurant Cover Image Card */}
          <Card>
            <CardHeader>
              <CardTitle>Restaurant Cover Image</CardTitle>
              <CardDescription>Upload and manage the main cover image for the restaurant page</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {/* Current or preview cover image */}
                {(restaurantCoverImagePreview || restaurantPageData?.coverImage) ? (
                  <div className="relative">
                    <img
                      src={restaurantCoverImagePreview || getFullImageUrl(restaurantPageData?.coverImage)}
                      alt="Restaurant cover"
                      className="w-full h-64 object-cover rounded-lg border"
                    />
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      className="absolute top-2 right-2"
                      onClick={removeRestaurantCoverImage}
                    >
                      <X className="h-4 w-4 mr-1" />
                      Remove
                    </Button>
                    {selectedRestaurantCoverImage && (
                      <div className="absolute bottom-2 left-2 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-sm">
                        New image selected
                      </div>
                    )}
                  </div>
                ) : (
                  <div 
                    className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 transition-colors"
                    onClick={() => document.getElementById('restaurant-cover-upload')?.click()}
                  >
                    <ImageIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-lg font-medium text-gray-700 mb-2">Upload Restaurant Cover Image</p>
                    <p className="text-sm text-gray-500">Click to upload or drag and drop</p>
                    <p className="text-xs text-gray-400 mt-1">PNG, JPG, WEBP up to 5MB • Recommended: 1920 × 600 pixels</p>
                  </div>
                )}
                
                <input
                  id="restaurant-cover-upload"
                  type="file"
                  accept="image/*"
                  className="hidden"
                  onChange={handleRestaurantCoverImageUpload}
                />

                {!restaurantCoverImagePreview && !restaurantPageData?.coverImage && (
                  <Button 
                    variant="outline" 
                    onClick={() => document.getElementById('restaurant-cover-upload')?.click()}
                    className="w-full"
                  >
                    <Upload className="h-4 w-4 mr-2" />
                    Choose Cover Image
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Menu PDF Card */}
          <Card>
            <CardHeader>
              <CardTitle>Menu PDF</CardTitle>
              <CardDescription>Upload and manage the restaurant menu PDF</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {/* Current PDF or preview */}
                {(menuPDFPreview || restaurantPageData?.menuItemsPDF) ? (
                  <div className="relative">
                    <div className="border rounded-lg p-6 bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="bg-red-100 p-2 rounded">
                            <svg className="w-8 h-8 text-red-600" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
                            </svg>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">
                              {restaurantPageData?.menuItemsPDF ? 
                                `Menu PDF - ${restaurantPageData.menuItemsPDF.split('/').pop()}` : 
                                'New Menu PDF Selected'
                              }
                            </p>
                            <p className="text-xs text-gray-500">PDF Document</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {restaurantPageData?.menuItemsPDF && (
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => window.open(getFullImageUrl(restaurantPageData.menuItemsPDF), '_blank')}
                            >
                              <Eye className="h-4 w-4 mr-1" />
                              View
                            </Button>
                          )}
                          <Button
                            type="button"
                            variant="destructive"
                            size="sm"
                            onClick={removeMenuPDF}
                          >
                            <X className="h-4 w-4 mr-1" />
                            Remove
                          </Button>
                        </div>
                      </div>
                    </div>
                    {selectedMenuPDF && (
                      <div className="mt-2">
                        <div className="bg-blue-50 text-blue-700 px-3 py-2 rounded text-sm">
                          New PDF selected: {selectedMenuPDF.name}
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div 
                    className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 transition-colors"
                    onClick={() => document.getElementById('menu-pdf-upload')?.click()}
                  >
                    <svg className="h-12 w-12 text-gray-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
                    </svg>
                    <p className="text-lg font-medium text-gray-700 mb-2">Upload Menu PDF</p>
                    <p className="text-sm text-gray-500">Click to upload or drag and drop</p>
                    <p className="text-xs text-gray-400 mt-1">PDF files up to 10MB</p>
                  </div>
                )}
                
                <input
                  id="menu-pdf-upload"
                  type="file"
                  accept=".pdf,application/pdf"
                  className="hidden"
                  onChange={handleMenuPDFUpload}
                />

                {!menuPDFPreview && !restaurantPageData?.menuItemsPDF && (
                  <Button 
                    variant="outline" 
                    onClick={() => document.getElementById('menu-pdf-upload')?.click()}
                    className="w-full"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="h-4 w-4 animate-spin mr-2" />
                        Uploading...
                      </>
                    ) : (
                      <>
                        <Upload className="h-4 w-4 mr-2" />
                        Choose Menu PDF
                      </>
                    )}
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Restaurant Content Card */}
          <Card>
            <CardHeader>
              <CardTitle>Restaurant Content</CardTitle>
              <CardDescription>Edit the restaurant page content</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="restaurantTitle">Page Title</Label>
                  <Input
                    id="restaurantTitle"
                    defaultValue={restaurantPageData?.title || "Fine Dining Experience"}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="restaurantDescription">Page Description</Label>
                  <Textarea
                    id="restaurantDescription"
                    rows={3}
                    defaultValue={restaurantPageData?.description || "Savor exquisite culinary creations at our restaurant, where our talented chefs craft dishes using the finest local and international ingredients to deliver an unforgettable dining experience."}
                  />
                </div>

                <Separator />

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="chefName">Head Chef</Label>
                    <Input
                      id="chefName"
                      defaultValue={restaurantPageData?.headChef || "Chef Michael Roberts"}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="cuisineType">Cuisine Type</Label>
                    <Input
                      id="cuisineType"
                      defaultValue={restaurantPageData?.cuisineType || "Contemporary International"}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="restaurantHours">Opening Hours</Label>
                  <Textarea
                    id="restaurantHours"
                    rows={3}
                    defaultValue={restaurantPageData?.openingHours || "Breakfast: 6:30 AM - 10:30 AM\nLunch: 12:00 PM - 2:30 PM\nDinner: 6:00 PM - 10:30 PM"}
                  />
                </div>

                <div className="flex justify-end pt-4">
                  <Button onClick={saveRestaurantPageContent} disabled={loading}>
                    {loading ? (
                      <>
                        <Loader2 className="h-4 w-4 animate-spin mr-2" />
                        Saving...
                      </>
                    ) : (
                      <>
                        <Save className="h-4 w-4 mr-2" />
                        Save Changes
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Featured Dishes Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Featured Dishes</span>
                <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={handleAddDish}>
                  <PlusCircle size={14} />
                  <span>Add Dish</span>
                </Button>
              </CardTitle>
              <CardDescription>Manage featured dishes shown on the restaurant page</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {restaurantPageData?.featuredDishes?.length > 0 &&
                  restaurantPageData.featuredDishes.map((dish, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                      <div className="font-medium">{dish.name}</div>
                      <div className="flex gap-2">
                        <Button variant="ghost" size="icon" onClick={() => handleEditDish(dish)}>
                          <Edit size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-gray-500">
                          <Layers size={16} />
                        </Button>
                        <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteDish(dish)}>
                          <Trash2 size={16} />
                        </Button>
                      </div>
                    </div>
                  ))
                }
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="events" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Events Page Content</CardTitle>
              <CardDescription>Edit events page content and featured events</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="eventsTitle">Page Title</Label>
                  <Input
                    id="eventsTitle"
                    defaultValue={eventsPageData?.title || "Events & Celebrations"}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="eventsDescription">Page Description</Label>
                  <Textarea
                    id="eventsDescription"
                    rows={3}
                    defaultValue={eventsPageData?.description || "Host extraordinary events in our versatile venues, perfect for weddings, conferences, and special celebrations. Our dedicated team ensures every detail is flawlessly executed."}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="eventsCoverImage">Page Cover Image</Label>
                  <div className="flex items-center gap-4">
                    <div className="h-24 w-40 bg-gray-100 rounded flex items-center justify-center">
                      {eventsPageData?.coverImage ? (
                        <img
                          src={getFullImageUrl(eventsPageData.coverImage)}
                          alt="Events page cover"
                          className="h-full w-full object-cover rounded"
                        />
                      ) : (
                        <ImageIcon size={24} className="text-gray-400" />
                      )}
                    </div>
                    <div>
                      <input
                        type="file"
                        accept="image/*"
                        ref={eventsFileInputRef}
                        onChange={handleEventsImageUpload}
                        className="hidden"
                      />
                      <Button
                        variant="outline"
                        onClick={handleEventsChangeImageClick}
                        disabled={loading}
                      >
                        {loading ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : null}
                        Change Image
                      </Button>
                      {eventsPageData?.coverImage && (
                        <p className="text-xs text-gray-500 mt-1">
                          {eventsPageData.coverImage.split('/').pop()}
                        </p>
                      )}
                    </div>
                  </div>
                </div>

                <Separator />

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label>Featured Events</Label>
                    <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={handleAddEvent}>
                      <PlusCircle size={14} />
                      <span>Add Event</span>
                    </Button>
                  </div>

                  <div className="space-y-2">
                    {eventsPageData?.featuredEvents?.length > 0 ?
                      eventsPageData.featuredEvents.map((event, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{event.name}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon" onClick={() => handleEditEvent(event)}>
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteEvent(event)}>
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      )) :
                      ["Wedding Packages", "Corporate Meetings", "Gala Dinners", "Birthday Celebrations"].map((event, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{event}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon">
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500">
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      ))
                    }
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="meeting-hall" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Meeting Hall Page Content</CardTitle>
              <CardDescription>Edit the meeting hall page content</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="meetingHallTitle">Page Title</Label>
                  <Input
                    id="meetingHallTitle"
                    defaultValue={meetingHallPageData?.title || "Meeting Spaces"}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="meetingHallDescription">Page Description</Label>
                  <Textarea
                    id="meetingHallDescription"
                    rows={3}
                    defaultValue={meetingHallPageData?.description || "Host meetings and events in our versatile meeting spaces. Our dedicated team ensures every detail is flawlessly executed."}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="meetingHallCoverImage">Page Cover Image</Label>
                  <div className="flex items-center gap-4">
                    <div className="h-24 w-40 bg-gray-100 rounded flex items-center justify-center">
                      {meetingHallPageData?.coverImage ? (
                        <img
                          src={getFullImageUrl(meetingHallPageData.coverImage)}
                          alt="Meeting hall page cover"
                          className="h-full w-full object-cover rounded"
                        />
                      ) : (
                        <ImageIcon size={24} className="text-gray-400" />
                      )}
                    </div>
                    <div>
                      <input
                        type="file"
                        accept="image/*"
                        ref={meetingHallFileInputRef}
                        onChange={handleMeetingHallImageUpload}
                        className="hidden"
                      />
                      <Button
                        variant="outline"
                        onClick={handleMeetingHallChangeImageClick}
                        disabled={loading}
                      >
                        {loading ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : null}
                        Change Image
                      </Button>
                      {meetingHallPageData?.coverImage && (
                        <p className="text-xs text-gray-500 mt-1">
                          {meetingHallPageData.coverImage.split('/').pop()}
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="menus" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Navigation Menus</CardTitle>
              <CardDescription>Edit the website's navigation menus</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label>Main Navigation</Label>
                    <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={() => handleAddNavItem(false)}>
                      <PlusCircle size={14} />
                      <span>Add Item</span>
                    </Button>
                  </div>

                  <div className="space-y-2">
                    {navigationData?.main?.length > 0 ?
                      navigationData.main.map((item, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{item.label}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon" onClick={() => handleEditNavItem(item, false)}>
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-gray-500">
                              <ListOrdered size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteNavItem(item, false)}>
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      )) :
                      ["Home", "Rooms & Suites", "Spa", "Restaurant", "Events", "Contact"].map((item, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{item}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon" onClick={() => handleEditNavItem({ label: item, path: `/${item.toLowerCase().replace(/\s+&\s+/g, '-').replace(/\s+/g, '-')}`, order: index }, false)}>
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-gray-500">
                              <ListOrdered size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500">
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      ))
                    }
                  </div>

                  <Separator />

                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label>Footer Navigation</Label>
                      <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={() => handleAddNavItem(true)}>
                        <PlusCircle size={14} />
                        <span>Add Item</span>
                      </Button>
                    </div>

                    <div className="space-y-2">
                      {navigationData?.footer?.length > 0 ?
                        navigationData.footer.map((item, index) => (
                          <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                            <div className="font-medium">{item.label}</div>
                            <div className="flex gap-2">
                              <Button variant="ghost" size="icon" onClick={() => handleEditNavItem(item, true)}>
                                <Edit size={16} />
                              </Button>
                              <Button variant="ghost" size="icon" className="text-gray-500">
                                <ListOrdered size={16} />
                              </Button>
                              <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteNavItem(item, true)}>
                                <Trash2 size={16} />
                              </Button>
                            </div>
                          </div>
                        )) :
                        ["About Us", "Careers", "Privacy Policy", "Terms of Service", "Sitemap"].map((item, index) => (
                          <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                            <div className="font-medium">{item}</div>
                            <div className="flex gap-2">
                              <Button variant="ghost" size="icon" onClick={() => handleEditNavItem({ label: item, path: `/${item.toLowerCase().replace(/\s+/g, '-')}`, order: index }, true)}>
                                <Edit size={16} />
                              </Button>
                              <Button variant="ghost" size="icon" className="text-gray-500">
                                <ListOrdered size={16} />
                              </Button>
                              <Button variant="ghost" size="icon" className="text-red-500">
                                <Trash2 size={16} />
                              </Button>
                            </div>
                          </div>
                        ))
                      }
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="footer" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Footer Content</CardTitle>
              <CardDescription>Edit footer information and links</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="footerAbout">About Text</Label>
                  <Textarea
                    id="footerAbout"
                    rows={3}
                    defaultValue={footerData?.aboutText || "Parkside Plaza Hotel offers luxury accommodations..."}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="footerAddress">Address</Label>
                    <Input
                      id="footerAddress"
                      defaultValue={footerData?.contactInfo?.address || "123 Park Avenue, New York, NY 10001"}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="footerPhone">Phone</Label>
                    <Input
                      id="footerPhone"
                      defaultValue={footerData?.contactInfo?.phone || "+1 (555) 123-4567"}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="footerEmail">Email</Label>
                    <Input
                      id="footerEmail"
                      defaultValue={footerData?.contactInfo?.email || "info@parksideplaza.com"}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="copyrightText">Copyright Text</Label>
                    <Input
                      id="copyrightText"
                      defaultValue={footerData?.copyrightText || "© 2025 Parkside Plaza Hotel. All Rights Reserved."}
                    />
                  </div>
                </div>

                <Separator />

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label>Social Media Links</Label>
                    <Button size="sm" variant="outline" className="flex items-center gap-1" onClick={handleAddSocialMedia}>
                      <PlusCircle size={14} />
                      <span>Add Link</span>
                    </Button>
                  </div>

                  <div className="space-y-2">
                    {footerData?.socialMedia?.length > 0 ?
                      footerData.socialMedia.map((social, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{social.platform}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon" onClick={() => handleEditSocialMedia(social)}>
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500" onClick={() => handleDeleteSocialMedia(social)}>
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      )) :
                      ["Facebook", "Instagram", "Twitter", "LinkedIn"].map((social, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                          <div className="font-medium">{social}</div>
                          <div className="flex gap-2">
                            <Button variant="ghost" size="icon" onClick={() => handleEditSocialMedia({ platform: social, url: `https://${social.toLowerCase()}.com/parksideplaza`, icon: "" })}>
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500">
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </div>
                      ))
                    }
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="bg-white p-4 rounded-lg shadow flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="outline" className="flex items-center gap-2">
            <Type size={16} />
            <span>Typography</span>
          </Button>
          <Button variant="outline" className="flex items-center gap-2">
            <Palette size={16} />
            <span>Colors</span>
          </Button>
          <Button variant="outline" className="flex items-center gap-2">
            <Layers size={16} />
            <span>Components</span>
          </Button>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" className="flex items-center gap-2">
            <RotateCcw size={16} />
            <span>Revert Changes</span>
          </Button>
          <Button
            className="flex items-center gap-2"
            onClick={saveContent}
            disabled={loading}
          >
            {loading ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : <Save size={16} />}
            <span>Save All Changes</span>
          </Button>
        </div>
      </div>

      {/* Service Edit Modal */}
      <Dialog open={isServiceModalOpen} onOpenChange={setIsServiceModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedService ? "Edit Service" : "Add New Service"}
            </DialogTitle>
            <DialogDescription>
              {selectedService ? "Update the service details below." : "Fill in the details for the new service."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="title" className="text-right">
                Title
              </Label>
              <Input
                id="title"
                name="title"
                value={serviceForm.title}
                onChange={handleServiceFormChange}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Textarea
                id="description"
                name="description"
                value={serviceForm.description}
                onChange={handleServiceFormChange}
                className="col-span-3"
                rows={3}
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="icon" className="text-right">
                Icon
              </Label>
              <Input
                id="icon"
                name="icon"
                value={serviceForm.icon || ""}
                onChange={handleServiceFormChange}
                className="col-span-3"
                placeholder="e.g., room-icon, spa-icon"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsServiceModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleServiceSave}>
              {selectedService ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Room Category Edit Modal */}
      <Dialog open={isRoomCategoryModalOpen} onOpenChange={setIsRoomCategoryModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedRoomCategory ? "Edit Room Category" : "Add New Room Category"}
            </DialogTitle>
            <DialogDescription>
              {selectedRoomCategory ? "Update the room category details below." : "Fill in the details for the new room category."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                name="name"
                value={roomCategoryForm.name}
                onChange={handleRoomCategoryFormChange}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Textarea
                id="description"
                name="description"
                value={roomCategoryForm.description}
                onChange={handleRoomCategoryFormChange}
                className="col-span-3"
                rows={3}
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsRoomCategoryModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleRoomCategorySave}>
              {selectedRoomCategory ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Spa Service Edit Modal */}
      <Dialog open={isSpaServiceModalOpen} onOpenChange={setIsSpaServiceModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedSpaService ? "Edit Spa Service" : "Add New Spa Service"}
            </DialogTitle>
            <DialogDescription>
              {selectedSpaService ? "Update the spa service details below." : "Fill in the details for the new spa service."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                name="name"
                value={spaServiceForm.name}
                onChange={handleSpaServiceFormChange}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Textarea
                id="description"
                name="description"
                value={spaServiceForm.description}
                onChange={handleSpaServiceFormChange}
                className="col-span-3"
                rows={3}
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="price" className="text-right">
                Price
              </Label>
              <Input
                id="price"
                name="price"
                value={spaServiceForm.price}
                onChange={handleSpaServiceFormChange}
                className="col-span-3"
                placeholder="e.g., $120"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="duration" className="text-right">
                Duration
              </Label>
              <Input
                id="duration"
                name="duration"
                value={spaServiceForm.duration}
                onChange={handleSpaServiceFormChange}
                className="col-span-3"
                placeholder="e.g., 60 minutes"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsSpaServiceModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSpaServiceSave}>
              {selectedSpaService ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Dish Edit Modal */}
      <Dialog open={isDishModalOpen} onOpenChange={setIsDishModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedDish ? "Edit Featured Dish" : "Add New Featured Dish"}
            </DialogTitle>
            <DialogDescription>
              {selectedDish ? "Update the dish details below." : "Fill in the details for the new featured dish."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                name="name"
                value={dishForm.name}
                onChange={handleDishFormChange}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Textarea
                id="description"
                name="description"
                value={dishForm.description}
                onChange={handleDishFormChange}
                className="col-span-3"
                rows={3}
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="price" className="text-right">
                Price
              </Label>
              <Input
                id="price"
                name="price"
                value={dishForm.price}
                onChange={handleDishFormChange}
                className="col-span-3"
                placeholder="e.g., $35"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="image" className="text-right">
                Image URL
              </Label>
              <Input
                id="image"
                name="image"
                value={dishForm.image}
                onChange={handleDishFormChange}
                className="col-span-3"
                placeholder="e.g., /uploads/filet-mignon.jpg"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDishModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleDishSave}>
              {selectedDish ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Event Edit Modal */}
      <Dialog open={isEventModalOpen} onOpenChange={setIsEventModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedEvent ? "Edit Featured Event" : "Add New Featured Event"}
            </DialogTitle>
            <DialogDescription>
              {selectedEvent ? "Update the event details below." : "Fill in the details for the new featured event."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                name="name"
                value={eventForm.name}
                onChange={handleEventFormChange}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Textarea
                id="description"
                name="description"
                value={eventForm.description}
                onChange={handleEventFormChange}
                className="col-span-3"
                rows={3}
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="image" className="text-right">
                Image URL
              </Label>
              <Input
                id="image"
                name="image"
                value={eventForm.image}
                onChange={handleEventFormChange}
                className="col-span-3"
                placeholder="e.g., /uploads/wedding.jpg"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEventModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleEventSave}>
              {selectedEvent ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Footer Navigation Item Edit Modal */}
      <Dialog open={isFooterNavItemModalOpen} onOpenChange={setIsFooterNavItemModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedNavItem ? "Edit Footer Navigation Item" : "Add New Footer Navigation Item"}
            </DialogTitle>
            <DialogDescription>
              {selectedNavItem ? "Update the footer navigation item details below." : "Fill in the details for the new footer navigation item."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="label" className="text-right">
                Label
              </Label>
              <Input
                id="label"
                name="label"
                value={navItemForm.label}
                onChange={handleNavItemFormChange}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="path" className="text-right">
                URL Path
              </Label>
              <Input
                id="path"
                name="path"
                value={navItemForm.path}
                onChange={handleNavItemFormChange}
                className="col-span-3"
                placeholder="e.g., /privacy-policy or /terms"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsFooterNavItemModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={() => handleNavItemSave(true)}>
              {selectedNavItem ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Social Media Link Edit Modal */}
      <Dialog open={isSocialMediaModalOpen} onOpenChange={setIsSocialMediaModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedSocialMedia ? "Edit Social Media Link" : "Add New Social Media Link"}
            </DialogTitle>
            <DialogDescription>
              {selectedSocialMedia ? "Update the social media link details below." : "Fill in the details for the new social media link."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="platform" className="text-right">
                Platform
              </Label>
              <Input
                id="platform"
                name="platform"
                value={socialMediaForm.platform}
                onChange={handleSocialMediaFormChange}
                className="col-span-3"
                placeholder="e.g., Facebook, Instagram"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="url" className="text-right">
                URL
              </Label>
              <Input
                id="url"
                name="url"
                value={socialMediaForm.url}
                onChange={handleSocialMediaFormChange}
                className="col-span-3"
                placeholder="e.g., https://facebook.com/parksideplaza"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="icon" className="text-right">
                Icon
              </Label>
              <Input
                id="icon"
                name="icon"
                value={socialMediaForm.icon}
                onChange={handleSocialMediaFormChange}
                className="col-span-3"
                placeholder="e.g., facebook-icon (optional)"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsSocialMediaModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSocialMediaSave}>
              {selectedSocialMedia ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Navigation Item Edit Modal */}
      <Dialog open={isNavItemModalOpen} onOpenChange={setIsNavItemModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {selectedNavItem ? "Edit Navigation Item" : "Add New Navigation Item"}
            </DialogTitle>
            <DialogDescription>
              {selectedNavItem ? "Update the navigation item details below." : "Fill in the details for the new navigation item."}
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="label" className="text-right">
                Label
              </Label>
              <Input
                id="label"
                name="label"
                value={navItemForm.label}
                onChange={handleNavItemFormChange}
                className="col-span-3"
              />
            </div>

            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="path" className="text-right">
                URL Path
              </Label>
              <Input
                id="path"
                name="path"
                value={navItemForm.path}
                onChange={handleNavItemFormChange}
                className="col-span-3"
                placeholder="e.g., /rooms or /contact"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsNavItemModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={() => handleNavItemSave(false)}>
              {selectedNavItem ? "Update" : "Save"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default ContentManagementDashboard;
</file>

<file path="src/components/Admin/Dashboard/AdminDashboard.tsx">
import { useState } from "react";
import { 
  BarChart3, 
  TrendingUp, 
  Users, 
  DollarSign, 
  Calendar, 
  Bed, 
  Heart, 
  Ticket, 
  Utensils 
} from "lucide-react";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

const AdminDashboard = () => {
  const [selectedDepartment, setSelectedDepartment] = useState("all");

  // Mock data for demonstration
  const stats = {
    all: {
      totalRevenue: 143250,
      bookingsToday: 28,
      activeGuests: 76,
      availableRooms: 45
    },
    rooms: {
      availableRooms: 45,
      bookedRooms: 55,
      maintenanceRooms: 5,
      upcomingCheckins: 12,
      upcomingCheckouts: 8,
      currentGuests: 32,
      revenue: 78500
    },
    spa: {
      totalAppointments: 42,
      todayAppointments: 8,
      availableSlots: 24,
      revenue: 24750
    },
    events: {
      upcomingEvents: 5,
      ticketsSold: 178,
      revenue: 17800
    },
    restaurant: {
      ordersToday: 64,
      activeReservations: 12,
      revenue: 22200
    }
  };

  const recentBookings = [
    { id: "BK-7834", type: "Room", item: "Deluxe King", customer: "John Smith", date: "2023-04-08", amount: 245 },
    { id: "BK-7835", type: "Spa", item: "Swedish Massage", customer: "Maria Garcia", date: "2023-04-08", amount: 120 },
    { id: "BK-7836", type: "Event", item: "Wine Tasting", customer: "Robert Johnson", date: "2023-04-09", amount: 85 },
    { id: "BK-7837", type: "Room", item: "Executive Suite", customer: "Emily Wong", date: "2023-04-10", amount: 520 },
    { id: "BK-7838", type: "Restaurant", item: "Table Reservation", customer: "Daniel Brown", date: "2023-04-08", amount: 175 }
  ];

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Dashboard</h1>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-500">Quick Filter:</span>
          <select 
            value={selectedDepartment} 
            onChange={(e) => setSelectedDepartment(e.target.value)}
            className="border rounded p-1 text-sm"
          >
            <option value="all">All Departments</option>
            <option value="rooms">Rooms</option>
            <option value="spa">Spa</option>
            <option value="events">Events</option>
            <option value="restaurant">Restaurant</option>
          </select>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium text-gray-500">Total Revenue</p>
                <p className="text-2xl font-bold">${stats.all.totalRevenue.toLocaleString()}</p>
              </div>
              <div className="p-2 bg-green-100 rounded-full">
                <DollarSign className="h-5 w-5 text-green-600" />
              </div>
            </div>
            <div className="mt-4 flex items-center text-sm text-green-600">
              <TrendingUp className="mr-1 h-4 w-4" />
              <span>12% from last month</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium text-gray-500">Bookings Today</p>
                <p className="text-2xl font-bold">{stats.all.bookingsToday}</p>
              </div>
              <div className="p-2 bg-blue-100 rounded-full">
                <Calendar className="h-5 w-5 text-blue-600" />
              </div>
            </div>
            <div className="mt-4 flex items-center text-sm text-blue-600">
              <TrendingUp className="mr-1 h-4 w-4" />
              <span>8% from yesterday</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium text-gray-500">Active Guests</p>
                <p className="text-2xl font-bold">{stats.all.activeGuests}</p>
              </div>
              <div className="p-2 bg-amber-100 rounded-full">
                <Users className="h-5 w-5 text-amber-600" />
              </div>
            </div>
            <div className="mt-4 flex items-center text-sm text-amber-600">
              <span>Current occupancy: 63%</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium text-gray-500">Available Rooms</p>
                <p className="text-2xl font-bold">{stats.all.availableRooms}</p>
              </div>
              <div className="p-2 bg-purple-100 rounded-full">
                <Bed className="h-5 w-5 text-purple-600" />
              </div>
            </div>
            <div className="mt-4 flex items-center text-sm text-purple-600">
              <span>45% rooms available</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader className="pb-2">
            <CardTitle>Department Performance</CardTitle>
            <CardDescription>Revenue by department for the current month</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-72 flex items-end gap-8 mt-4 px-2">
              <div className="flex flex-col items-center gap-2">
                <div className="bg-blue-500 w-16 rounded-t" style={{height: `${stats.rooms.revenue / 1000}px`}}></div>
                <div className="flex items-center gap-1">
                  <Bed size={16} />
                  <span className="text-sm">Rooms</span>
                </div>
                <span className="text-sm font-medium">${stats.rooms.revenue.toLocaleString()}</span>
              </div>
              
              <div className="flex flex-col items-center gap-2">
                <div className="bg-pink-500 w-16 rounded-t" style={{height: `${stats.spa.revenue / 1000}px`}}></div>
                <div className="flex items-center gap-1">
                  <Heart size={16} />
                  <span className="text-sm">Spa</span>
                </div>
                <span className="text-sm font-medium">${stats.spa.revenue.toLocaleString()}</span>
              </div>
              
              <div className="flex flex-col items-center gap-2">
                <div className="bg-amber-500 w-16 rounded-t" style={{height: `${stats.events.revenue / 1000}px`}}></div>
                <div className="flex items-center gap-1">
                  <Ticket size={16} />
                  <span className="text-sm">Events</span>
                </div>
                <span className="text-sm font-medium">${stats.events.revenue.toLocaleString()}</span>
              </div>
              
              <div className="flex flex-col items-center gap-2">
                <div className="bg-green-500 w-16 rounded-t" style={{height: `${stats.restaurant.revenue / 1000}px`}}></div>
                <div className="flex items-center gap-1">
                  <Utensils size={16} />
                  <span className="text-sm">Restaurant</span>
                </div>
                <span className="text-sm font-medium">${stats.restaurant.revenue.toLocaleString()}</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle>Department Stats</CardTitle>
            <CardDescription>Key metrics by department</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="rooms">
              <TabsList className="grid grid-cols-4 mb-4">
                <TabsTrigger value="rooms"><Bed size={16} /></TabsTrigger>
                <TabsTrigger value="spa"><Heart size={16} /></TabsTrigger>
                <TabsTrigger value="events"><Ticket size={16} /></TabsTrigger>
                <TabsTrigger value="restaurant"><Utensils size={16} /></TabsTrigger>
              </TabsList>
              
              <TabsContent value="rooms" className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-sm">Available:</span>
                  <span className="font-medium">{stats.rooms.availableRooms}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Booked:</span>
                  <span className="font-medium">{stats.rooms.bookedRooms}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Maintenance:</span>
                  <span className="font-medium">{stats.rooms.maintenanceRooms}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Upcoming Check-ins:</span>
                  <span className="font-medium">{stats.rooms.upcomingCheckins}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Upcoming Check-outs:</span>
                  <span className="font-medium">{stats.rooms.upcomingCheckouts}</span>
                </div>
              </TabsContent>
              
              <TabsContent value="spa" className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-sm">Total Appointments:</span>
                  <span className="font-medium">{stats.spa.totalAppointments}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Today's Appointments:</span>
                  <span className="font-medium">{stats.spa.todayAppointments}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Available Slots:</span>
                  <span className="font-medium">{stats.spa.availableSlots}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Revenue:</span>
                  <span className="font-medium">${stats.spa.revenue.toLocaleString()}</span>
                </div>
              </TabsContent>
              
              <TabsContent value="events" className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-sm">Upcoming Events:</span>
                  <span className="font-medium">{stats.events.upcomingEvents}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Tickets Sold:</span>
                  <span className="font-medium">{stats.events.ticketsSold}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Revenue:</span>
                  <span className="font-medium">${stats.events.revenue.toLocaleString()}</span>
                </div>
              </TabsContent>
              
              <TabsContent value="restaurant" className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-sm">Orders Today:</span>
                  <span className="font-medium">{stats.restaurant.ordersToday}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Active Reservations:</span>
                  <span className="font-medium">{stats.restaurant.activeReservations}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Revenue:</span>
                  <span className="font-medium">${stats.restaurant.revenue.toLocaleString()}</span>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader className="pb-2">
          <CardTitle>Recent Bookings</CardTitle>
          <CardDescription>Latest bookings across all departments</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Booking ID</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Item</TableHead>
                <TableHead>Customer</TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Amount</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {recentBookings.map((booking) => (
                <TableRow key={booking.id}>
                  <TableCell className="font-medium">{booking.id}</TableCell>
                  <TableCell>{booking.type}</TableCell>
                  <TableCell>{booking.item}</TableCell>
                  <TableCell>{booking.customer}</TableCell>
                  <TableCell>{booking.date}</TableCell>
                  <TableCell>${booking.amount}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
};

export default AdminDashboard;
</file>

<file path="src/components/Admin/Dashboard/AdminDashboardContent.tsx">
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Bed, Calendar, ChartBar, DollarSign, HomeIcon, Users, ArrowUpRight, Heart, Utensils } from "lucide-react";
import { Link } from "react-router-dom";
import { Progress } from "@/components/ui/progress";
import { useEffect, useState } from "react";
import axios from "axios";

interface AdminDashboardContentProps {
  departmentFilter?: string;
}

// Room interface
interface Room {
  _id: string;
  name: string;
  active: boolean;
  totalRooms: number;
  availableRooms: number;
  createdAt?: string;
  updatedAt?: string;
}

const AdminDashboardContent = ({ departmentFilter = "Management" }: AdminDashboardContentProps) => {
  // State for room data and stats
  const [rooms, setRooms] = useState<Room[]>([]);
  const [roomStats, setRoomStats] = useState({
    totalRooms: 0,
    availableRooms: 0,
    availableRoomsYesterday: 0,
    changeSinceYesterday: 0,
    loading: true
  });

  // Fetch room data when component mounts
  useEffect(() => {
    const fetchRooms = async () => {
      try {
        const response = await axios.get("http://localhost:4000/api/rooms");
        if (response.data.success) {
          const roomsData = response.data.data;
          setRooms(roomsData);

          // Get today's date (start of day)
          const today = new Date();
          today.setHours(0, 0, 0, 0);

          // Get yesterday's date (start of day)
          const yesterday = new Date(today);
          yesterday.setDate(yesterday.getDate() - 1);

          // Filter to only get active rooms
          const activeRooms = roomsData.filter((room: Room) => room.active);

          // Calculate active room count (just the count of active room types)
          const activeRoomCount = activeRooms.length;

          // Calculate total rooms (all room types)
          const totalRoomTypeCount = roomsData.length;

          // Count rooms added today (only count active rooms)
          const activeRoomsAddedToday = roomsData.reduce((count, room) => {
            if (room.active && room.createdAt) {
              const createdAt = new Date(room.createdAt);
              if (createdAt >= today) {
                // Count new active rooms added today
                return count + 1; // Add 1 for each room type, not totalRooms
              }
            }
            return count;
          }, 0);

          // Calculate yesterday's active room count
          const activeRoomsYesterday = activeRoomCount - activeRoomsAddedToday;

          console.log({
            totalRoomTypes: totalRoomTypeCount,
            activeRoomTypes: activeRoomCount,
            activeRoomsAddedToday,
            activeRoomsYesterday
          });

          setRoomStats({
            totalRooms: totalRoomTypeCount,
            availableRooms: activeRoomCount,
            availableRoomsYesterday: activeRoomsYesterday,
            changeSinceYesterday: activeRoomsAddedToday,
            loading: false
          });
        }
      } catch (error) {
        console.error("Error fetching room data:", error);
        setRoomStats(prev => ({ ...prev, loading: false }));
      }
    };

    fetchRooms();
  }, []);

  // Function to check if a component should be visible for the current department
  const isVisibleForDepartment = (allowedDepartments: string[]) => {
    return departmentFilter === "Management" || allowedDepartments.includes(departmentFilter);
  };

  // Department-specific metrics
  const getDepartmentTitle = () => {
    if (departmentFilter === "Management") {
      return "Hotel Overview";
    }
    return `${departmentFilter} Dashboard`;
  };

  // Format the change indicator text
  const getChangeText = () => {
    if (roomStats.changeSinceYesterday > 0) {
      return `+${roomStats.changeSinceYesterday} new room${roomStats.changeSinceYesterday > 1 ? 's' : ''} added today`;
    } else if (roomStats.changeSinceYesterday < 0) {
      return `${roomStats.changeSinceYesterday} room${Math.abs(roomStats.changeSinceYesterday) > 1 ? 's' : ''} removed today`;
    } else {
      return "No new rooms today";
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">{getDepartmentTitle()}</h1>
        <div className="flex space-x-2">
          <Button variant="outline" size="sm">
            <Calendar className="mr-2 h-4 w-4" />
            Last 7 Days
          </Button>
          {isVisibleForDepartment(["Management", "Finance"]) && (
            <Button variant="outline" size="sm">
              <ChartBar className="mr-2 h-4 w-4" />
              View Reports
            </Button>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* Show room metrics only for relevant departments */}
        {isVisibleForDepartment(["Management", "Front Office", "Housekeeping"]) && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Available Rooms</CardTitle>
              <Bed className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              {roomStats.loading ? (
                <div className="text-2xl font-bold">Loading...</div>
              ) : (
                <>
                  <div className="text-2xl font-bold">{roomStats.availableRooms}</div>
                  <p className="text-xs text-muted-foreground">{getChangeText()}</p>
                  <Progress
                    value={roomStats.totalRooms > 0 ? (roomStats.availableRooms / roomStats.totalRooms) * 100 : 0}
                    className="h-1 mt-2"
                  />
                </>
              )}
            </CardContent>
          </Card>
        )}

        {/* Show reservation metrics for relevant departments */}
        {isVisibleForDepartment(["Management", "Front Office", "Sales & Marketing"]) && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Upcoming Reservations</CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">18</div>
              <p className="text-xs text-muted-foreground">+3 from yesterday</p>
              <Progress value={42} className="h-1 mt-2" />
            </CardContent>
          </Card>
        )}

        {/* Show guest metrics for relevant departments */}
        {isVisibleForDepartment(["Management", "Front Office", "Housekeeping"]) && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Current Guests</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">24</div>
              <p className="text-xs text-muted-foreground">Same as yesterday</p>
              <Progress value={60} className="h-1 mt-2" />
            </CardContent>
          </Card>
        )}

        {/* Show revenue metrics for relevant departments */}
        {isVisibleForDepartment(["Management", "Finance", "Sales & Marketing"]) && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Today's Revenue</CardTitle>
              <DollarSign className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">$6,420</div>
              <p className="text-xs text-muted-foreground">+12% from yesterday</p>
              <Progress value={78} className="h-1 mt-2" />
            </CardContent>
          </Card>
        )}

        {/* Department-specific metrics */}
        {departmentFilter === "Spa & Wellness" && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Spa Bookings Today</CardTitle>
              <Heart className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">12</div>
              <p className="text-xs text-muted-foreground">+3 from yesterday</p>
              <Progress value={60} className="h-1 mt-2" />
            </CardContent>
          </Card>
        )}

        {departmentFilter === "Food & Beverage" && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Restaurant Reservations</CardTitle>
              <Utensils className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">34</div>
              <p className="text-xs text-muted-foreground">+5 from yesterday</p>
              <Progress value={70} className="h-1 mt-2" />
            </CardContent>
          </Card>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Quick actions card - show department-specific actions */}
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>Common management tasks</CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="grid grid-cols-2 gap-2">
              {isVisibleForDepartment(["Management", "Front Office", "Housekeeping"]) && (
                <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                  <Link to="/admin/rooms/add">
                    <Bed className="mr-2 h-4 w-4" />
                    <span>Add New Room</span>
                  </Link>
                </Button>
              )}

              {isVisibleForDepartment(["Management", "Front Office"]) && (
                <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                  <Link to="/admin/rooms">
                    <Calendar className="mr-2 h-4 w-4" />
                    <span>Manage Bookings</span>
                  </Link>
                </Button>
              )}

              {isVisibleForDepartment(["Management", "Sales & Marketing"]) && (
                <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                  <Link to="/admin/events">
                    <HomeIcon className="mr-2 h-4 w-4" />
                    <span>Add New Event</span>
                  </Link>
                </Button>
              )}

              {isVisibleForDepartment(["Management", "Sales & Marketing"]) && (
                <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                  <Link to="/admin/promo-codes">
                    <DollarSign className="mr-2 h-4 w-4" />
                    <span>Create Promo Code</span>
                  </Link>
                </Button>
              )}

              {departmentFilter === "Spa & Wellness" && (
                <>
                  <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                    <Link to="/admin/spa/add-service">
                      <Heart className="mr-2 h-4 w-4" />
                      <span>Add New Service</span>
                    </Link>
                  </Button>
                  <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                    <Link to="/admin/spa/bookings">
                      <Calendar className="mr-2 h-4 w-4" />
                      <span>View Spa Bookings</span>
                    </Link>
                  </Button>
                </>
              )}

              {departmentFilter === "Food & Beverage" && (
                <>
                  <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                    <Link to="/admin/restaurant/add-item">
                      <Utensils className="mr-2 h-4 w-4" />
                      <span>Add Menu Item</span>
                    </Link>
                  </Button>
                  <Button variant="outline" className="h-auto py-3 justify-start" asChild>
                    <Link to="/admin/restaurant/orders">
                      <Calendar className="mr-2 h-4 w-4" />
                      <span>View Restaurant Orders</span>
                    </Link>
                  </Button>
                </>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Recent activity - make department specific */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <div>
              <CardTitle>Recent Activity</CardTitle>
              <CardDescription>Latest {departmentFilter !== "Management" ? departmentFilter : "system"} events</CardDescription>
            </div>
            <Button variant="ghost" size="sm" className="text-xs">
              View All
              <ArrowUpRight className="ml-1 h-3 w-3" />
            </Button>
          </CardHeader>
          <CardContent>
            <ul className="space-y-4">
              {departmentFilter === "Management" || departmentFilter === "Front Office" ? (
                <li className="flex items-start gap-2">
                  <div className="h-2 w-2 mt-2 rounded-full bg-green-500"></div>
                  <div>
                    <p className="text-sm font-medium">New booking confirmed</p>
                    <p className="text-xs text-muted-foreground">Luxury Suite - April 15-17</p>
                    <p className="text-xs text-muted-foreground mt-1">15 minutes ago</p>
                  </div>
                </li>
              ) : null}

              {departmentFilter === "Management" || departmentFilter === "Food & Beverage" ? (
                <li className="flex items-start gap-2">
                  <div className="h-2 w-2 mt-2 rounded-full bg-blue-500"></div>
                  <div>
                    <p className="text-sm font-medium">Staff login</p>
                    <p className="text-xs text-muted-foreground">Restaurant Manager - Jane Smith</p>
                    <p className="text-xs text-muted-foreground mt-1">45 minutes ago</p>
                  </div>
                </li>
              ) : null}

              {departmentFilter === "Management" || departmentFilter === "Sales & Marketing" ? (
                <li className="flex items-start gap-2">
                  <div className="h-2 w-2 mt-2 rounded-full bg-yellow-500"></div>
                  <div>
                    <p className="text-sm font-medium">Promo code created</p>
                    <p className="text-xs text-muted-foreground">SUMMER25 - 20% off all spa services</p>
                    <p className="text-xs text-muted-foreground mt-1">2 hours ago</p>
                  </div>
                </li>
              ) : null}

              {departmentFilter === "Management" || departmentFilter === "Housekeeping" ? (
                <li className="flex items-start gap-2">
                  <div className="h-2 w-2 mt-2 rounded-full bg-purple-500"></div>
                  <div>
                    <p className="text-sm font-medium">Room maintenance scheduled</p>
                    <p className="text-xs text-muted-foreground">Room 302 - Carpet replacement</p>
                    <p className="text-xs text-muted-foreground mt-1">3 hours ago</p>
                  </div>
                </li>
              ) : null}

              {departmentFilter === "Spa & Wellness" && (
                <>
                  <li className="flex items-start gap-2">
                    <div className="h-2 w-2 mt-2 rounded-full bg-green-500"></div>
                    <div>
                      <p className="text-sm font-medium">New spa booking</p>
                      <p className="text-xs text-muted-foreground">Hot Stone Massage - 2:00 PM</p>
                      <p className="text-xs text-muted-foreground mt-1">30 minutes ago</p>
                    </div>
                  </li>
                  <li className="flex items-start gap-2">
                    <div className="h-2 w-2 mt-2 rounded-full bg-blue-500"></div>
                    <div>
                      <p className="text-sm font-medium">Inventory updated</p>
                      <p className="text-xs text-muted-foreground">Essential oils restocked</p>
                      <p className="text-xs text-muted-foreground mt-1">1 hour ago</p>
                    </div>
                  </li>
                </>
              )}

              {departmentFilter === "Food & Beverage" && (
                <>
                  <li className="flex items-start gap-2">
                    <div className="h-2 w-2 mt-2 rounded-full bg-green-500"></div>
                    <div>
                      <p className="text-sm font-medium">New dinner reservation</p>
                      <p className="text-xs text-muted-foreground">Table for 4 - 7:30 PM</p>
                      <p className="text-xs text-muted-foreground mt-1">20 minutes ago</p>
                    </div>
                  </li>
                  <li className="flex items-start gap-2">
                    <div className="h-2 w-2 mt-2 rounded-full bg-yellow-500"></div>
                    <div>
                      <p className="text-sm font-medium">Menu item added</p>
                      <p className="text-xs text-muted-foreground">New seafood special</p>
                      <p className="text-xs text-muted-foreground mt-1">1 hour ago</p>
                    </div>
                  </li>
                </>
              )}
            </ul>
          </CardContent>
        </Card>
      </div>

      {/* Only show these sections for management or relevant departments */}
      {isVisibleForDepartment(["Management", "Sales & Marketing"]) && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Loyalty Program</CardTitle>
              <CardDescription>Member statistics</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Total Members</span>
                  <span className="font-bold">1,254</span>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Platinum</span>
                    <span>128 members</span>
                  </div>
                  <Progress value={10} className="h-1" />
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Gold</span>
                    <span>376 members</span>
                  </div>
                  <Progress value={30} className="h-1" />
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Silver</span>
                    <span>750 members</span>
                  </div>
                  <Progress value={60} className="h-1" />
                </div>
                <Button variant="outline" size="sm" className="w-full" asChild>
                  <Link to="/admin/loyalty">
                    Manage Loyalty Program
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Upcoming Events</CardTitle>
              <CardDescription>Next 7 days</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium">Summer Gala Dinner</p>
                    <p className="text-xs text-muted-foreground">Grand Ballroom • Tomorrow • 7:00 PM</p>
                  </div>
                  <Button variant="outline" size="sm">Details</Button>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium">Wine Tasting Workshop</p>
                    <p className="text-xs text-muted-foreground">Restaurant • April 12 • 5:30 PM</p>
                  </div>
                  <Button variant="outline" size="sm">Details</Button>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium">Wellness Weekend</p>
                    <p className="text-xs text-muted-foreground">Spa & Pool Area • April 15-16 • All Day</p>
                  </div>
                  <Button variant="outline" size="sm">Details</Button>
                </div>

                <Button variant="outline" size="sm" className="w-full" asChild>
                  <Link to="/admin/events">
                    View All Events
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default AdminDashboardContent;
</file>

<file path="src/components/Admin/Events/AddEventForm.tsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import axios from "axios";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { format } from "date-fns";
import { Calendar as CalendarIcon, Clock, MapPin, DollarSign, Users, Plus, X } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { useToast } from "@/components/ui/use-toast";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// API endpoint for events
const EVENTS_API_URL = "http://localhost:4000/api/events";

const formSchema = z.object({
  title: z.string().min(2, "Title must be at least 2 characters"),
  description: z.string().min(10, "Description must be at least 10 characters"),
  date: z.date(),
  startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
  endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
  bookingDeadlineDate: z.date(),
  bookingDeadlineTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
  location: z.string().min(2, "Location must be at least 2 characters"),
  price: z.number().min(0, "Price must be a positive number"),
  maxAttendees: z.number().int().min(1, "Maximum attendees must be at least 1"),
  image: z.instanceof(FileList).optional(),
  addons: z.array(
    z.object({
      name: z.string().min(1, "Add-on name is required"),
      price: z.number().min(0, "Price must be a positive number"),
    })
  ).optional(),
  isRefundable: z.boolean().default(true),
  refundPolicy: z.string().min(5, "Refund policy must be at least 5 characters long").optional(),
});

type FormValues = z.infer<typeof formSchema>;

const AddEventForm = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [addons, setAddons] = useState<{ name: string; price: number }[]>([]);
  const [addonName, setAddonName] = useState("");
  const [addonPrice, setAddonPrice] = useState(0);
  const [previewImage, setPreviewImage] = useState<string | null>(null);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      description: "",
      date: new Date(),
      startTime: "18:00",
      endTime: "21:00",
      bookingDeadlineDate: new Date(),
      bookingDeadlineTime: "12:00",
      location: "",
      price: 0,
      maxAttendees: 50,
      addons: [],
      isRefundable: true,
      refundPolicy: "Full refund if cancelled 48 hours before the event. 50% refund if cancelled 24 hours before.",
    },
  });

  const isRefundable = form.watch("isRefundable");

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    // Create preview URL for the image
    const imageUrl = URL.createObjectURL(files[0]);
    setPreviewImage(imageUrl);
  };

  const onSubmit = async (data: FormValues) => {
    setIsSubmitting(true);

    try {
      // Create a FormData object to send files along with other data
      const formData = new FormData();

      // Add form fields to FormData
      formData.append("title", data.title);
      formData.append("description", data.description);
      formData.append("date", data.date.toISOString());
      formData.append("startTime", data.startTime);
      formData.append("endTime", data.endTime);
      formData.append("bookingDeadlineDate", data.bookingDeadlineDate.toISOString());
      formData.append("bookingDeadlineTime", data.bookingDeadlineTime);
      formData.append("location", data.location);
      formData.append("price", data.price.toString());
      formData.append("maxAttendees", data.maxAttendees.toString());
      formData.append("isRefundable", data.isRefundable.toString());

      if (data.refundPolicy) {
        formData.append("refundPolicy", data.refundPolicy);
      }

      // Add addons as JSON string
      formData.append("addons", JSON.stringify(addons));

      // Add image if selected
      if (data.image && data.image.length > 0) {
        formData.append("images", data.image[0]);
      }

      // Default values
      formData.append("publishWebsite", "true");
      formData.append("publishApp", "true");
      formData.append("active", "true");

      // Make API call
      const response = await axios.post(EVENTS_API_URL, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      toast({
        title: "Event Created",
        description: "Your event has been successfully created.",
      });

      // Cleanup preview image
      if (previewImage) {
        URL.revokeObjectURL(previewImage);
      }

      // Navigate back to events management
      navigate("/admin/events");
    } catch (error) {
      console.error("Error creating event:", error);
      toast({
        title: "Error",
        description: axios.isAxiosError(error) && error.response?.data?.message
          ? error.response.data.message
          : "There was a problem creating your event. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAddAddon = () => {
    if (addonName.trim() === "" || addonPrice < 0) return;

    setAddons([...addons, { name: addonName, price: addonPrice }]);
    setAddonName("");
    setAddonPrice(0);
  };

  const handleRemoveAddon = (index: number) => {
    const newAddons = [...addons];
    newAddons.splice(index, 1);
    setAddons(newAddons);
  };

  return (
    <Card>
      <CardContent className="pt-6">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-6">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Event Title*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter event title" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description*</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Enter event description"
                          className="min-h-[120px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="location"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Location*</FormLabel>
                      <FormControl>
                        <div className="relative">
                          <MapPin className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                          <Input placeholder="Enter location" className="pl-10" {...field} />
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="space-y-6">
                <FormField
                  control={form.control}
                  name="date"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Event Date*</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={"outline"}
                              className={cn(
                                "pl-3 text-left font-normal",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            initialFocus
                            className={cn("p-3 pointer-events-auto")}
                          />
                        </PopoverContent>
                      </Popover>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="startTime"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Start Time*</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                            <Input
                              placeholder="HH:MM"
                              className="pl-10"
                              {...field}
                            />
                          </div>
                        </FormControl>
                        <FormDescription>
                          24-hour format (e.g. 18:00)
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="endTime"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>End Time*</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                            <Input
                              placeholder="HH:MM"
                              className="pl-10"
                              {...field}
                            />
                          </div>
                        </FormControl>
                        <FormDescription>
                          24-hour format (e.g. 21:00)
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="price"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Price*</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <DollarSign className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                            <Input
                              type="number"
                              placeholder="0.00"
                              className="pl-10"
                              {...field}
                              onChange={(e) => field.onChange(parseFloat(e.target.value))}
                            />
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="maxAttendees"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Max Attendees*</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Users className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                            <Input
                              type="number"
                              placeholder="50"
                              className="pl-10"
                              {...field}
                              onChange={(e) => field.onChange(parseInt(e.target.value))}
                            />
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>
            </div>

            <Separator className="my-4" />

            <h3 className="text-lg font-medium">Booking Deadline</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Set the last date and time for customers to make reservations
            </p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="bookingDeadlineDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Booking Deadline Date*</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant={"outline"}
                            className={cn(
                              "pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="bookingDeadlineTime"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Booking Deadline Time*</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                        <Input
                          placeholder="HH:MM"
                          className="pl-10"
                          {...field}
                        />
                      </div>
                    </FormControl>
                    <FormDescription>
                      24-hour format (e.g. 12:00)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <Separator className="my-4" />

            <h3 className="text-lg font-medium">Refund Policy</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Configure refund options for this event
            </p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="isRefundable"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel className="text-base">
                        Refundable Event
                      </FormLabel>
                      <FormDescription>
                        Allow customers to cancel and receive refunds
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />

              {isRefundable && (
                <FormField
                  control={form.control}
                  name="refundPolicy"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Refund Policy</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a refund policy" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Full refund if cancelled 48 hours before the event. 50% refund if cancelled 24 hours before.">
                            Standard (48h full/24h partial)
                          </SelectItem>
                          <SelectItem value="Full refund if cancelled 7 days before the event. 50% refund if cancelled 72 hours before.">
                            Extended (7 days full/72h partial)
                          </SelectItem>
                          <SelectItem value="Full refund if cancelled 24 hours before the event. No refund after that.">
                            Limited (24h full/no partial)
                          </SelectItem>
                          <SelectItem value="No refunds available for this event.">
                            No Refunds
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Or enter a custom refund policy below
                      </FormDescription>
                      <FormControl>
                        <Textarea
                          placeholder="Enter custom refund policy"
                          className="mt-2"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
            </div>

            <Separator className="my-4" />

            <h3 className="text-lg font-medium">Optional Add-ons</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Add optional menu items or services for guests to select
            </p>

            <div className="space-y-4">
              <div className="flex items-end gap-4">
                <div className="flex-1">
                  <FormLabel>Add-on Name</FormLabel>
                  <Input
                    placeholder="e.g., Premium Drink Package"
                    value={addonName}
                    onChange={(e) => setAddonName(e.target.value)}
                  />
                </div>
                <div className="w-32">
                  <FormLabel>Price</FormLabel>
                  <div className="relative">
                    <DollarSign className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                    <Input
                      type="number"
                      placeholder="0.00"
                      className="pl-10"
                      value={addonPrice}
                      onChange={(e) => setAddonPrice(parseFloat(e.target.value))}
                    />
                  </div>
                </div>
                <Button type="button" onClick={handleAddAddon} className="mb-0.5">
                  <Plus className="h-4 w-4 mr-1" /> Add
                </Button>
              </div>

              {addons.length > 0 && (
                <div className="bg-muted p-4 rounded-md">
                  <h4 className="font-medium mb-2">Added Options:</h4>
                  <div className="space-y-2">
                    {addons.map((addon, index) => (
                      <div key={index} className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="font-normal">
                            ${addon.price.toFixed(2)}
                          </Badge>
                          <span>{addon.name}</span>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => handleRemoveAddon(index)}
                        >
                          <X className="h-4 w-4 text-red-500" />
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <Separator className="my-4" />

            <FormField
              control={form.control}
              name="image"
              render={({ field: { value, onChange, ...fieldProps } }) => (
                <FormItem>
                  <FormLabel>Event Image</FormLabel>
                  <FormControl>
                    <div className="space-y-4">
                      <Input
                        type="file"
                        accept="image/*"
                        {...fieldProps}
                        onChange={(e) => {
                          onChange(e.target.files);
                          handleImageChange(e);
                        }}
                      />

                      {previewImage && (
                        <div className="mt-2">
                          <p className="text-sm text-muted-foreground mb-2">Image Preview:</p>
                          <div className="relative w-40 h-40 rounded-md overflow-hidden border">
                            <img
                              src={previewImage}
                              alt="Preview"
                              className="w-full h-full object-cover"
                            />
                            <Button
                              type="button"
                              variant="destructive"
                              size="icon"
                              className="absolute top-1 right-1 h-6 w-6"
                              onClick={() => {
                                URL.revokeObjectURL(previewImage);
                                setPreviewImage(null);
                                onChange(null);
                              }}
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                  </FormControl>
                  <FormDescription>
                    Upload an image to display on event listings
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex justify-end space-x-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => navigate("/admin/events")}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Creating..." : "Create Event"}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};

export default AddEventForm;
</file>

<file path="src/components/Admin/Events/EditEventForm.tsx">
import { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import axios from "axios";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { format } from "date-fns";
import { Calendar as CalendarIcon, Clock, MapPin, DollarSign, Users, Plus, X, Loader2 } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { useToast } from "@/components/ui/use-toast";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// API endpoint for events
const EVENTS_API_URL = "http://localhost:4000/api/events";

const formSchema = z.object({
    title: z.string().min(2, { message: "Title must be at least 2 characters" }),
    description: z.string().min(10, { message: "Description must be at least 10 characters" }),
    date: z.date(),
    startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
    endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
    bookingDeadlineDate: z.date(),
    bookingDeadlineTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
    location: z.string().min(2, { message: "Location must be at least 2 characters" }),
    price: z.number().min(0, { message: "Price must be a positive number" }),
    maxAttendees: z.number().int().min(1, { message: "Maximum attendees must be at least 1" }),
    image: z.instanceof(FileList).optional(),
    addons: z.array(
        z.object({
            name: z.string().min(1, { message: "Add-on name is required" }),
            price: z.number().min(0, { message: "Price must be a positive number" }),
        })
    ).optional(),
    isRefundable: z.boolean().default(true),
    refundPolicy: z.string().min(5, { message: "Refund policy must be at least 5 characters long" }).optional(),
});

type FormValues = z.infer<typeof formSchema>;

// Interface for event from API
interface Event {
    _id: string;
    title: string;
    description: string;
    date: string;
    startTime: string;
    endTime: string;
    location: string;
    price: number;
    maxAttendees: number;
    currentAttendees: number;
    status: string;
    bookingDeadlineDate: string;
    bookingDeadlineTime: string;
    isRefundable: boolean;
    refundPolicy: string;
    addons: Array<{
        name: string;
        price: number;
        _id: string;
    }>;
    images: string[];
    active: boolean;
    createdAt: string;
    updatedAt: string;
}

const EditEventForm = () => {
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [addons, setAddons] = useState<{ name: string; price: number; _id?: string }[]>([]);
    const [addonName, setAddonName] = useState("");
    const [addonPrice, setAddonPrice] = useState(0);
    const [previewImage, setPreviewImage] = useState<string | null>(null);
    const [existingImages, setExistingImages] = useState<string[]>([]);

    const form = useForm<FormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            title: "",
            description: "",
            date: new Date(),
            startTime: "18:00",
            endTime: "21:00",
            bookingDeadlineDate: new Date(),
            bookingDeadlineTime: "12:00",
            location: "",
            price: 0,
            maxAttendees: 50,
            addons: [],
            isRefundable: true,
            refundPolicy: "Full refund if cancelled 48 hours before the event. 50% refund if cancelled 24 hours before.",
        },
    });

    const isRefundable = form.watch("isRefundable");

    // Fetch event data
    useEffect(() => {
        const fetchEvent = async () => {
            if (!id) return;

            try {
                setIsLoading(true);
                const response = await axios.get(`${EVENTS_API_URL}/${id}`);

                if (response.data && response.data.data) {
                    const event: Event = response.data.data;

                    // Convert string dates to Date objects
                    const eventDate = new Date(event.date);
                    const bookingDeadlineDate = new Date(event.bookingDeadlineDate);

                    // Set form values
                    form.reset({
                        title: event.title,
                        description: event.description,
                        date: eventDate,
                        startTime: event.startTime,
                        endTime: event.endTime,
                        bookingDeadlineDate: bookingDeadlineDate,
                        bookingDeadlineTime: event.bookingDeadlineTime,
                        location: event.location,
                        price: event.price,
                        maxAttendees: event.maxAttendees,
                        isRefundable: event.isRefundable,
                        refundPolicy: event.refundPolicy,
                    });

                    // Set addons
                    if (event.addons && event.addons.length > 0) {
                        setAddons(event.addons.map(addon => ({
                            name: addon.name,
                            price: addon.price,
                            _id: addon._id
                        })));
                    }

                    // Set existing images
                    if (event.images && event.images.length > 0) {
                        setExistingImages(event.images);
                    }
                }
            } catch (error) {
                console.error("Error fetching event:", error);
                toast({
                    title: "Error",
                    description: "Failed to load event data. Please try again.",
                    variant: "destructive",
                });
                navigate("/admin/events");
            } finally {
                setIsLoading(false);
            }
        };

        fetchEvent();
    }, [id, navigate, toast, form]);

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (!files || files.length === 0) return;

        // Create preview URL for the image
        const imageUrl = URL.createObjectURL(files[0]);
        setPreviewImage(imageUrl);
    };

    const onSubmit = async (data: FormValues) => {
        if (!id) return;

        setIsSubmitting(true);

        try {
            // Create a FormData object to send files along with other data
            const formData = new FormData();

            // Add form fields to FormData
            formData.append("title", data.title);
            formData.append("description", data.description);
            formData.append("date", data.date.toISOString());
            formData.append("startTime", data.startTime);
            formData.append("endTime", data.endTime);
            formData.append("bookingDeadlineDate", data.bookingDeadlineDate.toISOString());
            formData.append("bookingDeadlineTime", data.bookingDeadlineTime);
            formData.append("location", data.location);
            formData.append("price", data.price.toString());
            formData.append("maxAttendees", data.maxAttendees.toString());
            formData.append("isRefundable", data.isRefundable.toString());

            if (data.refundPolicy) {
                formData.append("refundPolicy", data.refundPolicy);
            }

            // Add addons as JSON string
            formData.append("addons", JSON.stringify(addons));

            // Add existing images
            formData.append("existingImages", JSON.stringify(existingImages));

            // Add new image if selected
            if (data.image && data.image.length > 0) {
                formData.append("images", data.image[0]);
            }

            // Default values
            formData.append("publishWebsite", "true");
            formData.append("publishApp", "true");
            formData.append("active", "true");

            // Make API call to update the event
            const response = await axios.put(`${EVENTS_API_URL}/${id}`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            toast({
                title: "Event Updated",
                description: "Your event has been successfully updated.",
            });

            // Cleanup preview image
            if (previewImage) {
                URL.revokeObjectURL(previewImage);
            }

            // Navigate back to events management
            navigate("/admin/events");
        } catch (error) {
            console.error("Error updating event:", error);
            toast({
                title: "Error",
                description: axios.isAxiosError(error) && error.response?.data?.message
                    ? error.response.data.message
                    : "There was a problem updating your event. Please try again.",
                variant: "destructive",
            });
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleAddAddon = () => {
        if (addonName.trim() === "" || addonPrice < 0) return;

        setAddons([...addons, { name: addonName, price: addonPrice }]);
        setAddonName("");
        setAddonPrice(0);
    };

    const handleRemoveAddon = (index: number) => {
        const newAddons = [...addons];
        newAddons.splice(index, 1);
        setAddons(newAddons);
    };

    const handleRemoveExistingImage = (index: number) => {
        const newExistingImages = [...existingImages];
        newExistingImages.splice(index, 1);
        setExistingImages(newExistingImages);
    };

    if (isLoading) {
        return (
            <div className="flex items-center justify-center py-12">
                <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
                <span>Loading event data...</span>
            </div>
        );
    }

    return (
        <Card>
            <CardContent className="pt-6">
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div className="space-y-6">
                                <FormField
                                    control={form.control}
                                    name="title"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Event Title*</FormLabel>
                                            <FormControl>
                                                <Input placeholder="Enter event title" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="description"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Description*</FormLabel>
                                            <FormControl>
                                                <Textarea
                                                    placeholder="Enter event description"
                                                    className="min-h-[120px]"
                                                    {...field}
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="location"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Location*</FormLabel>
                                            <FormControl>
                                                <div className="relative">
                                                    <MapPin className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                    <Input placeholder="Enter location" className="pl-10" {...field} />
                                                </div>
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <div className="space-y-6">
                                <FormField
                                    control={form.control}
                                    name="date"
                                    render={({ field }) => (
                                        <FormItem className="flex flex-col">
                                            <FormLabel>Event Date*</FormLabel>
                                            <Popover>
                                                <PopoverTrigger asChild>
                                                    <FormControl>
                                                        <Button
                                                            variant={"outline"}
                                                            className={cn(
                                                                "pl-3 text-left font-normal",
                                                                !field.value && "text-muted-foreground"
                                                            )}
                                                        >
                                                            <CalendarIcon className="mr-2 h-4 w-4" />
                                                            {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                                                        </Button>
                                                    </FormControl>
                                                </PopoverTrigger>
                                                <PopoverContent className="w-auto p-0" align="start">
                                                    <Calendar
                                                        mode="single"
                                                        selected={field.value}
                                                        onSelect={field.onChange}
                                                        initialFocus
                                                        className={cn("p-3 pointer-events-auto")}
                                                    />
                                                </PopoverContent>
                                            </Popover>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <div className="grid grid-cols-2 gap-4">
                                    <FormField
                                        control={form.control}
                                        name="startTime"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Start Time*</FormLabel>
                                                <FormControl>
                                                    <div className="relative">
                                                        <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                        <Input
                                                            placeholder="HH:MM"
                                                            className="pl-10"
                                                            {...field}
                                                        />
                                                    </div>
                                                </FormControl>
                                                <FormDescription>
                                                    24-hour format (e.g. 18:00)
                                                </FormDescription>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="endTime"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>End Time*</FormLabel>
                                                <FormControl>
                                                    <div className="relative">
                                                        <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                        <Input
                                                            placeholder="HH:MM"
                                                            className="pl-10"
                                                            {...field}
                                                        />
                                                    </div>
                                                </FormControl>
                                                <FormDescription>
                                                    24-hour format (e.g. 21:00)
                                                </FormDescription>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />
                                </div>

                                <div className="grid grid-cols-2 gap-4">
                                    <FormField
                                        control={form.control}
                                        name="price"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Price*</FormLabel>
                                                <FormControl>
                                                    <div className="relative">
                                                        <DollarSign className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                        <Input
                                                            type="number"
                                                            placeholder="0.00"
                                                            className="pl-10"
                                                            {...field}
                                                            onChange={(e) => field.onChange(parseFloat(e.target.value))}
                                                        />
                                                    </div>
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="maxAttendees"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Max Attendees*</FormLabel>
                                                <FormControl>
                                                    <div className="relative">
                                                        <Users className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                        <Input
                                                            type="number"
                                                            placeholder="50"
                                                            className="pl-10"
                                                            {...field}
                                                            onChange={(e) => field.onChange(parseInt(e.target.value))}
                                                        />
                                                    </div>
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />
                                </div>
                            </div>
                        </div>

                        <Separator className="my-4" />

                        <h3 className="text-lg font-medium">Booking Deadline</h3>
                        <p className="text-sm text-muted-foreground mb-4">
                            Set the last date and time for customers to make reservations
                        </p>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <FormField
                                control={form.control}
                                name="bookingDeadlineDate"
                                render={({ field }) => (
                                    <FormItem className="flex flex-col">
                                        <FormLabel>Booking Deadline Date*</FormLabel>
                                        <Popover>
                                            <PopoverTrigger asChild>
                                                <FormControl>
                                                    <Button
                                                        variant={"outline"}
                                                        className={cn(
                                                            "pl-3 text-left font-normal",
                                                            !field.value && "text-muted-foreground"
                                                        )}
                                                    >
                                                        <CalendarIcon className="mr-2 h-4 w-4" />
                                                        {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                                                    </Button>
                                                </FormControl>
                                            </PopoverTrigger>
                                            <PopoverContent className="w-auto p-0" align="start">
                                                <Calendar
                                                    mode="single"
                                                    selected={field.value}
                                                    onSelect={field.onChange}
                                                    initialFocus
                                                    className={cn("p-3 pointer-events-auto")}
                                                />
                                            </PopoverContent>
                                        </Popover>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="bookingDeadlineTime"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Booking Deadline Time*</FormLabel>
                                        <FormControl>
                                            <div className="relative">
                                                <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                <Input
                                                    placeholder="HH:MM"
                                                    className="pl-10"
                                                    {...field}
                                                />
                                            </div>
                                        </FormControl>
                                        <FormDescription>
                                            24-hour format (e.g. 12:00)
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        </div>

                        <Separator className="my-4" />

                        <h3 className="text-lg font-medium">Refund Policy</h3>
                        <p className="text-sm text-muted-foreground mb-4">
                            Configure refund options for this event
                        </p>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <FormField
                                control={form.control}
                                name="isRefundable"
                                render={({ field }) => (
                                    <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                                        <div className="space-y-0.5">
                                            <FormLabel className="text-base">
                                                Refundable Event
                                            </FormLabel>
                                            <FormDescription>
                                                Allow customers to cancel and receive refunds
                                            </FormDescription>
                                        </div>
                                        <FormControl>
                                            <Switch
                                                checked={field.value}
                                                onCheckedChange={field.onChange}
                                            />
                                        </FormControl>
                                    </FormItem>
                                )}
                            />

                            {isRefundable && (
                                <FormField
                                    control={form.control}
                                    name="refundPolicy"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Refund Policy</FormLabel>
                                            <Select
                                                onValueChange={field.onChange}
                                                defaultValue={field.value}
                                            >
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder="Select a refund policy" />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    <SelectItem value="Full refund if cancelled 48 hours before the event. 50% refund if cancelled 24 hours before.">
                                                        Standard (48h full/24h partial)
                                                    </SelectItem>
                                                    <SelectItem value="Full refund if cancelled 7 days before the event. 50% refund if cancelled 72 hours before.">
                                                        Extended (7 days full/72h partial)
                                                    </SelectItem>
                                                    <SelectItem value="Full refund if cancelled 24 hours before the event. No refund after that.">
                                                        Limited (24h full/no partial)
                                                    </SelectItem>
                                                    <SelectItem value="No refunds available for this event.">
                                                        No Refunds
                                                    </SelectItem>
                                                </SelectContent>
                                            </Select>
                                            <FormDescription>
                                                Or enter a custom refund policy below
                                            </FormDescription>
                                            <FormControl>
                                                <Textarea
                                                    placeholder="Enter custom refund policy"
                                                    className="mt-2"
                                                    {...field}
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            )}
                        </div>

                        <Separator className="my-4" />

                        <h3 className="text-lg font-medium">Optional Add-ons</h3>
                        <p className="text-sm text-muted-foreground mb-4">
                            Add optional menu items or services for guests to select
                        </p>

                        <div className="space-y-4">
                            <div className="flex items-end gap-4">
                                <div className="flex-1">
                                    <FormLabel>Add-on Name</FormLabel>
                                    <Input
                                        placeholder="e.g., Premium Drink Package"
                                        value={addonName}
                                        onChange={(e) => setAddonName(e.target.value)}
                                    />
                                </div>
                                <div className="w-32">
                                    <FormLabel>Price</FormLabel>
                                    <div className="relative">
                                        <DollarSign className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                        <Input
                                            type="number"
                                            placeholder="0.00"
                                            className="pl-10"
                                            value={addonPrice}
                                            onChange={(e) => setAddonPrice(parseFloat(e.target.value))}
                                        />
                                    </div>
                                </div>
                                <Button type="button" onClick={handleAddAddon} className="mb-0.5">
                                    <Plus className="h-4 w-4 mr-1" /> Add
                                </Button>
                            </div>

                            {addons.length > 0 && (
                                <div className="bg-muted p-4 rounded-md">
                                    <h4 className="font-medium mb-2">Added Options:</h4>
                                    <div className="space-y-2">
                                        {addons.map((addon, index) => (
                                            <div key={index} className="flex items-center justify-between">
                                                <div className="flex items-center gap-2">
                                                    <Badge variant="outline" className="font-normal">
                                                        ${addon.price.toFixed(2)}
                                                    </Badge>
                                                    <span>{addon.name}</span>
                                                </div>
                                                <Button
                                                    type="button"
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => handleRemoveAddon(index)}
                                                >
                                                    <X className="h-4 w-4 text-red-500" />
                                                </Button>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>

                        <Separator className="my-4" />

                        <div className="space-y-4">
                            <h3 className="text-lg font-medium">Event Images</h3>

                            {/* Display existing images */}
                            {existingImages.length > 0 && (
                                <div className="space-y-2">
                                    <h4 className="text-sm font-medium">Current Images:</h4>
                                    <div className="grid grid-cols-3 gap-4">
                                        {existingImages.map((image, index) => (
                                            <div key={index} className="relative group">
                                                <img
                                                    src={`http://localhost:4000/uploads/events/${image}`}
                                                    alt={`Event ${index}`}
                                                    className="rounded-md w-full h-32 object-cover"
                                                    onError={(e) => {
                                                        console.error("Image failed to load:", image);
                                                        e.currentTarget.onerror = null;
                                                        e.currentTarget.src = 'https://via.placeholder.com/100?text=No+Image';
                                                    }}
                                                />
                                                <Button
                                                    type="button"
                                                    variant="destructive"
                                                    size="icon"
                                                    className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity"
                                                    onClick={() => handleRemoveExistingImage(index)}
                                                >
                                                    <X className="h-4 w-4" />
                                                </Button>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {/* Add new image */}
                            <FormField
                                control={form.control}
                                name="image"
                                render={({ field: { value, onChange, ...fieldProps } }) => (
                                    <FormItem>
                                        <FormLabel>Add New Image (Optional)</FormLabel>
                                        <FormControl>
                                            <div className="space-y-4">
                                                <Input
                                                    type="file"
                                                    accept="image/*"
                                                    {...fieldProps}
                                                    onChange={(e) => {
                                                        onChange(e.target.files);
                                                        handleImageChange(e);
                                                    }}
                                                />

                                                {previewImage && (
                                                    <div className="mt-2">
                                                        <p className="text-sm text-muted-foreground mb-2">New Image Preview:</p>
                                                        <div className="relative w-40 h-40 rounded-md overflow-hidden border">
                                                            <img
                                                                src={previewImage}
                                                                alt="Preview"
                                                                className="w-full h-full object-cover"
                                                            />
                                                            <Button
                                                                type="button"
                                                                variant="destructive"
                                                                size="icon"
                                                                className="absolute top-1 right-1 h-6 w-6"
                                                                onClick={() => {
                                                                    URL.revokeObjectURL(previewImage);
                                                                    setPreviewImage(null);
                                                                    onChange(null);
                                                                }}
                                                            >
                                                                <X className="h-4 w-4" />
                                                            </Button>
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        </FormControl>
                                        <FormDescription>
                                            Upload an image to display on event listings
                                        </FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        </div>

                        <div className="flex justify-end space-x-4">
                            <Button
                                type="button"
                                variant="outline"
                                onClick={() => navigate("/admin/events")}
                            >
                                Cancel
                            </Button>
                            <Button type="submit" disabled={isSubmitting}>
                                {isSubmitting ? "Updating..." : "Update Event"}
                            </Button>
                        </div>
                    </form>
                </Form>
            </CardContent>
        </Card>
    );
};

export default EditEventForm;
</file>

<file path="src/components/Admin/Events/EditEventModal.tsx">
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import axios from "axios";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { format } from "date-fns";
import { Calendar as CalendarIcon, Clock, MapPin, DollarSign, Users, Plus, X, Loader2 } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";

// API endpoint for events
const EVENTS_API_URL = "http://localhost:4000/api/events";

const formSchema = z.object({
    title: z.string().min(2, "Title must be at least 2 characters"),
    description: z.string().min(10, "Description must be at least 10 characters"),
    date: z.date(),
    startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
    endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
    bookingDeadlineDate: z.date(),
    bookingDeadlineTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Please enter a valid time in format HH:MM"),
    location: z.string().min(2, "Location must be at least 2 characters"),
    price: z.number().min(0, "Price must be a positive number"),
    maxAttendees: z.number().int().min(1, "Maximum attendees must be at least 1"),
    image: z.instanceof(FileList).optional(),
    addons: z.array(
        z.object({
            name: z.string().min(1, "Add-on name is required"),
            price: z.number().min(0, "Price must be a positive number"),
        })
    ).optional(),
    isRefundable: z.boolean().default(true),
    refundPolicy: z.string().min(5, "Refund policy must be at least 5 characters long").optional(),
});

type FormValues = z.infer<typeof formSchema>;

// Interface for event from API
interface Event {
    _id: string;
    title: string;
    description: string;
    date: string;
    startTime: string;
    endTime: string;
    location: string;
    price: number;
    maxAttendees: number;
    currentAttendees: number;
    status: string;
    bookingDeadlineDate: string;
    bookingDeadlineTime: string;
    isRefundable: boolean;
    refundPolicy: string;
    addons: Array<{
        name: string;
        price: number;
        _id: string;
    }>;
    images: string[];
    active: boolean;
    createdAt: string;
    updatedAt: string;
}

interface EditEventModalProps {
    isOpen: boolean;
    onClose: () => void;
    eventId: string | null;
    onSuccess: () => void;
}

const EditEventModal = ({ isOpen, onClose, eventId, onSuccess }: EditEventModalProps) => {
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [addons, setAddons] = useState<{ name: string; price: number; _id?: string }[]>([]);
    const [addonName, setAddonName] = useState("");
    const [addonPrice, setAddonPrice] = useState(0);
    const [previewImage, setPreviewImage] = useState<string | null>(null);
    const [existingImages, setExistingImages] = useState<string[]>([]);

    const form = useForm<FormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            title: "",
            description: "",
            date: new Date(),
            startTime: "18:00",
            endTime: "21:00",
            bookingDeadlineDate: new Date(),
            bookingDeadlineTime: "12:00",
            location: "",
            price: 0,
            maxAttendees: 50,
            addons: [],
            isRefundable: true,
            refundPolicy: "Full refund if cancelled 48 hours before the event. 50% refund if cancelled 24 hours before.",
        },
    });

    const isRefundable = form.watch("isRefundable");

    // Fetch event data when modal is opened
    useEffect(() => {
        if (isOpen && eventId) {
            const fetchEvent = async () => {
                try {
                    setIsLoading(true);
                    const response = await axios.get(`${EVENTS_API_URL}/${eventId}`);

                    if (response.data && response.data.data) {
                        const event: Event = response.data.data;

                        // Convert string dates to Date objects
                        const eventDate = new Date(event.date);
                        const bookingDeadlineDate = new Date(event.bookingDeadlineDate);

                        // Set form values
                        form.reset({
                            title: event.title,
                            description: event.description,
                            date: eventDate,
                            startTime: event.startTime,
                            endTime: event.endTime,
                            bookingDeadlineDate: bookingDeadlineDate,
                            bookingDeadlineTime: event.bookingDeadlineTime,
                            location: event.location,
                            price: event.price,
                            maxAttendees: event.maxAttendees,
                            isRefundable: event.isRefundable,
                            refundPolicy: event.refundPolicy,
                        });

                        // Set addons
                        if (event.addons && event.addons.length > 0) {
                            setAddons(event.addons.map(addon => ({
                                name: addon.name,
                                price: addon.price,
                                _id: addon._id
                            })));
                        } else {
                            setAddons([]);
                        }

                        // Set existing images
                        if (event.images && event.images.length > 0) {
                            setExistingImages(event.images);
                        } else {
                            setExistingImages([]);
                        }
                    }
                } catch (error) {
                    console.error("Error fetching event:", error);
                    toast.error("Failed to load event data");
                } finally {
                    setIsLoading(false);
                }
            };

            fetchEvent();
        } else {
            // Clear form when closed
            form.reset();
            setAddons([]);
            setExistingImages([]);
            setPreviewImage(null);
        }
    }, [isOpen, eventId, form]);

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (!files || files.length === 0) return;

        // Create preview URL for the image
        const imageUrl = URL.createObjectURL(files[0]);
        setPreviewImage(imageUrl);
    };

    const onSubmit = async (data: FormValues) => {
        if (!eventId) return;

        setIsSubmitting(true);

        try {
            // Create a FormData object to send files along with other data
            const formData = new FormData();

            // Add form fields to FormData
            formData.append("title", data.title);
            formData.append("description", data.description);
            formData.append("date", data.date.toISOString());
            formData.append("startTime", data.startTime);
            formData.append("endTime", data.endTime);
            formData.append("bookingDeadlineDate", data.bookingDeadlineDate.toISOString());
            formData.append("bookingDeadlineTime", data.bookingDeadlineTime);
            formData.append("location", data.location);
            formData.append("price", data.price.toString());
            formData.append("maxAttendees", data.maxAttendees.toString());
            formData.append("isRefundable", data.isRefundable.toString());

            if (data.refundPolicy) {
                formData.append("refundPolicy", data.refundPolicy);
            }

            // Add addons as JSON string
            formData.append("addons", JSON.stringify(addons));

            // Add existing images
            formData.append("existingImages", JSON.stringify(existingImages));

            // Add new image if selected
            if (data.image && data.image.length > 0) {
                formData.append("images", data.image[0]);
            }

            // Default values
            formData.append("publishWebsite", "true");
            formData.append("publishApp", "true");
            formData.append("active", "true");

            // Make API call to update the event
            await axios.put(`${EVENTS_API_URL}/${eventId}`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            toast.success("Event updated successfully");

            // Cleanup preview image
            if (previewImage) {
                URL.revokeObjectURL(previewImage);
            }

            // Close modal and refresh list
            onSuccess();
            onClose();
        } catch (error) {
            console.error("Error updating event:", error);
            toast.error(axios.isAxiosError(error) && error.response?.data?.message
                ? error.response.data.message
                : "There was a problem updating your event");
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleAddAddon = () => {
        if (addonName.trim() === "" || addonPrice < 0) return;

        setAddons([...addons, { name: addonName, price: addonPrice }]);
        setAddonName("");
        setAddonPrice(0);
    };

    const handleRemoveAddon = (index: number) => {
        const newAddons = [...addons];
        newAddons.splice(index, 1);
        setAddons(newAddons);
    };

    const handleRemoveExistingImage = (index: number) => {
        const newExistingImages = [...existingImages];
        newExistingImages.splice(index, 1);
        setExistingImages(newExistingImages);
    };

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="sm:max-w-[900px] max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                    <DialogTitle>Edit Event</DialogTitle>
                </DialogHeader>

                {isLoading ? (
                    <div className="flex items-center justify-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
                        <span>Loading event data...</span>
                    </div>
                ) : (
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div className="space-y-4">
                                    <FormField
                                        control={form.control}
                                        name="title"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Event Title*</FormLabel>
                                                <FormControl>
                                                    <Input placeholder="Enter event title" {...field} />
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="description"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Description*</FormLabel>
                                                <FormControl>
                                                    <Textarea
                                                        placeholder="Enter event description"
                                                        className="min-h-[100px]"
                                                        {...field}
                                                    />
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />

                                    <FormField
                                        control={form.control}
                                        name="location"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Location*</FormLabel>
                                                <FormControl>
                                                    <div className="relative">
                                                        <MapPin className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                        <Input placeholder="Enter location" className="pl-10" {...field} />
                                                    </div>
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />
                                </div>

                                <div className="space-y-4">
                                    <FormField
                                        control={form.control}
                                        name="date"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Event Date*</FormLabel>
                                                <Popover>
                                                    <PopoverTrigger asChild>
                                                        <FormControl>
                                                            <Button
                                                                variant={"outline"}
                                                                className={cn(
                                                                    "w-full pl-3 text-left font-normal",
                                                                    !field.value && "text-muted-foreground"
                                                                )}
                                                            >
                                                                <CalendarIcon className="mr-2 h-4 w-4" />
                                                                {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                                                            </Button>
                                                        </FormControl>
                                                    </PopoverTrigger>
                                                    <PopoverContent className="w-auto p-0" align="start">
                                                        <Calendar
                                                            mode="single"
                                                            selected={field.value}
                                                            onSelect={field.onChange}
                                                            initialFocus
                                                        />
                                                    </PopoverContent>
                                                </Popover>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />

                                    <div className="grid grid-cols-2 gap-3">
                                        <FormField
                                            control={form.control}
                                            name="startTime"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Start Time*</FormLabel>
                                                    <FormControl>
                                                        <div className="relative">
                                                            <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                            <Input
                                                                placeholder="HH:MM"
                                                                className="pl-10"
                                                                {...field}
                                                            />
                                                        </div>
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />

                                        <FormField
                                            control={form.control}
                                            name="endTime"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>End Time*</FormLabel>
                                                    <FormControl>
                                                        <div className="relative">
                                                            <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                            <Input
                                                                placeholder="HH:MM"
                                                                className="pl-10"
                                                                {...field}
                                                            />
                                                        </div>
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />
                                    </div>

                                    <div className="grid grid-cols-2 gap-3">
                                        <FormField
                                            control={form.control}
                                            name="price"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Price*</FormLabel>
                                                    <FormControl>
                                                        <div className="relative">
                                                            <DollarSign className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                            <Input
                                                                type="number"
                                                                placeholder="0.00"
                                                                className="pl-10"
                                                                {...field}
                                                                onChange={(e) => field.onChange(parseFloat(e.target.value))}
                                                            />
                                                        </div>
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />

                                        <FormField
                                            control={form.control}
                                            name="maxAttendees"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Max Attendees*</FormLabel>
                                                    <FormControl>
                                                        <div className="relative">
                                                            <Users className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                            <Input
                                                                type="number"
                                                                placeholder="50"
                                                                className="pl-10"
                                                                {...field}
                                                                onChange={(e) => field.onChange(parseInt(e.target.value))}
                                                            />
                                                        </div>
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />
                                    </div>
                                </div>
                            </div>

                            <Separator />

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <h3 className="text-sm font-medium mb-2">Booking Deadline</h3>
                                    <div className="space-y-3">
                                        <FormField
                                            control={form.control}
                                            name="bookingDeadlineDate"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Deadline Date*</FormLabel>
                                                    <Popover>
                                                        <PopoverTrigger asChild>
                                                            <FormControl>
                                                                <Button
                                                                    variant={"outline"}
                                                                    className={cn(
                                                                        "w-full pl-3 text-left font-normal",
                                                                        !field.value && "text-muted-foreground"
                                                                    )}
                                                                >
                                                                    <CalendarIcon className="mr-2 h-4 w-4" />
                                                                    {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                                                                </Button>
                                                            </FormControl>
                                                        </PopoverTrigger>
                                                        <PopoverContent className="w-auto p-0" align="start">
                                                            <Calendar
                                                                mode="single"
                                                                selected={field.value}
                                                                onSelect={field.onChange}
                                                                initialFocus
                                                            />
                                                        </PopoverContent>
                                                    </Popover>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />

                                        <FormField
                                            control={form.control}
                                            name="bookingDeadlineTime"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Deadline Time*</FormLabel>
                                                    <FormControl>
                                                        <div className="relative">
                                                            <Clock className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                                            <Input
                                                                placeholder="HH:MM"
                                                                className="pl-10"
                                                                {...field}
                                                            />
                                                        </div>
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />
                                    </div>
                                </div>

                                <div>
                                    <h3 className="text-sm font-medium mb-2">Refund Policy</h3>
                                    <div className="space-y-3">
                                        <FormField
                                            control={form.control}
                                            name="isRefundable"
                                            render={({ field }) => (
                                                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                                                    <div>
                                                        <FormLabel className="text-base mb-0">Refundable Event</FormLabel>
                                                    </div>
                                                    <FormControl>
                                                        <Switch
                                                            checked={field.value}
                                                            onCheckedChange={field.onChange}
                                                        />
                                                    </FormControl>
                                                </FormItem>
                                            )}
                                        />

                                        {isRefundable && (
                                            <FormField
                                                control={form.control}
                                                name="refundPolicy"
                                                render={({ field }) => (
                                                    <FormItem>
                                                        <FormLabel>Refund Policy</FormLabel>
                                                        <Select
                                                            onValueChange={field.onChange}
                                                            defaultValue={field.value}
                                                        >
                                                            <FormControl>
                                                                <SelectTrigger>
                                                                    <SelectValue placeholder="Select a refund policy" />
                                                                </SelectTrigger>
                                                            </FormControl>
                                                            <SelectContent>
                                                                <SelectItem value="Full refund if cancelled 48 hours before the event. 50% refund if cancelled 24 hours before.">
                                                                    Standard (48h full/24h partial)
                                                                </SelectItem>
                                                                <SelectItem value="Full refund if cancelled 7 days before the event. 50% refund if cancelled 72 hours before.">
                                                                    Extended (7 days full/72h partial)
                                                                </SelectItem>
                                                                <SelectItem value="Full refund if cancelled 24 hours before the event. No refund after that.">
                                                                    Limited (24h full/no partial)
                                                                </SelectItem>
                                                                <SelectItem value="No refunds available for this event.">
                                                                    No Refunds
                                                                </SelectItem>
                                                            </SelectContent>
                                                        </Select>
                                                        <FormControl>
                                                            <Textarea
                                                                placeholder="Or enter custom refund policy"
                                                                className="mt-2"
                                                                {...field}
                                                            />
                                                        </FormControl>
                                                        <FormMessage />
                                                    </FormItem>
                                                )}
                                            />
                                        )}
                                    </div>
                                </div>
                            </div>

                            <Separator />

                            <div className="space-y-3">
                                <h3 className="text-sm font-medium">Optional Add-ons</h3>
                                <div className="flex items-end gap-3">
                                    <div className="flex-1">
                                        <FormLabel>Add-on Name</FormLabel>
                                        <Input
                                            placeholder="e.g., Premium Drink Package"
                                            value={addonName}
                                            onChange={(e) => setAddonName(e.target.value)}
                                        />
                                    </div>
                                    <div className="w-24">
                                        <FormLabel>Price</FormLabel>
                                        <div className="relative">
                                            <DollarSign className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                                            <Input
                                                type="number"
                                                placeholder="0.00"
                                                className="pl-10"
                                                value={addonPrice}
                                                onChange={(e) => setAddonPrice(parseFloat(e.target.value))}
                                            />
                                        </div>
                                    </div>
                                    <Button type="button" onClick={handleAddAddon} className="mb-0.5">
                                        <Plus className="h-4 w-4 mr-1" /> Add
                                    </Button>
                                </div>

                                {addons.length > 0 && (
                                    <div className="bg-muted p-3 rounded-md">
                                        <h4 className="text-sm font-medium mb-2">Added Options:</h4>
                                        <div className="space-y-2">
                                            {addons.map((addon, index) => (
                                                <div key={index} className="flex items-center justify-between">
                                                    <div className="flex items-center gap-2">
                                                        <Badge variant="outline" className="font-normal">
                                                            ${addon.price.toFixed(2)}
                                                        </Badge>
                                                        <span>{addon.name}</span>
                                                    </div>
                                                    <Button
                                                        type="button"
                                                        variant="ghost"
                                                        size="sm"
                                                        onClick={() => handleRemoveAddon(index)}
                                                    >
                                                        <X className="h-4 w-4 text-red-500" />
                                                    </Button>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                )}
                            </div>

                            <Separator />

                            <div className="space-y-3">
                                <h3 className="text-sm font-medium">Event Images</h3>

                                {/* Display existing images */}
                                {existingImages.length > 0 && (
                                    <div className="space-y-2">
                                        <h4 className="text-xs text-muted-foreground">Current Images:</h4>
                                        <div className="grid grid-cols-3 gap-3">
                                            {existingImages.map((image, index) => (
                                                <div key={index} className="relative group">
                                                    <img
                                                        src={`http://localhost:4000/uploads/events/${image}`}
                                                        alt={`Event ${index}`}
                                                        className="rounded-md w-full h-24 object-cover"
                                                        onError={(e) => {
                                                            e.currentTarget.onerror = null;
                                                            e.currentTarget.src = 'https://via.placeholder.com/100?text=No+Image';
                                                        }}
                                                    />
                                                    <Button
                                                        type="button"
                                                        variant="destructive"
                                                        size="icon"
                                                        className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity"
                                                        onClick={() => handleRemoveExistingImage(index)}
                                                    >
                                                        <X className="h-4 w-4" />
                                                    </Button>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                )}

                                {/* Add new image */}
                                <FormField
                                    control={form.control}
                                    name="image"
                                    render={({ field: { value, onChange, ...fieldProps } }) => (
                                        <FormItem>
                                            <FormLabel>Add New Image (Optional)</FormLabel>
                                            <FormControl>
                                                <div className="space-y-3">
                                                    <Input
                                                        type="file"
                                                        accept="image/*"
                                                        {...fieldProps}
                                                        onChange={(e) => {
                                                            onChange(e.target.files);
                                                            handleImageChange(e);
                                                        }}
                                                    />

                                                    {previewImage && (
                                                        <div className="mt-2">
                                                            <p className="text-xs text-muted-foreground mb-1">New Image Preview:</p>
                                                            <div className="relative w-32 h-32 rounded-md overflow-hidden border">
                                                                <img
                                                                    src={previewImage}
                                                                    alt="Preview"
                                                                    className="w-full h-full object-cover"
                                                                />
                                                                <Button
                                                                    type="button"
                                                                    variant="destructive"
                                                                    size="icon"
                                                                    className="absolute top-1 right-1 h-6 w-6"
                                                                    onClick={() => {
                                                                        URL.revokeObjectURL(previewImage);
                                                                        setPreviewImage(null);
                                                                        onChange(null);
                                                                    }}
                                                                >
                                                                    <X className="h-4 w-4" />
                                                                </Button>
                                                            </div>
                                                        </div>
                                                    )}
                                                </div>
                                            </FormControl>
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <div className="flex justify-end space-x-3 mt-6">
                                <Button
                                    type="button"
                                    variant="outline"
                                    onClick={onClose}
                                >
                                    Cancel
                                </Button>
                                <Button type="submit" disabled={isSubmitting}>
                                    {isSubmitting ? "Updating..." : "Update Event"}
                                </Button>
                            </div>
                        </form>
                    </Form>
                )}
            </DialogContent>
        </Dialog>
    );
};

export default EditEventModal;
</file>

<file path="src/components/Admin/Events/EventManagementContent.tsx">
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { format } from "date-fns";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ArrowUpDown, Plus, Edit, Trash2, Search, Loader2, Calendar, Clock, Users, DollarSign } from "lucide-react";
import { toast } from "sonner";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";

// API endpoint for events
const EVENTS_API_URL = "http://localhost:4000/api/events";

// Interface for event from API
interface Event {
  _id: string;
  title: string;
  description: string;
  date: string;
  startTime: string;
  endTime: string;
  location: string;
  price: number;
  maxAttendees: number;
  currentAttendees: number;
  status: "upcoming" | "ongoing" | "completed" | "cancelled";
  bookingDeadlineDate: string;
  bookingDeadlineTime: string;
  isRefundable: boolean;
  refundPolicy: string;
  addons: Array<{
    name: string;
    price: number;
    _id: string;
  }>;
  images: string[];
  active: boolean;
  createdAt: string;
  updatedAt: string;
}

const EventManagementContent: React.FC = () => {
  const navigate = useNavigate();
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [deleting, setDeleting] = useState(false);

  // Fetch events from API
  const fetchEvents = async () => {
    try {
      setLoading(true);
      const response = await axios.get(EVENTS_API_URL);
      
      // Check the response structure and handle it accordingly
      if (response.data && response.data.data && Array.isArray(response.data.data)) {
        setEvents(response.data.data);
      } else {
        console.error("Unexpected API response format:", response.data);
        setEvents([]);
      }
    } catch (error) {
      console.error("Error fetching events:", error);
      toast.error("Failed to load events");
      setEvents([]);
    } finally {
      setLoading(false);
    }
  };

  // Load events on component mount
  useEffect(() => {
    fetchEvents();
  }, []);

  // Filter events based on search query and status
  const filteredEvents = events.filter(event => {
    const matchesSearch = 
      event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      event.location.toLowerCase().includes(searchQuery.toLowerCase()) ||
      event.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesStatus = statusFilter === "all" || event.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  // Handle adding a new event
  const handleAddEvent = () => {
    navigate("/admin/events/add");
  };

  // Handle editing an event
  const handleEditEvent = (id: string) => {
    navigate(`/admin/events/edit/${id}`);
  };

  // Handle deleting an event
  const handleDeleteEvent = async () => {
    if (!selectedEvent) return;
    
    try {
      setDeleting(true);
      await axios.delete(`${EVENTS_API_URL}/${selectedEvent._id}`);
      toast.success("Event deleted successfully");
      fetchEvents();
    } catch (error) {
      console.error("Error deleting event:", error);
      toast.error("Failed to delete event");
    } finally {
      setDeleting(false);
      setDeleteDialogOpen(false);
      setSelectedEvent(null);
    }
  };

  // Handle updating event status
  const handleUpdateStatus = async (id: string, newStatus: string) => {
    try {
      await axios.put(`${EVENTS_API_URL}/status/${id}`, { status: newStatus });
      toast.success(`Event status updated to ${newStatus}`);
      fetchEvents();
    } catch (error) {
      console.error("Error updating event status:", error);
      toast.error("Failed to update event status");
    }
  };

  // Format date for display
  const formatEventDate = (dateString: string) => {
    const date = new Date(dateString);
    return format(date, "PPP");
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold tracking-tight">Event Management</h2>
        <Button onClick={handleAddEvent}>
          <Plus className="mr-2 h-4 w-4" /> Add New Event
        </Button>
      </div>
      
      <div className="my-4 flex flex-wrap gap-4">
        <div className="relative flex-1 min-w-[200px]">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search events..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8"
          />
        </div>
        
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Statuses</SelectItem>
            <SelectItem value="upcoming">Upcoming</SelectItem>
            <SelectItem value="ongoing">Ongoing</SelectItem>
            <SelectItem value="completed">Completed</SelectItem>
            <SelectItem value="cancelled">Cancelled</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Events</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
              <span>Loading events...</span>
            </div>
          ) : (
            <>
              {events.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-muted-foreground mb-4">No events found</p>
                  <Button onClick={handleAddEvent} variant="outline">
                    Add Your First Event
                  </Button>
                </div>
              ) : filteredEvents.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-muted-foreground mb-4">No events match your search criteria</p>
                  <Button onClick={() => {setSearchQuery(""); setStatusFilter("all");}} variant="outline">
                    Clear Filters
                  </Button>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[80px]">Image</TableHead>
                      <TableHead>
                        <div className="flex items-center">
                          Title
                          <ArrowUpDown className="ml-2 h-4 w-4" />
                        </div>
                      </TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Attendees</TableHead>
                      <TableHead>Price</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredEvents.map((event) => (
                      <TableRow key={event._id}>
                        <TableCell>
                          <div className="w-16 h-16 rounded-md overflow-hidden">
                            {event.images && event.images.length > 0 ? (
                              <img
                                src={`http://localhost:4000/uploads/events/${event.images[0]}`}
                                alt={event.title}
                                className="w-full h-full object-cover"
                                onError={(e) => {
                                  console.error("Image failed to load:", event.images[0]);
                                  e.currentTarget.onerror = null;
                                  e.currentTarget.src = 'https://via.placeholder.com/100?text=No+Image';
                                }}
                              />
                            ) : (
                              <div className="w-full h-full bg-gray-200 flex items-center justify-center text-xs">
                                No Image
                              </div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="max-w-[300px]">
                            <div className="font-medium">{event.title}</div>
                            <div className="text-sm text-muted-foreground truncate">
                              {event.location}
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-col">
                            <div className="flex items-center">
                              <Calendar className="mr-1 h-3 w-3 text-muted-foreground" />
                              <span className="text-sm">{formatEventDate(event.date)}</span>
                            </div>
                            <div className="flex items-center mt-1">
                              <Clock className="mr-1 h-3 w-3 text-muted-foreground" />
                              <span className="text-sm">{event.startTime} - {event.endTime}</span>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge
                            variant={
                              event.status === "upcoming" ? "outline" :
                              event.status === "ongoing" ? "default" :
                              event.status === "completed" ? "secondary" :
                              "destructive"
                            }
                            className="capitalize"
                          >
                            {event.status}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center">
                            <Users className="mr-1 h-3 w-3 text-muted-foreground" />
                            <span>{event.currentAttendees}/{event.maxAttendees}</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center">
                            <DollarSign className="mr-1 h-3 w-3 text-muted-foreground" />
                            <span>${event.price.toFixed(2)}</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex space-x-2">
                            <Select
                              defaultValue={event.status}
                              onValueChange={(value) => handleUpdateStatus(event._id, value)}
                            >
                              <SelectTrigger className="w-28 text-xs h-8 px-2">
                                <SelectValue placeholder="Status" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="upcoming">Upcoming</SelectItem>
                                <SelectItem value="ongoing">Ongoing</SelectItem>
                                <SelectItem value="completed">Completed</SelectItem>
                                <SelectItem value="cancelled">Cancelled</SelectItem>
                              </SelectContent>
                            </Select>
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => handleEditEvent(event._id)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="icon"
                              className="text-red-500"
                              onClick={() => {
                                setSelectedEvent(event);
                                setDeleteDialogOpen(true);
                              }}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </>
          )}
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure you want to delete this event?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the event
              {selectedEvent ? ` "${selectedEvent.title}"` : ''} and all associated data.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={deleting}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={(e) => {
                e.preventDefault();
                handleDeleteEvent();
              }}
              className="bg-red-500 hover:bg-red-600 text-white"
              disabled={deleting}
            >
              {deleting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Deleting...
                </>
              ) : (
                "Delete"
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default EventManagementContent;
</file>

<file path="src/components/Admin/Events/EventsBookingsContent.tsx">
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search, Calendar as CalendarIcon, Filter, RotateCcw, Globe, Smartphone } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogDescription } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import { format } from "date-fns";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "sonner";
import { Switch } from "@/components/ui/switch";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from "@/components/ui/form";
import { useForm } from "react-hook-form";

interface EventBooking {
  id: string;
  eventId: string;
  eventName: string;
  customerName: string;
  customerEmail: string;
  customerPhone: string;
  bookingDate: string;
  attendees: number;
  totalAmount: number;
  paymentStatus: "paid" | "pending" | "failed";
  bookingStatus: "confirmed" | "cancelled" | "attended" | "no-show";
  refundPolicy: {
    isRefundable: boolean;
    daysBeforeEvent: number;
    refundPercentage: number;
  };
  source: "website" | "app";
}

const EventsBookingsContent = () => {
  const [bookings, setBookings] = useState<EventBooking[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);
  const [selectedStatus, setSelectedStatus] = useState<string>("all");
  const [selectedBooking, setSelectedBooking] = useState<EventBooking | null>(null);
  const [showCancelDialog, setShowCancelDialog] = useState(false);
  const [showRefundDialog, setShowRefundDialog] = useState(false);
  const [showRefundPolicyDialog, setShowRefundPolicyDialog] = useState(false);
  const [isSuperAdmin, setIsSuperAdmin] = useState(false);

  const refundPolicyForm = useForm({
    defaultValues: {
      isRefundable: false,
      daysBeforeEvent: 2,
      refundPercentage: 100
    }
  });

  useEffect(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const userData = JSON.parse(userDataString);
      setIsSuperAdmin(userData.role === "Administrator" || userData.accessLevel === "Full Access");
    }

    const mockBookings: EventBooking[] = [
      {
        id: "b1",
        eventId: "e1",
        eventName: "Summer Jazz Night",
        customerName: "John Smith",
        customerEmail: "john.smith@example.com",
        customerPhone: "+1-555-123-4567",
        bookingDate: "2025-04-02",
        attendees: 2,
        totalAmount: 150,
        paymentStatus: "paid",
        bookingStatus: "confirmed",
        refundPolicy: {
          isRefundable: true,
          daysBeforeEvent: 2,
          refundPercentage: 100
        },
        source: "website"
      },
      {
        id: "b2",
        eventId: "e2",
        eventName: "Wine Tasting Gala",
        customerEmail: "emily.johnson@example.com",
        customerName: "Emily Johnson",
        customerPhone: "+1-555-234-5678",
        bookingDate: "2025-04-05",
        attendees: 4,
        totalAmount: 480,
        paymentStatus: "paid",
        bookingStatus: "confirmed",
        refundPolicy: {
          isRefundable: false,
          daysBeforeEvent: 0,
          refundPercentage: 0
        },
        source: "app"
      },
      {
        id: "b3",
        eventId: "e3",
        eventName: "Cooking Masterclass",
        customerName: "Michael Brown",
        customerEmail: "michael.brown@example.com",
        customerPhone: "+1-555-345-6789",
        bookingDate: "2025-04-10",
        attendees: 1,
        totalAmount: 150,
        paymentStatus: "paid",
        bookingStatus: "confirmed",
        refundPolicy: {
          isRefundable: true,
          daysBeforeEvent: 3,
          refundPercentage: 75
        },
        source: "website"
      },
      {
        id: "b4",
        eventId: "e4",
        eventName: "Weekend Wellness Retreat",
        customerName: "Jessica Davis",
        customerEmail: "jessica.davis@example.com",
        customerPhone: "+1-555-456-7890",
        bookingDate: "2025-04-15",
        attendees: 2,
        totalAmount: 598,
        paymentStatus: "pending",
        bookingStatus: "confirmed",
        refundPolicy: {
          isRefundable: false,
          daysBeforeEvent: 0,
          refundPercentage: 0
        },
        source: "app"
      },
      {
        id: "b5",
        eventId: "e1",
        eventName: "Summer Jazz Night",
        customerName: "Robert Wilson",
        customerEmail: "robert.wilson@example.com",
        customerPhone: "+1-555-567-8901",
        bookingDate: "2025-04-18",
        attendees: 3,
        totalAmount: 225,
        paymentStatus: "paid",
        bookingStatus: "cancelled",
        refundPolicy: {
          isRefundable: true,
          daysBeforeEvent: 1,
          refundPercentage: 50
        },
        source: "website"
      }
    ];
    setBookings(mockBookings);
  }, []);

  const filteredBookings = bookings.filter(booking => {
    if (searchQuery && 
        !booking.customerName.toLowerCase().includes(searchQuery.toLowerCase()) &&
        !booking.eventName.toLowerCase().includes(searchQuery.toLowerCase()) &&
        !booking.customerEmail.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }
    
    if (selectedDate && booking.bookingDate !== format(selectedDate, "yyyy-MM-dd")) {
      return false;
    }
    
    if (selectedStatus !== "all" && booking.bookingStatus !== selectedStatus) {
      return false;
    }
    
    return true;
  });

  const getPaymentStatusBadge = (status: string) => {
    switch (status) {
      case "paid":
        return <Badge className="bg-green-500">Paid</Badge>;
      case "pending":
        return <Badge className="bg-yellow-500">Pending</Badge>;
      case "failed":
        return <Badge className="bg-red-500">Failed</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  const getBookingStatusBadge = (status: string) => {
    switch (status) {
      case "confirmed":
        return <Badge className="bg-blue-500">Confirmed</Badge>;
      case "cancelled":
        return <Badge className="bg-red-500">Cancelled</Badge>;
      case "attended":
        return <Badge className="bg-green-500">Attended</Badge>;
      case "no-show":
        return <Badge className="bg-gray-500">No-show</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  const getRefundPolicyBadge = (policy: { isRefundable: boolean; daysBeforeEvent: number; refundPercentage: number }) => {
    if (!policy.isRefundable) {
      return <Badge className="bg-gray-500">Non-refundable</Badge>;
    }
    
    return (
      <Badge className="bg-green-500">
        {policy.refundPercentage}% up to {policy.daysBeforeEvent} day{policy.daysBeforeEvent !== 1 ? 's' : ''} before
      </Badge>
    );
  };

  const getSourceIcon = (source: "website" | "app") => {
    if (source === "website") {
      return <Globe className="h-4 w-4 text-blue-500" />;
    } else if (source === "app") {
      return <Smartphone className="h-4 w-4 text-green-500" />;
    }
    return null;
  };

  const handleCancelBooking = () => {
    if (!selectedBooking) return;
    
    const updatedBookings = bookings.map(booking => 
      booking.id === selectedBooking.id 
        ? { ...booking, bookingStatus: "cancelled" as const } 
        : booking
    );
    
    setBookings(updatedBookings);
    toast.success(`Booking for ${selectedBooking.eventName} has been cancelled.`);
    setShowCancelDialog(false);
  };

  const handleUpdateStatus = (booking: EventBooking, newStatus: "confirmed" | "cancelled" | "attended" | "no-show") => {
    const updatedBookings = bookings.map(b => 
      b.id === booking.id 
        ? { ...b, bookingStatus: newStatus } 
        : b
    );
    
    setBookings(updatedBookings);
    toast.success(`Booking status updated to ${newStatus}.`);
  };

  const onSubmitRefundPolicy = (data: { isRefundable: boolean; daysBeforeEvent: number; refundPercentage: number }) => {
    if (!selectedBooking) return;
    
    const updatedBookings = bookings.map(booking => 
      booking.id === selectedBooking.id 
        ? { 
            ...booking, 
            refundPolicy: {
              isRefundable: data.isRefundable,
              daysBeforeEvent: data.daysBeforeEvent,
              refundPercentage: data.refundPercentage
            }
          } 
        : booking
    );
    
    setBookings(updatedBookings);
    toast.success(`Refund policy for ${selectedBooking.customerName}'s booking has been updated.`);
    setShowRefundDialog(false);
  };

  const handleRefundRequest = (booking: EventBooking) => {
    setSelectedBooking(booking);
    setShowRefundDialog(true);
  };

  const handleProcessRefund = () => {
    if (!selectedBooking) return;
    
    toast.success(`Refund for ${selectedBooking.customerName}'s booking has been processed.`);
    
    setShowRefundDialog(false);
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Events Bookings</h1>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Bookings</CardTitle>
            <div className="flex flex-col sm:flex-row gap-2 mt-2">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
                <Input
                  placeholder="Search by name, email, or event..."
                  className="pl-8"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              
              <Select 
                value={selectedStatus} 
                onValueChange={setSelectedStatus}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Filter by status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Statuses</SelectItem>
                  <SelectItem value="confirmed">Confirmed</SelectItem>
                  <SelectItem value="cancelled">Cancelled</SelectItem>
                  <SelectItem value="attended">Attended</SelectItem>
                  <SelectItem value="no-show">No-show</SelectItem>
                </SelectContent>
              </Select>
              
              <Button variant="outline" onClick={() => {
                setSelectedDate(undefined);
                setSelectedStatus("all");
                setSearchQuery("");
              }}>
                <RotateCcw className="h-4 w-4 mr-2" />
                Clear Filters
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Customer</TableHead>
                    <TableHead>Event</TableHead>
                    <TableHead>Booking Date</TableHead>
                    <TableHead>Attendees</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Payment</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Refund Policy</TableHead>
                    {isSuperAdmin && <TableHead>Source</TableHead>}
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredBookings.length > 0 ? (
                    filteredBookings.map((booking) => (
                      <TableRow key={booking.id}>
                        <TableCell>
                          <div className="font-medium">{booking.customerName}</div>
                          <div className="text-xs text-gray-500">{booking.customerEmail}</div>
                        </TableCell>
                        <TableCell>{booking.eventName}</TableCell>
                        <TableCell>{booking.bookingDate}</TableCell>
                        <TableCell>{booking.attendees}</TableCell>
                        <TableCell>${booking.totalAmount}</TableCell>
                        <TableCell>{getPaymentStatusBadge(booking.paymentStatus)}</TableCell>
                        <TableCell>{getBookingStatusBadge(booking.bookingStatus)}</TableCell>
                        <TableCell>
                          {getRefundPolicyBadge(booking.refundPolicy)}
                        </TableCell>
                        {isSuperAdmin && (
                          <TableCell>
                            <div className="flex items-center gap-1.5">
                              {getSourceIcon(booking.source)}
                              <span className="text-xs capitalize">{booking.source}</span>
                            </div>
                          </TableCell>
                        )}
                        <TableCell className="text-right">
                          {booking.bookingStatus !== "cancelled" && (
                            <>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setSelectedBooking(booking);
                                  setShowCancelDialog(true);
                                }}
                              >
                                Cancel
                              </Button>
                              
                              {booking.bookingStatus === "confirmed" && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="bg-green-50 text-green-600 hover:bg-green-100 ml-2"
                                  onClick={() => handleUpdateStatus(booking, "attended")}
                                >
                                  Mark Attended
                                </Button>
                              )}
                              
                              {booking.bookingStatus === "confirmed" && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="bg-gray-50 text-gray-600 hover:bg-gray-100 ml-2"
                                  onClick={() => handleUpdateStatus(booking, "no-show")}
                                >
                                  No-show
                                </Button>
                              )}
                              
                              <Button
                                size="sm"
                                variant="outline"
                                className="ml-2"
                                onClick={() => {
                                  setSelectedBooking(booking);
                                  setShowRefundPolicyDialog(true);
                                }}
                              >
                                Refund Settings
                              </Button>

                              {isSuperAdmin && booking.refundPolicy.isRefundable && (
                                <Button 
                                  size="sm" 
                                  variant="outline" 
                                  className="text-blue-500 hover:text-blue-700 ml-2"
                                  onClick={() => handleRefundRequest(booking)}
                                >
                                  <RotateCcw className="h-4 w-4 mr-1" /> Refund
                                </Button>
                              )}
                            </>
                          )}
                          
                          {booking.bookingStatus === "cancelled" && (
                            <Button
                              size="sm"
                              variant="outline"
                              className="bg-blue-50 text-blue-600 hover:bg-blue-100"
                              onClick={() => handleUpdateStatus(booking, "confirmed")}
                            >
                              Restore
                            </Button>
                          )}
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={isSuperAdmin ? 10 : 9} className="text-center py-4">
                        No bookings found matching your criteria
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Filters</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <h3 className="text-sm font-medium mb-2">Booking Date</h3>
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  className="rounded-md border"
                />
              </div>
              
              <div className="pt-4">
                <h3 className="text-sm font-medium mb-2">Booking Statistics</h3>
                <Tabs defaultValue="summary">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="summary">Summary</TabsTrigger>
                    <TabsTrigger value="status">By Status</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="summary" className="pt-4">
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span>Total Bookings:</span>
                        <span className="font-medium">{bookings.length}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Active Bookings:</span>
                        <span className="font-medium">
                          {bookings.filter(b => b.bookingStatus !== "cancelled").length}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Total Revenue:</span>
                        <span className="font-medium">
                          ${bookings.reduce((sum, b) => sum + (b.bookingStatus !== "cancelled" ? b.totalAmount : 0), 0)}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Total Attendees:</span>
                        <span className="font-medium">
                          {bookings.reduce((sum, b) => sum + (b.bookingStatus !== "cancelled" ? b.attendees : 0), 0)}
                        </span>
                      </div>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="status" className="pt-4">
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span>Confirmed:</span>
                        <span className="font-medium">
                          {bookings.filter(b => b.bookingStatus === "confirmed").length}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Cancelled:</span>
                        <span className="font-medium">
                          {bookings.filter(b => b.bookingStatus === "cancelled").length}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Attended:</span>
                        <span className="font-medium">
                          {bookings.filter(b => b.bookingStatus === "attended").length}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>No-show:</span>
                        <span className="font-medium">
                          {bookings.filter(b => b.bookingStatus === "no-show").length}
                        </span>
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Dialog open={showCancelDialog} onOpenChange={setShowCancelDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Cancel Booking</DialogTitle>
            <DialogDescription>
              This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          
          {selectedBooking && (
            <div className="py-4">
              <p className="mb-4">
                Are you sure you want to cancel the booking for <strong>{selectedBooking.eventName}</strong> made by <strong>{selectedBooking.customerName}</strong>?
              </p>
              
              <div className="bg-amber-50 p-3 rounded-md text-amber-800 text-sm mb-4">
                <p>This will:</p>
                <ul className="list-disc pl-5 mt-1">
                  <li>Mark the booking as cancelled</li>
                  <li>Free up space for other attendees</li>
                  <li>Potentially trigger a refund process if applicable</li>
                </ul>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowCancelDialog(false)}>
              Go Back
            </Button>
            <Button 
              variant="destructive" 
              onClick={handleCancelBooking}
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              Cancel Booking
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showRefundPolicyDialog} onOpenChange={setShowRefundPolicyDialog}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Refund Policy Settings</DialogTitle>
            <DialogDescription>
              Configure the refund policy for this booking.
            </DialogDescription>
          </DialogHeader>
          
          {selectedBooking && (
            <div className="py-2">
              <p className="mb-4">
                Configure refund settings for <strong>{selectedBooking.eventName}</strong> booking made by <strong>{selectedBooking.customerName}</strong>.
              </p>
              
              <Form {...refundPolicyForm}>
                <form onSubmit={refundPolicyForm.handleSubmit(onSubmitRefundPolicy)} className="space-y-6">
                  <FormField
                    control={refundPolicyForm.control}
                    name="isRefundable"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                        <div className="space-y-0.5">
                          <FormLabel className="text-base">Refundable</FormLabel>
                          <FormDescription>
                            Allow customers to cancel and receive a refund
                          </FormDescription>
                        </div>
                        <FormControl>
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                      </FormItem>
                    )}
                  />
                  
                  {refundPolicyForm.watch("isRefundable") && (
                    <div className="space-y-4">
                      <FormField
                        control={refundPolicyForm.control}
                        name="daysBeforeEvent"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Days Before Event</FormLabel>
                            <FormDescription>
                              How many days before the event should cancellations be allowed?
                            </FormDescription>
                            <FormControl>
                              <Input
                                type="number"
                                min={0}
                                max={30}
                                {...field}
                                onChange={e => field.onChange(parseInt(e.target.value) || 0)}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={refundPolicyForm.control}
                        name="refundPercentage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Refund Percentage</FormLabel>
                            <FormDescription>
                              What percentage of the payment will be refunded?
                            </FormDescription>
                            <FormControl>
                              <Input
                                type="number"
                                min={0}
                                max={100}
                                {...field}
                                onChange={e => field.onChange(parseInt(e.target.value) || 0)}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                    </div>
                  )}
                  
                  <DialogFooter>
                    <Button type="button" variant="outline" onClick={() => setShowRefundPolicyDialog(false)}>
                      Cancel
                    </Button>
                    <Button type="submit">Save Changes</Button>
                  </DialogFooter>
                </form>
              </Form>
            </div>
          )}
        </DialogContent>
      </Dialog>

      <Dialog open={showRefundDialog} onOpenChange={setShowRefundDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Process Refund</DialogTitle>
            <DialogDescription>
              {selectedBooking?.refundPolicy.isRefundable 
                ? "Are you sure you want to process a refund for this booking?" 
                : "This booking is marked as non-refundable."}
            </DialogDescription>
          </DialogHeader>
          
          {selectedBooking && (
            <div className="py-4">
              <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                <h3 className="text-sm font-medium mb-2">Refund Policy:</h3>
                <p className="text-sm text-gray-700">
                  {selectedBooking.refundPolicy.isRefundable 
                    ? `${selectedBooking.refundPolicy.refundPercentage}% refund if cancelled up to ${selectedBooking.refundPolicy.daysBeforeEvent} day(s) before the event.`
                    : "This booking is non-refundable."}
                </p>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-sm font-medium">Booking ID:</p>
                  <p className="text-sm">{selectedBooking.id}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Customer:</p>
                  <p className="text-sm">{selectedBooking.customerName}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Amount:</p>
                  <p className="text-sm">${selectedBooking.totalAmount}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Contact:</p>
                  <p className="text-sm">{selectedBooking.customerEmail}</p>
                </div>
                {isSuperAdmin && (
                  <div className="col-span-2">
                    <p className="text-sm font-medium">Source:</p>
                    <div className="flex items-center gap-1.5 mt-1">
                      {getSourceIcon(selectedBooking.source)}
                      <span className="text-sm capitalize">{selectedBooking.source}</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowRefundDialog(false)}>Cancel</Button>
            <Button 
              disabled={selectedBooking && !selectedBooking.refundPolicy.isRefundable} 
              onClick={handleProcessRefund}
            >
              Process Refund
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default EventsBookingsContent;
</file>

<file path="src/components/Admin/Events/EventsManagementContent.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Calendar } from "@/components/ui/calendar";
import { format } from "date-fns";
import { Search, Plus, Calendar as CalendarIcon, QrCode, Ticket, Check, X, RotateCcw, AlertCircle, DollarSign } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription, SheetFooter } from "@/components/ui/sheet";
import { Switch } from "@/components/ui/switch";
import QRCode from "react-qr-code";
import { toast } from "sonner";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import axios from "axios";
import EditEventModal from "@/components/Admin/Events/EditEventModal";

// API endpoints
const EVENTS_API_URL = "http://localhost:4000/api/events";

interface Event {
  _id: string;
  title: string;
  description: string;
  date: string;
  startTime: string;
  endTime: string;
  location: string;
  price: number;
  maxAttendees: number;
  currentAttendees: number;
  status: "upcoming" | "ongoing" | "completed" | "cancelled";
  isRefundable: boolean;
  refundPolicy: string;
  images: string[];
  addons: Array<{
    name: string;
    price: number;
  }>;
  publishWebsite: boolean;
  publishApp: boolean;
  active: boolean;
  createdAt: string;
  updatedAt: string;
}

interface RefundRequest {
  id: string;
  eventId: string;
  eventTitle: string;
  customerName: string;
  customerEmail: string;
  bookingDate: string;
  requestDate: string;
  amount: number;
  status: "pending" | "approved" | "declined";
  reason: string;
}

const EventsManagementContent = () => {
  const navigate = useNavigate();
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [date, setDate] = useState<Date | undefined>(undefined);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [showRefundDialog, setShowRefundDialog] = useState(false);
  const [showDetailsDialog, setShowDetailsDialog] = useState(false);
  const [showRefundSheet, setShowRefundSheet] = useState(false);
  const [refundRequests, setRefundRequests] = useState<RefundRequest[]>([]);
  const [refundReason, setRefundReason] = useState("");
  const [refundAmount, setRefundAmount] = useState<number>(0);
  const [refundType, setRefundType] = useState<string>("full");
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingEventId, setEditingEventId] = useState<string | null>(null);

  const fetchEvents = async () => {
    try {
      setLoading(true);
      const response = await axios.get(EVENTS_API_URL);
      setEvents(response.data.data);
      setError(null);
    } catch (err) {
      console.error("Error fetching events:", err);
      setError("Failed to load events. Please try again later.");
      toast.error("Failed to load events");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchEvents();

    // Mock refund requests (keeping this until we have a refund API endpoint)
    const mockRefundRequests: RefundRequest[] = [
      {
        id: "r1",
        eventId: "e1",
        eventTitle: "Summer Jazz Night",
        customerName: "John Smith",
        customerEmail: "john.smith@example.com",
        bookingDate: "2025-04-01",
        requestDate: "2025-04-05",
        amount: 75,
        status: "pending",
        reason: "Unable to attend due to illness"
      },
      {
        id: "r2",
        eventId: "e2",
        eventTitle: "Wine Tasting Gala",
        customerName: "Emily Johnson",
        customerEmail: "emily.johnson@example.com",
        bookingDate: "2025-04-02",
        requestDate: "2025-04-10",
        amount: 120,
        status: "approved",
        reason: "Schedule conflict"
      }
    ];
    setRefundRequests(mockRefundRequests);
  }, []);

  const filteredEvents = events.filter(event => {
    if (searchQuery && !event.title.toLowerCase().includes(searchQuery.toLowerCase()) &&
      !event.description.toLowerCase().includes(searchQuery.toLowerCase()) &&
      !event.location.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }

    if (date) {
      const eventDate = new Date(event.date);
      const selectedDate = date;
      return (
        eventDate.getFullYear() === selectedDate.getFullYear() &&
        eventDate.getMonth() === selectedDate.getMonth() &&
        eventDate.getDate() === selectedDate.getDate()
      );
    }

    return true;
  });

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "upcoming":
        return <Badge className="bg-blue-500">Upcoming</Badge>;
      case "ongoing":
        return <Badge className="bg-green-500">Ongoing</Badge>;
      case "completed":
        return <Badge className="bg-purple-500">Completed</Badge>;
      case "cancelled":
        return <Badge className="bg-red-500">Cancelled</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  const handleAddEvent = () => {
    navigate('/admin/events/add');
  };

  const handleEditEvent = (event: Event) => {
    setEditingEventId(event._id);
    setShowEditModal(true);
  };

  const [isSuperAdmin, setIsSuperAdmin] = useState(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const userData = JSON.parse(userDataString);
      return userData.role === "Administrator" || userData.accessLevel === "Full Access";
    }
    return false;
  });

  const handleRefundRequest = (event: Event) => {
    if (!event.isRefundable) {
      toast.error("This event is not eligible for refunds.");
      return;
    }

    setSelectedEvent(event);
    setRefundAmount(event.price);
    setRefundType("full");
    setRefundReason("");
    setShowRefundSheet(true);
  };

  const calculateRefundAmount = (type: string, originalPrice: number) => {
    switch (type) {
      case "full":
        return originalPrice;
      case "partial75":
        return originalPrice * 0.75;
      case "partial50":
        return originalPrice * 0.5;
      case "partial25":
        return originalPrice * 0.25;
      case "custom":
        return refundAmount;
      default:
        return originalPrice;
    }
  };

  const handleProcessRefund = () => {
    if (!selectedEvent || !refundReason) {
      toast.error("Please provide a reason for the refund");
      return;
    }

    const calculatedAmount = calculateRefundAmount(refundType, selectedEvent.price);

    const newRefundRequest: RefundRequest = {
      id: `r${refundRequests.length + 1}`,
      eventId: selectedEvent._id,
      eventTitle: selectedEvent.title,
      customerName: "Customer Name",
      customerEmail: "customer@example.com",
      bookingDate: "2025-04-01",
      requestDate: format(new Date(), "yyyy-MM-dd"),
      amount: calculatedAmount,
      status: "approved",
      reason: refundReason
    };

    setRefundRequests([...refundRequests, newRefundRequest]);

    toast.success(`Refund of $${calculatedAmount.toFixed(2)} for event ${selectedEvent.title} has been processed`);
    setShowRefundSheet(false);
  };

  const handleViewDetails = (event: Event) => {
    setSelectedEvent(event);
    setShowDetailsDialog(true);
  };

  // Format date for display
  const formatEventDate = (dateString: string) => {
    const date = new Date(dateString);
    return format(date, "yyyy-MM-dd");
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Events Management</h1>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => navigate('/admin/events/bookings')}>
            <Ticket className="mr-2 h-4 w-4" /> View Bookings
          </Button>
          <Button onClick={handleAddEvent}>
            <Plus className="mr-2 h-4 w-4" /> Add New Event
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Events</CardTitle>
            <div className="flex flex-col sm:flex-row gap-2 mt-2">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
                <Input
                  placeholder="Search events..."
                  className="pl-8"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              <Button variant="outline" onClick={() => setDate(undefined)}>
                Clear Filters
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="flex justify-center py-6">
                <span>Loading events...</span>
              </div>
            ) : error ? (
              <div className="text-center text-red-500 py-4">
                {error}
              </div>
            ) : (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Title</TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>Time</TableHead>
                      <TableHead>Location</TableHead>
                      <TableHead>Price</TableHead>
                      <TableHead>Attendance</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Refundable</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredEvents.length > 0 ? (
                      filteredEvents.map((event) => (
                        <TableRow key={event._id}>
                          <TableCell>{event.title}</TableCell>
                          <TableCell>{formatEventDate(event.date)}</TableCell>
                          <TableCell>{event.startTime}</TableCell>
                          <TableCell>{event.location}</TableCell>
                          <TableCell>${event.price}</TableCell>
                          <TableCell>{event.currentAttendees || 0}/{event.maxAttendees}</TableCell>
                          <TableCell>{getStatusBadge(event.status)}</TableCell>
                          <TableCell>
                            {event.isRefundable ? (
                              <Check className="h-4 w-4 text-green-500" />
                            ) : (
                              <X className="h-4 w-4 text-red-500" />
                            )}
                          </TableCell>
                          <TableCell className="text-right space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleViewDetails(event)}
                            >
                              View
                            </Button>
                            <Dialog>
                              <DialogTrigger asChild>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => setSelectedEvent(event)}
                                >
                                  <QrCode className="h-4 w-4 mr-1" /> QR
                                </Button>
                              </DialogTrigger>
                              <DialogContent>
                                <DialogHeader>
                                  <DialogTitle>Event QR Code</DialogTitle>
                                </DialogHeader>
                                <div className="flex flex-col items-center justify-center p-4">
                                  <div className="bg-white p-4 rounded-lg">
                                    <QRCode
                                      value={`HOTEL_EVENT:${selectedEvent?._id}:${selectedEvent?.title}`}
                                      size={200}
                                    />
                                  </div>
                                  <p className="mt-4 text-center text-sm">
                                    Scan this QR code to verify attendees for {selectedEvent?.title}
                                  </p>
                                </div>
                              </DialogContent>
                            </Dialog>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleEditEvent(event)}
                            >
                              Edit
                            </Button>
                            {isSuperAdmin && event.status !== "cancelled" && event.isRefundable && (
                              <Button
                                size="sm"
                                variant="outline"
                                className="text-blue-500 hover:text-blue-700"
                                onClick={() => handleRefundRequest(event)}
                              >
                                <RotateCcw className="h-4 w-4 mr-1" /> Refund
                              </Button>
                            )}
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={9} className="text-center py-4">
                          No events found matching your criteria
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Calendar</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <Calendar
              mode="single"
              selected={date}
              onSelect={setDate}
              className="rounded-md border"
            />
            <div className="mt-4 space-y-2">
              <h3 className="font-medium">Event Statistics</h3>
              <div className="flex items-center gap-2">
                <Ticket className="h-4 w-4 text-gray-500" />
                <span>{events.length} total events scheduled</span>
              </div>
              <div className="flex items-center gap-2">
                <Badge className="bg-blue-500 h-4 w-4" />
                <span>{events.filter(e => e.status === "upcoming").length} upcoming</span>
              </div>
              <div className="flex items-center gap-2">
                <Badge className="bg-purple-500 h-4 w-4" />
                <span>{events.filter(e => e.status === "completed").length} completed</span>
              </div>
              <Button className="w-full mt-4" variant="outline" onClick={() => navigate('/admin/events/reports')}>
                View Reports
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <Dialog open={showRefundDialog} onOpenChange={setShowRefundDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Process Refund</DialogTitle>
            <DialogDescription>
              {selectedEvent?.isRefundable
                ? "Are you sure you want to process a refund for this event booking?"
                : "This event is marked as non-refundable."}
            </DialogDescription>
          </DialogHeader>

          {selectedEvent && (
            <div className="py-4">
              <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                <h3 className="text-sm font-medium mb-2">Refund Policy:</h3>
                <p className="text-sm text-gray-700">{selectedEvent.refundPolicy}</p>
              </div>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-sm font-medium">Event ID:</p>
                  <p className="text-sm">{selectedEvent._id}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Event:</p>
                  <p className="text-sm">{selectedEvent.title}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Price:</p>
                  <p className="text-sm">${selectedEvent.price}</p>
                </div>
              </div>
            </div>
          )}

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowRefundDialog(false)}>Cancel</Button>
            <Button
              disabled={selectedEvent && !selectedEvent.isRefundable}
              onClick={() => {
                setShowRefundDialog(false);
                if (selectedEvent) handleRefundRequest(selectedEvent);
              }}
            >
              Process Refund
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Sheet open={showRefundSheet} onOpenChange={setShowRefundSheet}>
        <SheetContent className="sm:max-w-md">
          <SheetHeader>
            <SheetTitle>Process Refund</SheetTitle>
            <SheetDescription>
              Please complete the refund form below.
            </SheetDescription>
          </SheetHeader>

          {selectedEvent && (
            <div className="py-4">
              <div className="space-y-4">
                <div className="grid gap-2">
                  <h3 className="text-sm font-medium">Event Details</h3>
                  <div className="rounded-md border p-3">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="font-medium">Title:</div>
                      <div>{selectedEvent.title}</div>
                      <div className="font-medium">Date:</div>
                      <div>{formatEventDate(selectedEvent.date)}</div>
                      <div className="font-medium">Original Price:</div>
                      <div>${selectedEvent.price.toFixed(2)}</div>
                    </div>
                  </div>
                </div>

                <div className="grid gap-2">
                  <h3 className="text-sm font-medium">Refund Policy</h3>
                  <div className="rounded-md border p-3 bg-muted/50">
                    <p className="text-sm">{selectedEvent.refundPolicy}</p>
                  </div>
                </div>

                <div className="grid gap-2">
                  <h3 className="text-sm font-medium">Refund Type</h3>
                  <Select
                    defaultValue="full"
                    onValueChange={(value) => {
                      setRefundType(value);
                      if (value !== "custom") {
                        setRefundAmount(calculateRefundAmount(value, selectedEvent.price));
                      }
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select refund amount" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="full">Full Refund (100%)</SelectItem>
                      <SelectItem value="partial75">Partial Refund (75%)</SelectItem>
                      <SelectItem value="partial50">Partial Refund (50%)</SelectItem>
                      <SelectItem value="partial25">Partial Refund (25%)</SelectItem>
                      <SelectItem value="custom">Custom Amount</SelectItem>
                    </SelectContent>
                  </Select>

                  {refundType === "custom" && (
                    <div className="grid gap-2 pt-2">
                      <label htmlFor="refundAmount" className="text-sm">Custom Refund Amount</label>
                      <div className="relative">
                        <DollarSign className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
                        <Input
                          id="refundAmount"
                          type="number"
                          placeholder="0.00"
                          className="pl-10"
                          value={refundAmount}
                          onChange={(e) => setRefundAmount(parseFloat(e.target.value))}
                          max={selectedEvent.price}
                        />
                      </div>
                    </div>
                  )}
                </div>

                <div className="grid gap-2">
                  <h3 className="text-sm font-medium">Refund Reason</h3>
                  <Textarea
                    placeholder="Enter reason for refund..."
                    value={refundReason}
                    onChange={(e) => setRefundReason(e.target.value)}
                  />
                </div>

                <div className="flex items-center gap-2 px-2 py-1 rounded-md bg-amber-50 text-amber-900">
                  <AlertCircle className="h-4 w-4" />
                  <span className="text-xs">
                    This will process a refund of <strong>${calculateRefundAmount(refundType, selectedEvent.price).toFixed(2)}</strong>
                  </span>
                </div>
              </div>
            </div>
          )}

          <SheetFooter className="pt-4">
            <Button variant="outline" onClick={() => setShowRefundSheet(false)}>Cancel</Button>
            <Button
              onClick={handleProcessRefund}
              disabled={!refundReason}
            >
              Process Refund
            </Button>
          </SheetFooter>
        </SheetContent>
      </Sheet>

      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Event Details</DialogTitle>
            <DialogDescription>
              Complete information about the event
            </DialogDescription>
          </DialogHeader>

          {selectedEvent && (
            <div className="mt-4 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Event Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Event ID:</span>
                      <span className="text-sm">{selectedEvent._id}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Title:</span>
                      <span className="text-sm">{selectedEvent.title}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Status:</span>
                      <span className="text-sm">{getStatusBadge(selectedEvent.status)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Date:</span>
                      <span className="text-sm">{formatEventDate(selectedEvent.date)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Time:</span>
                      <span className="text-sm">{selectedEvent.startTime} - {selectedEvent.endTime}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Location:</span>
                      <span className="text-sm">{selectedEvent.location}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Price:</span>
                      <span className="text-sm">${selectedEvent.price}</span>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Attendance Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Maximum Capacity:</span>
                      <span className="text-sm">{selectedEvent.maxAttendees}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Current Attendees:</span>
                      <span className="text-sm">{selectedEvent.currentAttendees || 0}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Created At:</span>
                      <span className="text-sm">{new Date(selectedEvent.createdAt).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Updated At:</span>
                      <span className="text-sm">{new Date(selectedEvent.updatedAt).toLocaleString()}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div>
                <h4 className="text-sm font-medium text-muted-foreground mb-2">Description</h4>
                <p className="text-sm p-3 bg-gray-50 rounded-md">{selectedEvent.description}</p>
              </div>

              {selectedEvent.addons && selectedEvent.addons.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Add-ons</h4>
                  <div className="space-y-2">
                    {selectedEvent.addons.map((addon, index) => (
                      <div key={index} className="flex justify-between bg-gray-50 p-2 rounded-md">
                        <span className="text-sm">{addon.name}</span>
                        <span className="text-sm">${addon.price.toFixed(2)}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div>
                <div className="flex items-center justify-between mb-2">
                  <h4 className="text-sm font-medium text-muted-foreground">Refund Policy</h4>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm">Refundable:</span>
                    <Switch checked={selectedEvent.isRefundable} id="refundable-toggle" disabled />
                  </div>
                </div>
                <p className="text-sm p-3 bg-gray-50 rounded-md">{selectedEvent.refundPolicy}</p>
              </div>

              <div className="flex justify-end space-x-3">
                <Button onClick={() => {
                  setShowDetailsDialog(false);
                  handleEditEvent(selectedEvent);
                }}>
                  Edit Event
                </Button>

                {isSuperAdmin && selectedEvent.status !== "cancelled" && selectedEvent.isRefundable && (
                  <Button
                    variant="outline"
                    onClick={() => {
                      setShowDetailsDialog(false);
                      setTimeout(() => handleRefundRequest(selectedEvent), 100);
                    }}
                  >
                    <RotateCcw className="h-4 w-4 mr-2" />
                    Process Refund
                  </Button>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Edit Event Modal */}
      <EditEventModal
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        eventId={editingEventId}
        onSuccess={fetchEvents}
      />
    </div>
  );
};

export default EventsManagementContent;
</file>

<file path="src/components/Admin/Events/EventsReportsContent.tsx">
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { PieChart, Pie, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from "recharts";
import { Download, Calendar, Filter, ChartBar, ChartPie, FileText, Printer } from "lucide-react";

const EventsReportsContent = () => {
  const [period, setPeriod] = useState("month");
  const [eventType, setEventType] = useState("all");

  // Mock data for charts
  const attendanceData = [
    { name: "Summer Jazz Night", value: 45, fill: "#3b82f6" },
    { name: "Wine Tasting Gala", value: 50, fill: "#10b981" },
    { name: "Cooking Masterclass", value: 25, fill: "#f59e0b" },
    { name: "Weekend Wellness Retreat", value: 20, fill: "#6366f1" },
    { name: "Spring Charity Gala", value: 150, fill: "#ec4899" },
  ];

  const revenueData = [
    { month: "Jan", revenue: 12000 },
    { month: "Feb", revenue: 15000 },
    { month: "Mar", revenue: 18000 },
    { month: "Apr", revenue: 25000 },
    { month: "May", revenue: 22000 },
    { month: "Jun", revenue: 30000 },
    { month: "Jul", revenue: 28000 },
    { month: "Aug", revenue: 32000 },
    { month: "Sep", revenue: 35000 },
    { month: "Oct", revenue: 31000 },
    { month: "Nov", revenue: 34000 },
    { month: "Dec", revenue: 40000 },
  ];

  const categoryData = [
    { name: "Music", count: 8 },
    { name: "Food & Wine", count: 12 },
    { name: "Wellness", count: 15 },
    { name: "Charity", count: 5 },
    { name: "Workshops", count: 10 },
  ];

  // Most popular events
  const popularEvents = [
    { id: "e1", name: "Spring Charity Gala", attendance: 150, revenue: 30000, rating: 4.8 },
    { id: "e2", name: "Wine Tasting Gala", attendance: 70, revenue: 8400, rating: 4.7 },
    { id: "e3", name: "Summer Jazz Night", attendance: 95, revenue: 7125, rating: 4.6 },
    { id: "e4", name: "Cooking Masterclass", attendance: 28, revenue: 4200, rating: 4.9 },
    { id: "e5", name: "Weekend Wellness Retreat", attendance: 48, revenue: 14352, rating: 4.5 },
  ];

  // Recent events
  const recentEvents = [
    { id: "e1", name: "Summer Jazz Night", date: "2025-04-15", attendance: 45, revenue: 3375, status: "completed" },
    { id: "e2", name: "Wine Tasting Gala", date: "2025-04-20", attendance: 50, revenue: 6000, status: "completed" },
    { id: "e3", name: "Cooking Masterclass", date: "2025-04-25", attendance: 25, revenue: 3750, status: "upcoming" },
    { id: "e4", name: "Weekend Wellness Retreat", date: "2025-05-01", attendance: 20, revenue: 5980, status: "upcoming" },
    { id: "e5", name: "Spring Charity Gala", date: "2025-05-10", attendance: 0, revenue: 0, status: "upcoming" },
  ];

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "upcoming":
        return <Badge className="bg-blue-500">Upcoming</Badge>;
      case "completed":
        return <Badge className="bg-purple-500">Completed</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-2">
          <ChartBar className="h-5 w-5 text-hotel-primary" />
          <h2 className="text-xl font-semibold">Event Performance Analytics</h2>
        </div>
        <div>
          <Button className="flex items-center gap-2">
            <Printer className="h-4 w-4" /> Print Report
          </Button>
          <Button className="ml-2">
            <Download className="mr-2 h-4 w-4" /> Export Reports
          </Button>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-4 items-center">
        <div className="flex items-center gap-2">
          <Calendar className="h-4 w-4 text-gray-500" />
          <span>Time Period:</span>
        </div>
        <Select value={period} onValueChange={setPeriod}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select period" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="week">This Week</SelectItem>
            <SelectItem value="month">This Month</SelectItem>
            <SelectItem value="quarter">This Quarter</SelectItem>
            <SelectItem value="year">This Year</SelectItem>
          </SelectContent>
        </Select>

        <div className="flex items-center gap-2 ml-4">
          <Filter className="h-4 w-4 text-gray-500" />
          <span>Event Type:</span>
        </div>
        <Select value={eventType} onValueChange={setEventType}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select event type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Events</SelectItem>
            <SelectItem value="music">Music</SelectItem>
            <SelectItem value="food">Food & Wine</SelectItem>
            <SelectItem value="wellness">Wellness</SelectItem>
            <SelectItem value="charity">Charity</SelectItem>
            <SelectItem value="workshops">Workshops</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Total Revenue</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">$64,125</div>
            <p className="text-sm text-green-600">+12% from last month</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Total Attendees</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">290</div>
            <p className="text-sm text-green-600">+8% from last month</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Average Rating</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">4.7/5.0</div>
            <p className="text-sm text-green-600">+0.2 from last month</p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="overview">
        <TabsList className="grid w-full grid-cols-4 md:w-auto md:inline-flex">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="attendance">Attendance</TabsTrigger>
          <TabsTrigger value="revenue">Revenue</TabsTrigger>
          <TabsTrigger value="events">Events</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="mt-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Revenue Trend</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={revenueData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="revenue" stroke="#3b82f6" activeDot={{ r: 8 }} />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Event Categories</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={categoryData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="count" fill="#6366f1" />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>

          <Card className="mt-6">
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Popular Events</CardTitle>
              <FileText className="h-5 w-5 text-gray-500" />
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Event Name</TableHead>
                      <TableHead>Attendance</TableHead>
                      <TableHead>Revenue</TableHead>
                      <TableHead>Rating</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {popularEvents.map((event) => (
                      <TableRow key={event.id}>
                        <TableCell className="font-medium">{event.name}</TableCell>
                        <TableCell>{event.attendance}</TableCell>
                        <TableCell>${event.revenue.toLocaleString()}</TableCell>
                        <TableCell>{event.rating} / 5.0</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="attendance" className="mt-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Event Attendance</CardTitle>
              <ChartPie className="h-5 w-5 text-gray-500" />
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={400}>
                <PieChart>
                  <Pie
                    data={attendanceData}
                    dataKey="value"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={150}
                    label={(entry) => entry.name}
                  />
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="revenue" className="mt-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Monthly Revenue</CardTitle>
              <ChartBar className="h-5 w-5 text-gray-500" />
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={400}>
                <LineChart data={revenueData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="revenue" stroke="#3b82f6" activeDot={{ r: 8 }} />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="events" className="mt-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Recent Events</CardTitle>
              <FileText className="h-5 w-5 text-gray-500" />
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Event Name</TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>Attendance</TableHead>
                      <TableHead>Revenue</TableHead>
                      <TableHead>Status</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {recentEvents.map((event) => (
                      <TableRow key={event.id}>
                        <TableCell className="font-medium">{event.name}</TableCell>
                        <TableCell>{event.date}</TableCell>
                        <TableCell>{event.attendance}</TableCell>
                        <TableCell>${event.revenue.toLocaleString()}</TableCell>
                        <TableCell>{getStatusBadge(event.status)}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default EventsReportsContent;
</file>

<file path="src/components/Admin/Events/QrCodeScanner.tsx">
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/components/ui/use-toast";
import { Html5Qrcode } from "html5-qrcode";
import { Check, X } from "lucide-react";
import { toast } from "sonner";

interface ScanResult {
  success: boolean;
  eventId?: string;
  eventTitle?: string;
  bookingId?: string;
  customerName?: string;
  timestamp: Date;
  message: string;
}

const QrCodeScanner = () => {
  const [scanning, setScanning] = useState(false);
  const [scanner, setScanner] = useState<Html5Qrcode | null>(null);
  const [scanResults, setScanResults] = useState<ScanResult[]>([]);
  const { toast: uiToast } = useToast();

  useEffect(() => {
    // Cleanup when component unmounts
    return () => {
      if (scanner) {
        scanner.stop().catch(err => console.error("Error stopping scanner:", err));
      }
    };
  }, [scanner]);

  const startScanner = async () => {
    const html5QrCode = new Html5Qrcode("qr-reader");
    setScanner(html5QrCode);
    setScanning(true);

    try {
      await html5QrCode.start(
        { facingMode: "environment" },
        {
          fps: 10,
          qrbox: { width: 250, height: 250 },
        },
        onScanSuccess,
        onScanFailure
      );
    } catch (err) {
      console.error("Error starting scanner:", err);
      setScanning(false);
      uiToast({
        title: "Error",
        description: "Could not start the QR scanner. Please ensure camera permissions are granted.",
        variant: "destructive",
      });
    }
  };

  const stopScanner = async () => {
    if (scanner) {
      try {
        await scanner.stop();
        setScanning(false);
      } catch (err) {
        console.error("Error stopping scanner:", err);
      }
    }
  };

  const markBookingAsAttended = (bookingId: string, customerName: string, eventTitle: string) => {
    // In a real app, this would be an API call to update the booking status
    // For now, we'll just show a success message
    toast.success(`${customerName} has been marked as attended for ${eventTitle}`);
    
    // This is a mock function - in a real app, this would make an API call to your backend
    return Promise.resolve(true);
  };

  const onScanSuccess = (decodedText: string) => {
    console.log(`QR Code scanned: ${decodedText}`);
    
    // Temporarily stop scanning to prevent multiple scans of the same code
    scanner?.pause();
    
    // Process the QR code data
    let result: ScanResult = {
      success: false,
      timestamp: new Date(),
      message: "Invalid QR code format"
    };
    
    // Check if this is a hotel event QR code 
    // Expected format: HOTEL_EVENT:eventId:bookingId:customerName:eventTitle
    if (decodedText.startsWith("HOTEL_EVENT:")) {
      const parts = decodedText.split(":");
      if (parts.length >= 5) {
        const eventId = parts[1];
        const bookingId = parts[2];
        const customerName = parts[3];
        const eventTitle = parts.slice(4).join(":");
        
        // Mark the booking as attended
        markBookingAsAttended(bookingId, customerName, eventTitle)
          .then(() => {
            // Update scan results with success
            result = {
              success: true,
              eventId,
              eventTitle,
              bookingId,
              customerName,
              timestamp: new Date(),
              message: `${customerName} has been checked in for: ${eventTitle}`
            };
            
            // Add to results
            setScanResults(prev => [result, ...prev]);
            
            // Show toast with result
            uiToast({
              title: "Check-in Successful",
              description: result.message,
              variant: "default",
            });
          })
          .catch(error => {
            // Handle error
            console.error("Error marking booking as attended:", error);
            result = {
              success: false,
              eventId,
              eventTitle,
              bookingId,
              customerName,
              timestamp: new Date(),
              message: "Failed to mark as attended: " + (error.message || "Unknown error")
            };
            
            // Add to results
            setScanResults(prev => [result, ...prev]);
            
            // Show toast with result
            uiToast({
              title: "Check-in Failed",
              description: result.message,
              variant: "destructive",
            });
          });
      } else {
        // Invalid format
        setScanResults(prev => [result, ...prev]);
        uiToast({
          title: "Invalid QR Code",
          description: result.message,
          variant: "destructive",
        });
      }
    } else {
      // Not a hotel event QR code
      setScanResults(prev => [result, ...prev]);
      uiToast({
        title: "Invalid QR Code",
        description: result.message,
        variant: "destructive",
      });
    }
    
    // Resume scanning after a brief pause
    setTimeout(() => {
      scanner?.resume();
    }, 2000);
  };

  const onScanFailure = (error: string) => {
    // This is called frequently when no QR is detected, so we don't need to handle each failure
    console.debug(`QR scan error: ${error}`);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>QR Code Scanner</CardTitle>
          </CardHeader>
          <CardContent>
            <div id="qr-reader" style={{ width: "100%" }} />
            <div className="flex justify-center mt-4">
              {!scanning ? (
                <Button onClick={startScanner}>Start Scanner</Button>
              ) : (
                <Button variant="destructive" onClick={stopScanner}>Stop Scanner</Button>
              )}
            </div>
            <div className="mt-4 text-center text-sm">
              {scanning
                ? "Point the camera at a valid event QR code"
                : "Click 'Start Scanner' to begin scanning event QR codes"}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Scan Results</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 max-h-[400px] overflow-y-auto">
              {scanResults.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  No scans yet. Scan a QR code to see results here.
                </div>
              ) : (
                scanResults.map((result, index) => (
                  <div
                    key={index}
                    className={`p-3 rounded-md flex items-start gap-3 ${
                      result.success
                        ? "bg-green-50 border border-green-200"
                        : "bg-red-50 border border-red-200"
                    }`}
                  >
                    <div
                      className={`p-2 rounded-full ${
                        result.success ? "bg-green-100" : "bg-red-100"
                      }`}
                    >
                      {result.success ? (
                        <Check className="h-5 w-5 text-green-600" />
                      ) : (
                        <X className="h-5 w-5 text-red-600" />
                      )}
                    </div>
                    <div className="flex-1">
                      <p
                        className={`font-medium ${
                          result.success ? "text-green-700" : "text-red-700"
                        }`}
                      >
                        {result.success ? "Success" : "Failed"}
                      </p>
                      <p className="text-sm">
                        {result.message}
                      </p>
                      {result.customerName && (
                        <p className="text-xs text-gray-700 mt-1">
                          Customer: {result.customerName}
                        </p>
                      )}
                      <p className="text-xs text-gray-500 mt-1">
                        {result.timestamp.toLocaleTimeString()}
                      </p>
                    </div>
                  </div>
                ))
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default QrCodeScanner;
</file>

<file path="src/components/Admin/Housekeeping/HousekeepingReports.tsx">
import { useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { BarChart, PieChart, LineChart } from "@/components/ui/charts";
import {
  BarChart as BarChartIcon,
  PieChart as PieChartIcon,
  LineChart as LineChartIcon,
  Download,
  Calendar
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";

// Sample data for productivity report
const productivityData = [
  { name: "John Smith", tasksCompleted: 145, averageTimePerTask: 23 },
  { name: "Maria Garcia", tasksCompleted: 162, averageTimePerTask: 21 },
  { name: "David Lee", tasksCompleted: 128, averageTimePerTask: 25 },
  { name: "Sarah Johnson", tasksCompleted: 149, averageTimePerTask: 22 },
  { name: "Michael Brown", tasksCompleted: 131, averageTimePerTask: 24 }
];

// Sample data for room turnover report
const roomTurnoverChartData = [
  { month: "Jan", turnoverTime: 32 },
  { month: "Feb", turnoverTime: 28 },
  { month: "Mar", turnoverTime: 30 },
  { month: "Apr", turnoverTime: 25 },
  { month: "May", turnoverTime: 22 },
  { month: "Jun", turnoverTime: 20 },
  { month: "Jul", turnoverTime: 21 },
  { month: "Aug", turnoverTime: 23 },
  { month: "Sep", turnoverTime: 26 },
  { month: "Oct", turnoverTime: 28 },
  { month: "Nov", turnoverTime: 30 },
  { month: "Dec", turnoverTime: 32 }
];

// Sample data for supplies usage report
const suppliesUsageChartData = [
  { supply: "Towels", usage: 850 },
  { supply: "Bed Sheets", usage: 620 },
  { supply: "Toilet Paper", usage: 1250 },
  { supply: "Shampoo", usage: 430 },
  { supply: "Soap", usage: 720 },
  { supply: "Cleaning Solution", usage: 350 }
];

// Sample data for cleaning quality ratings
const cleaningQualityChartData = [
  { category: "Excellent", value: 68 },
  { category: "Good", value: 22 },
  { category: "Average", value: 8 },
  { category: "Poor", value: 2 }
];

const HousekeepingReports = () => {
  const [reportPeriod, setReportPeriod] = useState("last-month");
  const [activeTab, setActiveTab] = useState("productivity");
  const { toast } = useToast();

  const handleDownloadReport = () => {
    toast({
      title: "Report Downloaded",
      description: `The ${activeTab} report has been downloaded.`,
    });
  };

  // Bar chart configuration for staff productivity
  const productivityChartConfig = {
    xAxis: [
      {
        data: productivityData.map(item => item.name),
        scaleType: "band",
      },
    ],
    series: [
      {
        data: productivityData.map(item => item.tasksCompleted),
        type: "bar" as const,
        label: "Tasks Completed",
        color: "#4f46e5",
      },
    ],
    height: 300,
  };

  // Line chart configuration for room turnover time trend
  const roomTurnoverConfig = {
    xAxis: [
      {
        data: roomTurnoverChartData.map(item => item.month),
        scaleType: "band",
      },
    ],
    series: [
      {
        data: roomTurnoverChartData.map(item => item.turnoverTime),
        label: "Avg Turnover Time (min)",
        color: "#10b981",
        type: "line" as const,
        curve: "linear" as const,
      },
    ],
    height: 300,
  };

  // Bar chart configuration for supplies usage
  const suppliesUsageConfig = {
    xAxis: [
      {
        data: suppliesUsageChartData.map(item => item.supply),
        scaleType: "band",
      },
    ],
    series: [
      {
        data: suppliesUsageChartData.map(item => item.usage),
        label: "Usage (units)",
        color: "#f59e0b",
        type: "bar" as const,
      },
    ],
    height: 300,
  };

  // Pie chart configuration for cleaning quality
  const cleaningQualityConfig = {
    series: [
      {
        data: cleaningQualityChartData.map(item => ({
          id: item.category,
          value: item.value,
          label: `${item.category} (${item.value}%)`,
        })),
        type: "pie" as const,
        highlightScope: { faded: "global", highlighted: "item" },
        innerRadius: 30,
        outerRadius: 100,
        paddingAngle: 2,
        cornerRadius: 4,
        startAngle: -90,
        endAngle: 270,
      },
    ],
    height: 300,
    legend: { hidden: false },
  };

  return (
    <div className="space-y-6 p-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-2xl font-bold">Housekeeping Reports</h1>

        <div className="flex items-center gap-2">
          <Select value={reportPeriod} onValueChange={setReportPeriod}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select period" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="today">Today</SelectItem>
              <SelectItem value="this-week">This Week</SelectItem>
              <SelectItem value="last-week">Last Week</SelectItem>
              <SelectItem value="this-month">This Month</SelectItem>
              <SelectItem value="last-month">Last Month</SelectItem>
              <SelectItem value="last-quarter">Last Quarter</SelectItem>
              <SelectItem value="year-to-date">Year to Date</SelectItem>
            </SelectContent>
          </Select>

          <Button variant="outline" size="icon" onClick={handleDownloadReport}>
            <Download className="h-4 w-4" />
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid grid-cols-2 md:grid-cols-4 w-full">
          <TabsTrigger value="productivity" className="flex items-center gap-2">
            <BarChartIcon className="h-4 w-4" />
            <span className="hidden md:inline">Staff Productivity</span>
            <span className="inline md:hidden">Productivity</span>
          </TabsTrigger>
          <TabsTrigger value="turnover" className="flex items-center gap-2">
            <LineChartIcon className="h-4 w-4" />
            <span className="hidden md:inline">Room Turnover</span>
            <span className="inline md:hidden">Turnover</span>
          </TabsTrigger>
          <TabsTrigger value="supplies" className="flex items-center gap-2">
            <BarChartIcon className="h-4 w-4" />
            <span className="hidden md:inline">Supplies Usage</span>
            <span className="inline md:hidden">Supplies</span>
          </TabsTrigger>
          <TabsTrigger value="quality" className="flex items-center gap-2">
            <PieChartIcon className="h-4 w-4" />
            <span className="hidden md:inline">Cleaning Quality</span>
            <span className="inline md:hidden">Quality</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="productivity" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Staff Productivity Report</CardTitle>
              <CardDescription>
                Number of tasks completed by each staff member during {reportPeriod.replace('-', ' ')}.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <BarChart config={productivityChartConfig} />

              <div className="mt-6 border rounded-md overflow-hidden">
                <table className="w-full">
                  <thead className="bg-muted/50">
                    <tr>
                      <th className="p-3 text-left">Staff Member</th>
                      <th className="p-3 text-center">Tasks Completed</th>
                      <th className="p-3 text-center">Avg Time Per Task (min)</th>
                      <th className="p-3 text-center">Performance</th>
                    </tr>
                  </thead>
                  <tbody>
                    {productivityData.map((staff, index) => (
                      <tr key={index} className="border-t">
                        <td className="p-3">{staff.name}</td>
                        <td className="p-3 text-center">{staff.tasksCompleted}</td>
                        <td className="p-3 text-center">{staff.averageTimePerTask} min</td>
                        <td className="p-3 text-center">
                          <span
                            className={
                              staff.averageTimePerTask < 22
                                ? "text-green-600 font-medium"
                                : staff.averageTimePerTask > 24
                                  ? "text-amber-600 font-medium"
                                  : "text-blue-600 font-medium"
                            }
                          >
                            {staff.averageTimePerTask < 22
                              ? "Excellent"
                              : staff.averageTimePerTask > 24
                                ? "Needs Improvement"
                                : "Good"}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="turnover" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Room Turnover Time Trend</CardTitle>
              <CardDescription>
                Average time (in minutes) to prepare rooms after checkout throughout the year.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <LineChart config={roomTurnoverConfig} />

              <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">Fastest Turnover</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-green-600">20 min</div>
                    <p className="text-sm text-muted-foreground">June 2025</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">Current Average</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">26 min</div>
                    <p className="text-sm text-muted-foreground">September 2025</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">Year Average</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">26.4 min</div>
                    <p className="text-sm text-muted-foreground">2025 Average</p>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="supplies" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Supplies Usage Report</CardTitle>
              <CardDescription>
                Consumption of housekeeping supplies during {reportPeriod.replace('-', ' ')}.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <BarChart config={suppliesUsageConfig} />

              <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">Top Consumed Item</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">Toilet Paper</div>
                    <p className="text-sm text-muted-foreground">1,250 units used</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">Monthly Cost Analysis</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span>Total Supply Cost:</span>
                      <span className="font-medium">$7,820</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Cost Per Room:</span>
                      <span className="font-medium">$3.45</span>
                    </div>
                    <div className="flex justify-between">
                      <span>YoY Change:</span>
                      <span className="text-green-600 font-medium">-8.2%</span>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="quality" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Cleaning Quality Ratings</CardTitle>
              <CardDescription>
                Guest satisfaction with room cleanliness during {reportPeriod.replace('-', ' ')}.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex justify-center">
                <PieChart config={cleaningQualityConfig} />
              </div>

              <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">Satisfaction Score</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-green-600">90%</div>
                    <p className="text-sm text-muted-foreground">Excellent & Good ratings</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">Top Complaint</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-lg font-medium">Bathroom Cleanliness</div>
                    <p className="text-sm text-muted-foreground">38% of all complaints</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-base">YoY Improvement</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold text-green-600">+5.8%</div>
                    <p className="text-sm text-muted-foreground">Compared to 2024</p>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default HousekeepingReports;
</file>

<file path="src/components/Admin/Housekeeping/RoomStatusDashboard.tsx">
import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { CheckCircle, XCircle, Clock, CircleDot, Search, Filter } from "lucide-react";

// Room status types and colors
const roomStatuses = [
  { id: "clean", label: "Clean / Ready", color: "bg-green-100 text-green-800", icon: <CheckCircle className="h-4 w-4 mr-1" /> },
  { id: "dirty", label: "Dirty / Needs Cleaning", color: "bg-red-100 text-red-800", icon: <XCircle className="h-4 w-4 mr-1" /> },
  { id: "in-progress", label: "In Progress", color: "bg-yellow-100 text-yellow-800", icon: <Clock className="h-4 w-4 mr-1" /> },
  { id: "inspected", label: "Inspected", color: "bg-blue-100 text-blue-800", icon: <CircleDot className="h-4 w-4 mr-1" /> },
];

// Room types
const roomTypes = ["All Types", "Single", "Double", "Suite", "Deluxe", "Presidential"];
const floors = ["All Floors", "1st Floor", "2nd Floor", "3rd Floor", "4th Floor", "5th Floor"];

// Mock room data (in a real app, this would come from an API)
const mockRooms = [
  { id: 1, number: "101", type: "Single", floor: "1st Floor", status: "clean", lastCleaned: "2025-04-09T08:30:00", notes: "" },
  { id: 2, number: "102", type: "Single", floor: "1st Floor", status: "dirty", lastCleaned: "2025-04-08T14:45:00", notes: "Guest checked out" },
  { id: 3, number: "103", type: "Double", floor: "1st Floor", status: "in-progress", lastCleaned: "2025-04-09T10:15:00", notes: "Deep cleaning" },
  { id: 4, number: "201", type: "Double", floor: "2nd Floor", status: "inspected", lastCleaned: "2025-04-09T11:30:00", notes: "" },
  { id: 5, number: "202", type: "Suite", floor: "2nd Floor", status: "clean", lastCleaned: "2025-04-09T09:20:00", notes: "" },
  { id: 6, number: "301", type: "Suite", floor: "3rd Floor", status: "dirty", lastCleaned: "2025-04-08T16:10:00", notes: "VIP arrival tomorrow" },
  { id: 7, number: "302", type: "Deluxe", floor: "3rd Floor", status: "clean", lastCleaned: "2025-04-09T07:45:00", notes: "" },
  { id: 8, number: "401", type: "Deluxe", floor: "4th Floor", status: "inspected", lastCleaned: "2025-04-09T12:00:00", notes: "" },
  { id: 9, number: "501", type: "Presidential", floor: "5th Floor", status: "dirty", lastCleaned: "2025-04-08T17:30:00", notes: "Special amenities" },
  { id: 10, number: "502", type: "Presidential", floor: "5th Floor", status: "in-progress", lastCleaned: "2025-04-09T13:15:00", notes: "" },
];

const RoomStatusDashboard = () => {
  const [rooms, setRooms] = useState(mockRooms);
  const [filteredRooms, setFilteredRooms] = useState(mockRooms);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedType, setSelectedType] = useState("All Types");
  const [selectedFloor, setSelectedFloor] = useState("All Floors");
  const [selectedStatus, setSelectedStatus] = useState("all");

  // Filter rooms based on selected filters
  useEffect(() => {
    let filtered = [...rooms];

    // Apply search filter
    if (searchTerm) {
      filtered = filtered.filter(room =>
        room.number.toLowerCase().includes(searchTerm.toLowerCase()) ||
        room.notes.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Apply type filter
    if (selectedType !== "All Types") {
      filtered = filtered.filter(room => room.type === selectedType);
    }

    // Apply floor filter
    if (selectedFloor !== "All Floors") {
      filtered = filtered.filter(room => room.floor === selectedFloor);
    }

    // Apply status filter
    if (selectedStatus !== "all") {
      filtered = filtered.filter(room => room.status === selectedStatus);
    }

    setFilteredRooms(filtered);
  }, [searchTerm, selectedType, selectedFloor, selectedStatus, rooms]);

  // Count rooms by status
  const statusCounts = roomStatuses.reduce((counts, status) => {
    counts[status.id] = rooms.filter(room => room.status === status.id).length;
    return counts;
  }, {});

  // Get status details by ID
  const getStatusDetails = (statusId) => {
    return roomStatuses.find(status => status.id === statusId) || roomStatuses[0];
  };

  // Format date for display
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString();
  };

  // Update room status
  const updateRoomStatus = (roomId, newStatus) => {
    const updatedRooms = rooms.map(room => {
      if (room.id === roomId) {
        return { ...room, status: newStatus, lastCleaned: new Date().toISOString() };
      }
      return room;
    });
    setRooms(updatedRooms);
  };

  return (
    <div className="space-y-6">
      {/* Status Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {roomStatuses.map((status) => (
          <Card key={status.id} className="border-l-4" style={{
            borderLeftColor: status.color.includes('green') ? '#10B981' :
              status.color.includes('red') ? '#EF4444' :
                status.color.includes('yellow') ? '#F59E0B' : '#3B82F6'
          }}>
            <CardContent className="p-4">
              <div className="flex items-center">
                {status.icon}
                <span className="font-medium">{status.label}</span>
              </div>
              <p className="text-2xl font-bold mt-2">{statusCounts[status.id] || 0}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Filters */}
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center">
            <Filter className="h-5 w-5 mr-2" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Search */}
            <div className="relative">
              <Search className="absolute left-2 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search room number or notes..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-8"
              />
            </div>

            {/* Room Type Filter */}
            <Select
              value={selectedType}
              onValueChange={setSelectedType}
            >
              <SelectTrigger>
                <SelectValue placeholder="Room Type" />
              </SelectTrigger>
              <SelectContent>
                {roomTypes.map((type) => (
                  <SelectItem key={type} value={type}>
                    {type}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* Floor Filter */}
            <Select
              value={selectedFloor}
              onValueChange={setSelectedFloor}
            >
              <SelectTrigger>
                <SelectValue placeholder="Floor" />
              </SelectTrigger>
              <SelectContent>
                {floors.map((floor) => (
                  <SelectItem key={floor} value={floor}>
                    {floor}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* Status Filter */}
            <Select
              value={selectedStatus}
              onValueChange={setSelectedStatus}
            >
              <SelectTrigger>
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                {roomStatuses.map((status) => (
                  <SelectItem key={status.id} value={status.id}>
                    {status.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Room List */}
      <Card>
        <CardHeader>
          <CardTitle>Room Status Overview</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-muted/50">
                  <th className="text-left p-4">Room</th>
                  <th className="text-left p-4">Type</th>
                  <th className="text-left p-4">Floor</th>
                  <th className="text-left p-4">Status</th>
                  <th className="text-left p-4">Last Cleaned</th>
                  <th className="text-left p-4">Notes</th>
                  <th className="text-left p-4">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredRooms.map((room) => {
                  const statusDetails = getStatusDetails(room.status);
                  return (
                    <tr key={room.id} className="border-b">
                      <td className="p-4 font-medium">
                        {room.number}
                      </td>
                      <td className="p-4">
                        {room.type}
                      </td>
                      <td className="p-4">
                        {room.floor}
                      </td>
                      <td className="p-4">
                        <Badge className={statusDetails.color}>{statusDetails.label}</Badge>
                      </td>
                      <td className="p-4 text-sm">
                        {formatDate(room.lastCleaned)}
                      </td>
                      <td className="p-4 text-sm">
                        {room.notes || "-"}
                      </td>
                      <td className="p-4">
                        <Select
                          value={room.status}
                          onValueChange={(value) => updateRoomStatus(room.id, value)}
                        >
                          <SelectTrigger className="w-full">
                            <SelectValue placeholder="Update Status" />
                          </SelectTrigger>
                          <SelectContent>
                            {roomStatuses.map((status) => (
                              <SelectItem key={status.id} value={status.id}>
                                {status.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </td>
                    </tr>
                  );
                })}
                {filteredRooms.length === 0 && (
                  <tr>
                    <td colSpan={7} className="p-4 text-center text-muted-foreground">
                      No rooms match your filters.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default RoomStatusDashboard;
</file>

<file path="src/components/Admin/Housekeeping/ScheduleManagement.tsx">
import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";
import { useForm } from "react-hook-form";
import { CalendarDays, Plus, Clock, Users, Loader2 } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { format, addDays, isSameDay, parseISO } from "date-fns";
import axios from "axios";

// API base URL
const API_BASE_URL = "http://localhost:4000/api";

// Shift types definition
const shiftTypes = [
  { id: "morning", name: "Morning (6am - 2pm)", color: "bg-blue-100 text-blue-800" },
  { id: "afternoon", name: "Afternoon (2pm - 10pm)", color: "bg-amber-100 text-amber-800" },
  { id: "night", name: "Night (10pm - 6am)", color: "bg-purple-100 text-purple-800" },
  { id: "day-off", name: "Day Off", color: "bg-gray-100 text-gray-800" }
];

const ScheduleManagement = () => {
  const [date, setDate] = useState(new Date());
  const [schedule, setSchedule] = useState([]);
  const [staffMembers, setStaffMembers] = useState([]);
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const [view, setView] = useState("calendar");

  const form = useForm({
    defaultValues: {
      staffId: "",
      date: new Date(),
      shiftType: "",
      notes: ""
    }
  });

  // Fetch staff members
  const fetchStaffMembers = async () => {
    try {
      console.log("Fetching staff members...");
      const response = await axios.get(`${API_BASE_URL}/house-keeping/staff`);
      console.log("Staff response:", response.data);

      if (response.data.status === 'success') {
        setStaffMembers(response.data.data.staff);
        console.log("Staff members loaded:", response.data.data.staff.length);
        return response.data.data.staff;
      } else {
        throw new Error("Failed to fetch staff data");
      }
    } catch (error) {
      console.error("Error fetching staff members:", error);
      toast({
        title: "Error",
        description: "Failed to load staff members. Using sample data instead.",
        variant: "destructive",
      });

      // Use sample data if API fails
      const sampleStaff = [
        { _id: "1", name: "John Smith" },
        { _id: "2", name: "Maria Garcia" },
        { _id: "3", name: "David Lee" },
        { _id: "4", name: "Sarah Johnson" },
        { _id: "5", name: "Michael Brown" }
      ];

      setStaffMembers(sampleStaff);
      console.log("Using sample staff data:", sampleStaff.length);
      return sampleStaff;
    }
  };

  // Fetch schedules
  const fetchSchedules = async (currentStaff) => {
    setLoading(true);
    try {
      // Get schedules for the next 14 days
      const today = new Date();
      const endDate = addDays(today, 14);
      const startDateStr = format(today, 'yyyy-MM-dd');
      const endDateStr = format(endDate, 'yyyy-MM-dd');

      console.log("Fetching schedules from", startDateStr, "to", endDateStr);
      const response = await axios.get(
        `${API_BASE_URL}/house-keeping/schedules?startDate=${startDateStr}&endDate=${endDateStr}`
      );

      if (response.data.status === 'success') {
        console.log("Schedules loaded:", response.data.data.schedules.length);
        setSchedule(response.data.data.schedules);
      } else {
        throw new Error("Failed to fetch schedule data");
      }
    } catch (error) {
      console.error("Error fetching schedules:", error);
      toast({
        title: "Error",
        description: "Failed to load schedules. Using sample data instead.",
        variant: "destructive",
      });

      // Generate sample data if API fails
      const staffToUse = currentStaff || staffMembers;
      console.log("Using staff for sample schedules:", staffToUse.length);
      const sampleSchedule = generateSampleSchedule(staffToUse);
      setSchedule(sampleSchedule);
      console.log("Sample schedules generated:", sampleSchedule.length);
    } finally {
      setLoading(false);
    }
  };

  // Generate sample schedule for fallback
  const generateSampleSchedule = (currentStaff) => {
    const today = new Date();
    const schedule = [];
    const staffToUse = currentStaff || staffMembers;

    console.log("Generating sample schedule with staff:", staffToUse.length);

    for (let i = 0; i < 14; i++) {
      const scheduleDate = addDays(today, i);
      const dateString = format(scheduleDate, "yyyy-MM-dd");

      // Assign shifts to staff members
      staffToUse.forEach(staff => {
        // Simple pattern: rotate shifts, with occasional days off
        let shiftType;
        if (i % 7 === 0) {
          shiftType = "day-off"; // Day off once a week
        } else if (i % 3 === 0) {
          shiftType = "morning";
        } else if (i % 3 === 1) {
          shiftType = "afternoon";
        } else {
          shiftType = "night";
        }

        schedule.push({
          _id: `${staff._id}-${dateString}`,
          staffId: staff._id,
          staffName: staff.name,
          date: dateString,
          shiftType: shiftType,
          notes: ""
        });
      });
    }

    return schedule;
  };

  // Load data on component mount
  useEffect(() => {
    const loadData = async () => {
      try {
        const staff = await fetchStaffMembers();
        await fetchSchedules(staff);
      } catch (error) {
        console.error("Error in loadData:", error);
      }
    };

    loadData();
  }, []);

  const getStaffScheduleForDate = (selectedDate) => {
    const dateString = format(selectedDate, "yyyy-MM-dd");
    return schedule.filter(item => item.date === dateString);
  };

  const getShiftTypeDetails = (shiftTypeId) => {
    return shiftTypes.find(shift => shift.id === shiftTypeId) || shiftTypes[0];
  };

  const handleSubmit = async (data) => {
    try {
      const dateString = format(data.date, "yyyy-MM-dd");
      const staffMember = staffMembers.find(s => s._id.toString() === data.staffId);

      if (!staffMember) {
        throw new Error("Staff member not found");
      }

      // Check if there's already a schedule for this staff on this date
      const existingSchedule = schedule.find(
        item => item.staffId.toString() === data.staffId && item.date === dateString
      );

      let response;

      if (existingSchedule) {
        // Update existing schedule
        response = await axios.put(
          `${API_BASE_URL}/house-keeping/schedules/${existingSchedule._id}`,
          {
            shiftType: data.shiftType,
            notes: data.notes
          }
        );
      } else {
        // Add new schedule
        response = await axios.post(
          `${API_BASE_URL}/house-keeping/schedules`,
          {
            staffId: data.staffId,
            staffName: staffMember.name,
            date: dateString,
            shiftType: data.shiftType,
            notes: data.notes
          }
        );
      }

      if (response.data.status === 'success') {
        // Refresh the schedules
        await fetchSchedules(staffMembers);

        setOpen(false);
        form.reset();

        toast({
          title: "Schedule Updated",
          description: `Schedule for ${staffMember.name} on ${format(data.date, 'MMM dd, yyyy')} has been updated.`,
        });
      }
    } catch (error) {
      console.error("Error updating schedule:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to update schedule. Please try again.",
        variant: "destructive",
      });
    }
  };

  const getDaysWithScheduledShifts = () => {
    const uniqueDates = [...new Set(schedule.map(item => item.date))];
    return uniqueDates.map(dateStr => parseISO(dateStr));
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Housekeeping Schedule</h1>
        <div className="flex gap-4">
          <Tabs value={view} onValueChange={setView} className="flex items-center">
            <TabsList>
              <TabsTrigger value="calendar" className="flex gap-1 items-center">
                <CalendarDays className="h-4 w-4" />
                <span className="hidden sm:inline">Calendar</span>
              </TabsTrigger>
              <TabsTrigger value="list" className="flex gap-1 items-center">
                <Users className="h-4 w-4" />
                <span className="hidden sm:inline">Staff</span>
              </TabsTrigger>
            </TabsList>
          </Tabs>

          <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
              <Button className="flex items-center gap-2">
                <Plus className="h-4 w-4" />
                <span className="hidden sm:inline">Schedule Shift</span>
                <span className="inline sm:hidden">Add</span>
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Schedule a Shift</DialogTitle>
                <DialogDescription>
                  Assign a shift to a staff member.
                </DialogDescription>
              </DialogHeader>

              <Form {...form}>
                <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
                  <FormField
                    control={form.control}
                    name="staffId"
                    rules={{ required: "Staff member is required" }}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Staff Member</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select staff member" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {staffMembers.map(staff => (
                              <SelectItem key={staff._id} value={staff._id.toString()}>
                                {staff.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="date"
                    rules={{ required: "Date is required" }}
                    render={({ field }) => (
                      <FormItem className="flex flex-col">
                        <FormLabel>Date</FormLabel>
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          className="border rounded-md"
                        />
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="shiftType"
                    rules={{ required: "Shift type is required" }}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Shift Type</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select shift type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {shiftTypes.map(shift => (
                              <SelectItem key={shift.id} value={shift.id}>
                                {shift.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="notes"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Notes (Optional)</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="Any special instructions" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <DialogFooter>
                    <Button type="submit">Schedule Shift</Button>
                  </DialogFooter>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <Tabs value={view} className="w-full">
        <TabsContent value="calendar" className="mt-0 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card className="md:col-span-1">
              <CardHeader>
                <CardTitle className="text-lg">Calendar</CardTitle>
              </CardHeader>
              <CardContent>
                <Calendar
                  mode="single"
                  selected={date}
                  onSelect={setDate}
                  className="border rounded-md"
                  modifiers={{
                    scheduled: getDaysWithScheduledShifts()
                  }}
                  modifiersStyles={{
                    scheduled: {
                      fontWeight: 'bold',
                      backgroundColor: '#eef2ff',
                      color: '#4f46e5'
                    }
                  }}
                />

                <div className="mt-4 space-y-2">
                  <h3 className="font-medium">Shift Types</h3>
                  <div className="flex flex-wrap gap-2">
                    {shiftTypes.map(shift => (
                      <Badge key={shift.id} className={shift.color}>
                        {shift.id === "day-off" ? "Off" : shift.id.charAt(0).toUpperCase() + shift.id.slice(1)}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="md:col-span-2">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-lg flex items-center">
                  <Clock className="h-5 w-5 mr-2" />
                  <span>Shifts for {format(date, "MMMM d, yyyy")}</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Staff</TableHead>
                      <TableHead>Shift</TableHead>
                      <TableHead className="hidden md:table-cell">Notes</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {getStaffScheduleForDate(date).map(shift => {
                      const shiftDetails = getShiftTypeDetails(shift.shiftType);
                      return (
                        <TableRow key={shift._id}>
                          <TableCell>{shift.staffName}</TableCell>
                          <TableCell>
                            <Badge className={shiftDetails.color}>
                              {shiftDetails.name.split(' ')[0]}
                            </Badge>
                          </TableCell>
                          <TableCell className="hidden md:table-cell">
                            {shift.notes || "-"}
                          </TableCell>
                        </TableRow>
                      );
                    })}
                    {getStaffScheduleForDate(date).length === 0 && (
                      <TableRow>
                        <TableCell colSpan={3} className="text-center py-4 text-muted-foreground">
                          No shifts scheduled for this day.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="list" className="mt-0">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center">
                <Users className="h-5 w-5 mr-2" />
                Staff Schedule Overview
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Staff</TableHead>
                      {[...Array(7)].map((_, i) => {
                        const day = addDays(new Date(), i);
                        return (
                          <TableHead key={i} className="text-center">
                            <div className="font-medium">{format(day, "EEE")}</div>
                            <div className="text-xs text-muted-foreground">{format(day, "MMM d")}</div>
                          </TableHead>
                        );
                      })}
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {staffMembers.map(staff => (
                      <TableRow key={staff._id}>
                        <TableCell className="font-medium">{staff.name}</TableCell>
                        {[...Array(7)].map((_, i) => {
                          const day = addDays(new Date(), i);
                          const dayString = format(day, "yyyy-MM-dd");
                          const shift = schedule.find(s =>
                            s.staffId === staff._id && s.date === dayString
                          );

                          let shiftDisplay = null;
                          if (shift) {
                            const shiftDetails = getShiftTypeDetails(shift.shiftType);
                            shiftDisplay = (
                              <Badge className={shiftDetails.color}>
                                {shiftDetails.id === "day-off" ? "Off" : shiftDetails.id.charAt(0).toUpperCase()}
                              </Badge>
                            );
                          }

                          return (
                            <TableCell key={i} className="text-center">
                              {shiftDisplay || <span className="text-gray-300">-</span>}
                            </TableCell>
                          );
                        })}
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ScheduleManagement;
</file>

<file path="src/components/Admin/Housekeeping/StaffManagement.tsx">
import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
  CardDescription
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { format } from "date-fns";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Users, Plus, MoreVertical, Edit, Trash, Star, Loader2, Upload, CalendarIcon } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import axios from "axios";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";

// API endpoint
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";

// Available areas
const availableAreas = [
  "1st Floor", "2nd Floor", "3rd Floor", "4th Floor", "5th Floor",
  "Lobby", "Meeting Areas", "Restaurant", "Spa", "Pool Area"
];

// Validation schema
const staffSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters" }),
  email: z.string().email({ message: "Invalid email address" }),
  phone: z.string().min(7, { message: "Phone number must be at least 7 characters" }),
  position: z.string().min(1, { message: "Position is required" }),
  assignedAreas: z.array(z.string()).min(1, { message: "At least one area must be assigned" }),
  status: z.string().default("Active"),
  joinDate: z.date({ required_error: "Join date is required" }),
  avatar: z.any().optional()
});

type FormValues = z.infer<typeof staffSchema>;

const StaffManagement = () => {
  const [staff, setStaff] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [editingStaff, setEditingStaff] = useState<any>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);

  const form = useForm<FormValues>({
    resolver: zodResolver(staffSchema),
    defaultValues: {
      name: "",
      email: "",
      phone: "",
      position: "Room Attendant",
      assignedAreas: [],
      status: "Active"
    }
  });

  // Fetch staff data
  useEffect(() => {
    const fetchStaff = async () => {
      try {
        setIsLoading(true);
        const response = await axios.get(`${API_URL}/api/house-keeping/staff`);
        console.log("Fetched staff data:", response.data);

        if (response.data.data && response.data.data.staff) {
          // Process each staff member's data
          const processedStaff = response.data.data.staff.map((staffMember: any) => {
            // Parse assignedAreas if it's a string array with JSON strings
            if (staffMember.assignedAreas && Array.isArray(staffMember.assignedAreas)) {
              try {
                // Check if the first item is a JSON string
                if (typeof staffMember.assignedAreas[0] === 'string' &&
                  staffMember.assignedAreas[0].startsWith('[')) {
                  // Parse the JSON string
                  staffMember.assignedAreas = JSON.parse(staffMember.assignedAreas[0]);
                  console.log(`Parsed assignedAreas for ${staffMember.name}:`, staffMember.assignedAreas);
                }
              } catch (error) {
                console.error(`Error parsing assignedAreas for ${staffMember.name}:`, error);
                staffMember.assignedAreas = [];
              }
            }
            return staffMember;
          });

          console.log("Processed staff data:", processedStaff);
          setStaff(processedStaff);
        } else {
          console.error("Unexpected response format:", response.data);
          toast({
            title: "Error",
            description: "Could not load staff data",
            variant: "destructive"
          });
        }
      } catch (error) {
        console.error("Error fetching staff:", error);
        toast({
          title: "Error",
          description: "Failed to load staff data",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchStaff();
  }, [toast]);

  const handleOpenEditDialog = (staffMember: any) => {
    setEditingStaff(staffMember);
    // Reset avatar preview - show existing avatar
    setAvatarFile(null);
    setAvatarPreview(staffMember.avatar ? getImageUrl(staffMember.avatar) : null);

    form.reset({
      name: staffMember.name,
      email: staffMember.email,
      phone: staffMember.phone,
      position: staffMember.position,
      assignedAreas: staffMember.assignedAreas || [],
      status: staffMember.status,
      joinDate: staffMember.joinDate ? new Date(staffMember.joinDate) : new Date()
    });
    setDialogOpen(true);
  };

  const handleOpenAddDialog = () => {
    setEditingStaff(null);
    // Reset avatar preview
    setAvatarFile(null);
    setAvatarPreview(null);

    form.reset({
      name: "",
      email: "",
      phone: "",
      position: "Room Attendant",
      assignedAreas: [],
      status: "Active",
      joinDate: new Date()
    });
    setDialogOpen(true);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setAvatarFile(file);

      // Create a preview
      const reader = new FileReader();
      reader.onload = () => {
        setAvatarPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (data: FormValues) => {
    try {
      setIsSubmitting(true);
      console.log("Submitting data:", data);

      // Create form data to handle file upload
      const formData = new FormData();
      formData.append("name", data.name);
      formData.append("email", data.email);
      formData.append("phone", data.phone);
      formData.append("position", data.position);
      formData.append("status", data.status);
      formData.append("joinDate", data.joinDate.toISOString());

      // Handle assigned areas as a JSON string
      formData.append("assignedAreas", JSON.stringify(data.assignedAreas));

      // Log form data for debugging
      console.log("Form data entries:");
      for (const pair of formData.entries()) {
        console.log(`${pair[0]}: ${pair[1]}`);
      }

      // Append file if available
      if (avatarFile) {
        formData.append("avatar", avatarFile);
        console.log("New avatar file added to form data");
      } else if (editingStaff && !avatarFile) {
        // If editing and no new file was uploaded, indicate to keep existing avatar
        formData.append("keepExistingAvatar", "true");
        console.log("Keeping existing avatar (no new file uploaded)");
      }

      if (editingStaff) {
        // Update existing staff
        const response = await axios.patch(
          `${API_URL}/api/house-keeping/staff/${editingStaff._id}`,
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          }
        );
        console.log("Update response:", response.data);

        // Update local state
        setStaff(prevStaff =>
          prevStaff.map(s =>
            s._id === editingStaff._id ? response.data.data.staff : s
          )
        );

        toast({
          title: "Staff Updated",
          description: `${data.name}'s information has been updated.`,
        });
      } else {
        // Add new staff
        const response = await axios.post(
          `${API_URL}/api/house-keeping/staff`,
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          }
        );
        console.log("Create response:", response.data);

        // Add to local state
        setStaff(prevStaff => [...prevStaff, response.data.data.staff]);

        toast({
          title: "Staff Added",
          description: `${data.name} has been added to the housekeeping team.`,
        });
      }

      setDialogOpen(false);
    } catch (error) {
      console.error("Error saving staff:", error);
      toast({
        title: "Error",
        description: "Failed to save staff data",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteStaff = async (staffId: string) => {
    try {
      setIsLoading(true);
      await axios.delete(`${API_URL}/api/house-keeping/staff/${staffId}`);

      // Update local state
      setStaff(prevStaff => prevStaff.filter(s => s._id !== staffId));

      toast({
        title: "Staff Removed",
        description: "The staff member has been removed from the system.",
      });
    } catch (error) {
      console.error("Error deleting staff:", error);
      toast({
        title: "Error",
        description: "Failed to delete staff member",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const renderRating = (rating: number) => {
    return (
      <div className="flex items-center">
        <span className="mr-1">{rating}</span>
        {[...Array(5)].map((_, i) => (
          <Star
            key={i}
            className={`h-3 w-3 ${i < Math.floor(rating) ? "fill-yellow-400 text-yellow-400" : "text-gray-300"}`}
          />
        ))}
      </div>
    );
  };

  // Helper function to format image URL
  const getImageUrl = (path: string | null) => {
    if (!path) return "/placeholder.svg";

    console.log("Raw image path:", path);

    // If it's already a full URL, return as is
    if (path.startsWith('http://') || path.startsWith('https://')) {
      console.log("Using full URL:", path);
      return path;
    }

    // If it's a relative path, prepend the API URL
    let fullUrl;
    if (path.startsWith('/')) {
      fullUrl = `${API_URL}${path}`;
    } else {
      fullUrl = `${API_URL}/${path}`;
    }

    console.log("Constructed image URL:", fullUrl);
    return fullUrl;
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Housekeeping Staff Management</h1>
        <Button onClick={handleOpenAddDialog} className="flex items-center gap-2">
          <Plus className="h-4 w-4" />
          <span>Add Staff</span>
        </Button>
      </div>

      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="max-h-[98vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{editingStaff ? 'Edit Staff Member' : 'Add New Staff Member'}</DialogTitle>
            <DialogDescription>
              {editingStaff
                ? 'Update the housekeeping staff information.'
                : 'Add a new member to the housekeeping team.'}
            </DialogDescription>
          </DialogHeader>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
              {/* Avatar upload */}
              <div className="flex flex-col items-center space-y-2 mb-4">
                <Avatar className="h-24 w-24">
                  {avatarPreview ? (
                    <AvatarImage
                      src={avatarPreview}
                      alt="Staff avatar preview"
                      onError={(e) => {
                        console.error("Error loading avatar preview:", e);
                        const target = e.target as HTMLImageElement;
                        target.style.display = 'none';
                      }}
                    />
                  ) : (
                    <AvatarFallback>
                      <Upload className="h-12 w-12 text-muted-foreground" />
                    </AvatarFallback>
                  )}
                </Avatar>
                <label
                  htmlFor="avatar-upload"
                  className="cursor-pointer text-sm text-primary hover:underline"
                >
                  {editingStaff ? (avatarPreview ? 'Change photo' : 'Upload photo') : 'Upload photo'}
                </label>
                <input
                  id="avatar-upload"
                  type="file"
                  accept="image/*"
                  className="hidden"
                  onChange={handleFileChange}
                />
                {avatarPreview && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setAvatarFile(null);
                      setAvatarPreview(editingStaff?.avatar ? getImageUrl(editingStaff.avatar) : null);
                    }}
                  >
                    Reset to {editingStaff ? 'original' : 'default'}
                  </Button>
                )}
                <p className="text-xs text-muted-foreground">
                  Recommended size: 500x500px. Max size: 5MB
                </p>
              </div>

              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name</FormLabel>
                    <FormControl>
                      <Input placeholder="John Smith" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="staff@hotel.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone</FormLabel>
                    <FormControl>
                      <Input placeholder="555-123-4567" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="position"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Position</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select position" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Manager">Manager</SelectItem>
                        <SelectItem value="Supervisor">Supervisor</SelectItem>
                        <SelectItem value="Room Attendant">Room Attendant</SelectItem>
                        <SelectItem value="Laundry Attendant">Laundry Attendant</SelectItem>
                        <SelectItem value="Public Area Cleaner">Public Area Cleaner</SelectItem>
                        <SelectItem value="Other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Status</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select status" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Active">Active</SelectItem>
                        <SelectItem value="On Leave">On Leave</SelectItem>
                        <SelectItem value="Terminated">Terminated</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="joinDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Joining Date</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={`w-full pl-3 text-left font-normal ${!field.value ? "text-muted-foreground" : ""}`}
                          >
                            {field.value ? (
                              format(field.value, "PPP")
                            ) : (
                              <span>Pick a date</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="assignedAreas"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Assigned Areas</FormLabel>
                    <Select
                      onValueChange={(value) => {
                        // Toggle the selected area
                        const currentValues = field.value || [];
                        if (currentValues.includes(value)) {
                          field.onChange(currentValues.filter(v => v !== value));
                        } else {
                          field.onChange([...currentValues, value]);
                        }
                      }}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select areas" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {availableAreas.map(area => (
                          <SelectItem key={area} value={area}>
                            <div className="flex items-center">
                              <span className="mr-2">{area}</span>
                              {field.value?.includes(area) && (
                                <Badge className="ml-auto">Selected</Badge>
                              )}
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {field.value?.map(area => (
                        <Badge key={area} variant="outline" className="flex items-center gap-1">
                          {area}
                          <button
                            type="button"
                            className="ml-1 rounded-full h-4 w-4 inline-flex items-center justify-center text-xs"
                            onClick={() => {
                              field.onChange(field.value.filter(v => v !== area));
                            }}
                          >
                            ×
                          </button>
                        </Badge>
                      ))}
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter>
                <Button type="button" variant="outline" onClick={() => setDialogOpen(false)} disabled={isSubmitting}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  {isSubmitting ? "Saving..." : editingStaff ? "Update Staff" : "Add Staff"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {staff.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-gray-500">No staff members found. Add your first staff member.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {staff.map(member => (
            <Card key={member._id}>
              <CardHeader className="flex flex-row items-center gap-4">
                <Avatar className="h-12 w-12">
                  <AvatarImage
                    src={getImageUrl(member.avatar)}
                    alt={member.name}
                    onError={(e) => {
                      const imagePath = member.avatar ? getImageUrl(member.avatar) : "no image";
                      console.error(`Error loading image for ${member.name} from path: ${imagePath}`, e);

                      // Log response details from browser
                      fetch(getImageUrl(member.avatar))
                        .then(response => {
                          console.log(`Fetch response for ${member.name}'s image:`,
                            response.status, response.statusText);
                          return response.text();
                        })
                        .catch(err => console.error("Fetch check failed:", err));

                      // If image fails to load, fallback to initials
                      const target = e.target as HTMLImageElement;
                      target.style.display = 'none';
                    }}
                  />
                  <AvatarFallback>{member.name.split(' ').map((n: string) => n[0]).join('')}</AvatarFallback>
                </Avatar>
                <div>
                  <CardTitle className="text-lg">{member.name}</CardTitle>
                  <CardDescription>{member.email}</CardDescription>
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" className="ml-auto h-8 w-8 p-0">
                      <MoreVertical className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={() => handleOpenEditDialog(member)}>
                      <Edit className="mr-2 h-4 w-4" />
                      <span>Edit</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      className="text-red-600"
                      onClick={() => handleDeleteStaff(member._id)}
                    >
                      <Trash className="mr-2 h-4 w-4" />
                      <span>Delete</span>
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Position</p>
                    <p className="mt-1">{member.position}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Status</p>
                    <Badge className={
                      member.status === "Active" ? "bg-green-100 text-green-800" :
                        member.status === "On Leave" ? "bg-yellow-100 text-yellow-800" :
                          "bg-red-100 text-red-800"
                    }>
                      {member.status}
                    </Badge>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Joining Date</p>
                    <p className="mt-1">
                      {member.joinDate && !isNaN(new Date(member.joinDate).getTime())
                        ? format(new Date(member.joinDate), "PPP")
                        : "N/A"}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Assigned Areas</p>
                    <div className="mt-1 space-y-1">
                      {Array.isArray(member.assignedAreas) && member.assignedAreas.length > 0 ? (
                        <>
                          {member.assignedAreas.slice(0, 2).map((area: string) => (
                            <Badge key={area} variant="outline">{area}</Badge>
                          ))}
                          {member.assignedAreas.length > 2 && (
                            <Badge variant="outline" className="bg-primary/10">
                              +{member.assignedAreas.length - 2} more
                            </Badge>
                          )}
                        </>
                      ) : (
                        <span className="text-sm text-muted-foreground">None</span>
                      )}
                    </div>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Performance</p>
                    <p className="mt-1">{renderRating(member.performance || 0)}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Tasks Completed</p>
                    <p className="text-lg font-semibold">{member.tasksDone || 0}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Current Tasks</p>
                    <p className="text-lg font-semibold">{member.tasksInProgress || 0}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default StaffManagement;
</file>

<file path="src/components/Admin/Housekeeping/SuppliesManagement.tsx">
import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";
import { useForm } from "react-hook-form";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Package, Plus, AlertTriangle, Loader2 } from "lucide-react";
import axios from "axios";

// API base URL
const API_BASE_URL = "http://localhost:4000/api";

const SuppliesManagement = () => {
  const [supplies, setSupplies] = useState([]);
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  const form = useForm({
    defaultValues: {
      name: "",
      currentStock: 0,
      minStock: 0,
      unit: "",
    }
  });

  // Fetch supplies from API
  const fetchSupplies = async () => {
    setLoading(true);
    try {
      console.log("Frontend - Fetching supplies from:", `${API_BASE_URL}/house-keeping/supplies`);
      const response = await axios.get(`${API_BASE_URL}/house-keeping/supplies`);
      console.log("Frontend - API response:", response);

      if (response.data.status === 'success') {
        setSupplies(response.data.data.supplies);
        console.log("Frontend - Supplies loaded:", response.data.data.supplies.length);
      }
    } catch (error) {
      console.error("Frontend - Error fetching supplies:", error);

      // Provide more specific error messages based on the error type
      let errorMessage = "Failed to load supplies. Please try again.";

      if (error.code === "ERR_NETWORK") {
        errorMessage = "Network error: Cannot connect to the server. Please make sure the backend is running on port 4000.";
      } else if (error.response) {
        // The request was made and the server responded with a status code
        errorMessage = `Server error (${error.response.status}): ${error.response.data.message || "Unknown error"}`;
      } else if (error.request) {
        // The request was made but no response was received
        errorMessage = "No response from server. Please check your backend server.";
      }

      toast({
        title: "Connection Error",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // Load supplies on component mount
  useEffect(() => {
    fetchSupplies();
  }, []);

  const handleSubmit = async (data) => {
    try {
      // Ensure numerical values are properly converted to numbers
      const formattedData = {
        ...data,
        currentStock: Number(data.currentStock),
        minStock: Number(data.minStock)
      };

      console.log("Frontend - Submitting new supply data:", formattedData);

      const response = await axios.post(`${API_BASE_URL}/house-keeping/supplies`, formattedData);
      console.log("Frontend - Response from API:", response.data);

      if (response.data.status === 'success') {
        // Add new supply to the list
        setSupplies([...supplies, response.data.data.supply]);
        setOpen(false);
        form.reset();

        toast({
          title: "Supply Added",
          description: `${data.name} has been added to the inventory.`,
        });
      }
    } catch (error) {
      console.error("Frontend - Error adding supply:", error);
      console.error("Frontend - Error details:", error.response?.data);

      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to add supply. Please try again.",
        variant: "destructive",
      });
    }
  };

  const updateSupplyStock = async (supplyId, amount) => {
    try {
      const response = await axios.patch(`${API_BASE_URL}/house-keeping/supplies/${supplyId}/stock`, {
        amount: amount
      });

      if (response.data.status === 'success') {
        // Update the supply in the list
        const updatedSupplies = supplies.map(supply => {
          if (supply._id === supplyId) {
            return response.data.data.supply;
          }
          return supply;
        });

        setSupplies(updatedSupplies);

        toast({
          title: "Stock Updated",
          description: "The inventory has been updated.",
        });
      }
    } catch (error) {
      console.error("Error updating stock:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to update stock. Please try again.",
        variant: "destructive",
      });
    }
  };

  const orderSupplies = async (supplyId) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/house-keeping/supplies/${supplyId}/order`, {
        quantity: 100 // Default order quantity
      });

      if (response.data.status === 'success') {
        // Update the supply in the list
        const updatedSupplies = supplies.map(supply => {
          if (supply._id === supplyId) {
            return response.data.data.supply;
          }
          return supply;
        });

        setSupplies(updatedSupplies);

        toast({
          title: "Order Placed",
          description: `An order has been placed for ${response.data.data.supply.name}.`,
        });
      }
    } catch (error) {
      console.error("Error ordering supply:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to place order. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-6 p-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Supplies Management</h1>
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button className="flex items-center gap-2">
              <Plus className="h-4 w-4" />
              <span>Add Supply</span>
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add New Supply</DialogTitle>
              <DialogDescription>
                Add a new item to the housekeeping inventory.
              </DialogDescription>
            </DialogHeader>

            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  rules={{ required: "Name is required" }}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Supply Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Towels" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="currentStock"
                  rules={{
                    required: "Current stock is required",
                    min: {
                      value: 0,
                      message: "Stock cannot be negative"
                    }
                  }}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Current Stock</FormLabel>
                      <FormControl>
                        <Input type="number" {...field} onChange={e => field.onChange(parseInt(e.target.value) || 0)} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="minStock"
                  rules={{
                    required: "Minimum stock is required",
                    min: {
                      value: 0,
                      message: "Minimum stock cannot be negative"
                    }
                  }}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Minimum Stock Level</FormLabel>
                      <FormControl>
                        <Input type="number" {...field} onChange={e => field.onChange(parseInt(e.target.value) || 0)} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="unit"
                  rules={{ required: "Unit is required" }}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Unit (piece, bottle, etc.)</FormLabel>
                      <FormControl>
                        <Input placeholder="piece" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <DialogFooter>
                  <Button type="submit">Add Supply</Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-40">
          <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
        </div>
      ) : (
        <>
          {/* Low Stock Alerts */}
          <Card className="bg-amber-50 border-amber-200">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center text-amber-800">
                <AlertTriangle className="h-5 w-5 mr-2 text-amber-600" />
                Low Stock Alerts
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {supplies.filter(supply => supply.status === "low").map(supply => (
                  <div key={supply._id} className="flex justify-between items-center bg-white p-3 rounded-md shadow-sm">
                    <div>
                      <p className="font-medium">{supply.name}</p>
                      <p className="text-sm text-gray-500">Current: {supply.currentStock} {supply.unit}s (Min: {supply.minStock})</p>
                    </div>
                    <Button onClick={() => orderSupplies(supply._id)} size="sm" variant="outline" className="text-amber-600 border-amber-600 hover:bg-amber-50">
                      Order Now
                    </Button>
                  </div>
                ))}
                {supplies.filter(supply => supply.status === "low").length === 0 && (
                  <p className="text-center py-2 text-gray-500">No supplies are currently below minimum stock levels.</p>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Inventory Table */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Package className="h-5 w-5 mr-2" />
                Inventory
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      <TableHead>Current Stock</TableHead>
                      <TableHead>Minimum Stock</TableHead>
                      <TableHead>Unit</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Last Ordered</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {supplies.map(supply => (
                      <TableRow key={supply._id}>
                        <TableCell className="font-medium">{supply.name}</TableCell>
                        <TableCell>{supply.currentStock}</TableCell>
                        <TableCell>{supply.minStock}</TableCell>
                        <TableCell>{supply.unit}</TableCell>
                        <TableCell>
                          <Badge className={supply.status === "low" ? "bg-red-100 text-red-800 hover:bg-red-100" : "bg-green-100 text-green-800 hover:bg-green-100"}>
                            {supply.status === "low" ? "Low Stock" : "Adequate"}
                          </Badge>
                        </TableCell>
                        <TableCell>{supply.lastOrdered}</TableCell>
                        <TableCell className="text-right space-x-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => updateSupplyStock(supply._id, 10)}
                          >
                            Add 10
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="border-amber-600 text-amber-600 hover:bg-amber-50"
                            onClick={() => orderSupplies(supply._id)}
                          >
                            Order
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                    {supplies.length === 0 && (
                      <TableRow>
                        <TableCell colSpan={7} className="text-center py-6 text-gray-500">
                          No supplies found. Add supplies to get started.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
};

export default SuppliesManagement;
</file>

<file path="src/components/Admin/Housekeeping/TaskManagement.tsx">
import { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { format, parseISO } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, Clock, Plus, AlertTriangle, Loader2 } from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/components/ui/use-toast";
import axios from "axios";

// API endpoint
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";

// Room numbers (still using mock data for now)
const roomNumbers = [
  "101", "102", "103", "104", "105",
  "201", "202", "203", "204", "205",
  "301", "302", "303", "304", "305",
  "401", "402", "403", "404", "405",
  "501", "502", "503", "504", "505"
];

// Priority badges
const priorityBadges = {
  high: <Badge className="bg-red-100 text-red-800 hover:bg-red-100">High</Badge>,
  medium: <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-100">Medium</Badge>,
  low: <Badge className="bg-green-100 text-green-800 hover:bg-green-100">Low</Badge>,
};

// Status badges
const statusBadges = {
  pending: <Badge variant="outline" className="border-gray-300 text-gray-600">Pending</Badge>,
  "in-progress": <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-100">In Progress</Badge>,
  completed: <Badge className="bg-green-100 text-green-800 hover:bg-green-100">Completed</Badge>,
  delayed: <Badge className="bg-red-100 text-red-800 hover:bg-red-100 flex items-center gap-1"><AlertTriangle className="h-3 w-3" /> Delayed</Badge>,
};

// Form schema
const taskSchema = z.object({
  roomNumber: z.string().min(1, { message: "Room number is required" }),
  assignedTo: z.string().min(1, { message: "Please assign to a staff member" }),
  priority: z.string(),
  notes: z.string().optional(),
  dueDate: z.date(),
  isRecurring: z.boolean().default(false)
});

const TaskManagement = () => {
  const [tasks, setTasks] = useState<any[]>([]);
  const [staff, setStaff] = useState<any[]>([]);
  const [open, setOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const form = useForm({
    resolver: zodResolver(taskSchema),
    defaultValues: {
      roomNumber: "",
      assignedTo: "",
      priority: "medium",
      notes: "",
      dueDate: new Date(),
      isRecurring: false,
    }
  });

  // Fetch staff and tasks
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);

        // Fetch staff
        const staffResponse = await axios.get(`${API_URL}/api/house-keeping/staff`);
        if (staffResponse.data.data && staffResponse.data.data.staff) {
          setStaff(staffResponse.data.data.staff);
        }

        // Fetch tasks
        const tasksResponse = await axios.get(`${API_URL}/api/house-keeping/tasks`);
        if (tasksResponse.data.data && tasksResponse.data.data.tasks) {
          setTasks(tasksResponse.data.data.tasks);
        }

      } catch (error) {
        console.error("Error fetching data:", error);
        toast({
          title: "Error",
          description: "Failed to load data. Please try again.",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [toast]);

  const getStaffName = (staffId: string) => {
    const staffMember = staff.find(s => s._id === staffId);
    return staffMember ? staffMember.name : "Unassigned";
  };

  const formatDate = (dateString: string) => {
    try {
      return format(parseISO(dateString), "PPp");
    } catch (error) {
      return "Invalid date";
    }
  };

  const handleCreateTask = async (data: any) => {
    try {
      setIsSubmitting(true);
      console.log("Creating task with data:", data);

      const response = await axios.post(`${API_URL}/api/house-keeping/tasks`, {
        roomNumber: data.roomNumber,
        assignedTo: data.assignedTo,
        priority: data.priority,
        notes: data.notes,
        dueDate: data.dueDate.toISOString(),
        isRecurring: data.isRecurring,
      });

      console.log("Task created:", response.data);

      // Add new task to state
      if (response.data.data && response.data.data.task) {
        setTasks(prevTasks => [...prevTasks, response.data.data.task]);
      }

      setOpen(false);
      form.reset();

      toast({
        title: "Task Created",
        description: `Task for Room ${data.roomNumber} has been assigned.`,
      });
    } catch (error) {
      console.error("Error creating task:", error);
      toast({
        title: "Error",
        description: "Failed to create task. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const updateTaskStatus = async (taskId: string, newStatus: string) => {
    try {
      setIsLoading(true);
      console.log(`Updating task ${taskId} to status: ${newStatus}`);

      const response = await axios.patch(`${API_URL}/api/house-keeping/tasks/${taskId}`, {
        status: newStatus
      });

      console.log("Task updated:", response.data);

      // Update task in state
      if (response.data.data && response.data.data.task) {
        setTasks(prevTasks =>
          prevTasks.map(task =>
            task._id === taskId ? response.data.data.task : task
          )
        );
      }

      toast({
        title: "Task Updated",
        description: `Task status updated to ${newStatus}.`,
      });
    } catch (error) {
      console.error("Error updating task:", error);
      toast({
        title: "Error",
        description: "Failed to update task status. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Housekeeping Task Management</h1>
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button className="flex items-center gap-2">
              <Plus className="h-4 w-4" />
              <span>New Task</span>
            </Button>
          </DialogTrigger>
          <DialogContent className="max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Create New Cleaning Task</DialogTitle>
              <DialogDescription>
                Assign a new cleaning or maintenance task to housekeeping staff.
              </DialogDescription>
            </DialogHeader>

            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleCreateTask)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="roomNumber"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Room Number</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select room" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {roomNumbers.map(room => (
                            <SelectItem key={room} value={room}>{room}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="assignedTo"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Assign To</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select staff member" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {staff.map(staffMember => (
                            <SelectItem key={staffMember._id} value={staffMember._id}>
                              {staffMember.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="priority"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Priority</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select priority" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="high">High</SelectItem>
                          <SelectItem value="medium">Medium</SelectItem>
                          <SelectItem value="low">Low</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="dueDate"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Due Date & Time</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={"outline"}
                              className="w-full pl-3 text-left font-normal flex justify-between items-center"
                            >
                              {field.value ? (
                                format(field.value, "PPp")
                              ) : (
                                <span>Pick a date and time</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            initialFocus
                          />
                          <div className="p-3 border-t border-border">
                            <Input
                              type="time"
                              onChange={(e) => {
                                const [hours, minutes] = e.target.value.split(':');
                                const newDate = new Date(field.value);
                                newDate.setHours(parseInt(hours), parseInt(minutes));
                                field.onChange(newDate);
                              }}
                              defaultValue={format(field.value, 'HH:mm')}
                            />
                          </div>
                        </PopoverContent>
                      </Popover>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="notes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Notes</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Additional instructions or details"
                          className="resize-none"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="isRecurring"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>
                          Recurring Task
                        </FormLabel>
                        <p className="text-sm text-muted-foreground">
                          Set this task as recurring for long-stay rooms
                        </p>
                      </div>
                    </FormItem>
                  )}
                />

                <DialogFooter>
                  <Button type="button" variant="outline" onClick={() => setOpen(false)} disabled={isSubmitting}>
                    Cancel
                  </Button>
                  <Button type="submit" disabled={isSubmitting}>
                    {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    {isSubmitting ? "Creating..." : "Create Task"}
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center">
            <Clock className="h-5 w-5 mr-2" />
            Active Tasks
          </CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Room</TableHead>
                  <TableHead>Assigned To</TableHead>
                  <TableHead>Priority</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Notes</TableHead>
                  <TableHead>Due</TableHead>
                  <TableHead>Recurring</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {tasks.length > 0 ? (
                  tasks.map(task => (
                    <TableRow key={task._id}>
                      <TableCell className="font-medium">{task.roomNumber}</TableCell>
                      <TableCell>
                        {task.assignedTo && typeof task.assignedTo === 'object'
                          ? task.assignedTo.name
                          : getStaffName(task.assignedTo)}
                      </TableCell>
                      <TableCell>{priorityBadges[task.priority as keyof typeof priorityBadges]}</TableCell>
                      <TableCell>{statusBadges[task.status as keyof typeof statusBadges]}</TableCell>
                      <TableCell className="max-w-xs truncate">{task.notes}</TableCell>
                      <TableCell className="text-sm">
                        {task.dueDate ? formatDate(task.dueDate) : "No date"}
                      </TableCell>
                      <TableCell>{task.isRecurring ? "Yes" : "No"}</TableCell>
                      <TableCell className="text-right">
                        <Select
                          defaultValue={task.status}
                          onValueChange={(value) => updateTaskStatus(task._id, value)}
                        >
                          <SelectTrigger className="w-[130px]">
                            <SelectValue placeholder="Update Status" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="pending">Pending</SelectItem>
                            <SelectItem value="in-progress">In Progress</SelectItem>
                            <SelectItem value="completed">Completed</SelectItem>
                            <SelectItem value="delayed">Delayed</SelectItem>
                          </SelectContent>
                        </Select>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={8} className="text-center py-6 text-muted-foreground">
                      No tasks assigned yet. Create a new task to get started.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TaskManagement;
</file>

<file path="src/components/Admin/Layout/AdminHeader.tsx">
import { Bell, Search, User, LogOut } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useEffect, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { toast } from "sonner";
import { useSearch } from "@/contexts/SearchContext";

interface UserData {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

const AdminHeader = () => {
  const [userData, setUserData] = useState<UserData | null>(null);
  const navigate = useNavigate();
  const location = useLocation();
  const { searchQuery, setSearchQuery, setSearchTarget } = useSearch();

  useEffect(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      setUserData(JSON.parse(userDataString));
    }
  }, []);

  useEffect(() => {
    // Set the search target based on the current route
    if (location.pathname.includes('/admin/rooms')) {
      setSearchTarget('rooms');
    } else {
      setSearchTarget('');
    }
  }, [location.pathname, setSearchTarget]);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  const clearSearch = () => {
    setSearchQuery('');
  };

  const handleLogout = () => {
    localStorage.removeItem("currentUser");
    toast.success("Logged out successfully");
    navigate("/admin-login");
  };

  return (
    <header className="bg-white shadow-sm z-10 py-4 px-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <h1 className="text-2xl font-semibold text-gray-800">Parkside Plaza Hotel</h1>
          <span className="bg-hotel-primary text-white px-2 py-0.5 rounded text-xs">Admin</span>
        </div>

        <div className="flex items-center space-x-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <input
              type="text"
              placeholder="Search..."
              className="pl-10 pr-10 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-hotel-primary focus:border-transparent w-64"
              value={searchQuery}
              onChange={handleSearchChange}
            />
            {searchQuery && (
              <button
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                onClick={clearSearch}
              >
                ×
              </button>
            )}
          </div>

          <Button variant="ghost" size="icon" className="relative">
            <Bell size={20} />
            <span className="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full"></span>
          </Button>

          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
                <User size={20} className="text-gray-700" />
              </div>
              <div>
                <p className="text-sm font-medium">{userData?.name || "Loading..."}</p>
                <p className="text-xs text-gray-500">{userData?.role} - {userData?.department}</p>
              </div>
            </div>

            <Button variant="ghost" size="sm" onClick={handleLogout} className="text-red-500 hover:text-red-700 hover:bg-red-50">
              <LogOut size={18} className="mr-1" />
              Logout
            </Button>
          </div>
        </div>
      </div>
    </header>
  );
};

export default AdminHeader;
</file>

<file path="src/components/Admin/Layout/AdminLayout.tsx">
import { Outlet } from "react-router-dom";
import AdminSidebar from "./AdminSidebar";
import AdminHeader from "./AdminHeader";
import AuthGuard from "../Auth/AuthGuard";

const AdminLayout = () => {
  return (
    <AuthGuard>
      <div className="flex h-screen bg-gray-100">
        <AdminSidebar />
        <div className="flex-1 flex flex-col overflow-hidden">
          <AdminHeader />
          <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-100 p-4">
            <Outlet />
          </main>
        </div>
      </div>
    </AuthGuard>
  );
};

export default AdminLayout;
</file>

<file path="src/components/Admin/Layout/AdminSidebar.tsx">
import { Link, useLocation } from "react-router-dom";
import {
  LayoutDashboard,
  Bed,
  Ticket,
  Utensils,
  Award,
  Users,
  Settings,
  Tag,
  BarChart,
  Undo2,
  LogOut,
  ChevronDown,
  ChevronRight,
  FileEdit,
  Calendar as CalendarIcon,
  Flower2,
  DollarSign,
  ClipboardList,
  Briefcase
} from "lucide-react";
import { useState, useEffect } from "react";

interface SidebarItemProps {
  icon: JSX.Element;
  title: string;
  path: string;
  isActive: boolean;
  hasSubmenu?: boolean;
  submenuItems?: { title: string; path: string }[];
  requiredAccessLevels?: string[];
  requiredDepartments?: string[];
}

interface UserData {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

const SidebarItem = ({
  icon,
  title,
  path,
  isActive,
  hasSubmenu = false,
  submenuItems = [],
  requiredAccessLevels = ["Full Access", "Administrative", "Standard", "Limited", "Read Only"],
  requiredDepartments = []
}: SidebarItemProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [canView, setCanView] = useState(false);

  useEffect(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const user = JSON.parse(userDataString);
      setUserData(user);

      const hasAccessLevel = requiredAccessLevels.includes(user.accessLevel);
      const hasDepartmentAccess = requiredDepartments.length === 0 || requiredDepartments.includes(user.department);

      setCanView(hasAccessLevel && hasDepartmentAccess);
    }
  }, [requiredAccessLevels.join(','), requiredDepartments.join(',')]);

  if (!canView && userData) return null;

  const handleToggle = () => {
    if (hasSubmenu) {
      setIsOpen(!isOpen);
    }
  };

  return (
    <div className="mb-1">
      {hasSubmenu ? (
        <button
          onClick={handleToggle}
          className={`flex items-center w-full p-3 rounded-lg transition-colors ${isActive ? "bg-hotel-primary text-white" : "text-gray-700 hover:bg-gray-100"
            }`}
        >
          <span className="mr-3">{icon}</span>
          <span className="flex-1">{title}</span>
          {isOpen ? <ChevronDown size={18} /> : <ChevronRight size={18} />}
        </button>
      ) : (
        <Link
          to={path}
          className={`flex items-center p-3 rounded-lg transition-colors ${isActive ? "bg-hotel-primary text-white" : "text-gray-700 hover:bg-gray-100"
            }`}
        >
          <span className="mr-3">{icon}</span>
          <span>{title}</span>
        </Link>
      )}

      {hasSubmenu && isOpen && (
        <div className="pl-10 mt-1 space-y-1">
          {submenuItems.map((item, index) => (
            <Link
              key={index}
              to={item.path}
              className="block py-2 px-3 text-sm text-gray-700 hover:text-hotel-primary rounded-lg hover:bg-gray-50"
            >
              {item.title}
            </Link>
          ))}
        </div>
      )}
    </div>
  );
};

const AdminSidebar = () => {
  const location = useLocation();
  const pathname = location.pathname;
  const [userData, setUserData] = useState<UserData | null>(null);

  useEffect(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      setUserData(JSON.parse(userDataString));
    }
  }, []);

  const handleLogout = () => {
    localStorage.removeItem("currentUser");
    window.location.href = "/admin-login";
  };

  return (
    <div className="w-64 bg-white shadow-sm h-full overflow-y-auto">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-bold text-hotel-primary">Hotel Admin</h2>
        {userData && (
          <p className="text-sm text-gray-500 mt-1">{userData.department}</p>
        )}
      </div>

      <nav className="mt-4 px-2">
        <SidebarItem
          icon={<LayoutDashboard size={20} />}
          title="Dashboard"
          path="/admin"
          isActive={pathname === "/admin"}
        />

        <SidebarItem
          icon={<Bed size={20} />}
          title="Rooms"
          path="/admin/rooms"
          isActive={pathname.startsWith("/admin/rooms")}
          hasSubmenu={true}
          submenuItems={[
            { title: "All Rooms", path: "/admin/rooms" },
            { title: "Add Room", path: "/admin/rooms/add" },
            { title: "Bookings", path: "/admin/rooms/bookings" },
            { title: "Reports", path: "/admin/rooms/reports" },
          ]}
          requiredDepartments={["Management", "Front Office", "Housekeeping"]}
        />

        <SidebarItem
          icon={<ClipboardList size={20} />}
          title="Housekeeping"
          path="/admin/housekeeping"
          isActive={pathname.startsWith("/admin/housekeeping")}
          hasSubmenu={true}
          submenuItems={[
            { title: "Room Status", path: "/admin/housekeeping" },
            { title: "Task Management", path: "/admin/housekeeping/tasks" },
            { title: "Staff", path: "/admin/housekeeping/staff" },
            { title: "Supplies", path: "/admin/housekeeping/supplies" },
            { title: "Schedule", path: "/admin/housekeeping/schedule" },
            { title: "Reports", path: "/admin/housekeeping/reports" },
          ]}
          requiredDepartments={["Management", "Housekeeping"]}
        />

        <SidebarItem
          icon={<Flower2 size={20} />}
          title="Spa"
          path="/admin/spa"
          isActive={pathname.startsWith("/admin/spa")}
          hasSubmenu={true}
          submenuItems={[
            { title: "All Services", path: "/admin/spa" },
            { title: "Add Service", path: "/admin/spa/add-service" },
            { title: "Add Specialist", path: "/admin/spa/add-specialist" },
            { title: "Categories", path: "/admin/spa/categories" },
            { title: "Bookings", path: "/admin/spa/bookings" },
            { title: "Reports", path: "/admin/spa/reports" },
          ]}
          requiredDepartments={["Management", "Spa & Wellness"]}
        />

        <SidebarItem
          icon={<Ticket size={20} />}
          title="Events"
          path="/admin/events"
          isActive={pathname.startsWith("/admin/events")}
          hasSubmenu={true}
          submenuItems={[
            { title: "All Events", path: "/admin/events" },
            { title: "Add Event", path: "/admin/events/add" },
            { title: "Bookings", path: "/admin/events/bookings" },
            { title: "Reports", path: "/admin/events/reports" },
            { title: "Scanner", path: "/admin/events/scanner" },
          ]}
          requiredDepartments={["Management", "Events", "Sales & Marketing"]}
        />

        <SidebarItem
          icon={<Utensils size={20} />}
          title="Restaurant"
          path="/admin/restaurant"
          isActive={pathname.startsWith("/admin/restaurant")}
          hasSubmenu={true}
          submenuItems={[
            { title: "Menu Items", path: "/admin/restaurant" },
            { title: "Add Menu Item", path: "/admin/restaurant/add-item" },
            { title: "Categories", path: "/admin/restaurant/categories" },
            { title: "Orders", path: "/admin/restaurant/orders" },
            { title: "Tables", path: "/admin/restaurant/tables" },
            { title: "Reports", path: "/admin/restaurant/reports" },
          ]}
          requiredDepartments={["Management", "Food & Beverage"]}
        />

        <SidebarItem
          icon={<Award size={20} />}
          title="Loyalty Program"
          path="/admin/loyalty"
          isActive={pathname.startsWith("/admin/loyalty")}
          requiredAccessLevels={["Full Access", "Administrative"]}
          requiredDepartments={["Management", "Sales & Marketing"]}
        />

        <SidebarItem
          icon={<CalendarIcon size={20} />}
          title="Meeting Hall"
          path="/admin/meeting-hall"
          isActive={pathname.startsWith("/admin/meeting-hall")}
          requiredAccessLevels={["Full Access", "Administrative", "Standard"]}
          requiredDepartments={["Management", "Front Office", "Sales & Marketing"]}
        />

        <SidebarItem
          icon={<CalendarIcon size={20} />}
          title="Availability"
          path="/admin/availability"
          isActive={pathname.startsWith("/admin/availability")}
          requiredAccessLevels={["Full Access", "Administrative", "Standard"]}
          requiredDepartments={["Management", "Front Office", "Spa & Wellness", "Sales & Marketing"]}
        />

        <SidebarItem
          icon={<Tag size={20} />}
          title="Promo Codes"
          path="/admin/promo-codes"
          isActive={pathname.startsWith("/admin/promo-codes")}
          requiredAccessLevels={["Full Access", "Administrative"]}
          requiredDepartments={["Management", "Sales & Marketing", "Finance"]}
        />

        <SidebarItem
          icon={<DollarSign size={20} />}
          title="Tax Settings"
          path="/admin/tax-settings"
          isActive={pathname.startsWith("/admin/tax-settings")}
          requiredAccessLevels={["Full Access", "Administrative"]}
          requiredDepartments={["Management", "Finance"]}
        />

        <SidebarItem
          icon={<Undo2 size={20} />}
          title="Refunds"
          path="/admin/refunds"
          isActive={pathname.startsWith("/admin/refunds")}
          requiredAccessLevels={["Full Access", "Administrative"]}
          requiredDepartments={["Management", "Finance"]}
        />

        <SidebarItem
          icon={<BarChart size={20} />}
          title="Reports"
          path="/admin/reports"
          isActive={pathname.startsWith("/admin/reports")}
        // All staff can access reports now, but they will only see their department-specific reports
        />

        <SidebarItem
          icon={<Users size={20} />}
          title="Staff Management"
          path="/admin/staff"
          isActive={pathname.startsWith("/admin/staff")}
          hasSubmenu={true}
          submenuItems={[
            { title: "Staff Management", path: "/admin/staff" },
            { title: "Add Department", path: "/admin/staff/add-department" },
            { title: "Add Role", path: "/admin/staff/add-role" },
            { title: "Add Access Level", path: "/admin/staff/add-access-level" },
          ]}
          requiredAccessLevels={["Full Access", "Administrative"]}
          requiredDepartments={["Management", "Human Resources"]}
        />

        <SidebarItem
          icon={<Users size={20} />}
          title="User Management"
          path="/admin/users"
          isActive={pathname.startsWith("/admin/users")}
          requiredAccessLevels={["Full Access", "Administrative"]}
        />

        <SidebarItem
          icon={<FileEdit size={20} />}
          title="Content Management"
          path="/admin/content"
          isActive={pathname.startsWith("/admin/content")}
          requiredAccessLevels={["Full Access", "Administrative"]}
        />

        <SidebarItem
          icon={<Settings size={20} />}
          title="Settings"
          path="/admin/settings"
          isActive={pathname.startsWith("/admin/settings")}
          requiredAccessLevels={["Full Access"]}
        />

        <div className="mt-8 border-t border-gray-200 pt-4">
          <button onClick={handleLogout} className="w-full flex items-center p-3 text-red-500 hover:bg-red-50 rounded-lg">
            <LogOut size={20} className="mr-3" />
            <span>Logout</span>
          </button>
        </div>
      </nav>
    </div>
  );
};

export default AdminSidebar;
</file>

<file path="src/components/Admin/Loyalty/AddRewardModal.tsx">
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Plus } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Omit } from "@/types/utils";
import { LoyaltyReward } from "@/services/loyaltyService";

interface AddRewardModalProps {
  onAddReward: (reward: Omit<LoyaltyReward, '_id'>) => void;
}

const AddRewardModal = ({ onAddReward }: AddRewardModalProps) => {
  const [open, setOpen] = useState(false);
  const [name, setName] = useState("");
  const [pointsCost, setPointsCost] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState("Dining");
  const [status, setStatus] = useState("Active");
  const { toast } = useToast();

  const categories = ["Dining", "Room", "Wellness", "Transportation", "Experience", "Other"];

  const handleSubmit = () => {
    if (!name || !pointsCost || !description || !category) {
      toast({
        title: "Missing information",
        description: "Please fill all required fields",
        variant: "destructive",
      });
      return;
    }

    onAddReward({
      name,
      pointsCost: parseInt(pointsCost),
      description,
      category,
      status,
    });

    // Reset form and close modal
    setName("");
    setPointsCost("");
    setDescription("");
    setCategory("Dining");
    setStatus("Active");
    setOpen(false);

    toast({
      title: "Success",
      description: `${name} reward has been added successfully.`,
    });
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="sm">
          <Plus className="mr-2 h-4 w-4" />
          Add Reward
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Add New Reward</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="rewardName" className="text-right">
              Reward Name
            </Label>
            <Input
              id="rewardName"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="col-span-3"
              placeholder="e.g. Free Breakfast"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="pointsCost" className="text-right">
              Points Cost
            </Label>
            <Input
              id="pointsCost"
              type="number"
              value={pointsCost}
              onChange={(e) => setPointsCost(e.target.value)}
              className="col-span-3"
              placeholder="e.g. 500"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="category" className="text-right">
              Category
            </Label>
            <Select 
              value={category} 
              onValueChange={setCategory}
            >
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((cat) => (
                  <SelectItem key={cat} value={cat}>
                    {cat}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="status" className="text-right">
              Status
            </Label>
            <Select 
              value={status} 
              onValueChange={setStatus}
            >
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Select status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Active">Active</SelectItem>
                <SelectItem value="Inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-start gap-4">
            <Label htmlFor="description" className="text-right pt-2">
              Description
            </Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="col-span-3"
              placeholder="Describe the reward..."
              rows={3}
            />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => setOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleSubmit}>Save Reward</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default AddRewardModal;
</file>

<file path="src/components/Admin/Loyalty/AddTierModal.tsx">
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Plus } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Omit } from "@/types/utils";
import { LoyaltyTier } from "@/services/loyaltyService";

interface AddTierModalProps {
  onAddTier: (tier: Omit<LoyaltyTier, '_id'>) => void;
}

const AddTierModal = ({ onAddTier }: AddTierModalProps) => {
  const [open, setOpen] = useState(false);
  const [name, setName] = useState("");
  const [pointsRequired, setPointsRequired] = useState("");
  const [benefits, setBenefits] = useState("");
  const [color, setColor] = useState("#6d4c41"); // Default bronze color
  const { toast } = useToast();

  const handleSubmit = () => {
    if (!name || !pointsRequired) {
      toast({
        title: "Missing information",
        description: "Please fill all required fields",
        variant: "destructive",
      });
      return;
    }

    const benefitsList = benefits
      .split("\n")
      .filter(benefit => benefit.trim() !== "");

    // Store hex color directly in database instead of converting to Tailwind class
    onAddTier({
      name,
      pointsRequired: parseInt(pointsRequired),
      benefits: benefitsList,
      color: color, // Store the actual hex color
    });

    // Reset form and close modal
    setName("");
    setPointsRequired("");
    setBenefits("");
    setColor("#6d4c41");
    setOpen(false);

    toast({
      title: "Success",
      description: `${name} tier has been added successfully.`,
    });
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="sm">
          <Plus className="mr-2 h-4 w-4" />
          Add Tier
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Add New Loyalty Tier</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="tierName" className="text-right">
              Tier Name
            </Label>
            <Input
              id="tierName"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="col-span-3"
              placeholder="e.g. Diamond"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="pointsRequired" className="text-right">
              Points Required
            </Label>
            <Input
              id="pointsRequired"
              type="number"
              value={pointsRequired}
              onChange={(e) => setPointsRequired(e.target.value)}
              className="col-span-3"
              placeholder="e.g. 15000"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="tierColor" className="text-right">
              Tier Color
            </Label>
            <div className="col-span-3 flex items-center gap-2">
              <Input
                id="tierColor"
                type="color"
                value={color}
                onChange={(e) => setColor(e.target.value)}
                className="w-16 h-10 p-1"
              />
              <span className="text-sm text-gray-500">{color}</span>
            </div>
          </div>
          <div className="grid grid-cols-4 items-start gap-4">
            <Label htmlFor="benefits" className="text-right pt-2">
              Benefits
            </Label>
            <Textarea
              id="benefits"
              value={benefits}
              onChange={(e) => setBenefits(e.target.value)}
              className="col-span-3"
              placeholder="Add each benefit on a new line&#10;e.g. 25% discount on dining&#10;Airport transfer&#10;Suite upgrade"
              rows={5}
            />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => setOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleSubmit}>Save Tier</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default AddTierModal;
</file>

<file path="src/components/Admin/Loyalty/EditRewardModal.tsx">
import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Edit } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { LoyaltyReward } from "@/services/loyaltyService";

interface EditRewardModalProps {
  reward: LoyaltyReward;
  onUpdateReward: (updatedReward: Partial<LoyaltyReward>) => void;
}

const EditRewardModal = ({ reward, onUpdateReward }: EditRewardModalProps) => {
  const [open, setOpen] = useState(false);
  const [name, setName] = useState("");
  const [pointsCost, setPointsCost] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState("");
  const [status, setStatus] = useState("");
  const { toast } = useToast();

  const categories = ["Dining", "Room", "Wellness", "Transportation", "Experience", "Other"];

  useEffect(() => {
    if (reward) {
      setName(reward.name);
      setPointsCost(reward.pointsCost.toString());
      setDescription(reward.description);
      setCategory(reward.category);
      setStatus(reward.status);
    }
  }, [reward]);

  const handleSubmit = () => {
    if (!name || !pointsCost || !description || !category) {
      toast({
        title: "Missing information",
        description: "Please fill all required fields",
        variant: "destructive",
      });
      return;
    }

    onUpdateReward({
      name,
      pointsCost: parseInt(pointsCost),
      description,
      category,
      status,
    });

    setOpen(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Edit size={16} />
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Reward</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="rewardName" className="text-right">
              Reward Name
            </Label>
            <Input
              id="rewardName"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="pointsCost" className="text-right">
              Points Cost
            </Label>
            <Input
              id="pointsCost"
              type="number"
              value={pointsCost}
              onChange={(e) => setPointsCost(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="category" className="text-right">
              Category
            </Label>
            <Select 
              value={category} 
              onValueChange={setCategory}
            >
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((cat) => (
                  <SelectItem key={cat} value={cat}>
                    {cat}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="status" className="text-right">
              Status
            </Label>
            <Select 
              value={status} 
              onValueChange={setStatus}
            >
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Select status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Active">Active</SelectItem>
                <SelectItem value="Inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-start gap-4">
            <Label htmlFor="description" className="text-right pt-2">
              Description
            </Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="col-span-3"
              rows={3}
            />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => setOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleSubmit}>Update Reward</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EditRewardModal;
</file>

<file path="src/components/Admin/Loyalty/EditTierModal.tsx">
import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Edit } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { LoyaltyTier } from "@/services/loyaltyService";

interface EditTierModalProps {
  tier: LoyaltyTier;
  onUpdateTier: (updatedTier: Partial<LoyaltyTier>) => void;
}

const EditTierModal = ({ tier, onUpdateTier }: EditTierModalProps) => {
  const [open, setOpen] = useState(false);
  const [name, setName] = useState("");
  const [pointsRequired, setPointsRequired] = useState("");
  const [benefits, setBenefits] = useState("");
  const [color, setColor] = useState("#6d4c41");
  const { toast } = useToast();

  useEffect(() => {
    if (tier) {
      setName(tier.name);
      setPointsRequired(tier.pointsRequired.toString());
      setBenefits(tier.benefits.join("\n"));
      // If color is already hex, use it directly
      setColor(tier.color.startsWith('#') ? tier.color : '#6d4c41');
    }
  }, [tier]);

  const handleSubmit = () => {
    if (!name || !pointsRequired) {
      toast({
        title: "Missing information",
        description: "Please fill all required fields",
        variant: "destructive",
      });
      return;
    }

    const benefitsList = benefits
      .split("\n")
      .filter(benefit => benefit.trim() !== "");

    onUpdateTier({
      name,
      pointsRequired: parseInt(pointsRequired),
      benefits: benefitsList,
      color: color, // Store the actual hex color
    });

    setOpen(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Edit size={16} />
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Loyalty Tier</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="tierName" className="text-right">
              Tier Name
            </Label>
            <Input
              id="tierName"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="pointsRequired" className="text-right">
              Points Required
            </Label>
            <Input
              id="pointsRequired"
              type="number"
              value={pointsRequired}
              onChange={(e) => setPointsRequired(e.target.value)}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="tierColor" className="text-right">
              Tier Color
            </Label>
            <div className="col-span-3 flex items-center gap-2">
              <Input
                id="tierColor"
                type="color"
                value={color}
                onChange={(e) => setColor(e.target.value)}
                className="w-16 h-10 p-1"
              />
              <span className="text-sm text-gray-500">{color}</span>
            </div>
          </div>
          <div className="grid grid-cols-4 items-start gap-4">
            <Label htmlFor="benefits" className="text-right pt-2">
              Benefits
            </Label>
            <Textarea
              id="benefits"
              value={benefits}
              onChange={(e) => setBenefits(e.target.value)}
              className="col-span-3"
              rows={5}
            />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => setOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleSubmit}>Update Tier</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EditTierModal;
</file>

<file path="src/components/Admin/Loyalty/LoyaltyManagementContent.tsx">
import { useState, useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Search, Award, Gift, BarChart, Loader2 } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";

import AddTierModal from "./AddTierModal";
import EditTierModal from "./EditTierModal";
import AddRewardModal from "./AddRewardModal";
import EditRewardModal from "./EditRewardModal";
import ConfirmDeleteModal from "../Common/ConfirmDeleteModal";
import LoyaltyReports from "./LoyaltyReports";

import * as loyaltyService from '@/services/loyaltyService';
import { LoyaltyTier, LoyaltyReward, LoyaltySettings } from '@/services/loyaltyService';

const LoyaltyManagementContent = () => {
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState("");

  // State for data
  const [loyaltyTiers, setLoyaltyTiers] = useState<LoyaltyTier[]>([]);
  const [loyaltyRewards, setLoyaltyRewards] = useState<LoyaltyReward[]>([]);
  const [settings, setSettings] = useState<LoyaltySettings | null>(null);

  // State for UI
  const [isLoadingTiers, setIsLoadingTiers] = useState(true);
  const [isLoadingRewards, setIsLoadingRewards] = useState(true);
  const [isLoadingSettings, setIsLoadingSettings] = useState(true);
  const [isSavingSettings, setIsSavingSettings] = useState(false);

  // Fetch tiers from API
  const fetchTiers = async () => {
    try {
      setIsLoadingTiers(true);
      const data = await loyaltyService.getAllTiers();
      setLoyaltyTiers(data);
    } catch (error) {
      console.error('Error fetching loyalty tiers:', error);
      toast({
        title: "Error",
        description: "Failed to fetch loyalty tiers",
        variant: "destructive",
      });
    } finally {
      setIsLoadingTiers(false);
    }
  };

  // Fetch rewards from API
  const fetchRewards = async () => {
    try {
      setIsLoadingRewards(true);
      const data = await loyaltyService.getAllRewards();
      setLoyaltyRewards(data);
    } catch (error) {
      console.error('Error fetching loyalty rewards:', error);
      toast({
        title: "Error",
        description: "Failed to fetch loyalty rewards",
        variant: "destructive",
      });
    } finally {
      setIsLoadingRewards(false);
    }
  };

  // Fetch settings from API
  const fetchSettings = async () => {
    try {
      setIsLoadingSettings(true);
      const data = await loyaltyService.getSettings();
      setSettings(data);
    } catch (error) {
      console.error('Error fetching loyalty settings:', error);
      toast({
        title: "Error",
        description: "Failed to fetch loyalty settings",
        variant: "destructive",
      });
    } finally {
      setIsLoadingSettings(false);
    }
  };

  // Load all data on component mount
  useEffect(() => {
    fetchTiers();
    fetchRewards();
    fetchSettings();
  }, []);

  const handleAddTier = async (newTier: Omit<LoyaltyTier, '_id'>) => {
    try {
      const addedTier = await loyaltyService.createTier(newTier);
      setLoyaltyTiers([...loyaltyTiers, addedTier]);
      toast({
        title: "Tier added",
        description: `${newTier.name} tier has been added successfully.`,
      });
    } catch (error) {
      console.error('Error adding tier:', error);
      toast({
        title: "Error",
        description: "Failed to add tier",
        variant: "destructive",
      });
    }
  };

  const handleUpdateTier = async (id: string, updatedTier: Partial<LoyaltyTier>) => {
    try {
      const updated = await loyaltyService.updateTier(id, updatedTier);
      setLoyaltyTiers(
        loyaltyTiers.map(tier =>
          tier._id === id ? { ...tier, ...updated } : tier
        )
      );
      toast({
        title: "Tier updated",
        description: `Tier has been updated successfully.`,
      });
    } catch (error) {
      console.error('Error updating tier:', error);
      toast({
        title: "Error",
        description: "Failed to update tier",
        variant: "destructive",
      });
    }
  };

  const handleDeleteTier = async (id: string) => {
    try {
      await loyaltyService.deleteTier(id);
      setLoyaltyTiers(loyaltyTiers.filter(tier => tier._id !== id));
      toast({
        title: "Tier deleted",
        description: "The tier has been deleted successfully.",
      });
    } catch (error) {
      console.error('Error deleting tier:', error);
      toast({
        title: "Error",
        description: "Failed to delete tier",
        variant: "destructive",
      });
    }
  };

  const handleAddReward = async (newReward: Omit<LoyaltyReward, '_id'>) => {
    try {
      const addedReward = await loyaltyService.createReward(newReward);
      setLoyaltyRewards([...loyaltyRewards, addedReward]);
      toast({
        title: "Reward added",
        description: `${newReward.name} reward has been added successfully.`,
      });
    } catch (error) {
      console.error('Error adding reward:', error);
      toast({
        title: "Error",
        description: "Failed to add reward",
        variant: "destructive",
      });
    }
  };

  const handleUpdateReward = async (id: string, updatedReward: Partial<LoyaltyReward>) => {
    try {
      const updated = await loyaltyService.updateReward(id, updatedReward);
      setLoyaltyRewards(
        loyaltyRewards.map(reward =>
          reward._id === id ? { ...reward, ...updated } : reward
        )
      );
      toast({
        title: "Reward updated",
        description: `Reward has been updated successfully.`,
      });
    } catch (error) {
      console.error('Error updating reward:', error);
      toast({
        title: "Error",
        description: "Failed to update reward",
        variant: "destructive",
      });
    }
  };

  const handleDeleteReward = async (id: string) => {
    try {
      await loyaltyService.deleteReward(id);
      setLoyaltyRewards(loyaltyRewards.filter(reward => reward._id !== id));
      toast({
        title: "Reward deleted",
        description: "The reward has been deleted successfully.",
      });
    } catch (error) {
      console.error('Error deleting reward:', error);
      toast({
        title: "Error",
        description: "Failed to delete reward",
        variant: "destructive",
      });
    }
  };

  const handleSaveSettings = async () => {
    if (!settings) return;

    try {
      setIsSavingSettings(true);
      const updatedSettings = await loyaltyService.updateSettings({
        pointsExpiration: Number(settings.pointsExpiration),
        pointsPerDollar: Number(settings.pointsPerDollar),
        welcomeBonus: Number(settings.welcomeBonus),
        birthdayBonus: Number(settings.birthdayBonus),
        promoCodesApplicable: typeof settings.promoCodesApplicable === 'boolean'
          ? settings.promoCodesApplicable
          : settings.promoCodesApplicable === 'yes',
        discountAvailable: typeof settings.discountAvailable === 'boolean'
          ? settings.discountAvailable
          : settings.discountAvailable === 'yes'
      });

      setSettings(updatedSettings);
      toast({
        title: "Settings saved",
        description: "Loyalty program settings have been updated successfully.",
      });
    } catch (error) {
      console.error('Error saving settings:', error);
      toast({
        title: "Error",
        description: "Failed to save settings",
        variant: "destructive",
      });
    } finally {
      setIsSavingSettings(false);
    }
  };

  const filteredRewards = loyaltyRewards.filter(reward =>
    reward.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    reward.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
    reward.category.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Loyalty Program Management</h1>
      </div>

      <Tabs defaultValue="tiers" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="tiers" className="flex items-center gap-2">
            <Award size={16} />
            <span>Loyalty Tiers</span>
          </TabsTrigger>
          <TabsTrigger value="rewards" className="flex items-center gap-2">
            <Gift size={16} />
            <span>Rewards</span>
          </TabsTrigger>
          <TabsTrigger value="reports" className="flex items-center gap-2">
            <BarChart size={16} />
            <span>Reports</span>
          </TabsTrigger>
          <TabsTrigger value="settings">Settings</TabsTrigger>
        </TabsList>

        <TabsContent value="tiers">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Loyalty Tiers</CardTitle>
              <AddTierModal onAddTier={handleAddTier} />
            </CardHeader>
            <CardContent>
              {isLoadingTiers ? (
                <div className="flex justify-center items-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <span className="ml-2">Loading tiers...</span>
                </div>
              ) : loyaltyTiers.length > 0 ? (
                <div className="space-y-6">
                  {loyaltyTiers.map((tier) => (
                    <div key={tier._id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-2">
                          <div
                            className="w-6 h-6 rounded-full"
                            style={{ backgroundColor: tier.color.startsWith('#') ? tier.color : '#6d4c41' }}
                          ></div>
                          <h3 className="text-lg font-semibold">{tier.name}</h3>
                        </div>
                        <div className="flex items-center gap-2">
                          <EditTierModal
                            tier={tier}
                            onUpdateTier={(updatedTier) => handleUpdateTier(tier._id, updatedTier)}
                          />
                          <ConfirmDeleteModal
                            itemName={tier.name}
                            onConfirmDelete={() => handleDeleteTier(tier._id)}
                            buttonVariant="outline"
                          />
                        </div>
                      </div>
                      <div className="mb-3">
                        <span className="text-sm text-gray-500">Points Required:</span>
                        <span className="ml-2 font-medium">{tier.pointsRequired.toLocaleString()}</span>
                      </div>
                      <div>
                        <span className="text-sm text-gray-500 mb-2 block">Benefits:</span>
                        <ul className="list-disc list-inside space-y-1">
                          {tier.benefits.map((benefit, index) => (
                            <li key={index} className="text-sm">{benefit}</li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  No loyalty tiers found. Add your first tier to get started.
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="rewards">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Rewards</CardTitle>
              <AddRewardModal onAddReward={handleAddReward} />
            </CardHeader>
            <CardContent>
              <div className="flex items-center mb-4">
                <div className="relative w-full max-w-sm">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                  <Input
                    type="text"
                    placeholder="Search rewards..."
                    className="pl-10"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
              </div>

              {isLoadingRewards ? (
                <div className="flex justify-center items-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <span className="ml-2">Loading rewards...</span>
                </div>
              ) : (
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Reward Name</TableHead>
                        <TableHead>Category</TableHead>
                        <TableHead>Points Cost</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredRewards.length > 0 ? (
                        filteredRewards.map((reward) => (
                          <TableRow key={reward._id}>
                            <TableCell>
                              <div>
                                <p className="font-medium">{reward.name}</p>
                                <p className="text-sm text-gray-500">{reward.description}</p>
                              </div>
                            </TableCell>
                            <TableCell>{reward.category}</TableCell>
                            <TableCell>{reward.pointsCost.toLocaleString()}</TableCell>
                            <TableCell>
                              <Badge variant={reward.status === "Active" ? "default" : "secondary"}>
                                {reward.status}
                              </Badge>
                            </TableCell>
                            <TableCell className="text-right">
                              <div className="flex justify-end gap-2">
                                <EditRewardModal
                                  reward={reward}
                                  onUpdateReward={(updatedReward) => handleUpdateReward(reward._id, updatedReward)}
                                />
                                <ConfirmDeleteModal
                                  itemName={reward.name}
                                  onConfirmDelete={() => handleDeleteReward(reward._id)}
                                />
                              </div>
                            </TableCell>
                          </TableRow>
                        ))
                      ) : (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center py-10 text-gray-500">
                            No rewards found
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="reports">
          <LoyaltyReports />
        </TabsContent>

        <TabsContent value="settings">
          <Card>
            <CardHeader>
              <CardTitle>Loyalty Program Settings</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoadingSettings ? (
                <div className="flex justify-center items-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <span className="ml-2">Loading settings...</span>
                </div>
              ) : settings ? (
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Points Expiration (months)</label>
                      <Input
                        type="number"
                        value={settings.pointsExpiration}
                        onChange={(e) => setSettings({ ...settings, pointsExpiration: Number(e.target.value) })}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Points per $1 Spent</label>
                      <Input
                        type="number"
                        value={settings.pointsPerDollar}
                        onChange={(e) => setSettings({ ...settings, pointsPerDollar: Number(e.target.value) })}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Welcome Bonus Points</label>
                      <Input
                        type="number"
                        value={settings.welcomeBonus}
                        onChange={(e) => setSettings({ ...settings, welcomeBonus: Number(e.target.value) })}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Birthday Bonus Points</label>
                      <Input
                        type="number"
                        value={settings.birthdayBonus}
                        onChange={(e) => setSettings({ ...settings, birthdayBonus: Number(e.target.value) })}
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Promo Codes Applicable</label>
                      <Select
                        value={settings.promoCodesApplicable ? "yes" : "no"}
                        onValueChange={(value) => setSettings({ ...settings, promoCodesApplicable: value === "yes" })}
                      >
                        <SelectTrigger className="w-full">
                          <SelectValue placeholder="Select option" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="yes">Yes - Promo codes can be used with loyalty benefits</SelectItem>
                          <SelectItem value="no">No - Promo codes cannot be used with loyalty benefits</SelectItem>
                        </SelectContent>
                      </Select>
                      <p className="text-xs text-gray-500 mt-1">
                        {settings.promoCodesApplicable
                          ? "Customers can use promo codes alongside their loyalty program benefits."
                          : "Customers must choose between using a promo code or their loyalty program benefits."}
                      </p>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Discount Available</label>
                      <Select
                        value={settings.discountAvailable ? "yes" : "no"}
                        onValueChange={(value) => setSettings({ ...settings, discountAvailable: value === "yes" })}
                      >
                        <SelectTrigger className="w-full">
                          <SelectValue placeholder="Select option" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="yes">Yes - Discount codes can be used with loyalty benefits</SelectItem>
                          <SelectItem value="no">No - Discount codes can not be used with loyalty benefits</SelectItem>
                        </SelectContent>
                      </Select>
                      <p className="text-xs text-gray-500 mt-1">
                        {settings.discountAvailable
                          ? "Customers can use discount codes alongside their loyalty program benefits."
                          : "Customers must choose between using a discount code or their loyalty program benefits."}
                      </p>
                    </div>
                  </div>

                  <div className="flex justify-end space-x-4 pt-4">
                    <Button
                      variant="outline"
                      onClick={fetchSettings}
                      disabled={isSavingSettings}
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={handleSaveSettings}
                      disabled={isSavingSettings}
                    >
                      {isSavingSettings ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Saving...
                        </>
                      ) : "Save Changes"}
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  Failed to load settings. Please try again.
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default LoyaltyManagementContent;
</file>

<file path="src/components/Admin/Loyalty/LoyaltyReports.tsx">
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { Trophy, Users, Award, TrendingUp } from "lucide-react";
import { ChartContainer } from "@/components/ui/chart";

interface StatCardProps {
  title: string;
  value: string;
  icon: React.ReactNode;
  description?: string;
}

const StatCard = ({ title, value, icon, description }: StatCardProps) => (
  <Card>
    <CardContent className="p-6">
      <div className="flex items-center justify-between space-y-1">
        <h3 className="text-sm font-medium">{title}</h3>
        <div className="text-hotel-primary">{icon}</div>
      </div>
      <div className="flex items-baseline justify-between">
        <div>
          <p className="text-2xl font-bold">{value}</p>
          {description && <p className="text-xs text-muted-foreground">{description}</p>}
        </div>
      </div>
    </CardContent>
  </Card>
);

const LoyaltyReports = () => {
  // Sample data - in a real app, this would come from an API
  const membershipData = [
    { month: 'Jan', bronze: 120, silver: 80, gold: 40, platinum: 20 },
    { month: 'Feb', bronze: 140, silver: 90, gold: 45, platinum: 22 },
    { month: 'Mar', bronze: 160, silver: 100, gold: 50, platinum: 25 },
    { month: 'Apr', bronze: 180, silver: 110, gold: 55, platinum: 28 },
    { month: 'May', bronze: 200, silver: 120, gold: 60, platinum: 30 },
    { month: 'Jun', bronze: 220, silver: 130, gold: 65, platinum: 32 },
  ];

  const stats = [
    {
      title: "Total Members",
      value: "2,834",
      icon: <Users className="h-4 w-4" />,
      description: "+12% from last month"
    },
    {
      title: "Active Members",
      value: "2,156",
      icon: <TrendingUp className="h-4 w-4" />,
      description: "76% activation rate"
    },
    {
      title: "Points Redeemed",
      value: "156,420",
      icon: <Trophy className="h-4 w-4" />,
      description: "Last 30 days"
    },
    {
      title: "Average Tier",
      value: "Silver",
      icon: <Award className="h-4 w-4" />,
      description: "Most common tier"
    },
  ];

  // Configuration for chart colors
  const chartConfig = {
    bronze: {
      theme: {
        light: "#b87c4c",
        dark: "#b87c4c"
      }
    },
    silver: {
      theme: {
        light: "#9ca3af",
        dark: "#9ca3af"
      }
    },
    gold: {
      theme: {
        light: "#fbbf24",
        dark: "#fbbf24"
      }
    },
    platinum: {
      theme: {
        light: "#64748b",
        dark: "#64748b"
      }
    }
  };

  return (
    <div className="space-y-6">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {stats.map((stat) => (
          <StatCard key={stat.title} {...stat} />
        ))}
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Membership Growth by Tier</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[400px]">
            <ChartContainer config={chartConfig}>
              <BarChart data={membershipData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="bronze" fill="#b87c4c" name="Bronze" />
                <Bar dataKey="silver" fill="#9ca3af" name="Silver" />
                <Bar dataKey="gold" fill="#fbbf24" name="Gold" />
                <Bar dataKey="platinum" fill="#64748b" name="Platinum" />
              </BarChart>
            </ChartContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default LoyaltyReports;
</file>

<file path="src/components/Admin/MeetingHall/MeetingHallContent.tsx">
import { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Calendar as CalendarIcon,
  Search,
  Edit,
  Trash2,
  PlusCircle,
  Users,
  Download,
  CalendarRange,
  FileText,
  Building2,
  Phone,
  Mail,
  Clock,
  CheckCircle,
  XCircle,
  AlertCircle,
  MessageSquare,
  Tag,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Filter
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  format,
  startOfMonth,
  endOfMonth,
  eachDayOfInterval,
  isSameMonth,
  isSameDay,
  startOfWeek,
  endOfWeek,
  isToday,
  addMonths,
  subMonths,
  parseISO,
  isWithinInterval,
  addDays,
  isBefore,
  isAfter
} from "date-fns";
import axios from "axios";
import { useToast } from "@/components/ui/use-toast";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";

// API base URL
const API_BASE_URL = "http://localhost:4000/api";

// Mock data for meeting halls
// const meetingHalls = [
//   {
//     id: 1,
//     name: "Grand Ballroom",
//     capacity: 500,
//     size: "1200 sq ft",
//     price: "$3,000/day",
//     amenities: ["AV Equipment", "Stage", "Catering", "WiFi"],
//     status: "Available"
//   },
//   {
//     id: 2,
//     name: "Executive Boardroom",
//     capacity: 20,
//     size: "400 sq ft",
//     price: "$500/day",
//     amenities: ["Video Conferencing", "Whiteboard", "Coffee Service", "WiFi"],
//     status: "Available"
//   },
//   {
//     id: 3,
//     name: "Conference Room A",
//     capacity: 50,
//     size: "600 sq ft",
//     price: "$800/day",
//     amenities: ["Projector", "Conference Phone", "Catering", "WiFi"],
//     status: "Booked"
//   },
//   {
//     id: 4,
//     name: "Conference Room B",
//     capacity: 50,
//     size: "600 sq ft",
//     price: "$800/day",
//     amenities: ["Projector", "Conference Phone", "Catering", "WiFi"],
//     status: "Available"
//   },
//   {
//     id: 5,
//     name: "Seminar Room",
//     capacity: 100,
//     size: "800 sq ft",
//     price: "$1,200/day",
//     amenities: ["AV Equipment", "Classroom Setup", "Catering", "WiFi"],
//     status: "Maintenance"
//   }
// ];

// Mock data for bookings
const bookings = [
  {
    id: "BK-001",
    hallName: "Grand Ballroom",
    client: "ABC Corporation",
    eventType: "Annual Conference",
    startDate: "2025-05-10",
    endDate: "2025-05-12",
    attendees: 350,
    status: "Confirmed"
  },
  {
    id: "BK-002",
    hallName: "Conference Room A",
    client: "XYZ Inc.",
    eventType: "Board Meeting",
    startDate: "2025-04-15",
    endDate: "2025-04-15",
    attendees: 15,
    status: "Confirmed"
  },
  {
    id: "BK-003",
    hallName: "Executive Boardroom",
    client: "Tech Solutions LLC",
    eventType: "Client Presentation",
    startDate: "2025-04-20",
    endDate: "2025-04-20",
    attendees: 12,
    status: "Pending"
  },
  {
    id: "BK-004",
    hallName: "Seminar Room",
    client: "University of Technology",
    eventType: "Workshop",
    startDate: "2025-06-05",
    endDate: "2025-06-07",
    attendees: 75,
    status: "Pending"
  }
];

// Mock data for new booking requests
const bookingRequests = [
  {
    id: "REQ-001",
    firstName: "John",
    lastName: "Smith",
    companyName: "Acme Corp",
    email: "john.smith@acmecorp.com",
    phone: "555-123-4567",
    preferredDate: "2025-06-15",
    preferredTime: "10:00 AM",
    hallName: "Grand Ballroom",
    attendees: 150,
    purpose: "Annual Company Meeting",
    additionalRequirements: "Need projector and sound system. Catering for lunch.",
    submissionDate: "2025-04-01T14:30:00",
    status: "New",
    notes: "",
    isNew: true
  },
  {
    id: "REQ-002",
    firstName: "Sarah",
    lastName: "Johnson",
    companyName: "Tech Innovations",
    email: "sarah.j@techinnovations.com",
    phone: "555-222-3333",
    preferredDate: "2025-05-20",
    preferredTime: "2:00 PM",
    hallName: "Conference Room B",
    attendees: 30,
    purpose: "Product Launch Planning",
    additionalRequirements: "Video conferencing equipment needed",
    submissionDate: "2025-04-02T09:15:00",
    status: "Contacted",
    notes: "Called on 04/05 - they want to confirm by end of week",
    isNew: false
  },
  {
    id: "REQ-003",
    firstName: "Michael",
    lastName: "Williams",
    companyName: "Global Finance",
    email: "m.williams@globalfinance.com",
    phone: "555-444-5555",
    preferredDate: "2025-06-10",
    preferredTime: "9:00 AM",
    hallName: "Executive Boardroom",
    attendees: 15,
    purpose: "Board Meeting",
    additionalRequirements: "Coffee service, presentation materials",
    submissionDate: "2025-04-03T16:45:00",
    status: "Confirmed",
    notes: "Deposit received 04/07",
    isNew: false
  },
  {
    id: "REQ-004",
    firstName: "Emily",
    lastName: "Brown",
    companyName: "Creative Designs",
    email: "emily@creativedesigns.com",
    phone: "555-666-7777",
    preferredDate: "2025-07-05",
    preferredTime: "1:00 PM",
    hallName: "Conference Room A",
    attendees: 25,
    purpose: "Design Workshop",
    additionalRequirements: "Whiteboards, display areas for design materials",
    submissionDate: "2025-04-05T11:20:00",
    status: "Declined",
    notes: "Room unavailable on requested date, no alternative dates worked",
    isNew: false
  },
  {
    id: "REQ-005",
    firstName: "Robert",
    lastName: "Davis",
    companyName: "Davis & Associates",
    email: "robert@davisassociates.com",
    phone: "555-888-9999",
    preferredDate: "2025-06-22",
    preferredTime: "11:00 AM",
    hallName: "Seminar Room",
    attendees: 60,
    purpose: "Legal Seminar",
    additionalRequirements: "Microphones, recording equipment",
    submissionDate: "2025-04-08T13:10:00",
    status: "New",
    notes: "",
    isNew: true
  }
];

const MeetingHallContent = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [selectedTab, setSelectedTab] = useState("halls");
  const [newStatus, setNewStatus] = useState("");
  const [newNote, setNewNote] = useState("");
  const { toast } = useToast();

  // State for API data
  const [halls, setHalls] = useState([]);
  const [bookings, setBookings] = useState([]);
  const [bookingRequests, setBookingRequests] = useState([]);
  const [loading, setLoading] = useState({
    halls: false,
    bookings: false,
    requests: false
  });

  // Calendar view state
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [selectedHall, setSelectedHall] = useState("all");

  // Add state for the dialog near the other state declarations
  const [addDialogOpen, setAddDialogOpen] = useState(false);
  const [newHall, setNewHall] = useState({
    name: '',
    capacity: '',
    size: '',
    price: '',
    amenities: '',
    status: 'Available'
  });

  // Fetch meeting halls
  useEffect(() => {
    const fetchHalls = async () => {
      if (selectedTab === "halls") {
        setLoading(prev => ({ ...prev, halls: true }));
        try {
          const response = await axios.get(`${API_BASE_URL}/meeting-hall/halls`);

          if (response.data.status === 'success') {
            setHalls(response.data.data.halls);
          } else {
            throw new Error("Failed to fetch meeting halls");
          }
        } catch (error) {
          console.error("Error fetching halls:", error);
          toast({
            title: "Error",
            description: "Failed to load meeting halls. Using sample data instead.",
            variant: "destructive",
          });

          // Fallback to mock data
          // setHalls(meetingHalls);
        } finally {
          setLoading(prev => ({ ...prev, halls: false }));
        }
      }
    };

    fetchHalls();
  }, [selectedTab, toast]);

  // Fetch bookings
  useEffect(() => {
    const fetchBookings = async () => {
      if (selectedTab === "bookings") {
        setLoading(prev => ({ ...prev, bookings: true }));
        try {
          const response = await axios.get(`${API_BASE_URL}/meeting-hall/bookings`);

          if (response.data.status === 'success') {
            // Format dates for display
            const formattedBookings = response.data.data.bookings.map(booking => ({
              ...booking,
              id: booking.bookingId,
              startDate: format(new Date(booking.startDate), 'yyyy-MM-dd'),
              endDate: format(new Date(booking.endDate), 'yyyy-MM-dd')
            }));
            setBookings(formattedBookings);
          } else {
            throw new Error("Failed to fetch bookings");
          }
        } catch (error) {
          console.error("Error fetching bookings:", error);
          toast({
            title: "Error",
            description: "Failed to load bookings. Using sample data instead.",
            variant: "destructive",
          });

          // Fallback to mock data
          setBookings(bookings);
        } finally {
          setLoading(prev => ({ ...prev, bookings: false }));
        }
      }
    };

    fetchBookings();
  }, [selectedTab, toast]);

  // Fetch booking requests
  useEffect(() => {
    const fetchBookingRequests = async () => {
      if (selectedTab === "requests") {
        setLoading(prev => ({ ...prev, requests: true }));
        try {
          const response = await axios.get(`${API_BASE_URL}/meeting-hall/booking-requests`);

          if (response.data.status === 'success') {
            // Format dates for display
            const formattedRequests = response.data.data.requests.map(request => ({
              ...request,
              id: request.requestId,
              preferredDate: format(new Date(request.preferredDate), 'yyyy-MM-dd'),
              submissionDate: request.submissionDate // Keep as ISO string for formatting in the component
            }));
            setBookingRequests(formattedRequests);
          } else {
            throw new Error("Failed to fetch booking requests");
          }
        } catch (error) {
          console.error("Error fetching booking requests:", error);
          toast({
            title: "Error",
            description: "Failed to load booking requests. Using sample data instead.",
            variant: "destructive",
          });

          // Fallback to mock data
          setBookingRequests(bookingRequests);
        } finally {
          setLoading(prev => ({ ...prev, requests: false }));
        }
      }
    };

    fetchBookingRequests();
  }, [selectedTab, toast]);

  const getStatusColor = (status) => {
    switch (status) {
      case "Available":
        return "bg-green-100 text-green-800 hover:bg-green-200";
      case "Booked":
        return "bg-blue-100 text-blue-800 hover:bg-blue-200";
      case "Maintenance":
        return "bg-orange-100 text-orange-800 hover:bg-orange-200";
      case "Confirmed":
        return "bg-green-100 text-green-800 hover:bg-green-200";
      case "Pending":
        return "bg-yellow-100 text-yellow-800 hover:bg-yellow-200";
      case "New":
        return "bg-blue-100 text-blue-800 hover:bg-blue-200";
      case "Contacted":
        return "bg-purple-100 text-purple-800 hover:bg-purple-200";
      case "Declined":
        return "bg-red-100 text-red-800 hover:bg-red-200";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "New":
        return <AlertCircle className="h-4 w-4" />;
      case "Contacted":
        return <MessageSquare className="h-4 w-4" />;
      case "Confirmed":
        return <CheckCircle className="h-4 w-4" />;
      case "Declined":
        return <XCircle className="h-4 w-4" />;
      default:
        return null;
    }
  };

  const handleViewRequest = (request) => {
    // Mark as read if it's a new request
    if (request.isNew) {
      markRequestAsRead(request._id);
    }
    setSelectedRequest(request);
    setNewStatus(request.status);
    setNewNote("");
  };

  const markRequestAsRead = async (requestId) => {
    try {
      await axios.patch(`${API_BASE_URL}/meeting-hall/booking-requests/${requestId}/mark-as-read`);

      // Update local state to reflect the change
      setBookingRequests(requests =>
        requests.map(req =>
          req._id === requestId ? { ...req, isNew: false } : req
        )
      );
    } catch (error) {
      console.error("Error marking request as read:", error);
    }
  };

  const handleUpdateRequest = async () => {
    if (!selectedRequest) return;

    try {
      const updateData: {
        status: string;
        notes?: string;
        isNew?: boolean;
      } = {
        status: newStatus
      };

      if (newNote.trim()) {
        // Append new note to existing notes
        const existingNotes = selectedRequest.notes || "";
        const timestamp = format(new Date(), "yyyy-MM-dd HH:mm");
        const formattedNote = `${timestamp}: ${newNote}${existingNotes ? '\n\n' + existingNotes : ''}`;
        updateData.notes = formattedNote;
      }

      const response = await axios.patch(
        `${API_BASE_URL}/meeting-hall/booking-requests/${selectedRequest._id}`,
        updateData
      );

      if (response.data.status === 'success') {
        // Update local state
        setBookingRequests(requests =>
          requests.map(req =>
            req._id === selectedRequest._id
              ? { ...req, status: newStatus, notes: updateData.notes || req.notes, isNew: false }
              : req
          )
        );

        toast({
          title: "Request Updated",
          description: `The booking request has been updated successfully.`,
        });

        // Close dialog
        setSelectedRequest(null);
      }
    } catch (error) {
      console.error("Error updating request:", error);
      toast({
        title: "Error",
        description: "Failed to update booking request. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleExportData = () => {
    toast({
      title: "Export Feature",
      description: "Export functionality will be implemented in the future.",
    });
  };

  const getFilteredHalls = () => {
    return halls.filter(
      (hall) =>
        hall.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (hall.amenities && hall.amenities.some(amenity => amenity.toLowerCase().includes(searchQuery.toLowerCase()))) ||
        hall.status.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  const getFilteredBookings = () => {
    return bookings.filter(
      (booking) =>
        booking.hallName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        booking.client.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (booking.eventType && booking.eventType.toLowerCase().includes(searchQuery.toLowerCase())) ||
        booking.status.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  const getFilteredRequests = () => {
    return bookingRequests.filter(
      (request) =>
        request.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        request.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (request.companyName && request.companyName.toLowerCase().includes(searchQuery.toLowerCase())) ||
        request.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
        request.status.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  const renderRequestsTable = () => (
    <div className="rounded-md border">
      {loading.requests ? (
        <div className="flex justify-center items-center h-64">
          <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
        </div>
      ) : (
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Full Name</TableHead>
              <TableHead>Company</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Phone</TableHead>
              <TableHead>Preferred Date</TableHead>
              <TableHead>Submission Date</TableHead>
              <TableHead>Status</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {getFilteredRequests().length > 0 ? (
              getFilteredRequests().map((request) => (
                <TableRow key={request.id || request._id}>
                  <TableCell className="font-medium">
                    {request.isNew && <span className="inline-block h-2 w-2 rounded-full bg-blue-600 mr-2"></span>}
                    {request.firstName} {request.lastName}
                  </TableCell>
                  <TableCell>{request.companyName}</TableCell>
                  <TableCell>{request.email}</TableCell>
                  <TableCell>{request.phone}</TableCell>
                  <TableCell>{request.preferredDate} {request.preferredTime}</TableCell>
                  <TableCell>{typeof request.submissionDate === 'string'
                    ? format(new Date(request.submissionDate), "MMM d, yyyy h:mm a")
                    : format(request.submissionDate, "MMM d, yyyy h:mm a")}</TableCell>
                  <TableCell>
                    <Badge className={getStatusColor(request.status)}>
                      <span className="flex items-center gap-1">
                        {getStatusIcon(request.status)}
                        {request.status}
                      </span>
                    </Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="outline" size="sm" onClick={() => handleViewRequest(request)}>View Details</Button>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={8} className="text-center py-10 text-gray-500">
                  No booking requests found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      )}
    </div>
  );

  const countNewRequests = () => {
    return bookingRequests.filter(request => request.isNew).length;
  };

  // Add the handleAddHall function where other handler functions are defined
  const handleAddHall = async () => {
    try {
      // Format amenities as an array
      const amenitiesArray = newHall.amenities
        ? newHall.amenities.split(',').map(item => item.trim())
        : [];

      const hallData = {
        ...newHall,
        capacity: parseInt(newHall.capacity),
        amenities: amenitiesArray
      };

      const response = await axios.post(`${API_BASE_URL}/meeting-hall/halls`, hallData);

      if (response.data.status === 'success') {
        // Add the new hall to the state
        setHalls([...halls, response.data.data.hall]);

        // Close dialog and reset form
        setAddDialogOpen(false);
        setNewHall({
          name: '',
          capacity: '',
          size: '',
          price: '',
          amenities: '',
          status: 'Available'
        });

        toast({
          title: 'Success',
          description: 'Meeting hall added successfully',
        });
      }
    } catch (error) {
      console.error('Error adding meeting hall:', error);
      toast({
        title: 'Error',
        description: 'Failed to add meeting hall. Please try again.',
        variant: 'destructive',
      });
    }
  };

  // Update the input handler for the form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewHall({
      ...newHall,
      [name]: value
    });
  };

  // Next month handler
  const nextMonth = () => {
    setCurrentMonth(addMonths(currentMonth, 1));
  };

  // Previous month handler
  const prevMonth = () => {
    setCurrentMonth(subMonths(currentMonth, 1));
  };

  // Get bookings for a specific day
  const getBookingsForDay = (day) => {
    return bookings.filter(booking => {
      // Convert string dates to Date objects
      const startDate = typeof booking.startDate === 'string' ? parseISO(booking.startDate) : booking.startDate;
      const endDate = typeof booking.endDate === 'string' ? parseISO(booking.endDate) : booking.endDate;

      // Check if the day falls within the booking period
      return (
        (selectedHall === "all" || booking.hallName === selectedHall) &&
        isWithinInterval(day, { start: startDate, end: endDate })
      );
    });
  };

  // Calculate booking color based on hall name for consistency
  const getBookingColor = (hallName) => {
    const colors = [
      "bg-blue-200 border-blue-400",
      "bg-green-200 border-green-400",
      "bg-yellow-200 border-yellow-400",
      "bg-purple-200 border-purple-400",
      "bg-red-200 border-red-400",
      "bg-indigo-200 border-indigo-400",
      "bg-pink-200 border-pink-400",
      "bg-orange-200 border-orange-400"
    ];

    // Generate a consistent index based on hall name
    const hallIndex = [...hallName].reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length;
    return colors[hallIndex];
  };

  // Handle booking click in calendar
  const handleBookingClick = (booking) => {
    setSelectedBooking(booking);
  };

  // Get unique hall names for filtering
  const getUniqueHallNames = () => {
    const hallNames = bookings.map(booking => booking.hallName);
    return ["all", ...new Set(hallNames)];
  };

  // Render a calendar day with its bookings
  const renderDay = (day, dayInMonth) => {
    const dayBookings = getBookingsForDay(day);
    const isSelected = isSameDay(day, selectedDate);
    const isCurrentMonth = isSameMonth(day, currentMonth);

    return (
      <div
        key={day.toString()}
        className={`h-32 p-1 border relative ${!isCurrentMonth ? "bg-gray-50" : ""
          } ${isToday(day) ? "bg-blue-50" : ""} ${isSelected ? "border-2 border-blue-500" : ""
          }`}
        onClick={() => setSelectedDate(day)}
      >
        <div className={`text-sm ${!isCurrentMonth ? "text-gray-400" : ""} ${isToday(day) ? "font-bold text-blue-600" : ""
          }`}>
          {format(day, "d")}
        </div>
        <div className="mt-1 overflow-y-auto max-h-[80px]">
          {dayBookings.slice(0, 3).map((booking, idx) => (
            <div
              key={`${booking.id}-${idx}`}
              onClick={(e) => {
                e.stopPropagation();
                handleBookingClick(booking);
              }}
              className={`text-xs p-1 my-0.5 rounded truncate cursor-pointer border-l-2 ${getBookingColor(booking.hallName)}`}
            >
              {booking.client}
            </div>
          ))}
          {dayBookings.length > 3 && (
            <div className="text-xs text-gray-500 mt-1">
              +{dayBookings.length - 3} more
            </div>
          )}
        </div>
      </div>
    );
  };

  // Render the calendar header (day names)
  const renderDayHeaders = () => {
    const weekStart = startOfWeek(new Date());
    const days = eachDayOfInterval({
      start: weekStart,
      end: endOfWeek(weekStart)
    });

    return days.map(day => (
      <div key={day.toString()} className="font-semibold text-center py-2">
        {format(day, "EEE")}
      </div>
    ));
  };

  // Generate the days for the current month view
  const renderDaysGrid = () => {
    const monthStart = startOfMonth(currentMonth);
    const monthEnd = endOfMonth(currentMonth);
    const startDate = startOfWeek(monthStart);
    const endDate = endOfWeek(monthEnd);

    const days = eachDayOfInterval({ start: startDate, end: endDate });
    const rows = [];
    let cells = [];

    days.forEach((day, i) => {
      cells.push(renderDay(day, isSameMonth(day, currentMonth)));
      if ((i + 1) % 7 === 0) {
        rows.push(cells);
        cells = [];
      }
    });

    return rows.map((row, i) => (
      <div key={i} className="grid grid-cols-7 border-l">
        {row}
      </div>
    ));
  };

  // Render the booking details dialog
  const renderBookingDetails = () => {
    if (!selectedBooking) return null;

    return (
      <Dialog
        open={!!selectedBooking}
        onOpenChange={(open) => !open && setSelectedBooking(null)}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Booking Details</DialogTitle>
            <DialogDescription>
              {selectedBooking.id} - {selectedBooking.eventType}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-3">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="text-sm font-medium text-gray-500">Hall</h3>
                <p>{selectedBooking.hallName}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">Client</h3>
                <p>{selectedBooking.client}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">Dates</h3>
                <p>
                  {selectedBooking.startDate === selectedBooking.endDate
                    ? selectedBooking.startDate
                    : `${selectedBooking.startDate} - ${selectedBooking.endDate}`}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">Attendees</h3>
                <p className="flex items-center">
                  <Users size={14} className="mr-1" />
                  {selectedBooking.attendees}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">Status</h3>
                <Badge className={getStatusColor(selectedBooking.status)}>
                  {selectedBooking.status}
                </Badge>
              </div>
              {selectedBooking.totalPrice && (
                <div>
                  <h3 className="text-sm font-medium text-gray-500">Price</h3>
                  <p>{selectedBooking.totalPrice}</p>
                </div>
              )}
              {selectedBooking.notes && (
                <div className="col-span-2">
                  <h3 className="text-sm font-medium text-gray-500">Notes</h3>
                  <p className="text-sm">{selectedBooking.notes}</p>
                </div>
              )}
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setSelectedBooking(null)}>
              Close
            </Button>
            <Button>
              Edit Booking
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    );
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Meeting Hall Management</h1>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleExportData} className="flex items-center gap-2">
            <Download size={16} />
            <span>Export Data</span>
          </Button>
          <Dialog open={addDialogOpen} onOpenChange={setAddDialogOpen}>
            <DialogTrigger asChild>
              <Button className="flex items-center gap-2">
                <PlusCircle size={16} />
                <span>Add Meeting Hall</span>
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[525px]">
              <DialogHeader>
                <DialogTitle>Add New Meeting Hall</DialogTitle>
                <DialogDescription>
                  Fill in the details to create a new meeting hall.
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <label htmlFor="name" className="text-right text-sm font-medium">
                    Name
                  </label>
                  <Input
                    id="name"
                    name="name"
                    value={newHall.name}
                    onChange={handleInputChange}
                    className="col-span-3"
                    placeholder="Grand Ballroom"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <label htmlFor="capacity" className="text-right text-sm font-medium">
                    Capacity
                  </label>
                  <Input
                    id="capacity"
                    name="capacity"
                    type="number"
                    value={newHall.capacity}
                    onChange={handleInputChange}
                    className="col-span-3"
                    placeholder="100"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <label htmlFor="size" className="text-right text-sm font-medium">
                    Size
                  </label>
                  <Input
                    id="size"
                    name="size"
                    value={newHall.size}
                    onChange={handleInputChange}
                    className="col-span-3"
                    placeholder="1200 sq ft"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <label htmlFor="price" className="text-right text-sm font-medium">
                    Price
                  </label>
                  <Input
                    id="price"
                    name="price"
                    value={newHall.price}
                    onChange={handleInputChange}
                    className="col-span-3"
                    placeholder="$1,000/day"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <label htmlFor="amenities" className="text-right text-sm font-medium">
                    Amenities
                  </label>
                  <Input
                    id="amenities"
                    name="amenities"
                    value={newHall.amenities}
                    onChange={handleInputChange}
                    className="col-span-3"
                    placeholder="AV Equipment, WiFi, Catering (comma separated)"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <label htmlFor="status" className="text-right text-sm font-medium">
                    Status
                  </label>
                  <Select
                    name="status"
                    value={newHall.status}
                    onValueChange={(value) => setNewHall({ ...newHall, status: value })}
                  >
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select a status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Available">Available</SelectItem>
                      <SelectItem value="Booked">Booked</SelectItem>
                      <SelectItem value="Maintenance">Maintenance</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <DialogFooter>
                <Button type="submit" onClick={handleAddHall}>
                  Add Meeting Hall
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <Tabs defaultValue={selectedTab} onValueChange={setSelectedTab} className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="halls">Meeting Halls</TabsTrigger>
          <TabsTrigger value="bookings">Bookings</TabsTrigger>
          <TabsTrigger value="requests" className="relative">
            Booking Requests
            {countNewRequests() > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center">
                {countNewRequests()}
              </span>
            )}
          </TabsTrigger>
          <TabsTrigger value="calendar">Calendar View</TabsTrigger>
        </TabsList>

        <TabsContent value="halls" className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-6">
            <div className="relative w-80">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <Input
                type="text"
                placeholder="Search halls..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <div className="flex gap-2">
              <Button variant="outline">Filter</Button>
            </div>
          </div>

          <div className="rounded-md border">
            {loading.halls ? (
              <div className="flex justify-center items-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
              </div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Capacity</TableHead>
                    <TableHead>Size</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Amenities</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {getFilteredHalls().length > 0 ? (
                    getFilteredHalls().map((hall) => (
                      <TableRow key={hall._id || hall.id}>
                        <TableCell className="font-medium">{hall.name}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-1">
                            <Users size={14} className="text-gray-500" />
                            <span>{hall.capacity}</span>
                          </div>
                        </TableCell>
                        <TableCell>{hall.size}</TableCell>
                        <TableCell>{hall.price}</TableCell>
                        <TableCell>
                          <div className="flex flex-wrap gap-1">
                            {hall.amenities && hall.amenities.slice(0, 2).map((amenity, index) => (
                              <Badge key={index} variant="outline" className="bg-gray-50">
                                {amenity}
                              </Badge>
                            ))}
                            {hall.amenities && hall.amenities.length > 2 && (
                              <Badge variant="outline" className="bg-gray-50">
                                +{hall.amenities.length - 2} more
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(hall.status)}>
                            {hall.status}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <Button variant="ghost" size="icon">
                              <Edit size={16} />
                            </Button>
                            <Button variant="ghost" size="icon" className="text-red-500 hover:text-red-700">
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center py-10 text-gray-500">
                        No meeting halls found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            )}
          </div>
        </TabsContent>

        <TabsContent value="bookings" className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-6">
            <div className="relative w-80">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <Input
                type="text"
                placeholder="Search bookings..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <div className="flex gap-2">
              <Button className="flex items-center gap-2">
                <CalendarIcon size={16} />
                <span>New Booking</span>
              </Button>
            </div>
          </div>

          <div className="rounded-md border">
            {loading.bookings ? (
              <div className="flex justify-center items-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
              </div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Booking ID</TableHead>
                    <TableHead>Hall</TableHead>
                    <TableHead>Client</TableHead>
                    <TableHead>Event Type</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Attendees</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {getFilteredBookings().length > 0 ? (
                    getFilteredBookings().map((booking) => (
                      <TableRow key={booking.id || booking._id}>
                        <TableCell className="font-medium">{booking.id || booking.bookingId}</TableCell>
                        <TableCell>{booking.hallName}</TableCell>
                        <TableCell>{booking.client}</TableCell>
                        <TableCell>{booking.eventType}</TableCell>
                        <TableCell>
                          {booking.startDate === booking.endDate
                            ? booking.startDate
                            : `${booking.startDate} - ${booking.endDate}`}
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-1">
                            <Users size={14} className="text-gray-500" />
                            <span>{booking.attendees}</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(booking.status)}>
                            {booking.status}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button variant="outline" size="sm">View Details</Button>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={8} className="text-center py-10 text-gray-500">
                        No bookings found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            )}
          </div>
        </TabsContent>

        <TabsContent value="requests" className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-6">
            <div className="relative w-80">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <Input
                type="text"
                placeholder="Search booking requests..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={handleExportData} className="flex items-center gap-2">
                <Download size={16} />
                <span>Export to Excel</span>
              </Button>
            </div>
          </div>

          {renderRequestsTable()}

          <Dialog open={selectedRequest !== null} onOpenChange={(open) => !open && setSelectedRequest(null)}>
            <DialogContent className="max-w-3xl">
              <DialogHeader>
                <DialogTitle>Booking Request Details</DialogTitle>
                <DialogDescription>
                  Request {selectedRequest?.id} submitted on {selectedRequest && format(new Date(selectedRequest.submissionDate), "MMM d, yyyy h:mm a")}
                </DialogDescription>
              </DialogHeader>

              {selectedRequest && (
                <ScrollArea className="max-h-[70vh]">
                  <div className="grid grid-cols-2 gap-6 py-4">
                    <div className="space-y-4">
                      <div>
                        <h3 className="text-sm font-medium text-gray-500 flex items-center">
                          <Users className="h-4 w-4 mr-1" /> Contact Information
                        </h3>
                        <div className="mt-2 space-y-2">
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Full Name:</span>
                            <span>{selectedRequest.firstName} {selectedRequest.lastName}</span>
                          </p>
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Company:</span>
                            <Building2 size={14} className="text-gray-500" />
                            <span>{selectedRequest.companyName}</span>
                          </p>
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Email:</span>
                            <Mail size={14} className="text-gray-500" />
                            <span>{selectedRequest.email}</span>
                          </p>
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Phone:</span>
                            <Phone size={14} className="text-gray-500" />
                            <span>{selectedRequest.phone}</span>
                          </p>
                        </div>
                      </div>

                      <div>
                        <h3 className="text-sm font-medium text-gray-500 flex items-center">
                          <CalendarIcon className="h-4 w-4 mr-1" /> Event Details
                        </h3>
                        <div className="mt-2 space-y-2">
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Preferred Date:</span>
                            <CalendarRange size={14} className="text-gray-500" />
                            <span>{selectedRequest.preferredDate}</span>
                          </p>
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Preferred Time:</span>
                            <Clock size={14} className="text-gray-500" />
                            <span>{selectedRequest.preferredTime}</span>
                          </p>
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Venue:</span>
                            <span>{selectedRequest.hallName}</span>
                          </p>
                          <p className="flex items-center gap-2">
                            <span className="font-medium min-w-32">Attendees:</span>
                            <Users size={14} className="text-gray-500" />
                            <span>{selectedRequest.attendees}</span>
                          </p>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div>
                        <h3 className="text-sm font-medium text-gray-500 flex items-center">
                          <FileText className="h-4 w-4 mr-1" /> Event Purpose
                        </h3>
                        <p className="mt-2 text-sm">{selectedRequest.purpose}</p>
                      </div>

                      <div>
                        <h3 className="text-sm font-medium text-gray-500 flex items-center">
                          <Tag className="h-4 w-4 mr-1" /> Additional Requirements
                        </h3>
                        <p className="mt-2 text-sm">{selectedRequest.additionalRequirements}</p>
                      </div>

                      <div>
                        <h3 className="text-sm font-medium text-gray-500">Current Status</h3>
                        <Badge className={`mt-2 ${getStatusColor(selectedRequest.status)}`}>
                          <span className="flex items-center gap-1">
                            {getStatusIcon(selectedRequest.status)}
                            {selectedRequest.status}
                          </span>
                        </Badge>
                      </div>

                      <div>
                        <h3 className="text-sm font-medium text-gray-500">Previous Notes</h3>
                        <p className="mt-2 text-sm">
                          {selectedRequest.notes ? selectedRequest.notes : "No notes available"}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4 mt-6 border-t pt-6">
                    <h3 className="text-sm font-medium text-gray-500">Update Status</h3>
                    <Select value={newStatus} onValueChange={setNewStatus}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="New">New</SelectItem>
                        <SelectItem value="Contacted">Contacted</SelectItem>
                        <SelectItem value="Confirmed">Confirmed</SelectItem>
                        <SelectItem value="Declined">Declined</SelectItem>
                      </SelectContent>
                    </Select>

                    <div>
                      <h3 className="text-sm font-medium text-gray-500">Add Notes</h3>
                      <Textarea
                        placeholder="Add internal notes about this booking request"
                        className="mt-2"
                        value={newNote}
                        onChange={(e) => setNewNote(e.target.value)}
                      />
                    </div>
                  </div>
                </ScrollArea>
              )}

              <DialogFooter>
                <DialogClose asChild>
                  <Button variant="outline">Cancel</Button>
                </DialogClose>
                <Button onClick={handleUpdateRequest}>Update Request</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </TabsContent>

        <TabsContent value="calendar" className="bg-white p-6 rounded-lg shadow">
          <div className="space-y-6">
            {/* Calendar header with controls */}
            <div className="flex justify-between items-center">
              <div className="flex items-center space-x-4">
                <Button
                  variant="outline"
                  size="icon"
                  onClick={prevMonth}
                  aria-label="Previous Month"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <h2 className="text-xl font-semibold">
                  {format(currentMonth, 'MMMM yyyy')}
                </h2>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={nextMonth}
                  aria-label="Next Month"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentMonth(new Date())}
                >
                  Today
                </Button>
              </div>

              <div className="flex items-center gap-2">
                <div className="flex items-center">
                  <span className="mr-2 text-sm">Filter by hall:</span>
                  <Select value={selectedHall} onValueChange={setSelectedHall}>
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Select hall" />
                    </SelectTrigger>
                    <SelectContent>
                      {getUniqueHallNames().map(hall => (
                        <SelectItem key={hall} value={hall}>
                          {hall === "all" ? "All Halls" : hall}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <Button
                  className="flex items-center gap-2"
                  onClick={() => {
                    // This could open a booking creation dialog in the future
                    toast({
                      title: "New Booking",
                      description: "Create new booking feature coming soon.",
                    });
                  }}
                >
                  <PlusCircle size={16} />
                  <span>New Booking</span>
                </Button>
              </div>
            </div>

            {/* Calendar view */}
            {loading.bookings ? (
              <div className="flex justify-center items-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
              </div>
            ) : (
              <div className="border rounded-lg overflow-hidden">
                {/* Calendar day headers */}
                <div className="grid grid-cols-7 bg-gray-50">
                  {renderDayHeaders()}
                </div>

                {/* Calendar days grid */}
                <div className="border-t">
                  {renderDaysGrid()}
                </div>
              </div>
            )}

            {/* Legend showing hall colors */}
            <div className="flex flex-wrap gap-3 mt-4 text-xs">
              {halls.map(hall => (
                <div key={hall._id || hall.id} className="flex items-center">
                  <div className={`w-3 h-3 mr-1 rounded-sm border-l-2 ${getBookingColor(hall.name)}`}></div>
                  <span>{hall.name}</span>
                </div>
              ))}
            </div>

            {/* Booking details dialog */}
            {renderBookingDetails()}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default MeetingHallContent;
</file>

<file path="src/components/Admin/PromoCode/PromoCodeContent.tsx">
import { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search, Edit, Trash2, Plus, TagIcon, Clock, Users, ShoppingBag, DollarSign, UserPlus, Loader2 } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Checkbox } from "@/components/ui/checkbox";
import { DateRangePicker } from "@/components/ui/date-range-picker";
import { format, parseISO } from "date-fns";
import { ScrollArea } from "@/components/ui/scroll-area";
import axios from "axios";

// API base URL
const API_BASE_URL = "http://localhost:4000/api";

const promoCodeSchema = z.object({
  code: z.string().min(3, "Code must be at least 3 characters"),
  discount: z.string().min(1, "Discount is required"),
  type: z.enum(["Percentage", "Fixed"]),
  validFromDate: z.date({
    required_error: "Start date is required",
  }),
  validToDate: z.date({
    required_error: "End date is required",
  }),
  validFromTime: z.string().min(1, "Start time is required"),
  validToTime: z.string().min(1, "End time is required"),
  status: z.enum(["Active", "Expired", "Scheduled"]),
  capacity: z.string().min(0).optional(),
  applicableServices: z.array(z.string()).min(1, "Select at least one applicable service"),
  minPurchase: z.string().optional(),
  maxDiscountCap: z.string().optional(),
  newCustomersOnly: z.boolean().default(false),
  maxUsesPerCustomer: z.string().min(0).optional(),
});

type PromoCodeFormValues = z.infer<typeof promoCodeSchema>;

type PromoCode = {
  id: number | string;
  _id?: string;
  code: string;
  discount: string;
  type: "Percentage" | "Fixed";
  validFrom: string;
  validTo: string;
  validFromTime: string;
  validToTime: string;
  status: "Active" | "Expired" | "Scheduled";
  usageCount: number;
  capacity?: string;
  applicableServices?: string[];
  minPurchase?: string;
  maxDiscountCap?: string;
  newCustomersOnly: boolean;
  maxUsesPerCustomer?: string;
};

const serviceOptions = [
  { label: "All Rooms", value: "all_rooms" },
  { label: "Standard Room", value: "standard_room" },
  { label: "Deluxe Room", value: "deluxe_room" },
  { label: "Suite", value: "suite" },
  { label: "All Spa Services", value: "all_spa" },
  { label: "Massage", value: "massage" },
  { label: "Facial", value: "facial" },
  { label: "Body Treatment", value: "body_treatment" },
  { label: "All Events", value: "all_events" },
  { label: "Corporate Events", value: "corporate_events" },
  { label: "Weddings", value: "weddings" },
  { label: "All Restaurant Items", value: "all_restaurant" },
  { label: "Main Course", value: "main_course" },
  { label: "Desserts", value: "desserts" },
  { label: "Beverages", value: "beverages" },
];

const PromoCodeContent = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [selectedPromoCode, setSelectedPromoCode] = useState<PromoCode | null>(null);
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);

  const [promoCodes, setPromoCodes] = useState<PromoCode[]>([]);

  // Fetch promo codes from the API
  useEffect(() => {
    const fetchPromoCodes = async () => {
      setLoading(true);
      try {
        const response = await axios.get(`${API_BASE_URL}/promo-codes`);

        if (response.data.status === 'success') {
          const formattedPromoCodes = response.data.data.promoCodes.map((code: any) => ({
            ...code,
            id: code._id,
            validFrom: format(new Date(code.validFrom), 'yyyy-MM-dd'),
            validTo: format(new Date(code.validTo), 'yyyy-MM-dd')
          }));

          setPromoCodes(formattedPromoCodes);
        } else {
          throw new Error('Failed to fetch promo codes');
        }
      } catch (error) {
        console.error('Error fetching promo codes:', error);
        toast({
          title: "Error",
          description: "Failed to load promo codes. Please try again.",
          variant: "destructive"
        });

        // Set sample data for display purposes if API fails
        setPromoCodes([
          {
            id: 1,
            code: "SUMMER25",
            discount: "25%",
            type: "Percentage",
            validFrom: "2025-06-01",
            validTo: "2025-08-31",
            validFromTime: "00:00",
            validToTime: "23:59",
            status: "Active",
            usageCount: 156,
            capacity: "1000",
            applicableServices: ["standard_room", "deluxe_room"],
            minPurchase: "100",
            maxDiscountCap: "50",
            newCustomersOnly: true,
            maxUsesPerCustomer: "1",
          },
          // ... other sample promo codes
        ]);
      } finally {
        setLoading(false);
      }
    };

    fetchPromoCodes();
  }, [toast]);

  const filteredPromoCodes = promoCodes.filter(
    (promo) =>
      promo.code.toLowerCase().includes(searchQuery.toLowerCase()) ||
      promo.type.toLowerCase().includes(searchQuery.toLowerCase()) ||
      promo.status.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const form = useForm<PromoCodeFormValues>({
    resolver: zodResolver(promoCodeSchema),
    defaultValues: {
      code: "",
      discount: "",
      type: "Percentage",
      validFromDate: new Date(),
      validToDate: new Date(),
      validFromTime: "00:00",
      validToTime: "23:59",
      status: "Active",
      capacity: "",
      applicableServices: [],
      minPurchase: "",
      maxDiscountCap: "",
      newCustomersOnly: false,
      maxUsesPerCustomer: "",
    }
  });

  const handleAddClick = () => {
    form.reset({
      code: "",
      discount: "",
      type: "Percentage",
      validFromDate: new Date(),
      validToDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),
      validFromTime: "00:00",
      validToTime: "23:59",
      status: "Active",
      capacity: "",
      applicableServices: [],
      minPurchase: "",
      maxDiscountCap: "",
      newCustomersOnly: false,
      maxUsesPerCustomer: "",
    });
    setIsAddDialogOpen(true);
  };

  const handleEditClick = (promo: PromoCode) => {
    setSelectedPromoCode(promo);

    // If API dates are already ISO strings, parse them
    // Otherwise, keep them as is (they might already be date objects)
    const fromDate = typeof promo.validFrom === 'string'
      ? new Date(promo.validFrom)
      : promo.validFrom;

    const toDate = typeof promo.validTo === 'string'
      ? new Date(promo.validTo)
      : promo.validTo;

    form.reset({
      code: promo.code,
      discount: promo.discount.replace('%', '').replace('$', ''),
      type: promo.type,
      validFromDate: fromDate,
      validToDate: toDate,
      validFromTime: promo.validFromTime || "00:00",
      validToTime: promo.validToTime || "23:59",
      status: promo.status,
      capacity: promo.capacity || "",
      applicableServices: promo.applicableServices || [],
      minPurchase: promo.minPurchase || "",
      maxDiscountCap: promo.maxDiscountCap || "",
      newCustomersOnly: promo.newCustomersOnly || false,
      maxUsesPerCustomer: promo.maxUsesPerCustomer || "",
    });
    setIsEditDialogOpen(true);
  };

  const handleDeleteClick = (promo: PromoCode) => {
    setSelectedPromoCode(promo);
    setIsDeleteDialogOpen(true);
  };

  const handleAddSubmit = async (values: PromoCodeFormValues) => {
    const formattedFromDate = format(values.validFromDate, 'yyyy-MM-dd');
    const formattedToDate = format(values.validToDate, 'yyyy-MM-dd');

    const promoCodeData = {
      code: values.code,
      discount: values.type === "Percentage" ? `${values.discount}%` : `$${values.discount}`,
      type: values.type,
      validFrom: formattedFromDate,
      validTo: formattedToDate,
      validFromTime: values.validFromTime,
      validToTime: values.validToTime,
      status: values.status,
      capacity: values.capacity,
      applicableServices: values.applicableServices,
      minPurchase: values.minPurchase,
      maxDiscountCap: values.maxDiscountCap,
      newCustomersOnly: values.newCustomersOnly,
      maxUsesPerCustomer: values.maxUsesPerCustomer,
    };

    try {
      setLoading(true);
      const response = await axios.post(`${API_BASE_URL}/promo-codes`, promoCodeData);

      if (response.data.status === 'success') {
        const newPromoCode = {
          ...response.data.data.promoCode,
          id: response.data.data.promoCode._id,
          validFrom: formattedFromDate,
          validTo: formattedToDate
        };

        setPromoCodes([...promoCodes, newPromoCode]);
        setIsAddDialogOpen(false);
        toast({
          title: "Promo Code Added",
          description: `${newPromoCode.code} has been created successfully.`
        });
      } else {
        throw new Error('Failed to create promo code');
      }
    } catch (error: any) {
      console.error('Error creating promo code:', error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to create promo code. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleEditSubmit = async (values: PromoCodeFormValues) => {
    if (!selectedPromoCode) return;

    const formattedFromDate = format(values.validFromDate, 'yyyy-MM-dd');
    const formattedToDate = format(values.validToDate, 'yyyy-MM-dd');

    const promoCodeData = {
      code: values.code,
      discount: values.type === "Percentage" ? `${values.discount}%` : `$${values.discount}`,
      type: values.type,
      validFrom: formattedFromDate,
      validTo: formattedToDate,
      validFromTime: values.validFromTime,
      validToTime: values.validToTime,
      status: values.status,
      capacity: values.capacity,
      applicableServices: values.applicableServices,
      minPurchase: values.minPurchase,
      maxDiscountCap: values.maxDiscountCap,
      newCustomersOnly: values.newCustomersOnly,
      maxUsesPerCustomer: values.maxUsesPerCustomer,
    };

    try {
      setLoading(true);
      const response = await axios.patch(`${API_BASE_URL}/promo-codes/${selectedPromoCode._id || selectedPromoCode.id}`, promoCodeData);

      if (response.data.status === 'success') {
        const updatedPromoCode = {
          ...response.data.data.promoCode,
          id: response.data.data.promoCode._id,
          validFrom: formattedFromDate,
          validTo: formattedToDate
        };

        const updatedPromoCodes = promoCodes.map(promo =>
          promo.id === selectedPromoCode.id ? updatedPromoCode : promo
        );

        setPromoCodes(updatedPromoCodes);
        setIsEditDialogOpen(false);
        toast({
          title: "Promo Code Updated",
          description: `${values.code} has been updated successfully.`
        });
      } else {
        throw new Error('Failed to update promo code');
      }
    } catch (error: any) {
      console.error('Error updating promo code:', error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to update promo code. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteConfirm = async () => {
    if (!selectedPromoCode) return;

    try {
      setLoading(true);
      await axios.delete(`${API_BASE_URL}/promo-codes/${selectedPromoCode._id || selectedPromoCode.id}`);

      const updatedPromoCodes = promoCodes.filter(
        promo => promo.id !== selectedPromoCode.id
      );

      setPromoCodes(updatedPromoCodes);
      setIsDeleteDialogOpen(false);
      toast({
        title: "Promo Code Deleted",
        description: `${selectedPromoCode.code} has been deleted.`,
        variant: "destructive"
      });
    } catch (error: any) {
      console.error('Error deleting promo code:', error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to delete promo code. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const formatApplicableServices = (services?: string[]) => {
    if (!services || services.length === 0) return "None";

    if (services.includes("all_rooms") &&
      services.includes("all_spa") &&
      services.includes("all_events") &&
      services.includes("all_restaurant")) {
      return "All Services";
    }

    const serviceNames = services.map(service => {
      const option = serviceOptions.find(opt => opt.value === service);
      return option ? option.label : service;
    });

    return serviceNames.join(", ");
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Promo Code Management</h1>
        <Button className="flex items-center gap-2" onClick={handleAddClick}>
          <Plus size={16} />
          <span>Add New Promo Code</span>
        </Button>
      </div>

      <div className="bg-white p-6 rounded-lg shadow">
        <div className="flex items-center justify-between mb-6">
          <div className="relative w-80">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <Input
              type="text"
              placeholder="Search promo codes..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <div className="flex gap-2">
            <Button variant="outline">Export</Button>
            <Button variant="outline">Filter</Button>
          </div>
        </div>

        <div className="rounded-md border">
          {loading ? (
            <div className="flex justify-center items-center h-64">
              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Code</TableHead>
                  <TableHead>Discount</TableHead>
                  <TableHead>Valid Period</TableHead>
                  <TableHead>Applicable To</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Usage</TableHead>
                  <TableHead>Restrictions</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredPromoCodes.length > 0 ? (
                  filteredPromoCodes.map((promo) => (
                    <TableRow key={promo.id}>
                      <TableCell className="font-medium">{promo.code}</TableCell>
                      <TableCell>{promo.discount}</TableCell>
                      <TableCell className="text-sm">
                        {promo.validFrom} to {promo.validTo}
                        <div className="text-xs text-gray-500">
                          {promo.validFromTime} - {promo.validToTime}
                        </div>
                      </TableCell>
                      <TableCell className="max-w-[200px] truncate" title={formatApplicableServices(promo.applicableServices)}>
                        {formatApplicableServices(promo.applicableServices)}
                      </TableCell>
                      <TableCell>
                        <Badge
                          className={
                            promo.status === "Active"
                              ? "bg-green-100 text-green-800 hover:bg-green-200"
                              : promo.status === "Scheduled"
                                ? "bg-blue-100 text-blue-800 hover:bg-blue-200"
                                : "bg-gray-100 text-gray-800 hover:bg-gray-200"
                          }
                        >
                          {promo.status}
                        </Badge>
                      </TableCell>
                      <TableCell>{promo.usageCount}</TableCell>
                      <TableCell>
                        {promo.newCustomersOnly && (
                          <Badge className="bg-purple-100 text-purple-800 mr-1">New Customers</Badge>
                        )}
                        {promo.minPurchase && (
                          <Badge className="bg-yellow-100 text-yellow-800 mr-1">Min: ${promo.minPurchase}</Badge>
                        )}
                        {promo.maxUsesPerCustomer && (
                          <Badge className="bg-blue-100 text-blue-800">Max: {promo.maxUsesPerCustomer}/user</Badge>
                        )}
                      </TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end gap-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleEditClick(promo)}
                          >
                            <Edit size={16} />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="text-red-500 hover:text-red-700"
                            onClick={() => handleDeleteClick(promo)}
                          >
                            <Trash2 size={16} />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={8} className="text-center py-10 text-gray-500">
                      No promo codes found
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          )}
        </div>
      </div>

      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
        <DialogContent className="sm:max-w-[700px] max-h-[90vh]">
          <DialogHeader>
            <DialogTitle>Add New Promo Code</DialogTitle>
            <DialogDescription>
              Create a new promotional code for customers
            </DialogDescription>
          </DialogHeader>

          <ScrollArea className="max-h-[calc(90vh-180px)] pr-4">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleAddSubmit)} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="code"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Code</FormLabel>
                        <FormControl>
                          <Input placeholder="SUMMER25" {...field} />
                        </FormControl>
                        <FormDescription>
                          Enter a unique code for this promotion
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Status</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Active">Active</SelectItem>
                            <SelectItem value="Scheduled">Scheduled</SelectItem>
                            <SelectItem value="Expired">Expired</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Discount Type</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Percentage">Percentage (%)</SelectItem>
                            <SelectItem value="Fixed">Fixed Amount ($)</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="discount"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Discount Value</FormLabel>
                        <FormControl>
                          <Input type="text" placeholder="25" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <FormLabel>Valid From</FormLabel>
                    <div className="grid grid-cols-2 gap-2">
                      <FormField
                        control={form.control}
                        name="validFromDate"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input
                                type="date"
                                value={field.value ? format(field.value, 'yyyy-MM-dd') : ''}
                                onChange={e => {
                                  const date = e.target.value ? new Date(e.target.value) : null;
                                  if (date) field.onChange(date);
                                }}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="validFromTime"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input type="time" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  <div>
                    <FormLabel>Valid To</FormLabel>
                    <div className="grid grid-cols-2 gap-2">
                      <FormField
                        control={form.control}
                        name="validToDate"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input
                                type="date"
                                value={field.value ? format(field.value, 'yyyy-MM-dd') : ''}
                                onChange={e => {
                                  const date = e.target.value ? new Date(e.target.value) : null;
                                  if (date) field.onChange(date);
                                }}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="validToTime"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input type="time" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="capacity"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Capacity (Total Number of Uses)</FormLabel>
                        <div className="flex items-center">
                          <Users size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="Unlimited" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Leave blank for unlimited uses
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="maxUsesPerCustomer"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Max Uses Per Customer</FormLabel>
                        <div className="flex items-center">
                          <UserPlus size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="Unlimited" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Leave blank for unlimited uses per customer
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="minPurchase"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Minimum Purchase Requirement ($)</FormLabel>
                        <div className="flex items-center">
                          <ShoppingBag size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="No minimum" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Leave blank for no minimum purchase requirement
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="maxDiscountCap"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Maximum Discount Cap ($)</FormLabel>
                        <div className="flex items-center">
                          <DollarSign size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="No maximum" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Maximum amount the discount can be (for percentage discounts)
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name="newCustomersOnly"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>New Customers Only</FormLabel>
                        <FormDescription>
                          This promo code can only be used by customers who have never made a purchase before
                        </FormDescription>
                      </div>
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="applicableServices"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Applicable Services</FormLabel>
                      <FormDescription>
                        Select which services this promo code can be applied to
                      </FormDescription>
                      <div className="grid grid-cols-2 gap-2 mt-2">
                        {serviceOptions.map((option) => (
                          <FormItem
                            key={option.value}
                            className="flex flex-row items-start space-x-3 space-y-0"
                          >
                            <FormControl>
                              <Checkbox
                                checked={field.value?.includes(option.value)}
                                onCheckedChange={(checked) => {
                                  return checked
                                    ? field.onChange([...field.value, option.value])
                                    : field.onChange(
                                      field.value?.filter(
                                        (value) => value !== option.value
                                      )
                                    );
                                }}
                              />
                            </FormControl>
                            <FormLabel className="font-normal cursor-pointer">
                              {option.label}
                            </FormLabel>
                          </FormItem>
                        ))}
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <DialogFooter>
                  <Button variant="outline" type="button" onClick={() => setIsAddDialogOpen(false)} disabled={loading}>
                    Cancel
                  </Button>
                  <Button type="submit" disabled={loading}>
                    {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    Save Promo Code
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </ScrollArea>
        </DialogContent>
      </Dialog>

      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[700px] max-h-[90vh]">
          <DialogHeader>
            <DialogTitle>Edit Promo Code</DialogTitle>
            <DialogDescription>
              Update the details of this promotional code
            </DialogDescription>
          </DialogHeader>

          <ScrollArea className="max-h-[calc(90vh-180px)] pr-4">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleEditSubmit)} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="code"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Code</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Status</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          value={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Active">Active</SelectItem>
                            <SelectItem value="Scheduled">Scheduled</SelectItem>
                            <SelectItem value="Expired">Expired</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Discount Type</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          value={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Percentage">Percentage (%)</SelectItem>
                            <SelectItem value="Fixed">Fixed Amount ($)</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="discount"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Discount Value</FormLabel>
                        <FormControl>
                          <Input type="text" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <FormLabel>Valid From</FormLabel>
                    <div className="grid grid-cols-2 gap-2">
                      <FormField
                        control={form.control}
                        name="validFromDate"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input
                                type="date"
                                value={field.value ? format(field.value, 'yyyy-MM-dd') : ''}
                                onChange={e => {
                                  const date = e.target.value ? new Date(e.target.value) : null;
                                  if (date) field.onChange(date);
                                }}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="validFromTime"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input type="time" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  <div>
                    <FormLabel>Valid To</FormLabel>
                    <div className="grid grid-cols-2 gap-2">
                      <FormField
                        control={form.control}
                        name="validToDate"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input
                                type="date"
                                value={field.value ? format(field.value, 'yyyy-MM-dd') : ''}
                                onChange={e => {
                                  const date = e.target.value ? new Date(e.target.value) : null;
                                  if (date) field.onChange(date);
                                }}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="validToTime"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input type="time" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="capacity"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Capacity (Total Number of Uses)</FormLabel>
                        <div className="flex items-center">
                          <Users size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="Unlimited" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Leave blank for unlimited uses
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="maxUsesPerCustomer"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Max Uses Per Customer</FormLabel>
                        <div className="flex items-center">
                          <UserPlus size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="Unlimited" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Leave blank for unlimited uses per customer
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="minPurchase"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Minimum Purchase Requirement ($)</FormLabel>
                        <div className="flex items-center">
                          <ShoppingBag size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="No minimum" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Leave blank for no minimum purchase requirement
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="maxDiscountCap"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Maximum Discount Cap ($)</FormLabel>
                        <div className="flex items-center">
                          <DollarSign size={16} className="mr-2 text-gray-500" />
                          <FormControl>
                            <Input type="number" placeholder="No maximum" {...field} />
                          </FormControl>
                        </div>
                        <FormDescription>
                          Maximum amount the discount can be (for percentage discounts)
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name="newCustomersOnly"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>New Customers Only</FormLabel>
                        <FormDescription>
                          This promo code can only be used by customers who have never made a purchase before
                        </FormDescription>
                      </div>
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="applicableServices"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Applicable Services</FormLabel>
                      <FormDescription>
                        Select which services this promo code can be applied to
                      </FormDescription>
                      <div className="grid grid-cols-2 gap-2 mt-2">
                        {serviceOptions.map((option) => (
                          <FormItem
                            key={option.value}
                            className="flex flex-row items-start space-x-3 space-y-0"
                          >
                            <FormControl>
                              <Checkbox
                                checked={field.value?.includes(option.value)}
                                onCheckedChange={(checked) => {
                                  return checked
                                    ? field.onChange([...field.value, option.value])
                                    : field.onChange(
                                      field.value?.filter(
                                        (value) => value !== option.value
                                      )
                                    );
                                }}
                              />
                            </FormControl>
                            <FormLabel className="font-normal cursor-pointer">
                              {option.label}
                            </FormLabel>
                          </FormItem>
                        ))}
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <DialogFooter>
                  <Button variant="outline" type="button" onClick={() => setIsEditDialogOpen(false)} disabled={loading}>
                    Cancel
                  </Button>
                  <Button type="submit" disabled={loading}>
                    {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    Update Promo Code
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </ScrollArea>
        </DialogContent>
      </Dialog>

      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent className="sm:max-w-[400px]">
          <DialogHeader>
            <DialogTitle>Delete Promo Code</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this promo code? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>

          <DialogFooter className="mt-4">
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)} disabled={loading}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteConfirm} disabled={loading}>
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PromoCodeContent;
</file>

<file path="src/components/Admin/Refunds/RefundsContent.tsx">
import { useState } from "react";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Search,
  FileText,
  CheckCircle,
  XCircle,
  Clock,
  BarChart
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

const RefundsContent = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [selectedTab, setSelectedTab] = useState("refunds");
  const [selectedRefund, setSelectedRefund] = useState(null);
  const [refundDetailsOpen, setRefundDetailsOpen] = useState(false);
  
  // Mock refund data
  const refunds = [
    {
      id: "RF-001245",
      customer: "John Doe",
      bookingId: "BK-734589",
      bookingType: "Room",
      amount: "$245.00",
      requestDate: "2025-04-05",
      processingDate: "2025-04-06",
      reason: "Change of plans",
      status: "Approved",
      processedBy: "Admin User",
      policy: "Free cancellation up to 48 hours before check-in",
      email: "john.doe@example.com",
      phone: "+1-555-123-4567"
    },
    {
      id: "RF-001246",
      customer: "Jane Smith",
      bookingId: "BK-734592",
      bookingType: "Spa",
      amount: "$567.00",
      requestDate: "2025-04-06",
      processingDate: "",
      reason: "Medical emergency",
      status: "Pending",
      processedBy: "",
      policy: "50% refund for cancellations up to 24 hours",
      email: "jane.smith@example.com",
      phone: "+1-555-987-6543"
    },
    {
      id: "RF-001247",
      customer: "Robert Johnson",
      bookingId: "BK-734610",
      bookingType: "Event",
      amount: "$320.50",
      requestDate: "2025-04-07",
      processingDate: "2025-04-08",
      reason: "Unsatisfactory service",
      status: "Declined",
      processedBy: "Finance Manager",
      policy: "Non-refundable booking",
      email: "robert.johnson@example.com",
      phone: "+1-555-456-7890"
    },
    {
      id: "RF-001248",
      customer: "Emily Wilson",
      bookingId: "BK-734615",
      bookingType: "Restaurant",
      amount: "$478.25",
      requestDate: "2025-04-07",
      processingDate: "2025-04-09",
      reason: "Flight cancellation",
      status: "Approved",
      processedBy: "Hotel Manager",
      policy: "Free cancellation up to 2 hours before reservation",
      email: "emily.wilson@example.com",
      phone: "+1-555-789-0123"
    },
    {
      id: "RF-001249",
      customer: "Michael Brown",
      bookingId: "BK-734623",
      bookingType: "Room",
      amount: "$189.75",
      requestDate: "2025-04-08",
      processingDate: "",
      reason: "Double booking",
      status: "Pending",
      processedBy: "",
      policy: "Free cancellation up to 24 hours before check-in",
      email: "michael.brown@example.com",
      phone: "+1-555-234-5678"
    }
  ];

  // Calculate some statistics for insights
  const totalRefunds = refunds.length;
  const approvedRefunds = refunds.filter(r => r.status === "Approved").length;
  const pendingRefunds = refunds.filter(r => r.status === "Pending").length;
  const declinedRefunds = refunds.filter(r => r.status === "Declined").length;
  
  const totalAmount = refunds
    .filter(r => r.status === "Approved")
    .reduce((sum, refund) => sum + parseFloat(refund.amount.replace("$", "")), 0);
  
  const refundsByType = {
    Room: refunds.filter(r => r.bookingType === "Room").length,
    Spa: refunds.filter(r => r.bookingType === "Spa").length,
    Event: refunds.filter(r => r.bookingType === "Event").length,
    Restaurant: refunds.filter(r => r.bookingType === "Restaurant").length
  };

  const filteredRefunds = refunds.filter(
    (refund) =>
      (statusFilter === "all" || refund.status.toLowerCase() === statusFilter.toLowerCase()) &&
      (refund.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        refund.customer.toLowerCase().includes(searchQuery.toLowerCase()) ||
        refund.bookingId.toLowerCase().includes(searchQuery.toLowerCase()) ||
        refund.bookingType.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  const getStatusIcon = (status) => {
    switch (status) {
      case "Approved":
        return <CheckCircle className="text-green-500" size={16} />;
      case "Declined":
        return <XCircle className="text-red-500" size={16} />;
      case "Pending":
        return <Clock className="text-amber-500" size={16} />;
      default:
        return null;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "Approved":
        return "bg-green-100 text-green-800 hover:bg-green-200";
      case "Declined":
        return "bg-red-100 text-red-800 hover:bg-red-200";
      case "Pending":
        return "bg-amber-100 text-amber-800 hover:bg-amber-200";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const handleViewDetails = (refund) => {
    setSelectedRefund(refund);
    setRefundDetailsOpen(true);
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Refund Management</h1>
      </div>

      <Tabs defaultValue="refunds" onValueChange={setSelectedTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="refunds">Refunds List</TabsTrigger>
          <TabsTrigger value="insights">Insights</TabsTrigger>
        </TabsList>
        
        <TabsContent value="refunds" className="mt-4">
          <div className="bg-white p-6 rounded-lg shadow">
            <div className="flex items-center justify-between mb-6">
              <div className="relative w-80">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                <Input
                  type="text"
                  placeholder="Search refunds..."
                  className="pl-10"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <span className="text-sm text-gray-500">Status:</span>
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Statuses</SelectItem>
                      <SelectItem value="approved">Approved</SelectItem>
                      <SelectItem value="pending">Pending</SelectItem>
                      <SelectItem value="declined">Declined</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <Button variant="outline">Export</Button>
              </div>
            </div>

            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Refund ID</TableHead>
                    <TableHead>Customer</TableHead>
                    <TableHead>Booking ID</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Request Date</TableHead>
                    <TableHead>Reason</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredRefunds.length > 0 ? (
                    filteredRefunds.map((refund) => (
                      <TableRow key={refund.id}>
                        <TableCell className="font-medium">{refund.id}</TableCell>
                        <TableCell>{refund.customer}</TableCell>
                        <TableCell>{refund.bookingId}</TableCell>
                        <TableCell>{refund.bookingType}</TableCell>
                        <TableCell>{refund.amount}</TableCell>
                        <TableCell>{refund.requestDate}</TableCell>
                        <TableCell className="max-w-[200px] truncate" title={refund.reason}>{refund.reason}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-1">
                            {getStatusIcon(refund.status)}
                            <Badge className={getStatusColor(refund.status)}>
                              {refund.status}
                            </Badge>
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button variant="outline" size="sm" onClick={() => handleViewDetails(refund)}>
                            <FileText className="h-4 w-4 mr-2" />
                            View Details
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={9} className="text-center py-10 text-gray-500">
                        No refunds found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="insights" className="mt-4">
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-6">Refund Insights</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-muted-foreground">Total Refunds</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{totalRefunds}</div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-muted-foreground">Approved Refunds</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-600">{approvedRefunds}</div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-muted-foreground">Pending Refunds</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-amber-600">{pendingRefunds}</div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-muted-foreground">Total Refunded Amount</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">${totalAmount.toFixed(2)}</div>
                </CardContent>
              </Card>
            </div>
            
            <h3 className="text-lg font-semibold mb-4">Refunds by Service Type</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {Object.entries(refundsByType).map(([type, count]) => (
                <Card key={type}>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground">{type}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{count}</div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>
      </Tabs>

      {/* Refund Details Dialog */}
      <Dialog open={refundDetailsOpen} onOpenChange={setRefundDetailsOpen}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Refund Details</DialogTitle>
            <DialogDescription>
              Complete information about the refund request
            </DialogDescription>
          </DialogHeader>
          
          {selectedRefund && (
            <div className="mt-4 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Refund Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Refund ID:</span>
                      <span className="text-sm">{selectedRefund.id}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Status:</span>
                      <Badge className={getStatusColor(selectedRefund.status)}>
                        {selectedRefund.status}
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Amount:</span>
                      <span className="text-sm">{selectedRefund.amount}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Request Date:</span>
                      <span className="text-sm">{selectedRefund.requestDate}</span>
                    </div>
                    {selectedRefund.processingDate && (
                      <div className="flex justify-between">
                        <span className="text-sm font-medium">Processing Date:</span>
                        <span className="text-sm">{selectedRefund.processingDate}</span>
                      </div>
                    )}
                    {selectedRefund.processedBy && (
                      <div className="flex justify-between">
                        <span className="text-sm font-medium">Processed By:</span>
                        <span className="text-sm">{selectedRefund.processedBy}</span>
                      </div>
                    )}
                  </div>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Booking & Customer Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Customer:</span>
                      <span className="text-sm">{selectedRefund.customer}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Booking ID:</span>
                      <span className="text-sm">{selectedRefund.bookingId}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Service Type:</span>
                      <span className="text-sm">{selectedRefund.bookingType}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Email:</span>
                      <span className="text-sm">{selectedRefund.email}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Phone:</span>
                      <span className="text-sm">{selectedRefund.phone}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div>
                <h4 className="text-sm font-medium text-muted-foreground mb-2">Refund Policy</h4>
                <p className="text-sm p-3 bg-gray-50 rounded-md">{selectedRefund.policy}</p>
              </div>
              
              <div>
                <h4 className="text-sm font-medium text-muted-foreground mb-2">Reason for Refund</h4>
                <p className="text-sm p-3 bg-gray-50 rounded-md">{selectedRefund.reason}</p>
              </div>
              
              {selectedRefund.status === "Pending" && (
                <div className="flex justify-end space-x-2">
                  <Button variant="outline" className="border-red-500 text-red-500 hover:bg-red-50">
                    <XCircle className="h-4 w-4 mr-2" />
                    Decline Refund
                  </Button>
                  <Button className="bg-green-600 hover:bg-green-700">
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Approve Refund
                  </Button>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default RefundsContent;
</file>

<file path="src/components/Admin/Reports/ReportsContent.tsx">
import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { Download, Filter } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface ReportsContentProps {
  department?: string;
}

const ReportsContent = ({ department = "Management" }: ReportsContentProps) => {
  const [timeRange, setTimeRange] = useState("month");
  
  // Mock data for charts
  const occupancyData = [
    { name: "Jan", occupancy: 65 },
    { name: "Feb", occupancy: 59 },
    { name: "Mar", occupancy: 80 },
    { name: "Apr", occupancy: 81 },
    { name: "May", occupancy: 56 },
    { name: "Jun", occupancy: 55 },
    { name: "Jul", occupancy: 78 },
    { name: "Aug", occupancy: 90 },
    { name: "Sep", occupancy: 81 },
    { name: "Oct", occupancy: 66 },
    { name: "Nov", occupancy: 70 },
    { name: "Dec", occupancy: 85 }
  ];
  
  const revenueData = [
    { name: "Jan", revenue: 54000 },
    { name: "Feb", revenue: 45000 },
    { name: "Mar", revenue: 60000 },
    { name: "Apr", revenue: 65000 },
    { name: "May", revenue: 50000 },
    { name: "Jun", revenue: 48000 },
    { name: "Jul", revenue: 70000 },
    { name: "Aug", revenue: 85000 },
    { name: "Sep", revenue: 78000 },
    { name: "Oct", revenue: 60000 },
    { name: "Nov", revenue: 65000 },
    { name: "Dec", revenue: 90000 }
  ];
  
  const spaRevenueData = [
    { name: "Jan", revenue: 18000 },
    { name: "Feb", revenue: 22000 },
    { name: "Mar", revenue: 25000 },
    { name: "Apr", revenue: 20000 },
    { name: "May", revenue: 19000 },
    { name: "Jun", revenue: 21000 },
    { name: "Jul", revenue: 24000 },
    { name: "Aug", revenue: 28000 },
    { name: "Sep", revenue: 26000 },
    { name: "Oct", revenue: 22000 },
    { name: "Nov", revenue: 20000 },
    { name: "Dec", revenue: 27000 }
  ];
  
  const restaurantRevenueData = [
    { name: "Jan", revenue: 32000 },
    { name: "Feb", revenue: 29000 },
    { name: "Mar", revenue: 31000 },
    { name: "Apr", revenue: 33000 },
    { name: "May", revenue: 30000 },
    { name: "Jun", revenue: 34000 },
    { name: "Jul", revenue: 38000 },
    { name: "Aug", revenue: 42000 },
    { name: "Sep", revenue: 39000 },
    { name: "Oct", revenue: 35000 },
    { name: "Nov", revenue: 33000 },
    { name: "Dec", revenue: 41000 }
  ];
  
  // Get department-specific data
  const getDepartmentRevenueData = () => {
    switch (department) {
      case "Spa & Wellness":
        return spaRevenueData;
      case "Food & Beverage":
        return restaurantRevenueData;
      default:
        return revenueData;
    }
  };
  
  const departmentRevenue = getDepartmentRevenueData();
  
  // Calculate department-specific totals
  const totalRevenue = departmentRevenue.reduce((sum, item) => sum + item.revenue, 0);
  
  const bookingSourceData = [
    { name: "Website", value: 45 },
    { name: "OTAs", value: 30 },
    { name: "Phone", value: 15 },
    { name: "Walk-in", value: 5 },
    { name: "Travel Agents", value: 5 }
  ];
  
  const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE"];
  
  const formatCurrency = (value) => {
    return `$${value.toLocaleString()}`;
  };

  // Generate department-specific title
  const getDepartmentTitle = () => {
    if (department === "Management") return "Reports & Analytics";
    return `${department} Reports & Analytics`;
  };
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">{getDepartmentTitle()}</h1>
        <div className="flex items-center gap-2">
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select time range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="week">Past Week</SelectItem>
              <SelectItem value="month">Past Month</SelectItem>
              <SelectItem value="quarter">Past Quarter</SelectItem>
              <SelectItem value="year">Past Year</SelectItem>
            </SelectContent>
          </Select>
          <Button variant="outline" className="flex items-center gap-2">
            <Download size={16} />
            <span>Export</span>
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {department === "Management" || department === "Front Office" || department === "Housekeeping" ? (
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-gray-500">Average Occupancy</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">72%</div>
              <p className="text-xs text-green-600 flex items-center mt-1">
                +5% from previous period
              </p>
            </CardContent>
          </Card>
        ) : null}
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-500">
              {department === "Management" ? "Total Revenue" : `${department} Revenue`}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${(totalRevenue / 1000).toFixed(0)}k</div>
            <p className="text-xs text-green-600 flex items-center mt-1">
              +12% from previous period
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-500">
              {department === "Spa & Wellness" ? "Spa Bookings" : 
               department === "Food & Beverage" ? "Restaurant Bookings" : "Total Bookings"}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{department === "Spa & Wellness" ? "1,245" : 
              department === "Food & Beverage" ? "3,042" : "4,287"}</div>
            <p className="text-xs text-green-600 flex items-center mt-1">
              +8% from previous period
            </p>
          </CardContent>
        </Card>
      </div>
      
      <Tabs defaultValue={department === "Spa & Wellness" ? "revenue" : 
             department === "Food & Beverage" ? "revenue" : "occupancy"} className="w-full">
        <TabsList className="mb-4">
          {(department === "Management" || department === "Front Office" || department === "Housekeeping") && (
            <TabsTrigger value="occupancy">Occupancy Rate</TabsTrigger>
          )}
          <TabsTrigger value="revenue">Revenue Analysis</TabsTrigger>
          {department === "Management" && (
            <TabsTrigger value="bookingSource">Booking Sources</TabsTrigger>
          )}
        </TabsList>
        
        {(department === "Management" || department === "Front Office" || department === "Housekeeping") && (
          <TabsContent value="occupancy" className="bg-white p-6 rounded-lg shadow">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Occupancy Rate</h2>
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <Filter size={14} />
                <span>Filter</span>
              </Button>
            </div>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={occupancyData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis unit="%" />
                  <Tooltip formatter={(value) => [`${value}%`, "Occupancy"]} />
                  <Legend />
                  <Bar dataKey="occupancy" fill="#8884d8" name="Occupancy Rate" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </TabsContent>
        )}
        
        <TabsContent value="revenue" className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">
              {department === "Management" ? "Revenue Analysis" : `${department} Revenue Analysis`}
            </h2>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <Filter size={14} />
              <span>Filter</span>
            </Button>
          </div>
          <div className="h-[400px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={getDepartmentRevenueData()} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis tickFormatter={formatCurrency} />
                <Tooltip formatter={(value) => [formatCurrency(value), "Revenue"]} />
                <Legend />
                <Bar dataKey="revenue" fill="#82ca9d" name="Monthly Revenue" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </TabsContent>
        
        {department === "Management" && (
          <TabsContent value="bookingSource" className="bg-white p-6 rounded-lg shadow">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Booking Sources</h2>
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <Filter size={14} />
                <span>Filter</span>
              </Button>
            </div>
            <div className="h-[400px] flex justify-center">
              <ResponsiveContainer width="70%" height="100%">
                <PieChart>
                  <Pie
                    data={bookingSourceData}
                    cx="50%"
                    cy="50%"
                    labelLine={true}
                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    outerRadius={150}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {bookingSourceData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip formatter={(value) => [`${value}%`, "Percentage"]} />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </TabsContent>
        )}
      </Tabs>
    </div>
  );
};

export default ReportsContent;
</file>

<file path="src/components/Admin/Restaurant/AddMenuItemForm.tsx">
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import axios from "axios";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { ArrowLeft, X, Upload, ImageIcon, Plus, Loader2 } from "lucide-react";
import { Badge } from "@/components/ui/badge";

const formSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  description: z.string().min(10, { message: "Description must be at least 10 characters" }),
  category: z.string().min(1, { message: "Please select a category" }),
  price: z.coerce.number().positive({ message: "Price must be a positive number" }),
  preparationTime: z.coerce.number().int().positive({ message: "Preparation time must be a positive number" }),
  ingredients: z.string().min(5, { message: "Ingredients must be at least 5 characters" }),
  available: z.boolean().default(true),
  extras: z.array(
    z.object({
      name: z.string().min(1, { message: "Extra name is required" }),
      price: z.coerce.number().min(0, { message: "Price must be a non-negative number" })
    })
  ).default([]),
});

type FormData = z.infer<typeof formSchema>;

// Interface for menu categories
interface MenuCategory {
  _id: string;
  name: string;
  description: string;
  sortOrder: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

const MENU_ITEMS_ENDPOINT = "http://localhost:4000/api/restaurant/menu-items";
const MENU_CATEGORIES_ENDPOINT = "http://localhost:4000/api/restaurant/menu-categories";

const AddMenuItemForm = () => {
  const navigate = useNavigate();
  const [previewImages, setPreviewImages] = useState<string[]>([]);
  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [extraName, setExtraName] = useState("");
  const [extraPrice, setExtraPrice] = useState("");
  const [extras, setExtras] = useState<Array<{ name: string, price: number }>>([]);
  const [categories, setCategories] = useState<MenuCategory[]>([]);
  const [categoriesLoading, setCategoriesLoading] = useState(true);

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      description: "",
      category: "",
      price: undefined,
      preparationTime: undefined,
      ingredients: "",
      available: true,
      extras: [],
    },
  });

  // Fetch categories from API
  const fetchCategories = async () => {
    try {
      setCategoriesLoading(true);
      const response = await axios.get(`${MENU_CATEGORIES_ENDPOINT}?active=true`);
      
      if (response.data && response.data.data && Array.isArray(response.data.data)) {
        // Sort categories by sortOrder
        const sortedCategories = response.data.data.sort((a: MenuCategory, b: MenuCategory) => a.sortOrder - b.sortOrder);
        setCategories(sortedCategories);
      } else if (response.data && Array.isArray(response.data)) {
        const sortedCategories = response.data.sort((a: MenuCategory, b: MenuCategory) => a.sortOrder - b.sortOrder);
        setCategories(sortedCategories);
      } else {
        console.error("Unexpected API response format:", response.data);
        setCategories([]);
      }
    } catch (error) {
      console.error("Error fetching categories:", error);
      toast.error("Failed to load categories. Please create categories first.");
      setCategories([]);
    } finally {
      setCategoriesLoading(false);
    }
  };

  // Load categories on component mount
  useEffect(() => {
    fetchCategories();
  }, []);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    // Store the FileList object
    setSelectedFiles(files);

    // Create preview URLs for each file
    const newPreviews: string[] = [];
    for (let i = 0; i < files.length; i++) {
      newPreviews.push(URL.createObjectURL(files[i]));
    }

    // Clear previous preview URLs to avoid memory leaks
    previewImages.forEach(url => URL.revokeObjectURL(url));

    setPreviewImages(newPreviews);
  };

  const removeImage = (index: number) => {
    if (!selectedFiles) return;

    // Create a new FileList-like object without the removed image
    const dt = new DataTransfer();

    for (let i = 0; i < selectedFiles.length; i++) {
      if (i !== index) {
        dt.items.add(selectedFiles[i]);
      }
    }

    // Update selected files
    setSelectedFiles(dt.files.length > 0 ? dt.files : null);

    // Update previews
    const newPreviews = [...previewImages];
    URL.revokeObjectURL(newPreviews[index]);
    newPreviews.splice(index, 1);
    setPreviewImages(newPreviews);
  };

  const addExtra = () => {
    if (!extraName.trim()) {
      toast.error("Extra name is required");
      return;
    }

    const priceValue = parseFloat(extraPrice);
    if (isNaN(priceValue) || priceValue < 0) {
      toast.error("Price must be a valid non-negative number");
      return;
    }

    const newExtra = { name: extraName, price: priceValue };
    const updatedExtras = [...extras, newExtra];
    setExtras(updatedExtras);
    form.setValue("extras", updatedExtras);

    // Reset inputs
    setExtraName("");
    setExtraPrice("");
  };

  const removeExtra = (index: number) => {
    const updatedExtras = extras.filter((_, i) => i !== index);
    setExtras(updatedExtras);
    form.setValue("extras", updatedExtras);
  };

  const onSubmit = async (values: FormData) => {
    if (!selectedFiles || selectedFiles.length === 0) {
      toast.error("Please upload at least one image");
      return;
    }

    try {
      setIsSubmitting(true);

      // Create a form data object to send files and other data
      const formData = new FormData();

      // Add form fields to the formData
      formData.append("name", values.name);
      formData.append("description", values.description);
      formData.append("category", values.category);
      formData.append("price", values.price.toString());
      formData.append("preparationTime", values.preparationTime.toString());
      formData.append("ingredients", values.ingredients);
      formData.append("available", values.available.toString());

      // Add extras as JSON string
      formData.append("extras", JSON.stringify(values.extras));

      // Add all image files
      for (let i = 0; i < selectedFiles.length; i++) {
        formData.append("images", selectedFiles[i]);
      }

      // Make POST request with axios
      const response = await axios.post(MENU_ITEMS_ENDPOINT, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      toast.success(response.data.message || "Menu item added successfully");

      // Clean up preview URLs
      previewImages.forEach(url => URL.revokeObjectURL(url));

      // Navigate back to restaurant management page
      navigate("/admin/restaurant");
    } catch (error) {
      console.error("Error adding menu item:", error);
      if (axios.isAxiosError(error) && error.response) {
        toast.error(error.response.data.message || "Failed to add menu item");
      } else {
        toast.error("An error occurred while adding the menu item");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center">
        <Button
          variant="ghost"
          onClick={() => navigate("/admin/restaurant")}
          className="mr-2"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back
        </Button>
        <h2 className="text-3xl font-bold tracking-tight">Add Menu Item</h2>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Menu Item Details</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Item Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter item name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="category"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Category</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder={categoriesLoading ? "Loading categories..." : "Select a category"} />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {categoriesLoading ? (
                            <div className="flex items-center justify-center py-2">
                              <Loader2 className="h-4 w-4 animate-spin mr-2" />
                              <span className="text-sm">Loading...</span>
                            </div>
                          ) : categories.length === 0 ? (
                            <div className="px-2 py-2 text-sm text-muted-foreground">
                              No categories found. Please create categories first.
                            </div>
                          ) : (
                            categories.map((category) => (
                              <SelectItem key={category._id} value={category.name}>
                                {category.name}
                              </SelectItem>
                            ))
                          )}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="price"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Price ($)</FormLabel>
                      <FormControl>
                        <Input type="number" step="0.01" placeholder="0.00" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="preparationTime"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Preparation Time (minutes)</FormLabel>
                      <FormControl>
                        <Input type="number" placeholder="15" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="col-span-1 md:col-span-2">
                  <FormLabel className="text-sm font-medium">Images</FormLabel>
                  <div className="space-y-4 mt-2">
                    <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-md p-6 cursor-pointer hover:bg-gray-50 transition-colors"
                      onClick={() => document.getElementById('image-upload')?.click()}>
                      <Upload className="h-8 w-8 text-gray-400 mb-2" />
                      <p className="text-sm text-gray-600">
                        Click to upload images or drag and drop
                      </p>
                      <p className="text-xs text-gray-400 mt-1">
                        PNG, JPG, WEBP up to 5MB each
                      </p>
                      <Input
                        id="image-upload"
                        type="file"
                        multiple
                        accept="image/*"
                        className="hidden"
                        onChange={handleImageChange}
                      />
                    </div>

                    {previewImages.length > 0 && (
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        {previewImages.map((url, index) => (
                          <div key={index} className="relative group">
                            <img
                              src={url}
                              alt={`Preview ${index}`}
                              className="rounded-md w-full h-24 object-cover"
                            />
                            <button
                              type="button"
                              className="absolute top-1 right-1 bg-black bg-opacity-50 rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                              onClick={() => removeImage(index)}
                            >
                              <X className="h-4 w-4 text-white" />
                            </button>
                          </div>
                        ))}
                      </div>
                    )}

                    {!previewImages.length && (
                      <p className="text-sm text-red-500">Please upload at least one image</p>
                    )}
                  </div>
                </div>

                <div className="col-span-1 md:col-span-2">
                  <FormLabel className="text-sm font-medium">Add-ons & Extras (Optional)</FormLabel>
                  <div className="space-y-4 mt-2 p-4 border rounded-md">
                    <div className="text-sm text-gray-600">Add extra services with additional pricing</div>

                    <div className="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3">
                      <Input
                        placeholder="Extra name"
                        value={extraName}
                        onChange={(e) => setExtraName(e.target.value)}
                        className="flex-1"
                      />
                      <Input
                        type="number"
                        step="0.01"
                        placeholder="Price ($)"
                        value={extraPrice}
                        onChange={(e) => setExtraPrice(e.target.value)}
                        className="flex-1"
                      />
                      <Button type="button" onClick={addExtra} variant="outline">
                        <Plus className="h-4 w-4 mr-2" /> Add Extra
                      </Button>
                    </div>

                    {extras.length > 0 ? (
                      <div className="flex flex-wrap gap-2 mt-3">
                        {extras.map((extra, index) => (
                          <Badge key={index} variant="secondary" className="flex items-center gap-1 px-3 py-1">
                            {extra.name} (${extra.price.toFixed(2)})
                            <button
                              type="button"
                              onClick={() => removeExtra(index)}
                              className="ml-1 text-gray-500 hover:text-red-500"
                            >
                              <X className="h-3 w-3" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                    ) : (
                      <div className="text-sm text-gray-500 mt-2">No extras added. Click "Add Extra" to add optional items.</div>
                    )}
                  </div>
                </div>

                <FormField
                  control={form.control}
                  name="ingredients"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Ingredients</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="List the ingredients separated by commas"
                          className="min-h-[80px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem className="col-span-1 md:col-span-2">
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Enter a detailed description of the menu item"
                          className="min-h-[100px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="available"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                      <div className="space-y-0.5">
                        <FormLabel>Available</FormLabel>
                        <p className="text-sm text-muted-foreground">
                          Make this item available on the menu
                        </p>
                      </div>
                      <FormControl>
                        <Switch
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </div>

              <div className="flex justify-end">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate("/admin/restaurant")}
                  className="mr-2"
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? "Adding..." : "Add Menu Item"}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
};

export default AddMenuItemForm;
</file>

<file path="src/components/Admin/Restaurant/DeleteMenuItemModal.tsx">
import React, { useState } from "react";
import axios from "axios";
import { toast } from "sonner";

import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Loader2 } from "lucide-react";

interface DeleteMenuItemModalProps {
    isOpen: boolean;
    onClose: () => void;
    menuItemId: string | null;
    menuItemName: string;
    onSuccess: () => void;
}

const MENU_ITEMS_ENDPOINT = "http://localhost:4000/api/restaurant/menu-items";

const DeleteMenuItemModal: React.FC<DeleteMenuItemModalProps> = ({
    isOpen,
    onClose,
    menuItemId,
    menuItemName,
    onSuccess,
}) => {
    const [isDeleting, setIsDeleting] = useState(false);

    const handleDelete = async () => {
        if (!menuItemId) {
            onClose();
            return;
        }

        try {
            setIsDeleting(true);
            await axios.delete(`${MENU_ITEMS_ENDPOINT}/${menuItemId}`);

            toast.success("Menu item deleted successfully");
            onSuccess();
            onClose();
        } catch (error) {
            console.error("Error deleting menu item:", error);
            if (axios.isAxiosError(error) && error.response) {
                toast.error(error.response.data.message || "Failed to delete menu item");
            } else {
                toast.error("An error occurred while deleting the menu item");
            }
        } finally {
            setIsDeleting(false);
        }
    };

    return (
        <AlertDialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
            <AlertDialogContent>
                <AlertDialogHeader>
                    <AlertDialogTitle>Are you sure you want to delete this item?</AlertDialogTitle>
                    <AlertDialogDescription>
                        You are about to delete <strong>{menuItemName}</strong>. This action cannot be undone.
                    </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                    <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
                    <AlertDialogAction
                        onClick={(e) => {
                            e.preventDefault();
                            handleDelete();
                        }}
                        className="bg-red-500 hover:bg-red-600 text-white"
                        disabled={isDeleting}
                    >
                        {isDeleting ? (
                            <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                Deleting...
                            </>
                        ) : (
                            "Delete"
                        )}
                    </AlertDialogAction>
                </AlertDialogFooter>
            </AlertDialogContent>
        </AlertDialog>
    );
};

export default DeleteMenuItemModal;
</file>

<file path="src/components/Admin/Restaurant/EditMenuItemForm.tsx">
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import axios from "axios";

import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { ArrowLeft, X, Upload, Loader2, Plus } from "lucide-react";
import { Badge } from "@/components/ui/badge";

const formSchema = z.object({
    name: z.string().min(3, { message: "Name must be at least 3 characters" }),
    description: z.string().min(10, { message: "Description must be at least 10 characters" }),
    category: z.string().min(1, { message: "Please select a category" }),
    price: z.coerce.number().positive({ message: "Price must be a positive number" }),
    preparationTime: z.coerce.number().int().positive({ message: "Preparation time must be a positive number" }),
    ingredients: z.string().min(5, { message: "Ingredients must be at least 5 characters" }),
    available: z.boolean().default(true),
    extras: z.array(
        z.object({
            name: z.string().min(1, { message: "Extra name is required" }),
            price: z.coerce.number().min(0, { message: "Price must be a non-negative number" })
        })
    ).default([]),
});

type FormData = z.infer<typeof formSchema>;

// Define MenuItem interface for fetched data
interface Extra {
    name: string;
    price: number;
}

interface MenuItem {
    _id: string;
    name: string;
    description: string;
    category: string;
    price: number;
    preparationTime: number;
    ingredients: string;
    available: boolean;
    extras: Extra[];
    images: string[];
}

// Interface for menu categories
interface MenuCategory {
    _id: string;
    name: string;
    description: string;
    sortOrder: number;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
}

const API_URL = import.meta.env.VITE_API_URL;
const MENU_ITEMS_ENDPOINT = `${API_URL}/api/restaurant/menu-items`;
const MENU_CATEGORIES_ENDPOINT = "http://localhost:4000/api/restaurant/menu-categories";

const EditMenuItemForm = () => {
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const [previewImages, setPreviewImages] = useState<string[]>([]);
    const [existingImages, setExistingImages] = useState<string[]>([]);
    const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [extraName, setExtraName] = useState("");
    const [extraPrice, setExtraPrice] = useState("");
    const [extras, setExtras] = useState<Extra[]>([]);
    const [categories, setCategories] = useState<MenuCategory[]>([]);
    const [categoriesLoading, setCategoriesLoading] = useState(true);

    const form = useForm<FormData>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            name: "",
            description: "",
            category: "",
            price: undefined,
            preparationTime: undefined,
            ingredients: "",
            available: true,
            extras: [],
        },
    });

    // Fetch categories from API
    const fetchCategories = async () => {
        try {
            setCategoriesLoading(true);
            const response = await axios.get(`${MENU_CATEGORIES_ENDPOINT}?active=true`);
            
            if (response.data && response.data.data && Array.isArray(response.data.data)) {
                // Sort categories by sortOrder
                const sortedCategories = response.data.data.sort((a: MenuCategory, b: MenuCategory) => a.sortOrder - b.sortOrder);
                setCategories(sortedCategories);
            } else if (response.data && Array.isArray(response.data)) {
                const sortedCategories = response.data.sort((a: MenuCategory, b: MenuCategory) => a.sortOrder - b.sortOrder);
                setCategories(sortedCategories);
            } else {
                console.error("Unexpected API response format:", response.data);
                setCategories([]);
            }
        } catch (error) {
            console.error("Error fetching categories:", error);
            toast.error("Failed to load categories. Please create categories first.");
            setCategories([]);
        } finally {
            setCategoriesLoading(false);
        }
    };

    useEffect(() => {
        // Fetch categories first
        fetchCategories();
    }, []);

    useEffect(() => {
        const fetchMenuItem = async () => {
            try {
                setIsLoading(true);
                const response = await axios.get(`${MENU_ITEMS_ENDPOINT}/${id}`);
                const menuItem: MenuItem = response.data.data;

                // Set form values
                form.reset({
                    name: menuItem.name,
                    description: menuItem.description,
                    category: menuItem.category,
                    price: menuItem.price,
                    preparationTime: menuItem.preparationTime,
                    ingredients: menuItem.ingredients,
                    available: menuItem.available,
                    extras: menuItem.extras || [],
                });

                // Set extras state for UI
                setExtras(menuItem.extras || []);

                // Set existing images
                setExistingImages(menuItem.images);
            } catch (error) {
                console.error("Error fetching menu item:", error);
                toast.error("Failed to load menu item data");
                navigate("/admin/restaurant");
            } finally {
                setIsLoading(false);
            }
        };

        if (id) {
            fetchMenuItem();
        }
    }, [id, form, navigate]);

    const addExtra = () => {
        if (!extraName.trim()) {
            toast.error("Extra name is required");
            return;
        }

        const priceValue = parseFloat(extraPrice);
        if (isNaN(priceValue) || priceValue < 0) {
            toast.error("Price must be a valid non-negative number");
            return;
        }

        const newExtra = { name: extraName, price: priceValue };
        const updatedExtras = [...extras, newExtra];
        setExtras(updatedExtras);
        form.setValue("extras", updatedExtras);
        
        // Reset inputs
        setExtraName("");
        setExtraPrice("");
    };

    const removeExtra = (index: number) => {
        const updatedExtras = extras.filter((_, i) => i !== index);
        setExtras(updatedExtras);
        form.setValue("extras", updatedExtras);
    };

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (!files || files.length === 0) return;

        // Store the FileList object
        setSelectedFiles(files);

        // Create preview URLs for each file
        const newPreviews: string[] = [];
        for (let i = 0; i < files.length; i++) {
            newPreviews.push(URL.createObjectURL(files[i]));
        }

        // Clear previous new preview URLs to avoid memory leaks
        previewImages.forEach(url => URL.revokeObjectURL(url));

        setPreviewImages(newPreviews);
    };

    const removeNewImage = (index: number) => {
        if (!selectedFiles) return;

        // Create a new FileList-like object without the removed image
        const dt = new DataTransfer();

        for (let i = 0; i < selectedFiles.length; i++) {
            if (i !== index) {
                dt.items.add(selectedFiles[i]);
            }
        }

        // Update selected files
        setSelectedFiles(dt.files.length > 0 ? dt.files : null);

        // Update previews
        const newPreviews = [...previewImages];
        URL.revokeObjectURL(newPreviews[index]);
        newPreviews.splice(index, 1);
        setPreviewImages(newPreviews);
    };

    const onSubmit = async (values: FormData) => {
        if (!id) return;

        try {
            setIsSubmitting(true);

            // Create a form data object to send files and other data
            const formData = new FormData();

            // Add form fields to the formData
            formData.append("name", values.name);
            formData.append("description", values.description);
            formData.append("category", values.category);
            formData.append("price", values.price.toString());
            formData.append("preparationTime", values.preparationTime.toString());
            formData.append("ingredients", values.ingredients);
            formData.append("available", values.available.toString());
            
            // Add extras as JSON string
            formData.append("extras", JSON.stringify(values.extras));

            // Add new images if any are selected
            if (selectedFiles && selectedFiles.length > 0) {
                for (let i = 0; i < selectedFiles.length; i++) {
                    formData.append("images", selectedFiles[i]);
                }
            }

            // Make PUT request with axios
            const response = await axios.put(`${MENU_ITEMS_ENDPOINT}/${id}`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            toast.success(response.data.message || "Menu item updated successfully");

            // Clean up preview URLs
            previewImages.forEach(url => URL.revokeObjectURL(url));

            // Navigate back to restaurant management page
            navigate("/admin/restaurant");
        } catch (error) {
            console.error("Error updating menu item:", error);
            if (axios.isAxiosError(error) && error.response) {
                toast.error(error.response.data.message || "Failed to update menu item");
            } else {
                toast.error("An error occurred while updating the menu item");
            }
        } finally {
            setIsSubmitting(false);
        }
    };

    if (isLoading) {
        return (
            <div className="flex items-center justify-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <span className="ml-2">Loading menu item data...</span>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div className="flex items-center">
                <Button
                    variant="ghost"
                    onClick={() => navigate("/admin/restaurant")}
                    className="mr-2"
                >
                    <ArrowLeft className="h-4 w-4 mr-2" />
                    Back
                </Button>
                <h2 className="text-3xl font-bold tracking-tight">Edit Menu Item</h2>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>Menu Item Details</CardTitle>
                </CardHeader>
                <CardContent>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <FormField
                                    control={form.control}
                                    name="name"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Item Name</FormLabel>
                                            <FormControl>
                                                <Input placeholder="Enter item name" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="category"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Category</FormLabel>
                                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder={categoriesLoading ? "Loading categories..." : "Select a category"} />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    {categoriesLoading ? (
                                                        <div className="flex items-center justify-center py-2">
                                                            <Loader2 className="h-4 w-4 animate-spin mr-2" />
                                                            <span className="text-sm">Loading...</span>
                                                        </div>
                                                    ) : categories.length === 0 ? (
                                                        <div className="px-2 py-2 text-sm text-muted-foreground">
                                                            No categories found. Please create categories first.
                                                        </div>
                                                    ) : (
                                                        categories.map((category) => (
                                                            <SelectItem key={category._id} value={category.name}>
                                                                {category.name}
                                                            </SelectItem>
                                                        ))
                                                    )}
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="price"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Price ($)</FormLabel>
                                            <FormControl>
                                                <Input type="number" step="0.01" placeholder="0.00" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="preparationTime"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Preparation Time (minutes)</FormLabel>
                                            <FormControl>
                                                <Input type="number" placeholder="15" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <div className="col-span-1 md:col-span-2">
                                    <FormLabel className="text-sm font-medium">Images</FormLabel>
                                    <div className="space-y-4 mt-2">
                                        {/* Existing Images */}
                                        {existingImages.length > 0 && (
                                            <div className="space-y-2">
                                                <h4 className="text-sm font-medium">Current Images</h4>
                                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                    {existingImages.map((url, index) => (
                                                        <div key={index} className="relative">
                                                            <img
                                                                src={`http://localhost:4000${url}`}
                                                                alt={`Menu item ${index}`}
                                                                className="rounded-md w-full h-24 object-cover"
                                                            />
                                                        </div>
                                                    ))}
                                                </div>
                                                <p className="text-sm text-muted-foreground">
                                                    Uploading new images will replace all current images
                                                </p>
                                            </div>
                                        )}

                                        {/* Upload new images */}
                                        <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-md p-6 cursor-pointer hover:bg-gray-50 transition-colors"
                                            onClick={() => document.getElementById('image-upload')?.click()}>
                                            <Upload className="h-8 w-8 text-gray-400 mb-2" />
                                            <p className="text-sm text-gray-600">
                                                Click to upload new images or drag and drop
                                            </p>
                                            <p className="text-xs text-gray-400 mt-1">
                                                PNG, JPG, WEBP up to 5MB each
                                            </p>
                                            <Input
                                                id="image-upload"
                                                type="file"
                                                multiple
                                                accept="image/*"
                                                className="hidden"
                                                onChange={handleImageChange}
                                            />
                                        </div>

                                        {/* Preview of new images */}
                                        {previewImages.length > 0 && (
                                            <div className="space-y-2">
                                                <h4 className="text-sm font-medium">New Images to Upload</h4>
                                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                    {previewImages.map((url, index) => (
                                                        <div key={index} className="relative group">
                                                            <img
                                                                src={url}
                                                                alt={`Preview ${index}`}
                                                                className="rounded-md w-full h-24 object-cover"
                                                            />
                                                            <button
                                                                type="button"
                                                                className="absolute top-1 right-1 bg-black bg-opacity-50 rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                                                                onClick={() => removeNewImage(index)}
                                                            >
                                                                <X className="h-4 w-4 text-white" />
                                                            </button>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>

                                <div className="col-span-1 md:col-span-2">
                                    <FormLabel className="text-sm font-medium">Add-ons & Extras (Optional)</FormLabel>
                                    <div className="space-y-4 mt-2 p-4 border rounded-md">
                                        <div className="text-sm text-gray-600">Add extra services with additional pricing</div>
                                        
                                        <div className="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3">
                                            <Input
                                                placeholder="Extra name"
                                                value={extraName}
                                                onChange={(e) => setExtraName(e.target.value)}
                                                className="flex-1"
                                            />
                                            <Input
                                                type="number"
                                                step="0.01"
                                                placeholder="Price ($)"
                                                value={extraPrice}
                                                onChange={(e) => setExtraPrice(e.target.value)}
                                                className="flex-1"
                                            />
                                            <Button type="button" onClick={addExtra} variant="outline">
                                                <Plus className="h-4 w-4 mr-2" /> Add Extra
                                            </Button>
                                        </div>
                                        
                                        {extras.length > 0 ? (
                                            <div className="flex flex-wrap gap-2 mt-3">
                                                {extras.map((extra, index) => (
                                                    <Badge key={index} variant="secondary" className="flex items-center gap-1 px-3 py-1">
                                                        {extra.name} (${extra.price.toFixed(2)})
                                                        <button
                                                            type="button"
                                                            onClick={() => removeExtra(index)}
                                                            className="ml-1 text-gray-500 hover:text-red-500"
                                                        >
                                                            <X className="h-3 w-3" />
                                                        </button>
                                                    </Badge>
                                                ))}
                                            </div>
                                        ) : (
                                            <div className="text-sm text-gray-500 mt-2">No extras added. Click "Add Extra" to add optional items.</div>
                                        )}
                                    </div>
                                </div>

                                <FormField
                                    control={form.control}
                                    name="ingredients"
                                    render={({ field }) => (
                                        <FormItem className="col-span-1 md:col-span-2">
                                            <FormLabel>Ingredients</FormLabel>
                                            <FormControl>
                                                <Textarea
                                                    placeholder="List the ingredients separated by commas"
                                                    className="min-h-[80px]"
                                                    {...field}
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="description"
                                    render={({ field }) => (
                                        <FormItem className="col-span-1 md:col-span-2">
                                            <FormLabel>Description</FormLabel>
                                            <FormControl>
                                                <Textarea
                                                    placeholder="Enter a detailed description of the menu item"
                                                    className="min-h-[100px]"
                                                    {...field}
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="available"
                                    render={({ field }) => (
                                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                                            <div className="space-y-0.5">
                                                <FormLabel>Available</FormLabel>
                                                <p className="text-sm text-muted-foreground">
                                                    Make this item available on the menu
                                                </p>
                                            </div>
                                            <FormControl>
                                                <Switch
                                                    checked={field.value}
                                                    onCheckedChange={field.onChange}
                                                />
                                            </FormControl>
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <div className="flex justify-end">
                                <Button
                                    type="button"
                                    variant="outline"
                                    onClick={() => navigate("/admin/restaurant")}
                                    className="mr-2"
                                >
                                    Cancel
                                </Button>
                                <Button type="submit" disabled={isSubmitting}>
                                    {isSubmitting ? "Saving..." : "Save Changes"}
                                </Button>
                            </div>
                        </form>
                    </Form>
                </CardContent>
            </Card>
        </div>
    );
};

export default EditMenuItemForm;
</file>

<file path="src/components/Admin/Restaurant/EditMenuItemModal.tsx">
import React, { useState, useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import axios from "axios";

import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogFooter
} from "@/components/ui/dialog";
import { Switch } from "@/components/ui/switch";
import { Loader2, X, Upload, Plus } from "lucide-react";
import { Badge } from "@/components/ui/badge";

const formSchema = z.object({
    name: z.string().min(3, { message: "Name must be at least 3 characters" }),
    description: z.string().min(10, { message: "Description must be at least 10 characters" }),
    category: z.string().min(1, { message: "Please select a category" }),
    price: z.coerce.number().positive({ message: "Price must be a positive number" }),
    preparationTime: z.coerce.number().int().positive({ message: "Preparation time must be a positive number" }),
    ingredients: z.string().min(5, { message: "Ingredients must be at least 5 characters" }),
    available: z.boolean().default(true),
    extras: z.array(
        z.object({
            name: z.string().min(1, { message: "Extra name is required" }),
            price: z.coerce.number().min(0, { message: "Price must be a non-negative number" })
        })
    ).default([]),
});

type FormData = z.infer<typeof formSchema>;

// Define interfaces
interface Extra {
    name: string;
    price: number;
}

interface MenuItem {
    _id: string;
    name: string;
    description: string;
    category: string;
    price: number;
    preparationTime: number;
    ingredients: string;
    available: boolean;
    extras: Extra[];
    images: string[];
}

// Interface for menu categories
interface MenuCategory {
    _id: string;
    name: string;
    description: string;
    sortOrder: number;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
}

interface EditMenuItemModalProps {
    isOpen: boolean;
    onClose: () => void;
    menuItemId: string | null;
    onSuccess: () => void;
}

const MENU_ITEMS_ENDPOINT = "http://localhost:4000/api/restaurant/menu-items";
const MENU_CATEGORIES_ENDPOINT = "http://localhost:4000/api/restaurant/menu-categories";

const EditMenuItemModal: React.FC<EditMenuItemModalProps> = ({
    isOpen,
    onClose,
    menuItemId,
    onSuccess
}) => {
    const [previewImages, setPreviewImages] = useState<string[]>([]);
    const [existingImages, setExistingImages] = useState<string[]>([]);
    const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [extraName, setExtraName] = useState("");
    const [extraPrice, setExtraPrice] = useState("");
    const [extras, setExtras] = useState<Extra[]>([]);
    const [categories, setCategories] = useState<MenuCategory[]>([]);
    const [categoriesLoading, setCategoriesLoading] = useState(true);

    const form = useForm<FormData>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            name: "",
            description: "",
            category: "",
            price: undefined,
            preparationTime: undefined,
            ingredients: "",
            available: true,
            extras: [],
        },
    });

    // Fetch categories from API
    const fetchCategories = async () => {
        try {
            setCategoriesLoading(true);
            const response = await axios.get(`${MENU_CATEGORIES_ENDPOINT}?active=true`);
            
            if (response.data && response.data.data && Array.isArray(response.data.data)) {
                // Sort categories by sortOrder
                const sortedCategories = response.data.data.sort((a: MenuCategory, b: MenuCategory) => a.sortOrder - b.sortOrder);
                setCategories(sortedCategories);
            } else if (response.data && Array.isArray(response.data)) {
                const sortedCategories = response.data.sort((a: MenuCategory, b: MenuCategory) => a.sortOrder - b.sortOrder);
                setCategories(sortedCategories);
            } else {
                console.error("Unexpected API response format:", response.data);
                setCategories([]);
            }
        } catch (error) {
            console.error("Error fetching categories:", error);
            toast.error("Failed to load categories. Please create categories first.");
            setCategories([]);
        } finally {
            setCategoriesLoading(false);
        }
    };

    // Fetch categories when modal opens
    useEffect(() => {
        if (isOpen) {
            fetchCategories();
        }
    }, [isOpen]);

    useEffect(() => {
        if (!isOpen || !menuItemId) {
            return;
        }

        const fetchMenuItem = async () => {
            try {
                setIsLoading(true);
                const response = await axios.get(`${MENU_ITEMS_ENDPOINT}/${menuItemId}`);
                const menuItem: MenuItem = response.data.data;

                // Set form values
                form.reset({
                    name: menuItem.name,
                    description: menuItem.description,
                    category: menuItem.category,
                    price: menuItem.price,
                    preparationTime: menuItem.preparationTime,
                    ingredients: menuItem.ingredients,
                    available: menuItem.available,
                    extras: menuItem.extras || [],
                });

                // Set existing images
                setExistingImages(menuItem.images);
                
                // Set extras state for UI
                setExtras(menuItem.extras || []);
            } catch (error) {
                console.error("Error fetching menu item:", error);
                toast.error("Failed to load menu item data");
                onClose();
            } finally {
                setIsLoading(false);
            }
        };

        if (menuItemId) {
            fetchMenuItem();
        }
    }, [isOpen, menuItemId, form, onClose]);

    const addExtra = () => {
        if (!extraName.trim()) {
            toast.error("Extra name is required");
            return;
        }

        const priceValue = parseFloat(extraPrice);
        if (isNaN(priceValue) || priceValue < 0) {
            toast.error("Price must be a valid non-negative number");
            return;
        }

        const newExtra = { name: extraName, price: priceValue };
        const updatedExtras = [...extras, newExtra];
        setExtras(updatedExtras);
        form.setValue("extras", updatedExtras);
        
        // Reset inputs
        setExtraName("");
        setExtraPrice("");
    };

    const removeExtra = (index: number) => {
        const updatedExtras = extras.filter((_, i) => i !== index);
        setExtras(updatedExtras);
        form.setValue("extras", updatedExtras);
    };

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (!files || files.length === 0) return;

        // Store the FileList object
        setSelectedFiles(files);

        // Create preview URLs for each file
        const newPreviews: string[] = [];
        for (let i = 0; i < files.length; i++) {
            newPreviews.push(URL.createObjectURL(files[i]));
        }

        // Clear previous new preview URLs to avoid memory leaks
        previewImages.forEach(url => URL.revokeObjectURL(url));

        setPreviewImages(newPreviews);
    };

    const removeNewImage = (index: number) => {
        if (!selectedFiles) return;

        // Create a new FileList-like object without the removed image
        const dt = new DataTransfer();

        for (let i = 0; i < selectedFiles.length; i++) {
            if (i !== index) {
                dt.items.add(selectedFiles[i]);
            }
        }

        // Update selected files
        setSelectedFiles(dt.files.length > 0 ? dt.files : null);

        // Update previews
        const newPreviews = [...previewImages];
        URL.revokeObjectURL(newPreviews[index]);
        newPreviews.splice(index, 1);
        setPreviewImages(newPreviews);
    };

    const onSubmit = async (values: FormData) => {
        if (!menuItemId) return;

        try {
            setIsSubmitting(true);

            // Create a form data object to send files and other data
            const formData = new FormData();

            // Add form fields to the formData
            formData.append("name", values.name);
            formData.append("description", values.description);
            formData.append("category", values.category);
            formData.append("price", values.price.toString());
            formData.append("preparationTime", values.preparationTime.toString());
            formData.append("ingredients", values.ingredients);
            formData.append("available", values.available.toString());
            
            // Add extras as JSON string
            formData.append("extras", JSON.stringify(values.extras));

            // Add new images if any are selected
            if (selectedFiles && selectedFiles.length > 0) {
                for (let i = 0; i < selectedFiles.length; i++) {
                    formData.append("images", selectedFiles[i]);
                }
            }

            // Make PUT request with axios
            const response = await axios.put(`${MENU_ITEMS_ENDPOINT}/${menuItemId}`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            toast.success(response.data.message || "Menu item updated successfully");

            // Clean up preview URLs
            previewImages.forEach(url => URL.revokeObjectURL(url));

            // Close modal and refresh data
            onSuccess();
            onClose();
        } catch (error) {
            console.error("Error updating menu item:", error);
            if (axios.isAxiosError(error) && error.response) {
                toast.error(error.response.data.message || "Failed to update menu item");
            } else {
                toast.error("An error occurred while updating the menu item");
            }
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleClose = () => {
        // Clean up preview URLs before closing
        previewImages.forEach(url => URL.revokeObjectURL(url));
        setPreviewImages([]);
        setSelectedFiles(null);
        setExtras([]);
        setExtraName("");
        setExtraPrice("");
        form.reset();
        onClose();
    };

    return (
        <Dialog open={isOpen} onOpenChange={(open) => !open && handleClose()}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                    <DialogTitle>Edit Menu Item</DialogTitle>
                </DialogHeader>

                {isLoading ? (
                    <div className="flex items-center justify-center py-12">
                        <Loader2 className="h-8 w-8 animate-spin text-primary" />
                        <span className="ml-2">Loading menu item data...</span>
                    </div>
                ) : (
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <FormField
                                    control={form.control}
                                    name="name"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Item Name</FormLabel>
                                            <FormControl>
                                                <Input placeholder="Enter item name" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="category"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Category</FormLabel>
                                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder={categoriesLoading ? "Loading categories..." : "Select a category"} />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    {categoriesLoading ? (
                                                        <div className="flex items-center justify-center py-2">
                                                            <Loader2 className="h-4 w-4 animate-spin mr-2" />
                                                            <span className="text-sm">Loading...</span>
                                                        </div>
                                                    ) : categories.length === 0 ? (
                                                        <div className="px-2 py-2 text-sm text-muted-foreground">
                                                            No categories found. Please create categories first.
                                                        </div>
                                                    ) : (
                                                        categories.map((category) => (
                                                            <SelectItem key={category._id} value={category.name}>
                                                                {category.name}
                                                            </SelectItem>
                                                        ))
                                                    )}
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="price"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Price ($)</FormLabel>
                                            <FormControl>
                                                <Input type="number" step="0.01" placeholder="0.00" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="preparationTime"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Preparation Time (minutes)</FormLabel>
                                            <FormControl>
                                                <Input type="number" placeholder="15" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <div className="col-span-1 md:col-span-2">
                                    <FormLabel className="text-sm font-medium">Images</FormLabel>
                                    <div className="space-y-4 mt-2">
                                        {/* Existing Images */}
                                        {existingImages.length > 0 && (
                                            <div className="space-y-2">
                                                <h4 className="text-sm font-medium">Current Images</h4>
                                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                    {existingImages.map((url, index) => (
                                                        <div key={index} className="relative">
                                                            <img
                                                                src={`http://localhost:4000${url}`}
                                                                alt={`Menu item ${index}`}
                                                                className="rounded-md w-full h-24 object-cover"
                                                            />
                                                        </div>
                                                    ))}
                                                </div>
                                                <p className="text-sm text-muted-foreground">
                                                    Uploading new images will replace all current images
                                                </p>
                                            </div>
                                        )}

                                        {/* Upload new images */}
                                        <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-md p-6 cursor-pointer hover:bg-gray-50 transition-colors"
                                            onClick={() => document.getElementById('modal-image-upload')?.click()}>
                                            <Upload className="h-8 w-8 text-gray-400 mb-2" />
                                            <p className="text-sm text-gray-600">
                                                Click to upload new images or drag and drop
                                            </p>
                                            <p className="text-xs text-gray-400 mt-1">
                                                PNG, JPG, WEBP up to 5MB each
                                            </p>
                                            <Input
                                                id="modal-image-upload"
                                                type="file"
                                                multiple
                                                accept="image/*"
                                                className="hidden"
                                                onChange={handleImageChange}
                                            />
                                        </div>

                                        {/* Preview of new images */}
                                        {previewImages.length > 0 && (
                                            <div className="space-y-2">
                                                <h4 className="text-sm font-medium">New Images to Upload</h4>
                                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                    {previewImages.map((url, index) => (
                                                        <div key={index} className="relative group">
                                                            <img
                                                                src={url}
                                                                alt={`Preview ${index}`}
                                                                className="rounded-md w-full h-24 object-cover"
                                                            />
                                                            <button
                                                                type="button"
                                                                className="absolute top-1 right-1 bg-black bg-opacity-50 rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                                                                onClick={() => removeNewImage(index)}
                                                            >
                                                                <X className="h-4 w-4 text-white" />
                                                            </button>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>

                                <div className="col-span-1 md:col-span-2">
                                    <FormLabel className="text-sm font-medium">Add-ons & Extras (Optional)</FormLabel>
                                    <div className="space-y-4 mt-2 p-4 border rounded-md">
                                        <div className="text-sm text-gray-600">Add extra services with additional pricing</div>
                                        
                                        <div className="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3">
                                            <Input
                                                placeholder="Extra name"
                                                value={extraName}
                                                onChange={(e) => setExtraName(e.target.value)}
                                                className="flex-1"
                                            />
                                            <Input
                                                type="number"
                                                step="0.01"
                                                placeholder="Price ($)"
                                                value={extraPrice}
                                                onChange={(e) => setExtraPrice(e.target.value)}
                                                className="flex-1"
                                            />
                                            <Button type="button" onClick={addExtra} variant="outline">
                                                <Plus className="h-4 w-4 mr-2" /> Add Extra
                                            </Button>
                                        </div>
                                        
                                        {extras.length > 0 ? (
                                            <div className="flex flex-wrap gap-2 mt-3">
                                                {extras.map((extra, index) => (
                                                    <Badge key={index} variant="secondary" className="flex items-center gap-1 px-3 py-1">
                                                        {extra.name} (${extra.price.toFixed(2)})
                                                        <button
                                                            type="button"
                                                            onClick={() => removeExtra(index)}
                                                            className="ml-1 text-gray-500 hover:text-red-500"
                                                        >
                                                            <X className="h-3 w-3" />
                                                        </button>
                                                    </Badge>
                                                ))}
                                            </div>
                                        ) : (
                                            <div className="text-sm text-gray-500 mt-2">No extras added. Click "Add Extra" to add optional items.</div>
                                        )}
                                    </div>
                                </div>

                                <FormField
                                    control={form.control}
                                    name="ingredients"
                                    render={({ field }) => (
                                        <FormItem className="col-span-1 md:col-span-2">
                                            <FormLabel>Ingredients</FormLabel>
                                            <FormControl>
                                                <Textarea
                                                    placeholder="List the ingredients separated by commas"
                                                    className="min-h-[80px]"
                                                    {...field}
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="description"
                                    render={({ field }) => (
                                        <FormItem className="col-span-1 md:col-span-2">
                                            <FormLabel>Description</FormLabel>
                                            <FormControl>
                                                <Textarea
                                                    placeholder="Enter a detailed description of the menu item"
                                                    className="min-h-[100px]"
                                                    {...field}
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="available"
                                    render={({ field }) => (
                                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                                            <div className="space-y-0.5">
                                                <FormLabel>Available</FormLabel>
                                                <p className="text-sm text-muted-foreground">
                                                    Make this item available on the menu
                                                </p>
                                            </div>
                                            <FormControl>
                                                <Switch
                                                    checked={field.value}
                                                    onCheckedChange={field.onChange}
                                                />
                                            </FormControl>
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <DialogFooter>
                                <Button
                                    type="button"
                                    variant="outline"
                                    onClick={handleClose}
                                >
                                    Cancel
                                </Button>
                                <Button type="submit" disabled={isSubmitting}>
                                    {isSubmitting ? "Saving..." : "Save Changes"}
                                </Button>
                            </DialogFooter>
                        </form>
                    </Form>
                )}
            </DialogContent>
        </Dialog>
    );
};

export default EditMenuItemModal;
</file>

<file path="src/components/Admin/Restaurant/MenuCategoriesContent.tsx">
import React, { useState, useEffect } from "react";
import axios from "axios";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowUpDown, Plus, Edit, Trash2, Search, Loader2, Eye, EyeOff } from "lucide-react";
import { toast } from "sonner";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";

// Interface for menu categories
interface MenuCategory {
  _id: string;
  name: string;
  description: string;
  sortOrder: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

// Interface for form data
interface CategoryFormData {
  name: string;
  description: string;
  isActive: boolean;
}

const MENU_CATEGORIES_ENDPOINT = "http://localhost:4000/api/restaurant/menu-categories";

const MenuCategoriesContent: React.FC = () => {
  const [categories, setCategories] = useState<MenuCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  
  // Modal states
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<MenuCategory | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Form state
  const [formData, setFormData] = useState<CategoryFormData>({
    name: "",
    description: "",
    isActive: true
  });

  // Fetch categories from API
  const fetchCategories = async () => {
    try {
      setLoading(true);
      console.log("Fetching categories from:", MENU_CATEGORIES_ENDPOINT);
      const response = await axios.get(MENU_CATEGORIES_ENDPOINT);
      console.log("Categories API Response:", response.data);

      if (response.data && response.data.data && Array.isArray(response.data.data)) {
        setCategories(response.data.data);
      } else if (response.data && Array.isArray(response.data)) {
        setCategories(response.data);
      } else {
        console.error("Unexpected API response format:", response.data);
        setCategories([]);
      }
    } catch (error) {
      console.error("Error fetching categories:", error);
      toast.error("Failed to load categories: " + (error instanceof Error ? error.message : String(error)));
      setCategories([]);
    } finally {
      setLoading(false);
    }
  };

  // Load categories on component mount
  useEffect(() => {
    fetchCategories();
  }, []);

  // Filter categories based on search query and status
  const filteredCategories = categories.filter(category => {
    const matchesSearch = category.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          category.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === "all" || 
                          (statusFilter === "active" && category.isActive) ||
                          (statusFilter === "inactive" && !category.isActive);
    
    return matchesSearch && matchesStatus;
  });

  // Reset form data
  const resetForm = () => {
    setFormData({
      name: "",
      description: "",
      isActive: true
    });
  };

  // Handle opening add modal
  const handleAddCategory = () => {
    resetForm();
    setIsAddModalOpen(true);
  };

  // Handle opening edit modal
  const handleEditCategory = (category: MenuCategory) => {
    setSelectedCategory(category);
    setFormData({
      name: category.name,
      description: category.description,
      isActive: category.isActive
    });
    setIsEditModalOpen(true);
  };

  // Handle opening delete modal
  const handleDeleteCategory = (category: MenuCategory) => {
    setSelectedCategory(category);
    setIsDeleteModalOpen(true);
  };

  // Handle form submission for add/edit
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      toast.error("Category name is required");
      return;
    }

    try {
      setIsSubmitting(true);
      
      if (isEditModalOpen && selectedCategory) {
        // Update existing category - keep existing sort order
        const updateData = {
          ...formData,
          sortOrder: selectedCategory.sortOrder
        };
        await axios.put(`${MENU_CATEGORIES_ENDPOINT}/${selectedCategory._id}`, updateData);
        toast.success("Category updated successfully");
        setIsEditModalOpen(false);
      } else {
        // Create new category - auto-calculate sort order
        const maxSortOrder = categories.length > 0 ? Math.max(...categories.map(c => c.sortOrder)) : 0;
        const createData = {
          ...formData,
          sortOrder: maxSortOrder + 1
        };
        await axios.post(MENU_CATEGORIES_ENDPOINT, createData);
        toast.success("Category created successfully");
        setIsAddModalOpen(false);
      }
      
      // Refresh categories list
      fetchCategories();
      resetForm();
      setSelectedCategory(null);
    } catch (error) {
      console.error("Error saving category:", error);
      if (axios.isAxiosError(error) && error.response) {
        toast.error(error.response.data.message || "Failed to save category");
      } else {
        toast.error("An error occurred while saving the category");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle delete confirmation
  const handleDeleteConfirm = async () => {
    if (!selectedCategory) return;

    try {
      setIsSubmitting(true);
      await axios.delete(`${MENU_CATEGORIES_ENDPOINT}/${selectedCategory._id}`);
      toast.success("Category deleted successfully");
      setIsDeleteModalOpen(false);
      setSelectedCategory(null);
      fetchCategories();
    } catch (error) {
      console.error("Error deleting category:", error);
      if (axios.isAxiosError(error) && error.response) {
        toast.error(error.response.data.message || "Failed to delete category");
      } else {
        toast.error("An error occurred while deleting the category");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Toggle category status
  const toggleCategoryStatus = async (category: MenuCategory) => {
    try {
      const updatedData = { ...category, isActive: !category.isActive };
      await axios.put(`${MENU_CATEGORIES_ENDPOINT}/${category._id}`, {
        name: updatedData.name,
        description: updatedData.description,
        sortOrder: updatedData.sortOrder,
        isActive: updatedData.isActive
      });
      toast.success(`Category ${updatedData.isActive ? 'activated' : 'deactivated'} successfully`);
      fetchCategories();
    } catch (error) {
      console.error("Error updating category status:", error);
      toast.error("Failed to update category status");
    }
  };

  // Reset filters
  const resetFilters = () => {
    setSearchQuery("");
    setStatusFilter("all");
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold tracking-tight">Menu Categories</h2>
        <Button onClick={handleAddCategory}>
          <Plus className="mr-2 h-4 w-4" /> Add New Category
        </Button>
      </div>
      
      <div className="flex flex-wrap gap-4">
        <div className="relative flex-1 min-w-[200px]">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search categories..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8"
          />
        </div>
        
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Status</SelectItem>
            <SelectItem value="active">Active</SelectItem>
            <SelectItem value="inactive">Inactive</SelectItem>
          </SelectContent>
        </Select>

        <Button variant="outline" size="sm" onClick={resetFilters}>
          Reset Filters
        </Button>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Categories ({filteredCategories.length})</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
              <span>Loading categories...</span>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>
                    <div className="flex items-center">
                      Name
                      <ArrowUpDown className="ml-2 h-4 w-4" />
                    </div>
                  </TableHead>
                  <TableHead>Description</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Created</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredCategories.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center py-8">
                      {categories.length === 0 ? "No categories found. Add your first category!" : "No categories match your search criteria"}
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredCategories
                    .sort((a, b) => a.sortOrder - b.sortOrder)
                    .map((category) => (
                      <TableRow key={category._id}>
                        <TableCell className="font-medium">{category.name}</TableCell>
                        <TableCell className="max-w-[300px] truncate">{category.description}</TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded-full text-xs ${
                              category.isActive 
                                ? "bg-green-100 text-green-800" 
                                : "bg-red-100 text-red-800"
                            }`}>
                              {category.isActive ? "Active" : "Inactive"}
                            </span>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => toggleCategoryStatus(category)}
                              className="h-6 w-6 p-0"
                            >
                              {category.isActive ? (
                                <EyeOff className="h-3 w-3" />
                              ) : (
                                <Eye className="h-3 w-3" />
                              )}
                            </Button>
                          </div>
                        </TableCell>
                        <TableCell>
                          {new Date(category.createdAt).toLocaleDateString()}
                        </TableCell>
                        <TableCell>
                          <div className="flex space-x-2">
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => handleEditCategory(category)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="icon"
                              className="text-red-500 hover:text-red-700"
                              onClick={() => handleDeleteCategory(category)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                )}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* Add Category Modal */}
      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Add New Category</DialogTitle>
            <DialogDescription>
              Create a new menu category. Categories help organize your menu items.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleSubmit}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="name" className="text-right">
                  Name *
                </Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  className="col-span-3"
                  placeholder="e.g., Appetizers"
                  required
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="description" className="text-right">
                  Description
                </Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  className="col-span-3"
                  placeholder="Brief description of the category"
                  rows={2}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="isActive" className="text-right">
                  Active
                </Label>
                <div className="col-span-3">
                  <Switch
                    id="isActive"
                    checked={formData.isActive}
                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}
                  />
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setIsAddModalOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Creating...
                  </>
                ) : (
                  "Create Category"
                )}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Edit Category Modal */}
      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit Category</DialogTitle>
            <DialogDescription>
              Update the category information.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleSubmit}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-name" className="text-right">
                  Name *
                </Label>
                <Input
                  id="edit-name"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  className="col-span-3"
                  placeholder="e.g., Appetizers"
                  required
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-description" className="text-right">
                  Description
                </Label>
                <Textarea
                  id="edit-description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  className="col-span-3"
                  placeholder="Brief description of the category"
                  rows={2}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-isActive" className="text-right">
                  Active
                </Label>
                <div className="col-span-3">
                  <Switch
                    id="edit-isActive"
                    checked={formData.isActive}
                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}
                  />
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setIsEditModalOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Updating...
                  </>
                ) : (
                  "Update Category"
                )}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Delete Category Modal */}
      <Dialog open={isDeleteModalOpen} onOpenChange={setIsDeleteModalOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Delete Category</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete the category "{selectedCategory?.name}"? 
              This action cannot be undone and will only work if no menu items are using this category.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setIsDeleteModalOpen(false)}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button 
              variant="destructive" 
              onClick={handleDeleteConfirm}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Deleting...
                </>
              ) : (
                "Delete Category"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default MenuCategoriesContent;
</file>

<file path="src/components/Admin/Restaurant/MenuItemList.tsx">
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "sonner";

import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";
import { Edit, Trash, Plus } from "lucide-react";

// Define MenuItem interface
interface MenuItem {
    _id: string;
    name: string;
    category: string;
    price: number;
    preparationTime: number;
    available: boolean;
    images: string[];
    createdAt: string;
}

const API_URL = import.meta.env.VITE_API_URL;
const MENU_ITEMS_ENDPOINT = `${API_URL}/api/restaurant/menu-items`;

const MenuItemList = () => {
    const navigate = useNavigate();
    const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [itemToDelete, setItemToDelete] = useState<string | null>(null);

    // Fetch menu items
    const fetchMenuItems = async () => {
        try {
            setLoading(true);
            const response = await axios.get(MENU_ITEMS_ENDPOINT);
            setMenuItems(response.data.data);
        } catch (error) {
            console.error("Error fetching menu items:", error);
            toast.error("Failed to load menu items");
        } finally {
            setLoading(false);
        }
    };

    // Delete menu item
    const deleteMenuItem = async (id: string) => {
        try {
            await axios.delete(`${MENU_ITEMS_ENDPOINT}/${id}`);
            toast.success("Menu item deleted successfully");
            fetchMenuItems(); // Refresh the list
        } catch (error) {
            console.error("Error deleting menu item:", error);
            if (axios.isAxiosError(error) && error.response) {
                toast.error(error.response.data.message || "Failed to delete menu item");
            } else {
                toast.error("An error occurred while deleting the menu item");
            }
        }
    };

    // Format category for display
    const formatCategory = (category: string) => {
        return category.charAt(0).toUpperCase() + category.slice(1);
    };

    useEffect(() => {
        fetchMenuItems();
    }, []);

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h2 className="text-3xl font-bold tracking-tight">Menu Items</h2>
                <Button onClick={() => navigate("/admin/restaurant/add-menu-item")}>
                    <Plus className="mr-2 h-4 w-4" /> Add Menu Item
                </Button>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>Restaurant Menu</CardTitle>
                    <CardDescription>
                        Manage your restaurant's menu items
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    {loading ? (
                        <div className="text-center py-4">Loading menu items...</div>
                    ) : menuItems.length === 0 ? (
                        <div className="text-center py-4">No menu items found. Add your first menu item!</div>
                    ) : (
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Image</TableHead>
                                    <TableHead>Name</TableHead>
                                    <TableHead>Category</TableHead>
                                    <TableHead>Price</TableHead>
                                    <TableHead>Prep Time</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {menuItems.map((item) => (
                                    <TableRow key={item._id}>
                                        <TableCell>
                                            {item.images.length > 0 ? (
                                                <img
                                                    src={`${API_URL}${item.images[0]}`}
                                                    alt={item.name}
                                                    className="w-12 h-12 object-cover rounded-md"
                                                />
                                            ) : (
                                                <div className="w-12 h-12 bg-gray-200 rounded-md flex items-center justify-center">
                                                    No img
                                                </div>
                                            )}
                                        </TableCell>
                                        <TableCell className="font-medium">{item.name}</TableCell>
                                        <TableCell>{formatCategory(item.category)}</TableCell>
                                        <TableCell>${item.price.toFixed(2)}</TableCell>
                                        <TableCell>{item.preparationTime} mins</TableCell>
                                        <TableCell>
                                            <Badge
                                                variant={item.available ? "default" : "outline"}
                                                className={item.available ? "bg-green-500" : ""}
                                            >
                                                {item.available ? "Available" : "Unavailable"}
                                            </Badge>
                                        </TableCell>
                                        <TableCell className="text-right">
                                            <div className="flex justify-end gap-2">
                                                <Button
                                                    variant="outline"
                                                    size="icon"
                                                    onClick={() => navigate(`/admin/restaurant/edit-menu-item/${item._id}`)}
                                                >
                                                    <Edit className="h-4 w-4" />
                                                </Button>
                                                <AlertDialog>
                                                    <AlertDialogTrigger asChild>
                                                        <Button
                                                            variant="outline"
                                                            size="icon"
                                                            className="text-red-500"
                                                            onClick={() => setItemToDelete(item._id)}
                                                        >
                                                            <Trash className="h-4 w-4" />
                                                        </Button>
                                                    </AlertDialogTrigger>
                                                    <AlertDialogContent>
                                                        <AlertDialogHeader>
                                                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                                                            <AlertDialogDescription>
                                                                This action cannot be undone. This will permanently delete the menu item.
                                                            </AlertDialogDescription>
                                                        </AlertDialogHeader>
                                                        <AlertDialogFooter>
                                                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                                                            <AlertDialogAction
                                                                className="bg-red-500 hover:bg-red-600"
                                                                onClick={() => {
                                                                    if (itemToDelete) {
                                                                        deleteMenuItem(itemToDelete);
                                                                    }
                                                                }}
                                                            >
                                                                Delete
                                                            </AlertDialogAction>
                                                        </AlertDialogFooter>
                                                    </AlertDialogContent>
                                                </AlertDialog>
                                            </div>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    )}
                </CardContent>
            </Card>
        </div>
    );
};

export default MenuItemList;
</file>

<file path="src/components/Admin/Restaurant/RestaurantManagementContent.tsx">
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ArrowUpDown, Plus, Edit, Trash2, Search, Loader2, Upload, X, ImageIcon } from "lucide-react";
import { toast } from "sonner";
import { Textarea } from "@/components/ui/textarea";

// Import the new modal components
import EditMenuItemModal from "./EditMenuItemModal";
import DeleteMenuItemModal from "./DeleteMenuItemModal";

// Interface for menu items from API
interface MenuItem {
  _id: string;
  name: string;
  category: { _id: string; name: string; description: string; };
  price: number;
  preparationTime: number;
  ingredients: string;
  available: boolean;
  images: string[];
  createdAt: string;
}

// Interface for restaurant tables
interface RestaurantTable {
  _id: string;
  number: number;
  capacity: number;
  status: "available" | "occupied" | "reserved";
  reservationTime: string | null;
  customerName: string | null;
  createdAt: string;
  updatedAt: string;
}

// Interface for restaurant settings
interface RestaurantSettings {
  _id?: string;
  name: string;
  description: string;
  coverImage: string;
  headChef: string;
  cuisineType: string;
  openingHours: string;
}

// Mock data for restaurant orders
const mockOrders = [
  {
    id: "101",
    tableNumber: "12",
    items: ["Continental Breakfast", "Coffee"],
    status: "completed",
    total: 22.50,
    timestamp: "2025-04-09T08:32:00Z",
    customerName: "John Smith",
    roomNumber: "304"
  },
  {
    id: "102",
    tableNumber: "-",
    items: ["Caesar Salad", "Iced Tea"],
    status: "in-progress",
    total: 18.00,
    timestamp: "2025-04-09T12:15:00Z",
    customerName: "Jane Doe",
    roomNumber: "512"
  },
  {
    id: "103",
    tableNumber: "8",
    items: ["Filet Mignon", "Red Wine", "Chocolate Lava Cake"],
    status: "ordered",
    total: 64.50,
    timestamp: "2025-04-09T18:45:00Z",
    customerName: "Robert Johnson",
    roomNumber: "-"
  }
];

// Use hardcoded URLs to ensure they're correct
const MENU_ITEMS_ENDPOINT = "http://localhost:4000/api/restaurant/menu-items";
const TABLES_ENDPOINT = "http://localhost:4000/api/restaurant/tables";
const RESTAURANT_SETTINGS_ENDPOINT = "http://localhost:4000/api/restaurant/settings";
const MENU_CATEGORIES_ENDPOINT = "http://localhost:4000/api/restaurant/menu-categories";

const RestaurantManagementContent: React.FC = () => {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState("menu");
  const [searchQuery, setSearchQuery] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [orderStatusFilter, setOrderStatusFilter] = useState("all");

  // New filters for tables
  const [tableStatusFilter, setTableStatusFilter] = useState("all");
  const [tableCapacityFilter, setTableCapacityFilter] = useState("all");

  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [tables, setTables] = useState<RestaurantTable[]>([]);
  const [categories, setCategories] = useState<{ _id: string; name: string; }[]>([]);
  const [loading, setLoading] = useState(true);
  const [tablesLoading, setTablesLoading] = useState(true);

  // States for edit and delete modals
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [selectedMenuItem, setSelectedMenuItem] = useState<MenuItem | null>(null);

  // New states for restaurant settings
  const [restaurantSettings, setRestaurantSettings] = useState<RestaurantSettings>({
    name: "",
    description: "",
    coverImage: "",
    headChef: "",
    cuisineType: "",
    openingHours: ""
  });
  const [settingsLoading, setSettingsLoading] = useState(false);
  const [coverImagePreview, setCoverImagePreview] = useState<string>("");
  const [selectedCoverImage, setSelectedCoverImage] = useState<File | null>(null);

  console.log("API Endpoint:", MENU_ITEMS_ENDPOINT); // Log the endpoint

  // Fetch menu items from API
  const fetchMenuItems = async () => {
    try {
      setLoading(true);
      console.log("Fetching from:", MENU_ITEMS_ENDPOINT);
      const response = await axios.get(MENU_ITEMS_ENDPOINT);
      console.log("API Response:", response.data); // For debugging

      // Check the response structure and handle it accordingly
      if (response.data && Array.isArray(response.data)) {
        console.log("Menu items data:", response.data);
        setMenuItems(response.data);
      } else if (response.data && response.data.data && Array.isArray(response.data.data)) {
        console.log("Menu items data (nested):", response.data.data);
        setMenuItems(response.data.data);
      } else {
        console.error("Unexpected API response format:", response.data);
        setMenuItems([]);
      }
    } catch (error) {
      console.error("Error fetching menu items:", error);
      toast.error("Failed to load menu items: " + (error instanceof Error ? error.message : String(error)));
      setMenuItems([]);
    } finally {
      setLoading(false);
    }
  };

  // Fetch tables from API
  const fetchTables = async () => {
    try {
      setTablesLoading(true);
      console.log("Fetching tables from:", TABLES_ENDPOINT);
      const response = await axios.get(TABLES_ENDPOINT);
      console.log("Tables API Response:", response.data); // For debugging

      // Check the response structure and handle it accordingly
      if (response.data && response.data.data && Array.isArray(response.data.data)) {
        setTables(response.data.data);
      } else {
        console.error("Unexpected API response format for tables:", response.data);
        setTables([]);
      }
    } catch (error) {
      console.error("Error fetching tables:", error);
      toast.error("Failed to load tables: " + (error instanceof Error ? error.message : String(error)));
      setTables([]);
    } finally {
      setTablesLoading(false);
    }
  };

  // Fetch restaurant settings
  const fetchRestaurantSettings = async () => {
    try {
      setSettingsLoading(true);
      const response = await axios.get(RESTAURANT_SETTINGS_ENDPOINT);
      if (response.data && response.data.data) {
        setRestaurantSettings(response.data.data);
        if (response.data.data.coverImage) {
          setCoverImagePreview(`http://localhost:4000${response.data.data.coverImage}`);
        }
      }
    } catch (error) {
      console.error("Error fetching restaurant settings:", error);
      // Set default values if no settings exist
      setRestaurantSettings({
        name: "Parkside Plaza Restaurant",
        description: "Fine dining experience with contemporary international cuisine",
        coverImage: "",
        headChef: "Chef Michael Roberts",
        cuisineType: "Contemporary International",
        openingHours: "Breakfast: 6:30 AM - 10:30 AM\nLunch: 12:00 PM - 2:30 PM\nDinner: 6:00 PM - 10:30 PM"
      });
    } finally {
      setSettingsLoading(false);
    }
  };

  // Fetch categories from API
  const fetchCategories = async () => {
    try {
      const response = await axios.get(`${MENU_CATEGORIES_ENDPOINT}?active=true`);
      
      if (response.data && response.data.data && Array.isArray(response.data.data)) {
        // Sort categories by sortOrder and extract only needed fields
        const sortedCategories = response.data.data
          .sort((a: any, b: any) => a.sortOrder - b.sortOrder)
          .map((cat: any) => ({ _id: cat._id, name: cat.name }));
        setCategories(sortedCategories);
      } else if (response.data && Array.isArray(response.data)) {
        const sortedCategories = response.data
          .sort((a: any, b: any) => a.sortOrder - b.sortOrder)
          .map((cat: any) => ({ _id: cat._id, name: cat.name }));
        setCategories(sortedCategories);
      }
    } catch (error) {
      console.error("Error fetching categories:", error);
      setCategories([]);
    }
  };

  // Load menu items, tables, categories, and settings on component mount
  useEffect(() => {
    fetchMenuItems();
    fetchTables();
    fetchCategories();
    fetchRestaurantSettings();
  }, []);

  // Refetch tables when tab changes to tables
  useEffect(() => {
    if (activeTab === "tables") {
      fetchTables();
    } else if (activeTab === "settings") {
      fetchRestaurantSettings();
    }
  }, [activeTab]);

  // For testing - Add a sample menu item
  const addSampleMenuItem = async () => {
    try {
      toast.info("Adding sample menu item...");
      const sampleItem = {
        name: "Sample Menu Item",
        description: "This is a sample menu item for testing",
        category: "breakfast",
        price: 15.99,
        preparationTime: 20,
        ingredients: "Sample ingredients",
        available: true
      };

      // Try to add a sample menu item to test the API
      const response = await axios.post(MENU_ITEMS_ENDPOINT, sampleItem);
      console.log("Sample item added:", response.data);
      toast.success("Sample item added successfully!");

      // Refresh the menu items
      fetchMenuItems();
    } catch (error) {
      console.error("Error adding sample item:", error);
      toast.error("Failed to add sample item: " + (error instanceof Error ? error.message : String(error)));
    }
  };

  // Handle opening the edit modal
  const handleEditMenuItem = (menuItem: MenuItem) => {
    setSelectedMenuItem(menuItem);
    setIsEditModalOpen(true);
  };

  // Handle opening the delete modal
  const handleDeleteMenuItem = (menuItem: MenuItem) => {
    setSelectedMenuItem(menuItem);
    setIsDeleteModalOpen(true);
  };

  // Handle successful operations
  const handleSuccess = () => {
    fetchMenuItems();
  };

  // Handle table status update
  const handleUpdateTableStatus = async (tableId: string, newStatus: "available" | "occupied" | "reserved") => {
    try {
      await axios.put(`${TABLES_ENDPOINT}/status/${tableId}`, { status: newStatus });
      toast.success(`Table status updated to ${newStatus}`);
      // Refresh the tables
      fetchTables();
    } catch (error) {
      console.error("Error updating table status:", error);
      toast.error("Failed to update table status");
    }
  };

  // Filter menu items based on search query and category
  const filteredMenuItems = menuItems.filter(item => {
    const matchesSearch =
      item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      item.ingredients.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesCategory = categoryFilter === "all" || item.category.name === categoryFilter;
    
    return matchesSearch && matchesCategory;
  });

  // Filter orders based on search query and status
  const filteredOrders = mockOrders.filter(order => {
    const matchesSearch = order.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          order.items.some(item => item.toLowerCase().includes(searchQuery.toLowerCase())) ||
                          order.id.includes(searchQuery);
    const matchesStatus = orderStatusFilter === "all" || order.status === orderStatusFilter;
    
    return matchesSearch && matchesStatus;
  });

  // Filter tables based on search query, status, and capacity
  const filteredTables = tables.filter(table => {
    // Search by table number
    const matchesSearch =
      searchQuery === "" ||
      table.number.toString().includes(searchQuery) ||
      (table.customerName && table.customerName.toLowerCase().includes(searchQuery.toLowerCase()));

    // Filter by status
    const matchesStatus = tableStatusFilter === "all" || table.status === tableStatusFilter;

    // Filter by capacity
    const matchesCapacity = tableCapacityFilter === "all" ||
      (tableCapacityFilter === "1-2" && table.capacity >= 1 && table.capacity <= 2) ||
      (tableCapacityFilter === "3-4" && table.capacity >= 3 && table.capacity <= 4) ||
      (tableCapacityFilter === "5-6" && table.capacity >= 5 && table.capacity <= 6) ||
      (tableCapacityFilter === "7+" && table.capacity >= 7);

    return matchesSearch && matchesStatus && matchesCapacity;
  });

  const handleAddMenuItem = () => {
    navigate("/admin/restaurant/add-item");
  };

  const handleUpdateOrderStatus = (id: string, newStatus: string) => {
    toast.success(`Order ${id} status updated to ${newStatus}`);
  };

  // Get human-readable time from timestamp
  const getTimeFromTimestamp = (timestamp: string | null) => {
    if (!timestamp) return "N/A";
    return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  // Reset all filters
  const resetFilters = () => {
    setSearchQuery("");
    if (activeTab === "menu") {
      setCategoryFilter("all");
    } else if (activeTab === "orders") {
      setOrderStatusFilter("all");
    } else if (activeTab === "tables") {
      setTableStatusFilter("all");
      setTableCapacityFilter("all");
    }
  };

  // Handle cover image upload
  const handleCoverImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      toast.error('Please select a valid image file');
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast.error('Image size should be less than 5MB');
      return;
    }

    setSelectedCoverImage(file);
    setCoverImagePreview(URL.createObjectURL(file));
  };

  // Remove cover image
  const removeCoverImage = () => {
    setSelectedCoverImage(null);
    setCoverImagePreview("");
    setRestaurantSettings(prev => ({ ...prev, coverImage: "" }));
  };

  // Save restaurant settings
  const saveRestaurantSettings = async () => {
    try {
      setSettingsLoading(true);

      const formData = new FormData();
      formData.append("name", restaurantSettings.name);
      formData.append("description", restaurantSettings.description);
      formData.append("headChef", restaurantSettings.headChef);
      formData.append("cuisineType", restaurantSettings.cuisineType);
      formData.append("openingHours", restaurantSettings.openingHours);

      if (selectedCoverImage) {
        formData.append("coverImage", selectedCoverImage);
      }

      const response = await axios.post(RESTAURANT_SETTINGS_ENDPOINT, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      toast.success("Restaurant settings updated successfully");
      
      // Update local state with response data
      if (response.data && response.data.data) {
        setRestaurantSettings(response.data.data);
        if (response.data.data.coverImage) {
          setCoverImagePreview(`http://localhost:4000${response.data.data.coverImage}`);
        }
      }
      
      setSelectedCoverImage(null);
    } catch (error) {
      console.error("Error saving restaurant settings:", error);
      if (axios.isAxiosError(error) && error.response) {
        toast.error(error.response.data.message || "Failed to save restaurant settings");
      } else {
        toast.error("An error occurred while saving restaurant settings");
      }
    } finally {
      setSettingsLoading(false);
    }
  };

  // Add early return for debugging
  console.log("RestaurantManagementContent: Rendering, activeTab:", activeTab);

  // Temporary test render
  if (process.env.NODE_ENV === 'development') {
    console.log("Development mode - rendering basic component");
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold tracking-tight">Restaurant Management</h2>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => navigate("/admin/restaurant/categories")}>
            Manage Categories
          </Button>
          <Button onClick={handleAddMenuItem}>
            <Plus className="mr-2 h-4 w-4" /> Add New Item
          </Button>
        </div>
      </div>
      
      <Tabs defaultValue="menu" value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="menu">Menu Items</TabsTrigger>
          <TabsTrigger value="orders">Orders</TabsTrigger>
          <TabsTrigger value="tables">Tables</TabsTrigger>
          <TabsTrigger value="settings">Settings</TabsTrigger>
        </TabsList>
        
        <div className="my-4 flex flex-wrap gap-4">
          <div className="relative flex-1 min-w-[200px]">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder={activeTab === "tables" ? "Search by table number..." : "Search..."}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-8"
            />
          </div>
          
          {activeTab === "menu" && (
            <Select value={categoryFilter} onValueChange={setCategoryFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                {categories.map((category) => (
                  <SelectItem key={category._id} value={category.name}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}
          
          {activeTab === "orders" && (
            <Select value={orderStatusFilter} onValueChange={setOrderStatusFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="ordered">Ordered</SelectItem>
                <SelectItem value="in-progress">In Progress</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="cancelled">Cancelled</SelectItem>
              </SelectContent>
            </Select>
          )}

          {activeTab === "tables" && (
            <>
              <Select value={tableStatusFilter} onValueChange={setTableStatusFilter}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Statuses</SelectItem>
                  <SelectItem value="available">Available</SelectItem>
                  <SelectItem value="reserved">Reserved</SelectItem>
                  <SelectItem value="occupied">Occupied</SelectItem>
                </SelectContent>
              </Select>

              <Select value={tableCapacityFilter} onValueChange={setTableCapacityFilter}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Capacity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Capacities</SelectItem>
                  <SelectItem value="1-2">1-2 Seats</SelectItem>
                  <SelectItem value="3-4">3-4 Seats</SelectItem>
                  <SelectItem value="5-6">5-6 Seats</SelectItem>
                  <SelectItem value="7+">7+ Seats</SelectItem>
                </SelectContent>
              </Select>

              <Button variant="outline" size="sm" onClick={resetFilters}>
                Reset Filters
              </Button>
            </>
          )}
        </div>
        
        <TabsContent value="menu">
          <Card>
            <CardHeader>
              <CardTitle>Menu Items</CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
                  <span>Loading menu items...</span>
                </div>
              ) : (
                <>
                  {/* Debug section - Remove in production */}
                  {menuItems.length === 0 && (
                    <div className="mb-4 p-4 border border-yellow-300 bg-yellow-50 rounded-md">
                      <p className="mb-2">No menu items found. This could be because:</p>
                      <ol className="list-decimal ml-5 mb-3">
                        <li>You haven't added any menu items yet</li>
                        <li>There's an issue connecting to the API ({MENU_ITEMS_ENDPOINT})</li>
                        <li>The API is returning data in an unexpected format</li>
                      </ol>
                      <Button onClick={addSampleMenuItem} variant="outline" className="mr-2">
                        Add Sample Item (Debug)
                      </Button>
                      <Button onClick={() => window.location.reload()} variant="outline">
                        Refresh Page
                      </Button>
                    </div>
                  )}

                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Image</TableHead>
                        <TableHead>
                          <div className="flex items-center">
                            Name
                            <ArrowUpDown className="ml-2 h-4 w-4" />
                          </div>
                        </TableHead>
                        <TableHead>Category</TableHead>
                        <TableHead>Price</TableHead>
                        <TableHead>Preparation Time</TableHead>
                        <TableHead>Available</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredMenuItems.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={7} className="text-center">No menu items found</TableCell>
                        </TableRow>
                      ) : (
                        filteredMenuItems.map((item) => (
                          <TableRow key={item._id}>
                            <TableCell>
                              <div className="w-12 h-12 rounded-md overflow-hidden">
                                {item.images && item.images.length > 0 ? (
                                  <img
                                    src={`http://localhost:4000${item.images[0]}`}
                                    alt={item.name}
                                    className="w-full h-full object-cover"
                                    onError={(e) => {
                                      console.error("Image failed to load:", item.images[0]);
                                      e.currentTarget.onerror = null;
                                      e.currentTarget.src = 'https://via.placeholder.com/100?text=No+Image';
                                    }}
                                  />
                                ) : (
                                  <div className="w-full h-full bg-gray-200 flex items-center justify-center text-xs">
                                    No Image
                                  </div>
                                )}
                              </div>
                            </TableCell>
                            <TableCell className="font-medium">{item.name}</TableCell>
                            <TableCell className="capitalize">{item.category.name}</TableCell>
                            <TableCell>${item.price.toFixed(2)}</TableCell>
                            <TableCell>{item.preparationTime} min</TableCell>
                            <TableCell>
                              <span className={`px-2 py-1 rounded-full text-xs ${item.available ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}>
                                {item.available ? "Yes" : "No"}
                              </span>
                            </TableCell>
                            <TableCell>
                              <div className="flex space-x-2">
                                <Button
                                  variant="outline"
                                  size="icon"
                                  onClick={() => handleEditMenuItem(item)}
                                >
                                  <Edit className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="outline"
                                  size="icon"
                                  className="text-red-500"
                                  onClick={() => handleDeleteMenuItem(item)}
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="orders">
          <Card>
            <CardHeader>
              <CardTitle>Recent Orders</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Order ID</TableHead>
                    <TableHead>Customer</TableHead>
                    <TableHead>Room / Table</TableHead>
                    <TableHead>Items</TableHead>
                    <TableHead>Total</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Time</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredOrders.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} className="text-center">No orders found</TableCell>
                    </TableRow>
                  ) : (
                    filteredOrders.map((order) => (
                      <TableRow key={order.id}>
                        <TableCell>#{order.id}</TableCell>
                        <TableCell className="font-medium">{order.customerName}</TableCell>
                        <TableCell>
                          {order.roomNumber !== "-" ? (
                            <span>Room {order.roomNumber}</span>
                          ) : (
                            <span>Table {order.tableNumber}</span>
                          )}
                        </TableCell>
                        <TableCell>
                          <div className="max-w-[200px] truncate">
                            {order.items.join(", ")}
                          </div>
                        </TableCell>
                        <TableCell>${order.total.toFixed(2)}</TableCell>
                        <TableCell>
                          <span className={`px-2 py-1 rounded-full text-xs ${order.status === "completed" ? "bg-green-100 text-green-800" :
                            order.status === "in-progress" ? "bg-blue-100 text-blue-800" :
                            order.status === "ordered" ? "bg-yellow-100 text-yellow-800" :
                            "bg-red-100 text-red-800"}`}>
                            {order.status === "in-progress" ? "In Progress" : 
                             order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                          </span>
                        </TableCell>
                        <TableCell>
                          {new Date(order.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </TableCell>
                        <TableCell>
                          <Select 
                            defaultValue={order.status}
                            onValueChange={(value) => handleUpdateOrderStatus(order.id, value)}
                          >
                            <SelectTrigger className="w-[120px]">
                              <SelectValue placeholder="Update" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="ordered">Ordered</SelectItem>
                              <SelectItem value="in-progress">In Progress</SelectItem>
                              <SelectItem value="completed">Completed</SelectItem>
                              <SelectItem value="cancelled">Cancelled</SelectItem>
                            </SelectContent>
                          </Select>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="tables">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Restaurant Tables</CardTitle>
              <div className="text-sm text-muted-foreground">
                {filteredTables.length} tables found
              </div>
            </CardHeader>
            <CardContent>
              {tablesLoading ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
                  <span>Loading tables...</span>
                </div>
              ) : tables.length === 0 ? (
                <div className="mb-4 p-4 border border-yellow-300 bg-yellow-50 rounded-md">
                  <p className="mb-2">No restaurant tables found. This could be because:</p>
                  <ol className="list-decimal ml-5 mb-3">
                    <li>You haven't added any tables yet</li>
                    <li>There's an issue connecting to the API ({TABLES_ENDPOINT})</li>
                    <li>The API is returning data in an unexpected format</li>
                  </ol>
                  <Button onClick={fetchTables} variant="outline">
                    Refresh Tables
                  </Button>
                </div>
              ) : filteredTables.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-muted-foreground mb-4">No tables match your search criteria</p>
                  <Button variant="outline" onClick={resetFilters}>
                    Reset Filters
                  </Button>
                </div>
              ) : (
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {filteredTables.map((table) => (
                    <Card
                      key={table._id}
                      className={
                        table.status === "occupied" ? "bg-green-50" :
                          table.status === "reserved" ? "bg-yellow-50" :
                            "bg-white"
                      }
                    >
                      <CardContent className="flex flex-col items-center justify-center p-6">
                        <div className={`w-16 h-16 rounded-full flex items-center justify-center ${table.status === "occupied" ? "bg-green-100 text-green-800" :
                          table.status === "reserved" ? "bg-yellow-100 text-yellow-800" :
                            "bg-gray-100 text-gray-800"}`}>
                          {table.number}
                        </div>
                        <p className="mt-2 font-medium">Table {table.number}</p>
                        <p className="text-sm text-gray-500 capitalize">
                          {table.status}
                        </p>
                        <p className="text-xs text-gray-400">
                          {table.status === "available" ?
                            `${table.capacity} Seats` :
                            table.status === "reserved" ?
                              `Reserved for ${table.reservationTime}` :
                              `${table.customerName || 'Customer'} since ${getTimeFromTimestamp(table.updatedAt)}`
                          }
                        </p>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="settings">
          <Card>
            <CardHeader>
              <CardTitle>Restaurant Settings</CardTitle>
            </CardHeader>
            <CardContent>
              {settingsLoading ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
                  <span>Loading restaurant settings...</span>
                </div>
              ) : (
                <div className="space-y-6">
                  {/* Cover Image Section */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Restaurant Cover Image</h3>
                    
                    {/* Current cover image */}
                    {coverImagePreview ? (
                      <div className="relative">
                        <img
                          src={coverImagePreview}
                          alt="Restaurant cover"
                          className="w-full h-64 object-cover rounded-lg"
                        />
                        <Button
                          type="button"
                          variant="destructive"
                          size="sm"
                          className="absolute top-2 right-2"
                          onClick={removeCoverImage}
                        >
                          <X className="h-4 w-4 mr-1" />
                          Remove
                        </Button>
                      </div>
                    ) : (
                      <div 
                        className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 transition-colors"
                        onClick={() => document.getElementById('cover-image-upload')?.click()}
                      >
                        <ImageIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-lg font-medium text-gray-700 mb-2">Upload Restaurant Cover Image</p>
                        <p className="text-sm text-gray-500">Click to upload or drag and drop</p>
                        <p className="text-xs text-gray-400 mt-1">PNG, JPG, WEBP up to 5MB</p>
                      </div>
                    )}
                    
                    <input
                      id="cover-image-upload"
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={handleCoverImageChange}
                    />
                  </div>

                  {/* Restaurant Information */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Restaurant Name</label>
                      <Input
                        value={restaurantSettings.name}
                        onChange={(e) => setRestaurantSettings(prev => ({ ...prev, name: e.target.value }))}
                        placeholder="Restaurant name"
                      />
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium">Head Chef</label>
                      <Input
                        value={restaurantSettings.headChef}
                        onChange={(e) => setRestaurantSettings(prev => ({ ...prev, headChef: e.target.value }))}
                        placeholder="Chef name"
                      />
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium">Cuisine Type</label>
                      <Input
                        value={restaurantSettings.cuisineType}
                        onChange={(e) => setRestaurantSettings(prev => ({ ...prev, cuisineType: e.target.value }))}
                        placeholder="e.g., Contemporary International"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium">Description</label>
                    <Textarea
                      value={restaurantSettings.description}
                      onChange={(e) => setRestaurantSettings(prev => ({ ...prev, description: e.target.value }))}
                      placeholder="Restaurant description"
                      rows={3}
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium">Opening Hours</label>
                    <Textarea
                      value={restaurantSettings.openingHours}
                      onChange={(e) => setRestaurantSettings(prev => ({ ...prev, openingHours: e.target.value }))}
                      placeholder="Opening hours"
                      rows={4}
                    />
                  </div>

                  <div className="flex justify-end pt-4">
                    <Button onClick={saveRestaurantSettings} disabled={settingsLoading}>
                      {settingsLoading ? (
                        <>
                          <Loader2 className="h-4 w-4 animate-spin mr-2" />
                          Saving...
                        </>
                      ) : (
                        "Save Settings"
                      )}
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Edit Modal */}
      {selectedMenuItem && (
        <EditMenuItemModal
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          menuItemId={selectedMenuItem._id}
          onSuccess={handleSuccess}
        />
      )}

      {/* Delete Modal */}
      {selectedMenuItem && (
        <DeleteMenuItemModal
          isOpen={isDeleteModalOpen}
          onClose={() => setIsDeleteModalOpen(false)}
          menuItemId={selectedMenuItem._id}
          menuItemName={selectedMenuItem.name}
          onSuccess={handleSuccess}
        />
      )}
    </div>
  );
};

export default RestaurantManagementContent;
</file>

<file path="src/components/Admin/Restaurant/RestaurantOrdersContent.tsx">
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Search } from "lucide-react";
import { toast } from "sonner";
import { Badge } from "@/components/ui/badge";

// Mock data for restaurant orders
const mockOrders = [
  {
    id: "101",
    tableNumber: "12",
    items: ["Continental Breakfast", "Coffee"],
    status: "completed",
    total: 22.50,
    timestamp: "2025-04-09T08:32:00Z",
    customerName: "John Smith",
    roomNumber: "304"
  },
  {
    id: "102",
    tableNumber: "-",
    items: ["Caesar Salad", "Iced Tea"],
    status: "in-progress",
    total: 18.00,
    timestamp: "2025-04-09T12:15:00Z",
    customerName: "Jane Doe",
    roomNumber: "512"
  },
  {
    id: "103",
    tableNumber: "8",
    items: ["Filet Mignon", "Red Wine", "Chocolate Lava Cake"],
    status: "ordered",
    total: 64.50,
    timestamp: "2025-04-09T18:45:00Z",
    customerName: "Robert Johnson",
    roomNumber: "-"
  },
  {
    id: "104",
    tableNumber: "5",
    items: ["Club Sandwich", "French Fries", "Coke"],
    status: "ordered",
    total: 24.50,
    timestamp: "2025-04-09T13:10:00Z",
    customerName: "Emma Wilson",
    roomNumber: "201"
  },
  {
    id: "105",
    tableNumber: "3",
    items: ["Pasta Primavera", "Garlic Bread", "Sparkling Water"],
    status: "in-progress",
    total: 28.75,
    timestamp: "2025-04-09T19:20:00Z",
    customerName: "Michael Brown",
    roomNumber: "-"
  },
  {
    id: "106",
    tableNumber: "-",
    items: ["Grilled Salmon", "House Salad", "White Wine"],
    status: "completed",
    total: 42.00,
    timestamp: "2025-04-09T20:05:00Z",
    customerName: "Sarah Davis",
    roomNumber: "405"
  },
  {
    id: "107",
    tableNumber: "-",
    items: ["New York Cheesecake", "Coffee"],
    status: "cancelled",
    total: 16.50,
    timestamp: "2025-04-09T21:30:00Z",
    customerName: "David Miller",
    roomNumber: "610"
  }
];

const RestaurantOrdersContent: React.FC = () => {
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState("");
  const [orderStatusFilter, setOrderStatusFilter] = useState("all");

  const filteredOrders = mockOrders.filter(order => {
    const matchesSearch = order.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          order.items.some(item => item.toLowerCase().includes(searchQuery.toLowerCase())) ||
                          order.id.includes(searchQuery);
    const matchesStatus = orderStatusFilter === "all" || order.status === orderStatusFilter;
    
    return matchesSearch && matchesStatus;
  });

  const handleUpdateOrderStatus = (id: string, newStatus: string) => {
    toast.success(`Order ${id} status updated to ${newStatus}`);
  };

  const getStatusBadge = (status: string) => {
    switch(status) {
      case "completed":
        return <Badge className="bg-green-500">Completed</Badge>;
      case "in-progress":
        return <Badge className="bg-blue-500">In Progress</Badge>;
      case "ordered":
        return <Badge className="bg-yellow-500">Ordered</Badge>;
      case "cancelled":
        return <Badge className="bg-red-500">Cancelled</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold tracking-tight">Restaurant Orders</h2>
        <Button onClick={() => navigate("/admin/restaurant")}>
          Back to Menu Items
        </Button>
      </div>
      
      <div className="my-4 flex gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search by customer, order ID or item..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8"
          />
        </div>
        
        <Select value={orderStatusFilter} onValueChange={setOrderStatusFilter}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Statuses</SelectItem>
            <SelectItem value="ordered">Ordered</SelectItem>
            <SelectItem value="in-progress">In Progress</SelectItem>
            <SelectItem value="completed">Completed</SelectItem>
            <SelectItem value="cancelled">Cancelled</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>All Orders</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Order ID</TableHead>
                <TableHead>Customer</TableHead>
                <TableHead>Room / Table</TableHead>
                <TableHead>Items</TableHead>
                <TableHead>Total</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Time</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredOrders.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={8} className="text-center">No orders found</TableCell>
                </TableRow>
              ) : (
                filteredOrders.map((order) => (
                  <TableRow key={order.id}>
                    <TableCell>#{order.id}</TableCell>
                    <TableCell className="font-medium">{order.customerName}</TableCell>
                    <TableCell>
                      {order.roomNumber !== "-" ? (
                        <span>Room {order.roomNumber}</span>
                      ) : (
                        <span>Table {order.tableNumber}</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <div className="max-w-[200px] truncate">
                        {order.items.join(", ")}
                      </div>
                    </TableCell>
                    <TableCell>${order.total.toFixed(2)}</TableCell>
                    <TableCell>
                      {getStatusBadge(order.status)}
                    </TableCell>
                    <TableCell>
                      {new Date(order.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </TableCell>
                    <TableCell>
                      <Select 
                        defaultValue={order.status}
                        onValueChange={(value) => handleUpdateOrderStatus(order.id, value)}
                      >
                        <SelectTrigger className="w-[120px]">
                          <SelectValue placeholder="Update" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="ordered">Ordered</SelectItem>
                          <SelectItem value="in-progress">In Progress</SelectItem>
                          <SelectItem value="completed">Completed</SelectItem>
                          <SelectItem value="cancelled">Cancelled</SelectItem>
                        </SelectContent>
                      </Select>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
};

export default RestaurantOrdersContent;
</file>

<file path="src/components/Admin/Restaurant/RestaurantReportsContent.tsx">
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { ResponsiveContainer, LineChart, Line, BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from "recharts";
import { Download, Calendar, ChartBar, ChartPie, Filter, FileText, Printer } from "lucide-react";

const RestaurantReportsContent = () => {
  const [timePeriod, setTimePeriod] = useState("month");
  const [filterType, setFilterType] = useState("all");
  
  // Mock data for reports
  const salesData = [
    { month: "Jan", revenue: 14500 },
    { month: "Feb", revenue: 16200 },
    { month: "Mar", revenue: 18900 },
    { month: "Apr", revenue: 21000 },
    { month: "May", revenue: 19500 },
    { month: "Jun", revenue: 22800 },
    { month: "Jul", revenue: 24100 },
    { month: "Aug", revenue: 26300 },
    { month: "Sep", revenue: 23800 },
    { month: "Oct", revenue: 25600 },
    { month: "Nov", revenue: 27400 },
    { month: "Dec", revenue: 32500 },
  ];
  
  const categoryData = [
    { name: "Appetizers", value: 25, fill: "#3b82f6" },
    { name: "Main Course", value: 40, fill: "#10b981" },
    { name: "Desserts", value: 15, fill: "#f59e0b" },
    { name: "Beverages", value: 20, fill: "#6366f1" },
  ];
  
  const topSellingItems = [
    { id: 1, name: "Wagyu Beef Steak", category: "Main Course", quantity: 280, revenue: 16800 },
    { id: 2, name: "Truffle Risotto", category: "Main Course", quantity: 245, revenue: 9800 },
    { id: 3, name: "Chocolate Soufflé", category: "Desserts", quantity: 210, revenue: 4200 },
    { id: 4, name: "Signature Cocktail", category: "Beverages", quantity: 195, revenue: 3900 },
    { id: 5, name: "Lobster Bisque", category: "Appetizers", quantity: 185, revenue: 5550 },
  ];
  
  const hourlyData = [
    { hour: "12 PM", orders: 15 },
    { hour: "1 PM", orders: 28 },
    { hour: "2 PM", orders: 22 },
    { hour: "3 PM", orders: 12 },
    { hour: "4 PM", orders: 8 },
    { hour: "5 PM", orders: 14 },
    { hour: "6 PM", orders: 32 },
    { hour: "7 PM", orders: 45 },
    { hour: "8 PM", orders: 52 },
    { hour: "9 PM", orders: 38 },
    { hour: "10 PM", orders: 25 },
    { hour: "11 PM", orders: 12 },
  ];
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-2">
          <ChartBar className="h-5 w-5 text-hotel-primary" />
          <h2 className="text-xl font-semibold">Restaurant Performance Analytics</h2>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" className="flex items-center gap-2">
            <Printer className="h-4 w-4" /> Print
          </Button>
          <Button className="flex items-center gap-2">
            <Download className="h-4 w-4" /> Export
          </Button>
        </div>
      </div>
      
      <div className="flex flex-col sm:flex-row gap-4 items-center">
        <div className="flex items-center gap-2">
          <Calendar className="h-4 w-4 text-gray-500" />
          <span>Time Period:</span>
        </div>
        <Select value={timePeriod} onValueChange={setTimePeriod}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select period" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="week">This Week</SelectItem>
            <SelectItem value="month">This Month</SelectItem>
            <SelectItem value="quarter">This Quarter</SelectItem>
            <SelectItem value="year">This Year</SelectItem>
          </SelectContent>
        </Select>
        
        <div className="flex items-center gap-2 ml-4">
          <Filter className="h-4 w-4 text-gray-500" />
          <span>Category:</span>
        </div>
        <Select value={filterType} onValueChange={setFilterType}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Items</SelectItem>
            <SelectItem value="appetizers">Appetizers</SelectItem>
            <SelectItem value="mains">Main Course</SelectItem>
            <SelectItem value="desserts">Desserts</SelectItem>
            <SelectItem value="beverages">Beverages</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Total Revenue</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">$78,650</div>
            <p className="text-sm text-green-600">+8% from last month</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Orders Processed</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">1,245</div>
            <p className="text-sm text-green-600">+12% from last month</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Average Order Value</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">$63.17</div>
            <p className="text-sm text-red-600">-2% from last month</p>
          </CardContent>
        </Card>
      </div>
      
      <Tabs defaultValue="overview">
        <TabsList className="grid w-full grid-cols-4 md:w-auto md:inline-flex">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="items">Top Items</TabsTrigger>
          <TabsTrigger value="hourly">Hourly Analysis</TabsTrigger>
          <TabsTrigger value="categories">Categories</TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Monthly Revenue</CardTitle>
            </CardHeader>
            <CardContent className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={salesData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="revenue" stroke="#3b82f6" activeDot={{ r: 8 }} />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="items" className="mt-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Top Selling Items</CardTitle>
              <FileText className="h-5 w-5 text-gray-500" />
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Item Name</TableHead>
                      <TableHead>Category</TableHead>
                      <TableHead>Quantity Sold</TableHead>
                      <TableHead>Revenue</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {topSellingItems.map((item) => (
                      <TableRow key={item.id}>
                        <TableCell className="font-medium">{item.name}</TableCell>
                        <TableCell>{item.category}</TableCell>
                        <TableCell>{item.quantity}</TableCell>
                        <TableCell>${item.revenue.toLocaleString()}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="hourly" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Orders by Hour</CardTitle>
            </CardHeader>
            <CardContent className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={hourlyData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="hour" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="orders" fill="#6366f1" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="categories" className="mt-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Sales by Category</CardTitle>
              <ChartPie className="h-5 w-5 text-gray-500" />
            </CardHeader>
            <CardContent className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={categoryData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    outerRadius={150}
                    fill="#8884d8"
                    dataKey="value"
                    nameKey="name"
                    label={({name, percent}) => `${name} ${(percent * 100).toFixed(0)}%`}
                  />
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default RestaurantReportsContent;
</file>

<file path="src/components/Admin/Restaurant/RestaurantTablesContent.tsx">
import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Search, Plus, Users, Loader2 } from "lucide-react";
import { toast } from "sonner";
import axios from "axios";

// Define the Table interface
interface Table {
  _id: string;
  number: number;
  capacity: number;
  status: "available" | "occupied" | "reserved";
  reservationTime: string | null;
  customerName: string | null;
}

const API_URL = "http://localhost:4000/api/restaurant/tables";

const RestaurantTablesContent: React.FC = () => {
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [tables, setTables] = useState<Table[]>([]);
  const [loading, setLoading] = useState(true);
  const [newTableNumber, setNewTableNumber] = useState<number | undefined>(undefined);
  const [newTableCapacity, setNewTableCapacity] = useState<number>(4);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [assignDialogOpen, setAssignDialogOpen] = useState(false);
  const [selectedTable, setSelectedTable] = useState<Table | null>(null);
  const [customerName, setCustomerName] = useState("");
  const [reservationTime, setReservationTime] = useState("");
  const [assignStatus, setAssignStatus] = useState<"occupied" | "reserved">("occupied");

  // Fetch all tables when component mounts
  useEffect(() => {
    fetchTables();
  }, []);

  // Fetch tables from API
  const fetchTables = async () => {
    try {
      setLoading(true);
      const response = await axios.get(API_URL);

      if (response.data.success) {
        setTables(response.data.data);
      } else {
        toast.error("Failed to fetch tables");
      }
    } catch (error) {
      console.error("Error fetching tables:", error);
      toast.error("Failed to connect to server");
    } finally {
      setLoading(false);
    }
  };

  const filteredTables = tables.filter(table => {
    // Search by table number, capacity, or customer name
    const searchLower = searchQuery.toLowerCase();
    const matchesSearch = searchQuery === "" ||
      table.number.toString().includes(searchQuery) ||
      table.capacity.toString().includes(searchQuery) ||
      (table.customerName && table.customerName.toLowerCase().includes(searchLower));

    // Filter by status
    const matchesStatus = statusFilter === "all" || table.status === statusFilter;

    return matchesSearch && matchesStatus;
  });

  const handleAddTable = async () => {
    if (!newTableNumber) {
      toast.error("Please enter a table number");
      return;
    }

    if (tables.some(table => table.number === newTableNumber)) {
      toast.error("A table with this number already exists");
      return;
    }

    try {
      console.log("Sending new table data:", { number: newTableNumber, capacity: newTableCapacity });

      const response = await axios.post(API_URL, {
      number: newTableNumber,
        capacity: newTableCapacity
      });

      console.log("Server response:", response.data);

      if (response.data.success) {
        setTables([...tables, response.data.data]);
    setNewTableNumber(undefined);
    setNewTableCapacity(4);
        setDialogOpen(false); // Close the dialog after successful addition
    toast.success(`Table ${newTableNumber} has been added`);
      } else {
        toast.error(response.data.message || "Failed to add table");
      }
    } catch (error: any) {
      console.error("Error adding table:", error);
      toast.error(error.response?.data?.message || "Failed to connect to server");
    }
  };

  const handleUpdateTableStatus = async (id: string, status: string, customerName?: string, reservationTime?: string) => {
    try {
      const updateData = {
          status,
        customerName,
        reservationTime
      };

      console.log("Sending table status update:", updateData);

      const response = await axios.put(`${API_URL}/status/${id}`, updateData);

      console.log("Server response:", response.data);

      if (response.data.success) {
        const updatedTables = tables.map(table =>
          table._id === id ? response.data.data : table
        );
        setTables(updatedTables);
        toast.success(`Table ${tables.find(t => t._id === id)?.number} status updated to ${status}`);
      } else {
        toast.error(response.data.message || "Failed to update table status");
      }
    } catch (error: any) {
      console.error("Error updating table status:", error);
      toast.error(error.response?.data?.message || "Failed to connect to server");
    }
  };

  const openAssignDialog = (table: Table) => {
    setSelectedTable(table);
    setCustomerName("");
    setReservationTime("");
    setAssignStatus("occupied");
    setAssignDialogOpen(true);
  };

  const handleAssignCustomer = async () => {
    if (!selectedTable) return;

    if (!customerName) {
      toast.error("Please enter a customer name");
      return;
    }

    if (!reservationTime) {
      toast.error("Please enter a reservation time");
      return;
    }

    await handleUpdateTableStatus(
      selectedTable._id,
      assignStatus,
      customerName,
      reservationTime
    );

    setAssignDialogOpen(false);
  };

  const handleDeleteTable = async (id: string) => {
    if (!confirm("Are you sure you want to delete this table?")) return;

    try {
      console.log("Deleting table with ID:", id);

      const response = await axios.delete(`${API_URL}/${id}`);

      console.log("Server response:", response.data);

      if (response.data.success) {
        setTables(tables.filter(table => table._id !== id));
        toast.success("Table deleted successfully");
      } else {
        toast.error(response.data.message || "Failed to delete table");
      }
    } catch (error: any) {
      console.error("Error deleting table:", error);
      toast.error(error.response?.data?.message || "Failed to connect to server");
    }
  };

  const getTableStatusColor = (status: string) => {
    switch (status) {
      case "available":
        return "bg-green-50 border-green-200";
      case "occupied":
        return "bg-red-50 border-red-200";
      case "reserved":
        return "bg-yellow-50 border-yellow-200";
      default:
        return "bg-white border-gray-200";
    }
  };

  const getTableStatusBadge = (status: string) => {
    switch (status) {
      case "available":
        return "bg-green-100 text-green-800";
      case "occupied":
        return "bg-red-100 text-red-800";
      case "reserved":
        return "bg-yellow-100 text-yellow-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold tracking-tight">Restaurant Tables</h2>
        <div className="flex gap-2">
          <Button onClick={() => navigate("/admin/restaurant")}>
            Back to Menu Items
          </Button>

          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="mr-2 h-4 w-4" /> Add New Table
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Add New Table</DialogTitle>
                <DialogDescription>
                  Add a new table to the restaurant layout.
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="table-number" className="col-span-1">
                    Table Number
                  </Label>
                  <Input
                    id="table-number"
                    type="number"
                    min="1"
                    value={newTableNumber || ""}
                    onChange={(e) => setNewTableNumber(parseInt(e.target.value) || undefined)}
                    className="col-span-3"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="table-capacity" className="col-span-1">
                    Capacity
                  </Label>
                  <Input
                    id="table-capacity"
                    type="number"
                    min="1"
                    max="20"
                    value={newTableCapacity}
                    onChange={(e) => setNewTableCapacity(parseInt(e.target.value) || 4)}
                    className="col-span-3"
                  />
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setDialogOpen(false)}>
                  Cancel
                </Button>
                <Button onClick={handleAddTable}>Add Table</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <div className="my-4 flex gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search by table number, capacity, or customer name..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8"
          />
        </div>

        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Statuses</SelectItem>
            <SelectItem value="available">Available</SelectItem>
            <SelectItem value="occupied">Occupied</SelectItem>
            <SelectItem value="reserved">Reserved</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Assign Customer Dialog */}
      <Dialog open={assignDialogOpen} onOpenChange={setAssignDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              Assign Customer to Table {selectedTable?.number}
            </DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="assign-customer-name" className="col-span-1">
                Customer
              </Label>
              <Input
                id="assign-customer-name"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                placeholder="Enter customer name"
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="assign-reservation-time" className="col-span-1">
                Time
              </Label>
              <Input
                id="assign-reservation-time"
                type="time"
                value={reservationTime}
                onChange={(e) => setReservationTime(e.target.value)}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="assign-status" className="col-span-1">
                Status
              </Label>
              <Select
                value={assignStatus}
                onValueChange={(value: "occupied" | "reserved") => setAssignStatus(value)}
              >
                <SelectTrigger id="assign-status" className="col-span-3">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="occupied">Occupied</SelectItem>
                  <SelectItem value="reserved">Reserved</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setAssignDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleAssignCustomer}>
              Assign
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Card>
        <CardHeader>
          <CardTitle>Restaurant Tables</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex justify-center items-center py-20">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2">Loading tables...</span>
            </div>
          ) : (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {filteredTables.map((table) => (
                <Card key={table._id} className={`${getTableStatusColor(table.status)} border`}>
                <CardContent className="flex flex-col items-center justify-center p-6">
                  <div className={`w-16 h-16 rounded-full flex items-center justify-center ${getTableStatusBadge(table.status)
                    }`}>
                    {table.number}
                  </div>
                  <p className="mt-2 font-medium">Table {table.number}</p>
                  <div className="flex items-center text-sm text-gray-500 mt-1">
                    <Users className="h-4 w-4 mr-1" />
                    <p>{table.capacity} Seats</p>
                  </div>
                  {table.status !== "available" && (
                    <div className="mt-2 text-center">
                      <p className="text-sm font-medium">{table.customerName}</p>
                      <p className="text-xs text-gray-500">
                        {table.status === "occupied" ? "Since" : "Reserved for"} {table.reservationTime}
                      </p>
                    </div>
                  )}

                  <div className="mt-4 w-full">
                    <Select
                      value={table.status}
                        onValueChange={(value) => handleUpdateTableStatus(table._id, value)}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="available">Available</SelectItem>
                        <SelectItem value="occupied">Occupied</SelectItem>
                        <SelectItem value="reserved">Reserved</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {table.status === "available" && (
                      <Button
                        variant="outline"
                        className="mt-2 w-full"
                        onClick={() => openAssignDialog(table)}
                      >
                          Assign Customer
                        </Button>
                  )}
                </CardContent>
              </Card>
            ))}

              {!loading && filteredTables.length === 0 && (
              <div className="col-span-full text-center py-10 text-gray-500">
                No tables found matching your criteria
              </div>
            )}
          </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default RestaurantTablesContent;
</file>

<file path="src/components/Admin/Rooms/RoomsReportsContent.tsx">
import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer, 
  PieChart, 
  Pie, 
  Cell 
} from "recharts";
import { 
  Download, 
  Filter, 
  Printer,
  FileText,
  BarChart as BarChartIcon,
  PieChart as PieChartIcon
} from "lucide-react";
import { DateRangePicker } from "@/components/ui/date-range-picker";
import { DateRange } from "react-day-picker";
import { format, subDays } from "date-fns";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const RoomsReportsContent = () => {
  const [timeRange, setTimeRange] = useState("month");
  const [dateRange, setDateRange] = useState<DateRange>({
    from: subDays(new Date(), 30),
    to: new Date(),
  });
  const [roomTypeFilter, setRoomTypeFilter] = useState("all");
  
  // Mock data for room charts
  const occupancyData = [
    { name: "Jan", occupancy: 65 },
    { name: "Feb", occupancy: 59 },
    { name: "Mar", occupancy: 80 },
    { name: "Apr", occupancy: 81 },
    { name: "May", occupancy: 56 },
    { name: "Jun", occupancy: 55 },
    { name: "Jul", occupancy: 78 },
    { name: "Aug", occupancy: 90 },
    { name: "Sep", occupancy: 81 },
    { name: "Oct", occupancy: 66 },
    { name: "Nov", occupancy: 70 },
    { name: "Dec", occupancy: 85 }
  ];
  
  const revenueData = [
    { name: "Jan", revenue: 48000 },
    { name: "Feb", revenue: 42000 },
    { name: "Mar", revenue: 55000 },
    { name: "Apr", revenue: 57000 },
    { name: "May", revenue: 45000 },
    { name: "Jun", revenue: 44000 },
    { name: "Jul", revenue: 58000 },
    { name: "Aug", revenue: 72000 },
    { name: "Sep", revenue: 65000 },
    { name: "Oct", revenue: 52000 },
    { name: "Nov", revenue: 56000 },
    { name: "Dec", revenue: 78000 }
  ];
  
  const roomTypeData = [
    { name: "Standard", value: 30 },
    { name: "Deluxe", value: 35 },
    { name: "Suite", value: 20 },
    { name: "Family", value: 10 },
    { name: "Presidential", value: 5 }
  ];
  
  const bookingSourceData = [
    { name: "Website", value: 45 },
    { name: "OTAs", value: 30 },
    { name: "Phone", value: 15 },
    { name: "Walk-in", value: 5 },
    { name: "Travel Agents", value: 5 }
  ];
  
  // Mock data for top rooms table
  const topRoomsData = [
    { id: 1, name: "Deluxe Ocean View", bookings: 156, revenue: 85400, occupancyRate: 92 },
    { id: 2, name: "Premium Suite", bookings: 124, revenue: 98500, occupancyRate: 88 },
    { id: 3, name: "Family Room", bookings: 98, revenue: 65300, occupancyRate: 82 },
    { id: 4, name: "Standard King", bookings: 145, revenue: 54200, occupancyRate: 78 },
    { id: 5, name: "Presidential Suite", bookings: 36, revenue: 124000, occupancyRate: 75 },
  ];
  
  const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE"];
  
  const formatCurrency = (value) => {
    return `$${value.toLocaleString()}`;
  };
  
  // Calculate annual totals
  const totalRevenue = revenueData.reduce((sum, item) => sum + item.revenue, 0);
  const totalBookings = 1246; // Mock total number of bookings
  const avgOccupancy = occupancyData.reduce((sum, item) => sum + item.occupancy, 0) / occupancyData.length;
  
  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h2 className="text-xl font-bold">Room Analytics Dashboard</h2>
          <p className="text-gray-500">Track bookings, revenue, and occupancy metrics</p>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-2">
          <DateRangePicker 
            value={dateRange} 
            onValueChange={setDateRange}
          />
          
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger className="w-[160px]">
              <SelectValue placeholder="Time Range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="week">Past Week</SelectItem>
              <SelectItem value="month">Past Month</SelectItem>
              <SelectItem value="quarter">Past Quarter</SelectItem>
              <SelectItem value="year">Past Year</SelectItem>
            </SelectContent>
          </Select>
          
          <Button variant="outline" className="flex items-center gap-2">
            <Download size={16} />
            <span>Export</span>
          </Button>
          
          <Button variant="outline" className="flex items-center gap-2">
            <Printer size={16} />
            <span>Print</span>
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-500">Total Revenue</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${(totalRevenue / 1000).toFixed(0)}k</div>
            <p className="text-xs text-green-600 flex items-center mt-1">
              +12% from previous period
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-500">Room Bookings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalBookings}</div>
            <p className="text-xs text-green-600 flex items-center mt-1">
              +8% from previous period
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-500">Average Occupancy</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{avgOccupancy.toFixed(1)}%</div>
            <p className="text-xs text-green-600 flex items-center mt-1">
              +5% from previous period
            </p>
          </CardContent>
        </Card>
      </div>
      
      <Tabs defaultValue="occupancy" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="occupancy" className="flex items-center gap-2">
            <BarChartIcon size={16} />
            <span>Occupancy Rate</span>
          </TabsTrigger>
          <TabsTrigger value="revenue" className="flex items-center gap-2">
            <BarChartIcon size={16} />
            <span>Revenue Analysis</span>
          </TabsTrigger>
          <TabsTrigger value="roomTypes" className="flex items-center gap-2">
            <PieChartIcon size={16} />
            <span>Room Types</span>
          </TabsTrigger>
          <TabsTrigger value="bookingSource" className="flex items-center gap-2">
            <PieChartIcon size={16} />
            <span>Booking Sources</span>
          </TabsTrigger>
          <TabsTrigger value="topRooms" className="flex items-center gap-2">
            <FileText size={16} />
            <span>Top Rooms</span>
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="occupancy" className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Monthly Occupancy Rate</h2>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <Filter size={14} />
              <span>Filter</span>
            </Button>
          </div>
          <div className="h-[400px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={occupancyData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis unit="%" />
                <Tooltip formatter={(value) => [`${value}%`, "Occupancy"]} />
                <Legend />
                <Bar dataKey="occupancy" fill="#8884d8" name="Occupancy Rate" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </TabsContent>
        
        <TabsContent value="revenue" className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Monthly Revenue</h2>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <Filter size={14} />
              <span>Filter</span>
            </Button>
          </div>
          <div className="h-[400px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={revenueData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis tickFormatter={formatCurrency} />
                <Tooltip formatter={(value) => [formatCurrency(value), "Revenue"]} />
                <Legend />
                <Bar dataKey="revenue" fill="#82ca9d" name="Monthly Revenue" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </TabsContent>
        
        <TabsContent value="roomTypes" className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Bookings by Room Type</h2>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <Filter size={14} />
              <span>Filter</span>
            </Button>
          </div>
          <div className="h-[400px] flex justify-center">
            <ResponsiveContainer width="70%" height="100%">
              <PieChart>
                <Pie
                  data={roomTypeData}
                  cx="50%"
                  cy="50%"
                  labelLine={true}
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                  outerRadius={150}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {roomTypeData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => [`${value}%`, "Percentage"]} />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </TabsContent>
        
        <TabsContent value="bookingSource" className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Bookings by Source</h2>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <Filter size={14} />
              <span>Filter</span>
            </Button>
          </div>
          <div className="h-[400px] flex justify-center">
            <ResponsiveContainer width="70%" height="100%">
              <PieChart>
                <Pie
                  data={bookingSourceData}
                  cx="50%"
                  cy="50%"
                  labelLine={true}
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                  outerRadius={150}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {bookingSourceData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => [`${value}%`, "Percentage"]} />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </TabsContent>
        
        <TabsContent value="topRooms" className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Top Performing Rooms</h2>
            <div className="flex gap-2">
              <Select defaultValue="all" onValueChange={setRoomTypeFilter}>
                <SelectTrigger className="w-[160px]">
                  <SelectValue placeholder="All Room Types" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Room Types</SelectItem>
                  <SelectItem value="standard">Standard</SelectItem>
                  <SelectItem value="deluxe">Deluxe</SelectItem>
                  <SelectItem value="suite">Suite</SelectItem>
                  <SelectItem value="family">Family</SelectItem>
                  <SelectItem value="presidential">Presidential</SelectItem>
                </SelectContent>
              </Select>
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <Download size={14} />
                <span>Export</span>
              </Button>
            </div>
          </div>
          
          <Table>
            <TableCaption>Top performing rooms based on revenue and occupancy</TableCaption>
            <TableHeader>
              <TableRow>
                <TableHead>Room Name</TableHead>
                <TableHead>Total Bookings</TableHead>
                <TableHead>Revenue</TableHead>
                <TableHead>Occupancy Rate</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {topRoomsData.map((room) => (
                <TableRow key={room.id}>
                  <TableCell className="font-medium">{room.name}</TableCell>
                  <TableCell>{room.bookings}</TableCell>
                  <TableCell>${room.revenue.toLocaleString()}</TableCell>
                  <TableCell>{room.occupancyRate}%</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default RoomsReportsContent;
</file>

<file path="src/components/Admin/Settings/AppPageSettings.tsx">
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Apple, Smartphone, Upload } from "lucide-react";

const AppPageSettings = () => {
  const { toast } = useToast();
  const [appSettings, setAppSettings] = useState({
    appDescription: "Download our Parkside Plaza Hotel app for a seamless booking experience. Manage your reservations, access exclusive deals, and enjoy a personalized stay with features designed to enhance your hotel experience.",
    footerText: "Download the app now and manage your bookings anytime, anywhere.",
    iosAppUrl: "https://apps.apple.com/us/app/parkside-plaza-hotel/id123456789",
    androidAppUrl: "https://play.google.com/store/apps/details?id=com.parksideplaza.hotel",
    iosIconPath: "/images/ios-download.png",
    androidIconPath: "/images/android-download.png"
  });

  const [previewImages, setPreviewImages] = useState({
    ios: null,
    android: null
  });

  const handleAppSettingChange = (e) => {
    const { name, value } = e.target;
    setAppSettings((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  const handleIconUpload = (platform, e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Create URL for preview
    const previewUrl = URL.createObjectURL(file);
    setPreviewImages((prev) => ({
      ...prev,
      [platform]: previewUrl
    }));

    // In a real application, you would upload the file to a server here
    // For this demo, we'll just update the state with a fake path
    const pathKey = platform === "ios" ? "iosIconPath" : "androidIconPath";
    
    // Simulate processing delay
    setTimeout(() => {
      toast({
        title: "Icon Uploaded",
        description: `The ${platform === "ios" ? "iOS" : "Android"} app icon has been uploaded successfully.`
      });

      setAppSettings((prev) => ({
        ...prev,
        [pathKey]: `/images/${platform}-download-${Date.now()}.png`
      }));
    }, 1000);
  };

  const handleSaveSettings = () => {
    // In a real application, you would save the settings to a database here
    toast({
      title: "Settings Saved",
      description: "Your app page settings have been saved successfully."
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>App Page Content</CardTitle>
          <CardDescription>
            Manage the content for the "Download Our App" page
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="appDescription">App Description</Label>
            <Textarea
              id="appDescription"
              name="appDescription"
              rows={5}
              value={appSettings.appDescription}
              onChange={handleAppSettingChange}
              placeholder="Describe the benefits and features of your app"
            />
            <p className="text-sm text-gray-500">
              This text will appear at the top of the Download App page
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="footerText">Footer Text / Call to Action</Label>
            <Textarea
              id="footerText"
              name="footerText"
              rows={3}
              value={appSettings.footerText}
              onChange={handleAppSettingChange}
              placeholder="Add a compelling call to action for users to download your app"
            />
            <p className="text-sm text-gray-500">
              This text will appear at the bottom of the Download App page
            </p>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Download Links</CardTitle>
          <CardDescription>
            Configure the app store links for iOS and Android
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <Tabs defaultValue="ios" className="w-full">
            <TabsList>
              <TabsTrigger value="ios" className="flex items-center">
                <Apple className="h-4 w-4 mr-2" />
                iOS App
              </TabsTrigger>
              <TabsTrigger value="android" className="flex items-center">
                <Smartphone className="h-4 w-4 mr-2" />
                Android App
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="ios" className="space-y-4 pt-4">
              <div className="space-y-2">
                <Label htmlFor="iosAppUrl">App Store URL</Label>
                <Input
                  id="iosAppUrl"
                  name="iosAppUrl"
                  value={appSettings.iosAppUrl}
                  onChange={handleAppSettingChange}
                  placeholder="https://apps.apple.com/us/app/your-app-id"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="iosIcon">App Store Icon</Label>
                <div className="flex items-center gap-4">
                  <div className="h-24 w-40 bg-gray-100 rounded flex items-center justify-center overflow-hidden">
                    {previewImages.ios ? (
                      <img 
                        src={previewImages.ios} 
                        alt="iOS App Icon Preview" 
                        className="max-h-full max-w-full object-contain"
                      />
                    ) : (
                      <Apple size={32} className="text-gray-400" />
                    )}
                  </div>
                  <div className="flex flex-col gap-2">
                    <Button variant="outline" className="relative" onClick={() => document.getElementById('iosIconInput').click()}>
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Icon
                      <input
                        id="iosIconInput"
                        type="file"
                        accept="image/*"
                        className="absolute inset-0 opacity-0 cursor-pointer"
                        onChange={(e) => handleIconUpload("ios", e)}
                      />
                    </Button>
                    <p className="text-xs text-gray-500">
                      Recommended: 160x160px PNG or SVG
                    </p>
                  </div>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="android" className="space-y-4 pt-4">
              <div className="space-y-2">
                <Label htmlFor="androidAppUrl">Google Play URL</Label>
                <Input
                  id="androidAppUrl"
                  name="androidAppUrl"
                  value={appSettings.androidAppUrl}
                  onChange={handleAppSettingChange}
                  placeholder="https://play.google.com/store/apps/details?id=your.app.package"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="androidIcon">Google Play Icon</Label>
                <div className="flex items-center gap-4">
                  <div className="h-24 w-40 bg-gray-100 rounded flex items-center justify-center overflow-hidden">
                    {previewImages.android ? (
                      <img 
                        src={previewImages.android} 
                        alt="Android App Icon Preview" 
                        className="max-h-full max-w-full object-contain"
                      />
                    ) : (
                      <Smartphone size={32} className="text-gray-400" />
                    )}
                  </div>
                  <div className="flex flex-col gap-2">
                    <Button variant="outline" className="relative" onClick={() => document.getElementById('androidIconInput').click()}>
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Icon
                      <input
                        id="androidIconInput"
                        type="file"
                        accept="image/*"
                        className="absolute inset-0 opacity-0 cursor-pointer"
                        onChange={(e) => handleIconUpload("android", e)}
                      />
                    </Button>
                    <p className="text-xs text-gray-500">
                      Recommended: 160x160px PNG or SVG
                    </p>
                  </div>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Preview</CardTitle>
          <CardDescription>
            See how the download section will appear on your website
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="border rounded-lg p-6 bg-gray-50">
            <div className="text-center max-w-3xl mx-auto space-y-6">
              <h3 className="text-xl font-semibold text-gray-800">Download Our App</h3>
              <p className="text-gray-600">{appSettings.appDescription}</p>
              
              <div className="flex flex-wrap justify-center gap-6 my-8">
                <div className="text-center">
                  <div className="h-16 w-48 bg-black rounded-lg flex items-center justify-center text-white hover:bg-gray-800 cursor-pointer">
                    <Apple className="h-7 w-7 mr-2" />
                    <div className="text-left">
                      <div className="text-xs">Download on the</div>
                      <div className="text-lg font-semibold">App Store</div>
                    </div>
                  </div>
                </div>
                
                <div className="text-center">
                  <div className="h-16 w-48 bg-black rounded-lg flex items-center justify-center text-white hover:bg-gray-800 cursor-pointer">
                    <Smartphone className="h-7 w-7 mr-2" />
                    <div className="text-left">
                      <div className="text-xs">GET IT ON</div>
                      <div className="text-lg font-semibold">Google Play</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <p className="text-gray-700 font-medium">{appSettings.footerText}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-end">
        <Button onClick={handleSaveSettings}>Save Changes</Button>
      </div>
    </div>
  );
};

export default AppPageSettings;
</file>

<file path="src/components/Admin/Settings/NotificationManager.tsx">
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Bell, Send, Users } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface Customer {
  id: string;
  name: string;
  email: string;
  joinDate: string;
  type: "new" | "regular" | "loyal";
}

const NotificationManager = () => {
  const { toast } = useToast();
  const [title, setTitle] = useState("");
  const [message, setMessage] = useState("");
  const [customerSegment, setCustomerSegment] = useState("all");
  const [selectedCustomers, setSelectedCustomers] = useState<string[]>([]);
  
  // Mock data for demonstration purposes
  const customers: Customer[] = [
    { id: "1", name: "John Doe", email: "john@example.com", joinDate: "2023-01-15", type: "loyal" },
    { id: "2", name: "Jane Smith", email: "jane@example.com", joinDate: "2023-03-22", type: "regular" },
    { id: "3", name: "Mike Johnson", email: "mike@example.com", joinDate: "2023-10-05", type: "new" },
    { id: "4", name: "Sarah Williams", email: "sarah@example.com", joinDate: "2022-11-18", type: "loyal" },
    { id: "5", name: "Alex Brown", email: "alex@example.com", joinDate: "2024-03-30", type: "new" },
  ];
  
  const getFilteredCustomers = () => {
    const currentDate = new Date();
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(currentDate.getMonth() - 1);
    
    switch (customerSegment) {
      case "new":
        return customers.filter(customer => new Date(customer.joinDate) >= oneMonthAgo);
      case "old":
        return customers.filter(customer => new Date(customer.joinDate) < oneMonthAgo);
      case "selected":
        return customers.filter(customer => selectedCustomers.includes(customer.id));
      case "all":
      default:
        return customers;
    }
  };
  
  const handleSendNotification = () => {
    if (!title || !message) {
      toast({
        title: "Missing information",
        description: "Please provide both a title and message for the notification",
        variant: "destructive"
      });
      return;
    }
    
    const targetCustomers = getFilteredCustomers();
    
    // In a real application, this would send the notification to the backend
    toast({
      title: "Notifications Sent",
      description: `Sent to ${targetCustomers.length} customers successfully`
    });
    
    setTitle("");
    setMessage("");
  };
  
  const toggleCustomerSelection = (customerId: string) => {
    setSelectedCustomers(prev => {
      if (prev.includes(customerId)) {
        return prev.filter(id => id !== customerId);
      } else {
        return [...prev, customerId];
      }
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bell className="h-5 w-5" />
          Customer Notifications
        </CardTitle>
        <CardDescription>Send notifications to your customers</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <div>
            <Label htmlFor="notificationTitle">Notification Title</Label>
            <Input 
              id="notificationTitle" 
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter notification title"
            />
          </div>
          
          <div>
            <Label htmlFor="notificationMessage">Message</Label>
            <Textarea 
              id="notificationMessage" 
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder="Enter notification message"
              rows={5}
            />
          </div>
          
          <div>
            <Label htmlFor="customerSegment">Target Audience</Label>
            <Select 
              value={customerSegment}
              onValueChange={(value) => {
                setCustomerSegment(value);
                if (value !== "selected") {
                  setSelectedCustomers([]);
                }
              }}
            >
              <SelectTrigger id="customerSegment">
                <SelectValue placeholder="Select customer segment" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Customers</SelectItem>
                <SelectItem value="new">New Customers (Last 30 Days)</SelectItem>
                <SelectItem value="old">Existing Customers (Before 30 Days)</SelectItem>
                <SelectItem value="selected">Selected Customers</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {customerSegment === "selected" && (
            <div className="border rounded-md p-4 max-h-60 overflow-y-auto space-y-2">
              <div className="flex items-center justify-between mb-2">
                <Label className="text-sm font-medium">Select Customers</Label>
                <div className="text-xs text-gray-500">
                  {selectedCustomers.length} selected
                </div>
              </div>
              {customers.map((customer) => (
                <div key={customer.id} className="flex items-center space-x-2">
                  <Checkbox 
                    id={`customer-${customer.id}`} 
                    checked={selectedCustomers.includes(customer.id)}
                    onCheckedChange={() => toggleCustomerSelection(customer.id)}
                  />
                  <Label htmlFor={`customer-${customer.id}`} className="flex flex-1 justify-between">
                    <span>{customer.name}</span>
                    <span className="text-xs text-gray-500">{customer.email}</span>
                  </Label>
                </div>
              ))}
            </div>
          )}
          
          <div>
            <div className="bg-gray-50 p-3 rounded-md mb-4">
              <div className="flex items-center gap-2 text-sm font-medium mb-2">
                <Users size={16} />
                Notification Preview
              </div>
              <div className="text-sm text-gray-500 mb-1">
                Target audience: {
                  customerSegment === "all" ? "All Customers" :
                  customerSegment === "new" ? "New Customers (Last 30 Days)" :
                  customerSegment === "old" ? "Existing Customers (Before 30 Days)" :
                  "Selected Customers"
                }
              </div>
              <div className="text-sm text-gray-500">
                Recipients: {getFilteredCustomers().length} customers
              </div>
            </div>
            <Button 
              onClick={handleSendNotification} 
              className="w-full"
              disabled={!title || !message}
            >
              <Send className="w-4 h-4 mr-2" />
              Send Notification
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default NotificationManager;
</file>

<file path="src/components/Admin/Settings/PlatformVisibilitySettings.tsx">
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Label } from "@/components/ui/label";
import { Smartphone, Globe, Gift, UtensilsCrossed, Package } from "lucide-react";

const PlatformVisibilitySettings = () => {
  const { toast } = useToast();
  
  const [visibilitySettings, setVisibilitySettings] = useState({
    // Loyalty Program
    loyaltyProgramWeb: true,
    loyaltyProgramApp: true,
    
    // Restaurant Features
    restaurantFeaturesWeb: true,
    restaurantFeaturesApp: true,
    
    // Event Add-ons
    eventAddonsWeb: true,
    eventAddonsApp: true
  });
  
  const handleToggleChange = (setting: string) => {
    setVisibilitySettings((prev) => ({
      ...prev,
      [setting]: !prev[setting]
    }));
  };
  
  const handleSaveChanges = () => {
    // In a real application, you would save these settings to your backend
    toast({
      title: "Settings Saved",
      description: "Platform visibility settings have been updated successfully."
    });
  };
  
  const getFeatureStatusBadge = (isActive: boolean) => {
    return isActive ? (
      <Badge className="bg-green-100 text-green-800 border-green-300">
        Active
      </Badge>
    ) : (
      <Badge variant="outline" className="text-gray-500">
        Inactive
      </Badge>
    );
  };
  
  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-xl">Platform Visibility</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="text-sm text-gray-500 mb-4">
          Control which features are active or inactive on the website and mobile app.
        </div>
        
        {/* Loyalty Program */}
        <div className="space-y-4">
          <div className="flex items-center">
            <Gift className="h-5 w-5 mr-2 text-purple-500" />
            <h3 className="text-lg font-medium">Loyalty Program</h3>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center justify-between p-4 border rounded-md">
              <div className="flex items-center">
                <Globe className="h-5 w-5 mr-2 text-blue-500" />
                <div>
                  <Label htmlFor="loyaltyProgramWeb" className="font-medium">Website</Label>
                  <p className="text-sm text-gray-500">Control loyalty program visibility on website</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {getFeatureStatusBadge(visibilitySettings.loyaltyProgramWeb)}
                <Switch
                  id="loyaltyProgramWeb"
                  checked={visibilitySettings.loyaltyProgramWeb}
                  onCheckedChange={() => handleToggleChange("loyaltyProgramWeb")}
                />
              </div>
            </div>
            
            <div className="flex items-center justify-between p-4 border rounded-md">
              <div className="flex items-center">
                <Smartphone className="h-5 w-5 mr-2 text-green-500" />
                <div>
                  <Label htmlFor="loyaltyProgramApp" className="font-medium">Mobile App</Label>
                  <p className="text-sm text-gray-500">Control loyalty program visibility on mobile app</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {getFeatureStatusBadge(visibilitySettings.loyaltyProgramApp)}
                <Switch
                  id="loyaltyProgramApp"
                  checked={visibilitySettings.loyaltyProgramApp}
                  onCheckedChange={() => handleToggleChange("loyaltyProgramApp")}
                />
              </div>
            </div>
          </div>
        </div>
        
        <Separator />
        
        {/* Restaurant Features */}
        <div className="space-y-4">
          <div className="flex items-center">
            <UtensilsCrossed className="h-5 w-5 mr-2 text-amber-500" />
            <h3 className="text-lg font-medium">Restaurant Features</h3>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center justify-between p-4 border rounded-md">
              <div className="flex items-center">
                <Globe className="h-5 w-5 mr-2 text-blue-500" />
                <div>
                  <Label htmlFor="restaurantFeaturesWeb" className="font-medium">Website</Label>
                  <p className="text-sm text-gray-500">Control restaurant features on website</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {getFeatureStatusBadge(visibilitySettings.restaurantFeaturesWeb)}
                <Switch
                  id="restaurantFeaturesWeb"
                  checked={visibilitySettings.restaurantFeaturesWeb}
                  onCheckedChange={() => handleToggleChange("restaurantFeaturesWeb")}
                />
              </div>
            </div>
            
            <div className="flex items-center justify-between p-4 border rounded-md">
              <div className="flex items-center">
                <Smartphone className="h-5 w-5 mr-2 text-green-500" />
                <div>
                  <Label htmlFor="restaurantFeaturesApp" className="font-medium">Mobile App</Label>
                  <p className="text-sm text-gray-500">Control restaurant features on mobile app</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {getFeatureStatusBadge(visibilitySettings.restaurantFeaturesApp)}
                <Switch
                  id="restaurantFeaturesApp"
                  checked={visibilitySettings.restaurantFeaturesApp}
                  onCheckedChange={() => handleToggleChange("restaurantFeaturesApp")}
                />
              </div>
            </div>
          </div>
        </div>
        
        <Separator />
        
        {/* Event Add-ons */}
        <div className="space-y-4">
          <div className="flex items-center">
            <Package className="h-5 w-5 mr-2 text-indigo-500" />
            <h3 className="text-lg font-medium">Event Add-ons</h3>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center justify-between p-4 border rounded-md">
              <div className="flex items-center">
                <Globe className="h-5 w-5 mr-2 text-blue-500" />
                <div>
                  <Label htmlFor="eventAddonsWeb" className="font-medium">Website</Label>
                  <p className="text-sm text-gray-500">Control event add-ons visibility on website</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {getFeatureStatusBadge(visibilitySettings.eventAddonsWeb)}
                <Switch
                  id="eventAddonsWeb"
                  checked={visibilitySettings.eventAddonsWeb}
                  onCheckedChange={() => handleToggleChange("eventAddonsWeb")}
                />
              </div>
            </div>
            
            <div className="flex items-center justify-between p-4 border rounded-md">
              <div className="flex items-center">
                <Smartphone className="h-5 w-5 mr-2 text-green-500" />
                <div>
                  <Label htmlFor="eventAddonsApp" className="font-medium">Mobile App</Label>
                  <p className="text-sm text-gray-500">Control event add-ons visibility on mobile app</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {getFeatureStatusBadge(visibilitySettings.eventAddonsApp)}
                <Switch
                  id="eventAddonsApp"
                  checked={visibilitySettings.eventAddonsApp}
                  onCheckedChange={() => handleToggleChange("eventAddonsApp")}
                />
              </div>
            </div>
          </div>
        </div>
        
        <div className="flex justify-end mt-6">
          <Button onClick={handleSaveChanges}>Save Changes</Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default PlatformVisibilitySettings;
</file>

<file path="src/components/Admin/Settings/SettingsContent.tsx">
import { useState, useEffect } from "react";
import axios from "axios";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Plus, Trash2, Upload, Type, Palette, CreditCard, Globe, Bell, Smartphone, Layers } from "lucide-react";
import ConfirmDeleteModal from "../Common/ConfirmDeleteModal";
import { useToast } from "@/hooks/use-toast";
import NotificationManager from "./NotificationManager";
import { Checkbox } from "@/components/ui/checkbox";
import AppPageSettings from "./AppPageSettings";
import PlatformVisibilitySettings from "./PlatformVisibilitySettings";

interface PaymentMethod {
  id: number;
  name: string;
  logo: string;
  color: string;
  description: string;
  connected: boolean;
}

interface OtaSystem {
  id: number;
  name: string;
  logo: string;
  color: string;
  description: string;
  connected: boolean;
  type?: string;
}

interface Currency {
  code: string;
  name: string;
  symbol: string;
  isGCC?: boolean;
}

const SettingsContent = () => {
  const { toast } = useToast();
  const [generalSettings, setGeneralSettings] = useState({
    hotelName: "Parkside Plaza Hotel",
    email: "info@parksideplaza.com",
    phone: "+1 (555) 123-4567",
    address: "123 Park Avenue, New York, NY 10001",
    timezone: "America/New_York",
    currency: "USD",
    checkInTime: "15:00",
    checkOutTime: "11:00"
  });

  const [isLoading, setIsLoading] = useState(false);
  const [isCurrencyLoading, setIsCurrencyLoading] = useState(false);
  const [isCurrentUserSuperAdmin] = useState(true);
  const [isAppearanceLoading, setIsAppearanceLoading] = useState(false);

  const [enabledCurrencies, setEnabledCurrencies] = useState({
    USD: true,
    EUR: false,
    GBP: false,
    SAR: false,
    AED: false,
    QAR: false,
    KWD: false,
    BHD: false,
    OMR: false,
    CAD: false,
    AUD: false,
    JPY: false,
    CNY: false
  });

  // Fetch general settings from API
  useEffect(() => {
    const fetchGeneralSettings = async () => {
      try {
        const response = await axios.get("http://localhost:4000/api/general-settings");
        if (response.data.success) {
          setGeneralSettings(response.data.data);
        } else {
          toast({
            title: "Error",
            description: "Failed to load general settings",
            variant: "destructive"
          });
        }
      } catch (error) {
        console.error("Error fetching general settings:", error);
        toast({
          title: "Error",
          description: "Failed to load settings from server",
          variant: "destructive"
        });
      }
    };

    fetchGeneralSettings();
  }, []);

  // Fetch currency settings from API
  useEffect(() => {
    const fetchCurrencies = async () => {
      try {
        setIsCurrencyLoading(true);
        const response = await axios.get("http://localhost:4000/api/currencies");
        if (response.data.success) {
          setEnabledCurrencies(response.data.data.currencies);

          // Update default currency in general settings if needed
          if (response.data.data.defaultCurrency && response.data.data.defaultCurrency !== generalSettings.currency) {
            setGeneralSettings(prev => ({
              ...prev,
              currency: response.data.data.defaultCurrency
            }));
          }
        } else {
          toast({
            title: "Error",
            description: "Failed to load currency settings",
            variant: "destructive"
          });
        }
      } catch (error) {
        console.error("Error fetching currencies:", error);
        toast({
          title: "Error",
          description: "Failed to load currency settings from server",
          variant: "destructive"
        });
      } finally {
        setIsCurrencyLoading(false);
      }
    };

    fetchCurrencies();
  }, []);

  // Notifications state and loading state
  const [notificationSettings, setNotificationSettings] = useState({
    emailNotifications: true,
    smsNotifications: false,
    bookingConfirmations: true,
    cancellationAlerts: true,
    lowInventoryAlerts: true,
    dailyReports: true,
    weeklyReports: true,
    monthlyReports: true
  });

  const [isNotificationsLoading, setIsNotificationsLoading] = useState(false);

  // Fetch notification settings from API
  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        setIsNotificationsLoading(true);
        const response = await axios.get("http://localhost:4000/api/notifications");
        if (response.data.success) {
          setNotificationSettings(prev => ({
            ...prev,
            ...response.data.data.notifications
          }));
        } else {
          toast({
            title: "Error",
            description: "Failed to load notification settings",
            variant: "destructive"
          });
        }
      } catch (error) {
        console.error("Error fetching notifications:", error);
        toast({
          title: "Error",
          description: "Failed to load notification settings from server",
          variant: "destructive"
        });
      } finally {
        setIsNotificationsLoading(false);
      }
    };

    fetchNotifications();
  }, []);

  // SEO settings and loading state
  const [seoSettings, setSeoSettings] = useState({
    metaTitle: "Parkside Plaza Hotel | Luxury Stay in New York",
    metaDescription: "Experience luxury accommodations at Parkside Plaza Hotel in the heart of New York City. Book your stay today for the best rates guaranteed.",
    ogImage: "",
    googleAnalyticsId: ""
  });

  const [isSeoLoading, setIsSeoLoading] = useState(false);

  // Appearance settings
  const [fonts, setFonts] = useState([
    { id: 1, name: "Inter", family: "Inter, sans-serif", type: "Sans-serif", previewText: "Experience luxury accommodations" },
    { id: 2, name: "Playfair Display", family: "Playfair Display, serif", type: "Serif", previewText: "Experience luxury accommodations" }
  ]);

  const [colors, setColors] = useState([
    { id: 1, name: "Primary", value: "#0F4C81", category: "Brand" },
    { id: 2, name: "Secondary", value: "#C19A6B", category: "Brand" },
    { id: 3, name: "Accent", value: "#E5D3B3", category: "Brand" },
    { id: 4, name: "Dark", value: "#2C3E50", category: "UI" },
    { id: 5, name: "Light", value: "#F5F5F5", category: "UI" }
  ]);

  const [newFont, setNewFont] = useState({ name: "", family: "", type: "Sans-serif", previewText: "Experience luxury accommodations" });
  const [newColor, setNewColor] = useState({ name: "", value: "#6366f1", category: "Brand" });

  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([
    { id: 1, name: "Stripe", logo: "S", color: "#635BFF", description: "Accept credit card payments", connected: false },
    { id: 2, name: "PayPal", logo: "P", color: "#009cde", description: "Accept PayPal payments", connected: false }
  ]);

  const [otaSystems, setOtaSystems] = useState<OtaSystem[]>([
    { id: 1, name: "Booking.com", logo: "B", color: "#003580", description: "Sync inventory and rates", connected: false },
    { id: 2, name: "Airbnb", logo: "A", color: "#FF5A5F", description: "Sync inventory and rates", connected: false },
    { id: 3, name: "TripAdvisor", logo: "T", color: "#00a680", description: "Manage reviews and listing", connected: false }
  ]);

  const [newPaymentMethod, setNewPaymentMethod] = useState({ name: "", description: "", apiKey: "" });
  const [newOtaSystem, setNewOtaSystem] = useState({ name: "", description: "", apiKey: "", systemType: "OTA" });

  const currencies: Currency[] = [
    { code: "USD", name: "US Dollar", symbol: "$" },
    { code: "EUR", name: "Euro", symbol: "€" },
    { code: "GBP", name: "British Pound", symbol: "£" },
    { code: "SAR", name: "Saudi Riyal", symbol: "ر.س", isGCC: true },
    { code: "AED", name: "UAE Dirham", symbol: "د.إ", isGCC: true },
    { code: "QAR", name: "Qatari Riyal", symbol: "ر.ق", isGCC: true },
    { code: "KWD", name: "Kuwaiti Dinar", symbol: "د.ك", isGCC: true },
    { code: "BHD", name: "Bahraini Dinar", symbol: "د.ب", isGCC: true },
    { code: "OMR", name: "Omani Rial", symbol: "ر.ع.", isGCC: true },
    { code: "CAD", name: "Canadian Dollar", symbol: "C$" },
    { code: "AUD", name: "Australian Dollar", symbol: "A$" },
    { code: "JPY", name: "Japanese Yen", symbol: "¥" },
    { code: "CNY", name: "Chinese Yuan", symbol: "¥" }
  ];

  const handleCurrencyToggle = async (currencyCode: string) => {
    try {
      // First update UI optimistically
      setEnabledCurrencies(prev => ({
        ...prev,
        [currencyCode]: !prev[currencyCode]
      }));

      // Then make the API call
      const response = await axios.patch(`http://localhost:4000/api/currencies/toggle/${currencyCode}`);

      if (response.data.success) {
        // Update state with the actual data from API
        setEnabledCurrencies(response.data.data.currencies);

        toast({
          title: response.data.data.currencies[currencyCode] ? "Currency Enabled" : "Currency Disabled",
          description: response.data.message
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to toggle currency",
          variant: "destructive"
        });

        // Revert the UI change on error
        setEnabledCurrencies(prev => ({
          ...prev,
          [currencyCode]: !prev[currencyCode]
        }));
      }
    } catch (error) {
      console.error(`Error toggling currency ${currencyCode}:`, error);
      toast({
        title: "Error",
        description: "Failed to update currency settings",
        variant: "destructive"
      });

      // Revert the UI change on error
      setEnabledCurrencies(prev => ({
        ...prev,
        [currencyCode]: !prev[currencyCode]
      }));
    }
  };

  const handleSaveCurrencySettings = async (e) => {
    e.preventDefault();
    setIsCurrencyLoading(true);

    try {
      // Send all currency settings to the API
      const response = await axios.put("http://localhost:4000/api/currencies", {
        currencies: enabledCurrencies
      });

      if (response.data.success) {
        // Update state with the actual data from API
        setEnabledCurrencies(response.data.data.currencies);

        toast({
          title: "Success",
          description: "Currency settings updated successfully"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to update currency settings",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error updating currency settings:", error);
      toast({
        title: "Error",
        description: "Failed to update currency settings",
        variant: "destructive"
      });
    } finally {
      setIsCurrencyLoading(false);
    }
  };

  const handleGeneralSettingChange = (e) => {
    const { name, value } = e.target;
    setGeneralSettings((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSaveGeneralSettings = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const response = await axios.put("http://localhost:4000/api/general-settings", generalSettings);

      if (response.data.success) {
        toast({
          title: "Success",
          description: "General settings updated successfully"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to update settings",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error updating general settings:", error);
      toast({
        title: "Error",
        description: "Failed to update settings",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleNotificationToggle = async (setting) => {
    try {
      // First update UI optimistically
      setNotificationSettings(prev => ({
        ...prev,
        [setting]: !prev[setting]
      }));

      // Then make the API call
      const response = await axios.patch(`http://localhost:4000/api/notifications/toggle/${setting}`);

      if (response.data.success) {
        // Update state with the actual data from API
        setNotificationSettings(prev => ({
          ...prev,
          ...response.data.data.notifications
        }));

        toast({
          title: response.data.data.notifications[setting] ? "Notification Enabled" : "Notification Disabled",
          description: response.data.message
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to toggle notification",
          variant: "destructive"
        });

        // Revert the UI change on error
        setNotificationSettings(prev => ({
          ...prev,
          [setting]: !prev[setting]
        }));
      }
    } catch (error) {
      console.error(`Error toggling notification ${setting}:`, error);
      toast({
        title: "Error",
        description: "Failed to update notification settings",
        variant: "destructive"
      });

      // Revert the UI change on error
      setNotificationSettings(prev => ({
        ...prev,
        [setting]: !prev[setting]
      }));
    }
  };

  const handleSaveNotificationSettings = async () => {
    try {
      setIsNotificationsLoading(true);

      // Send all notification settings to the API
      const response = await axios.put("http://localhost:4000/api/notifications", {
        notifications: notificationSettings
      });

      if (response.data.success) {
        // Update state with the actual data from API
        setNotificationSettings(prev => ({
          ...prev,
          ...response.data.data.notifications
        }));

        toast({
          title: "Success",
          description: "Notification settings updated successfully"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to update notification settings",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error updating notification settings:", error);
      toast({
        title: "Error",
        description: "Failed to update notification settings",
        variant: "destructive"
      });
    } finally {
      setIsNotificationsLoading(false);
    }
  };

  const handleSeoSettingChange = (e) => {
    const { name, value } = e.target;
    setSeoSettings((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSaveSeoSettings = async (e) => {
    e.preventDefault();
    setIsSeoLoading(true);

    try {
      const response = await axios.put("http://localhost:4000/api/seo-settings", seoSettings);

      if (response.data.success) {
        toast({
          title: "Success",
          description: "SEO settings updated successfully"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to update SEO settings",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error updating SEO settings:", error);
      toast({
        title: "Error",
        description: "Failed to update SEO settings",
        variant: "destructive"
      });
    } finally {
      setIsSeoLoading(false);
    }
  };

  // Fetch appearance settings from API
  useEffect(() => {
    const fetchAppearanceSettings = async () => {
      try {
        setIsAppearanceLoading(true);
        const response = await axios.get("http://localhost:4000/api/appearance-settings");
        if (response.data.success) {
          const data = response.data.data;
          if (data.colors) setColors(data.colors);
          if (data.fonts) setFonts(data.fonts);
        } else {
          toast({
            title: "Error",
            description: "Failed to load appearance settings",
            variant: "destructive"
          });
        }
      } catch (error) {
        console.error("Error fetching appearance settings:", error);
        toast({
          title: "Error",
          description: "Failed to load appearance settings from server",
          variant: "destructive"
        });
      } finally {
        setIsAppearanceLoading(false);
      }
    };

    fetchAppearanceSettings();
  }, []);

  const handleAddFont = async () => {
    if (!newFont.name || !newFont.family) {
      toast({
        title: "Missing Information",
        description: "Please provide both a name and family for the font",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsAppearanceLoading(true);
      const response = await axios.post("http://localhost:4000/api/appearance-settings/fonts", newFont);

      if (response.data.success) {
        // Update local state with the new font that includes the server-generated ID
        const addedFont = response.data.data.font;
        setFonts(prevFonts => [...prevFonts, addedFont]);
        setNewFont({ name: "", family: "", type: "Sans-serif", previewText: "Experience luxury accommodations" });

        toast({
          title: "Font Added",
          description: `${addedFont.name} has been added to your fonts`
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to add font",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error adding font:", error);
      toast({
        title: "Error",
        description: "Failed to add font",
        variant: "destructive"
      });
    } finally {
      setIsAppearanceLoading(false);
    }
  };

  const handleDeleteFont = async (id) => {
    try {
      setIsAppearanceLoading(true);
      const response = await axios.delete(`http://localhost:4000/api/appearance-settings/fonts/${id}`);

      if (response.data.success) {
        setFonts(fonts.filter(font => font.id !== id));
        toast({
          title: "Font Removed",
          description: "The font has been removed from your collection"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to remove font",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error deleting font:", error);
      toast({
        title: "Error",
        description: "Failed to remove font",
        variant: "destructive"
      });
    } finally {
      setIsAppearanceLoading(false);
    }
  };

  const handleAddColor = async () => {
    if (!newColor.name) {
      toast({
        title: "Missing Information",
        description: "Please provide a name for the color",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsAppearanceLoading(true);
      const response = await axios.post("http://localhost:4000/api/appearance-settings/colors", newColor);

      if (response.data.success) {
        // Update local state with the new color that includes the server-generated ID
        const addedColor = response.data.data.color;
        setColors(prevColors => [...prevColors, addedColor]);
        setNewColor({ name: "", value: "#6366f1", category: "Brand" });

        toast({
          title: "Color Added",
          description: `${addedColor.name} has been added to your color palette`
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to add color",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error adding color:", error);
      toast({
        title: "Error",
        description: "Failed to add color",
        variant: "destructive"
      });
    } finally {
      setIsAppearanceLoading(false);
    }
  };

  const handleDeleteColor = async (id) => {
    try {
      setIsAppearanceLoading(true);
      const response = await axios.delete(`http://localhost:4000/api/appearance-settings/colors/${id}`);

      if (response.data.success) {
        setColors(colors.filter(color => color.id !== id));
        toast({
          title: "Color Removed",
          description: "The color has been removed from your palette"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to remove color",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error deleting color:", error);
      toast({
        title: "Error",
        description: "Failed to remove color",
        variant: "destructive"
      });
    } finally {
      setIsAppearanceLoading(false);
    }
  };

  const handleFontFileUpload = async (e) => {
    const file = e.target.files?.[0];
    if (file) {
      try {
        setIsAppearanceLoading(true);

        // Create a FormData object to send the file
        const formData = new FormData();
        formData.append('fontFile', file);
        formData.append('fileName', file.name);

        // For now, we're just sending the filename since the backend is mocked
        const response = await axios.post("http://localhost:4000/api/appearance-settings/fonts/upload", {
          fileName: file.name
        });

        if (response.data.success) {
          const uploadedFont = response.data.data.font;
          setFonts(prevFonts => [...prevFonts, uploadedFont]);

          toast({
            title: "Font Uploaded",
            description: `${file.name} has been uploaded and processed`
          });
        } else {
          toast({
            title: "Error",
            description: response.data.message || "Failed to upload font",
            variant: "destructive"
          });
        }
      } catch (error) {
        console.error("Error uploading font:", error);
        toast({
          title: "Error",
          description: "Failed to upload font",
          variant: "destructive"
        });
      } finally {
        setIsAppearanceLoading(false);
      }
    }
  };

  const handleImportColors = async (e) => {
    e.preventDefault();

    try {
      setIsAppearanceLoading(true);

      // In a real application, you might upload a file or provide a color palette
      // For now, we'll just send a sample set of colors to import
      const colorsToImport = [
        { name: "Imported Blue", value: "#3b82f6", category: "Imported" },
        { name: "Imported Green", value: "#10b981", category: "Imported" }
      ];

      const response = await axios.post("http://localhost:4000/api/appearance-settings/colors/import", {
        colors: colorsToImport
      });

      if (response.data.success) {
        // Update with the complete set of colors returned from the server
        setColors(response.data.data.colors);

        toast({
          title: "Colors Imported",
          description: `${response.data.data.addedColors.length} colors have been added to your palette`
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to import colors",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error importing colors:", error);
      toast({
        title: "Error",
        description: "Failed to import colors",
        variant: "destructive"
      });
    } finally {
      setIsAppearanceLoading(false);
    }
  };

  const handleSaveColors = async () => {
    try {
      setIsAppearanceLoading(true);

      const response = await axios.put("http://localhost:4000/api/appearance-settings/colors", {
        colors: colors
      });

      if (response.data.success) {
        // Update local state with the data from the server
        setColors(response.data.data.colors);

        toast({
          title: "Success",
          description: "Color settings saved successfully"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to save color settings",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error saving colors:", error);
      toast({
        title: "Error",
        description: "Failed to save color settings",
        variant: "destructive"
      });
    } finally {
      setIsAppearanceLoading(false);
    }
  };

  const handleSaveFonts = async () => {
    try {
      setIsAppearanceLoading(true);

      const response = await axios.put("http://localhost:4000/api/appearance-settings/fonts", {
        fonts: fonts
      });

      if (response.data.success) {
        // Update local state with the data from the server
        setFonts(response.data.data.fonts);

        toast({
          title: "Success",
          description: "Font settings saved successfully"
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to save font settings",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error saving fonts:", error);
      toast({
        title: "Error",
        description: "Failed to save font settings",
        variant: "destructive"
      });
    } finally {
      setIsAppearanceLoading(false);
    }
  };

  const handleAddPaymentMethod = () => {
    if (!newPaymentMethod.name || !newPaymentMethod.description) {
      toast({
        title: "Missing Information",
        description: "Please provide a name and description for the payment method",
        variant: "destructive"
      });
      return;
    }

    const nextId = paymentMethods.length > 0 ?
      Math.max(...paymentMethods.map(method => method.id)) + 1 : 1;

    const newMethod = {
      id: nextId,
      name: newPaymentMethod.name,
      logo: newPaymentMethod.name.charAt(0),
      color: getRandomColor(),
      description: newPaymentMethod.description,
      connected: false
    };

    setPaymentMethods([...paymentMethods, newMethod]);
    setNewPaymentMethod({ name: "", description: "", apiKey: "" });

    toast({
      title: "Payment Method Added",
      description: `${newPaymentMethod.name} has been added to your payment methods`
    });
  };

  const handleDeletePaymentMethod = (id) => {
    setPaymentMethods(paymentMethods.filter(method => method.id !== id));
    toast({
      title: "Payment Method Removed",
      description: "The payment method has been removed"
    });
  };

  const handleConnectPaymentMethod = (id) => {
    setPaymentMethods(paymentMethods.map(method =>
      method.id === id ? { ...method, connected: !method.connected } : method
    ));

    const method = paymentMethods.find(m => m.id === id);
    if (method) {
      toast({
        title: method.connected ? "Disconnected" : "Connected",
        description: `${method.name} has been ${method.connected ? "disconnected" : "connected"} successfully`
      });
    }
  };

  const handleAddOtaSystem = () => {
    if (!newOtaSystem.name || !newOtaSystem.description) {
      toast({
        title: "Missing Information",
        description: "Please provide a name and description",
        variant: "destructive"
      });
      return;
    }

    const nextId = otaSystems.length > 0 ?
      Math.max(...otaSystems.map(system => system.id)) + 1 : 1;

    const newSystem: OtaSystem = {
      id: nextId,
      name: newOtaSystem.name,
      logo: newOtaSystem.name.charAt(0),
      color: getRandomColor(),
      description: newOtaSystem.description,
      connected: false,
      type: newOtaSystem.systemType
    };

    setOtaSystems([...otaSystems, newSystem]);
    setNewOtaSystem({ name: "", description: "", apiKey: "", systemType: "OTA" });

    toast({
      title: "System Added",
      description: `${newOtaSystem.name} has been added to your distribution channels`
    });
  };

  const handleDeleteOtaSystem = (id) => {
    setOtaSystems(otaSystems.filter(system => system.id !== id));
    toast({
      title: "Channel Removed",
      description: "The distribution channel has been removed"
    });
  };

  const handleConnectOtaSystem = (id) => {
    setOtaSystems(otaSystems.map(system =>
      system.id === id ? { ...system, connected: !system.connected } : system
    ));

    const system = otaSystems.find(s => s.id === id);
    if (system) {
      toast({
        title: system.connected ? "Disconnected" : "Connected",
        description: `${system.name} has been ${system.connected ? "disconnected" : "connected"} successfully`
      });
    }
  };

  const getRandomColor = () => {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-800">Settings</h1>
        <p className="text-gray-500 mt-1">Manage your hotel settings and preferences</p>
      </div>

      <Tabs defaultValue="general" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="general">General</TabsTrigger>
          <TabsTrigger value="currencies">Currencies</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="appearance">Appearance</TabsTrigger>
          <TabsTrigger value="platform-visibility">
            <Layers className="h-4 w-4 mr-2" />
            Platform Visibility
          </TabsTrigger>
          <TabsTrigger value="seo">SEO</TabsTrigger>
          <TabsTrigger value="app-page">
            <Smartphone className="h-4 w-4 mr-2" />
            App Page
          </TabsTrigger>
          <TabsTrigger value="integrations">Integrations</TabsTrigger>
          <TabsTrigger value="security">Security</TabsTrigger>
          {isCurrentUserSuperAdmin && (
            <TabsTrigger value="admin-notifications">
              <Bell className="h-4 w-4 mr-2" />
              Admin Notifications
            </TabsTrigger>
          )}
        </TabsList>

        <TabsContent value="general" className="bg-white p-6 rounded-lg shadow">
          <form className="space-y-6" onSubmit={handleSaveGeneralSettings}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <Label htmlFor="hotelName">Hotel Name</Label>
                <Input
                  id="hotelName"
                  name="hotelName"
                  value={generalSettings.hotelName}
                  onChange={handleGeneralSettingChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email Address</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={generalSettings.email}
                  onChange={handleGeneralSettingChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input
                  id="phone"
                  name="phone"
                  value={generalSettings.phone}
                  onChange={handleGeneralSettingChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="address">Address</Label>
                <Input
                  id="address"
                  name="address"
                  value={generalSettings.address}
                  onChange={handleGeneralSettingChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="timezone">Timezone</Label>
                <Select
                  value={generalSettings.timezone}
                  onValueChange={(value) => setGeneralSettings(prev => ({ ...prev, timezone: value }))}
                >
                  <SelectTrigger id="timezone">
                    <SelectValue placeholder="Select timezone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="America/New_York">Eastern Time (ET)</SelectItem>
                    <SelectItem value="America/Chicago">Central Time (CT)</SelectItem>
                    <SelectItem value="America/Denver">Mountain Time (MT)</SelectItem>
                    <SelectItem value="America/Los_Angeles">Pacific Time (PT)</SelectItem>
                    <SelectItem value="Europe/London">Greenwich Mean Time (GMT)</SelectItem>
                    <SelectItem value="Asia/Muscat">Oman Time (GMT+4)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="currency">Default Currency</Label>
                <Select
                  value={generalSettings.currency}
                  onValueChange={(value) => setGeneralSettings(prev => ({ ...prev, currency: value }))}
                >
                  <SelectTrigger id="currency">
                    <SelectValue placeholder="Select currency" />
                  </SelectTrigger>
                  <SelectContent>
                    {currencies.filter(currency => enabledCurrencies[currency.code]).map(currency => (
                      <SelectItem key={currency.code} value={currency.code}>
                        {currency.name} ({currency.symbol} {currency.code})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="checkInTime">Check-in Time</Label>
                <Input
                  id="checkInTime"
                  name="checkInTime"
                  type="time"
                  value={generalSettings.checkInTime}
                  onChange={handleGeneralSettingChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="checkOutTime">Check-out Time</Label>
                <Input
                  id="checkOutTime"
                  name="checkOutTime"
                  type="time"
                  value={generalSettings.checkOutTime}
                  onChange={handleGeneralSettingChange}
                />
              </div>
            </div>

            <div className="flex justify-end">
              <Button type="submit" disabled={isLoading}>
                {isLoading ? "Saving..." : "Save Changes"}
              </Button>
            </div>
          </form>
        </TabsContent>

        <TabsContent value="currencies" className="bg-white p-6 rounded-lg shadow">
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-medium">Currency Management</h3>
              <p className="text-gray-500 text-sm">Enable or disable currencies for your hotel</p>

              <form className="mt-6 space-y-6">
                <div className="mb-4">
                  <h4 className="font-medium text-md mb-2">GCC Currencies</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {currencies.filter(currency => currency.isGCC).map(currency => (
                      <div key={currency.code} className="flex items-center justify-between p-4 border rounded-md bg-gray-50">
                        <div className="flex items-center space-x-3">
                          <div className="h-10 w-10 rounded-full bg-green-50 flex items-center justify-center font-medium text-green-800">
                            {currency.symbol}
                          </div>
                          <div>
                            <p className="font-medium">{currency.name}</p>
                            <p className="text-sm text-gray-500">{currency.code}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {currency.code === "OMR" && (
                            <Badge className="mr-2 bg-green-100 text-green-800 border-green-300">
                              Featured
                            </Badge>
                          )}
                          <Switch
                            checked={enabledCurrencies[currency.code] || false}
                            onCheckedChange={() => handleCurrencyToggle(currency.code)}
                            disabled={currency.code === generalSettings.currency || isCurrencyLoading}
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <h4 className="font-medium text-md mb-2">Other Currencies</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {currencies.filter(currency => !currency.isGCC).map(currency => (
                    <div key={currency.code} className="flex items-center justify-between p-4 border rounded-md">
                      <div className="flex items-center space-x-3">
                        <div className="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center font-medium">
                          {currency.symbol}
                        </div>
                        <div>
                          <p className="font-medium">{currency.name}</p>
                          <p className="text-sm text-gray-500">{currency.code}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch
                          checked={enabledCurrencies[currency.code] || false}
                          onCheckedChange={() => handleCurrencyToggle(currency.code)}
                          disabled={currency.code === generalSettings.currency || isCurrencyLoading}
                        />
                      </div>
                    </div>
                  ))}
                </div>

                <div className="flex items-center justify-between">
                  <p className="text-sm text-gray-500">Changes are saved automatically when toggling currencies</p>
                  {isCurrencyLoading && <p className="text-sm text-blue-500">Saving changes...</p>}
                </div>
              </form>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="notifications" className="bg-white p-6 rounded-lg shadow">
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-medium">Notification Channels</h3>
              <p className="text-gray-500 text-sm">Configure how you receive notifications</p>

              <div className="mt-4 space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="emailNotifications" className="font-medium">Email Notifications</Label>
                    <p className="text-gray-500 text-sm">Receive notifications via email</p>
                  </div>
                  <Switch
                    id="emailNotifications"
                    checked={notificationSettings.emailNotifications}
                    onCheckedChange={() => handleNotificationToggle("emailNotifications")}
                    disabled={isNotificationsLoading}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="smsNotifications" className="font-medium">SMS Notifications</Label>
                    <p className="text-gray-500 text-sm">Receive notifications via text message</p>
                  </div>
                  <Switch
                    id="smsNotifications"
                    checked={notificationSettings.smsNotifications}
                    onCheckedChange={() => handleNotificationToggle("smsNotifications")}
                    disabled={isNotificationsLoading}
                  />
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium">Notification Types</h3>
              <p className="text-gray-500 text-sm">Select which events trigger notifications</p>

              <div className="mt-4 space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="bookingConfirmations" className="font-medium">Booking Confirmations</Label>
                    <p className="text-gray-500 text-sm">New bookings and reservation confirmations</p>
                  </div>
                  <Switch
                    id="bookingConfirmations"
                    checked={notificationSettings.bookingConfirmations}
                    onCheckedChange={() => handleNotificationToggle("bookingConfirmations")}
                    disabled={isNotificationsLoading}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="cancellationAlerts" className="font-medium">Cancellation Alerts</Label>
                    <p className="text-gray-500 text-sm">Booking cancellations and modifications</p>
                  </div>
                  <Switch
                    id="cancellationAlerts"
                    checked={notificationSettings.cancellationAlerts}
                    onCheckedChange={() => handleNotificationToggle("cancellationAlerts")}
                    disabled={isNotificationsLoading}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="lowInventoryAlerts" className="font-medium">Low Inventory Alerts</Label>
                    <p className="text-gray-500 text-sm">When room availability is running low</p>
                  </div>
                  <Switch
                    id="lowInventoryAlerts"
                    checked={notificationSettings.lowInventoryAlerts}
                    onCheckedChange={() => handleNotificationToggle("lowInventoryAlerts")}
                    disabled={isNotificationsLoading}
                  />
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium">Reports</h3>
              <p className="text-gray-500 text-sm">Configure automatic report deliveries</p>

              <div className="mt-4 space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="dailyReports" className="font-medium">Daily Reports</Label>
                    <p className="text-gray-500 text-sm">Daily summary of bookings and revenue</p>
                  </div>
                  <Switch
                    id="dailyReports"
                    checked={notificationSettings.dailyReports}
                    onCheckedChange={() => handleNotificationToggle("dailyReports")}
                    disabled={isNotificationsLoading}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="weeklyReports" className="font-medium">Weekly Reports</Label>
                    <p className="text-gray-500 text-sm">Weekly summary of bookings and revenue</p>
                  </div>
                  <Switch
                    id="weeklyReports"
                    checked={notificationSettings.weeklyReports}
                    onCheckedChange={() => handleNotificationToggle("weeklyReports")}
                    disabled={isNotificationsLoading}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="monthlyReports" className="font-medium">Monthly Reports</Label>
                    <p className="text-gray-500 text-sm">Monthly summary of bookings and revenue</p>
                  </div>
                  <Switch
                    id="monthlyReports"
                    checked={notificationSettings.monthlyReports}
                    onCheckedChange={() => handleNotificationToggle("monthlyReports")}
                    disabled={isNotificationsLoading}
                  />
                </div>
              </div>
            </div>

            <div className="flex items-center justify-between mt-4">
              <p className="text-sm text-gray-500">
                Changes are saved automatically when toggling notifications.
              </p>
              {isNotificationsLoading && <p className="text-sm text-blue-500">Saving changes...</p>}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="appearance" className="bg-white p-6 rounded-lg shadow">
          <div className="space-y-8">
            <div>
              <h3 className="text-lg font-medium">Brand Colors</h3>
              <p className="text-gray-500 text-sm">Customize the colors of your hotel dashboard</p>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                <div className="space-y-2">
                  <Label htmlFor="primaryColor">Primary Color</Label>
                  <div className="flex items-center gap-2">
                    <Input type="color" id="primaryColor" defaultValue="#6366f1" className="w-16 h-10" />
                    <Input defaultValue="#6366f1" className="font-mono" />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="secondaryColor">Secondary Color</Label>
                  <div className="flex items-center gap-2">
                    <Input type="color" id="secondaryColor" defaultValue="#8b5cf6" className="w-16 h-10" />
                    <Input defaultValue="#8b5cf6" className="font-mono" />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="accentColor">Accent Color</Label>
                  <div className="flex items-center gap-2">
                    <Input type="color" id="accentColor" defaultValue="#10b981" className="w-16 h-10" />
                    <Input defaultValue="#10b981" className="font-mono" />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="textColor">Text Color</Label>
                  <div className="flex items-center gap-2">
                    <Input type="color" id="textColor" defaultValue="#1f2937" className="w-16 h-10" />
                    <Input defaultValue="#1f2937" className="font-mono" />
                  </div>
                </div>
              </div>

              <div className="flex justify-end mt-4">
                <Button onClick={handleSaveColors} disabled={isAppearanceLoading}>
                  {isAppearanceLoading ? "Saving..." : "Save Colors"}
                </Button>
              </div>
            </div>

            <div>
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-lg font-medium flex items-center gap-2">
                    <Palette className="h-5 w-5" /> Color Palette
                  </h3>
                  <p className="text-gray-500 text-sm">Manage your brand color palette</p>
                </div>
                <Button variant="outline" onClick={handleImportColors} disabled={isAppearanceLoading}>
                  <Upload className="w-4 h-4 mr-2" />
                  {isAppearanceLoading ? "Importing..." : "Import Colors"}
                </Button>
              </div>

              <div className="grid grid-cols-1 gap-4 mb-6">
                <div className="p-4 bg-gray-50 rounded-md">
                  <div className="flex mb-4">
                    <div className="w-1/4 font-medium">Name</div>
                    <div className="w-1/4 font-medium">Color</div>
                    <div className="w-1/4 font-medium">Category</div>
                    <div className="w-1/4 font-medium">Actions</div>
                  </div>

                  {colors.map((color) => (
                    <div key={color.id} className="flex items-center py-2 border-t border-gray-200">
                      <div className="w-1/4">{color.name}</div>
                      <div className="w-1/4 flex items-center gap-2">
                        <div
                          className="w-8 h-8 rounded border border-gray-200"
                          style={{ backgroundColor: color.value }}
                          aria-label={`${color.name} color: ${color.value}`}
                        />
                        <span className="text-sm font-mono">{color.value}</span>
                      </div>
                      <div className="w-1/4">
                        <Badge variant="outline">{color.category}</Badge>
                      </div>
                      <div className="w-1/4">
                        <ConfirmDeleteModal
                          itemName={`${color.name} color`}
                          onConfirmDelete={() => handleDeleteColor(color.id)}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-md">
                <div>
                  <Label htmlFor="colorName">Name</Label>
                  <Input
                    id="colorName"
                    value={newColor.name}
                    onChange={(e) => setNewColor({ ...newColor, name: e.target.value })}
                    placeholder="Primary Blue"
                  />
                </div>

                <div>
                  <Label htmlFor="colorValue">Color Value</Label>
                  <div className="flex gap-2">
                    <Input
                      type="color"
                      value={newColor.value}
                      onChange={(e) => setNewColor({ ...newColor, value: e.target.value })}
                      className="w-12 h-10"
                    />
                    <Input
                      id="colorValue"
                      value={newColor.value}
                      onChange={(e) => setNewColor({ ...newColor, value: e.target.value })}
                      className="font-mono"
                      placeholder="#0000FF"
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="colorCategory">Category</Label>
                  <Select
                    value={newColor.category}
                    onValueChange={(value) => setNewColor({ ...newColor, category: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Brand">Brand</SelectItem>
                      <SelectItem value="UI">UI</SelectItem>
                      <SelectItem value="Accent">Accent</SelectItem>
                      <SelectItem value="Custom">Custom</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex justify-end mt-4">
                <Button onClick={handleAddColor} disabled={isAppearanceLoading}>
                  <Plus className="w-4 h-4 mr-2" />
                  {isAppearanceLoading ? "Adding..." : "Add Color"}
                </Button>
              </div>
            </div>

            <div>
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-lg font-medium flex items-center gap-2">
                    <Type className="h-5 w-5" /> Typography
                  </h3>
                  <p className="text-gray-500 text-sm">Manage your brand fonts</p>
                </div>
                <div>
                  <label htmlFor="font-upload" className="cursor-pointer">
                    <div className="flex items-center">
                      <Button
                        variant="outline"
                        onClick={() => document.getElementById('font-upload')?.click()}
                        type="button"
                        disabled={isAppearanceLoading}
                      >
                        <Upload className="w-4 h-4 mr-2" />
                        {isAppearanceLoading ? "Uploading..." : "Upload Font"}
                      </Button>
                      <input
                        id="font-upload"
                        type="file"
                        accept=".woff,.woff2,.ttf,.otf"
                        onChange={handleFontFileUpload}
                        className="hidden"
                      />
                    </div>
                  </label>
                </div>
              </div>

              <div className="grid grid-cols-1 gap-4 mb-6">
                <div className="p-4 bg-gray-50 rounded-md">
                  <div className="flex mb-4">
                    <div className="w-1/4 font-medium">Name</div>
                    <div className="w-1/4 font-medium">Sample</div>
                    <div className="w-1/4 font-medium">Type</div>
                    <div className="w-1/4 font-medium">Actions</div>
                  </div>

                  {fonts.map((font) => (
                    <div key={font.id} className="flex items-center py-2 border-t border-gray-200">
                      <div className="w-1/4">{font.name}</div>
                      <div className="w-1/4" style={{ fontFamily: font.family }}>
                        {font.previewText}
                      </div>
                      <div className="w-1/4">
                        <Badge variant="outline">{font.type}</Badge>
                      </div>
                      <div className="w-1/4">
                        <ConfirmDeleteModal
                          itemName={`${font.name} font`}
                          onConfirmDelete={() => handleDeleteFont(font.id)}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-md">
                <div>
                  <Label htmlFor="fontName">Name</Label>
                  <Input
                    id="fontName"
                    value={newFont.name}
                    onChange={(e) => setNewFont({ ...newFont, name: e.target.value })}
                    placeholder="Inter"
                  />
                </div>

                <div>
                  <Label htmlFor="fontFamily">Font Family</Label>
                  <Input
                    id="fontFamily"
                    value={newFont.family}
                    onChange={(e) => setNewFont({ ...newFont, family: e.target.value })}
                    placeholder="Inter, sans-serif"
                  />
                </div>

                <div>
                  <Label htmlFor="fontType">Type</Label>
                  <Select
                    value={newFont.type}
                    onValueChange={(value) => setNewFont({ ...newFont, type: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Sans-serif">Sans-serif</SelectItem>
                      <SelectItem value="Serif">Serif</SelectItem>
                      <SelectItem value="Monospace">Monospace</SelectItem>
                      <SelectItem value="Display">Display</SelectItem>
                      <SelectItem value="Handwriting">Handwriting</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex justify-end mt-4">
                <Button onClick={handleAddFont} disabled={isAppearanceLoading}>
                  <Plus className="w-4 h-4 mr-2" />
                  {isAppearanceLoading ? "Adding..." : "Add Font"}
                </Button>
              </div>

              <div className="flex justify-end mt-4">
                <Button onClick={handleSaveFonts} disabled={isAppearanceLoading}>
                  {isAppearanceLoading ? "Saving..." : "Save Font Settings"}
                </Button>
              </div>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="platform-visibility" className="bg-white p-6 rounded-lg shadow">
          <PlatformVisibilitySettings />
        </TabsContent>

        <TabsContent value="seo" className="bg-white p-6 rounded-lg shadow">
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-medium">Search Engine Optimization</h3>
              <p className="text-gray-500 text-sm">Configure SEO settings for your hotel website</p>
            </div>

            <form className="space-y-4" onSubmit={handleSaveSeoSettings}>
              <div className="space-y-2">
                <Label htmlFor="metaTitle">Page Title</Label>
                <Input
                  id="metaTitle"
                  name="metaTitle"
                  value={seoSettings.metaTitle}
                  onChange={handleSeoSettingChange}
                  placeholder="Parkside Plaza Hotel | Luxury Stay in New York"
                />
                <p className="text-xs text-gray-500">Recommended length: 50-60 characters</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="metaDescription">Meta Description</Label>
                <Textarea
                  id="metaDescription"
                  name="metaDescription"
                  value={seoSettings.metaDescription}
                  onChange={handleSeoSettingChange}
                  placeholder="Experience luxury accommodations at Parkside Plaza Hotel in the heart of New York City."
                  className="h-24"
                />
                <p className="text-xs text-gray-500">Recommended length: 150-160 characters</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="ogImage">Social Media Image URL</Label>
                <Input
                  id="ogImage"
                  name="ogImage"
                  value={seoSettings.ogImage}
                  onChange={handleSeoSettingChange}
                  placeholder="https://example.com/images/hotel-social-share.jpg"
                />
                <p className="text-xs text-gray-500">Recommended size: 1200 × 630 pixels</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="googleAnalyticsId">Google Analytics ID</Label>
                <Input
                  id="googleAnalyticsId"
                  name="googleAnalyticsId"
                  value={seoSettings.googleAnalyticsId}
                  onChange={handleSeoSettingChange}
                  placeholder="UA-123456789-1"
                />
              </div>

              <div className="flex justify-end">
                <Button type="submit" disabled={isSeoLoading}>
                  {isSeoLoading ? "Saving..." : "Save Changes"}
                </Button>
              </div>
            </form>
          </div>
        </TabsContent>

        <TabsContent value="app-page" className="bg-white p-6 rounded-lg shadow">
          <AppPageSettings />
        </TabsContent>

        <TabsContent value="integrations" className="bg-white p-6 rounded-lg shadow">
          <div className="space-y-8">
            <div>
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-lg font-medium flex items-center gap-2">
                    <CreditCard className="h-5 w-5" /> Payment Methods
                  </h3>
                  <p className="text-gray-500 text-sm">Connect payment gateways to accept payments</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                {paymentMethods.map((method) => (
                  <div key={method.id} className="p-4 border rounded-md">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <div
                          className="h-10 w-10 rounded-full flex items-center justify-center text-white font-medium"
                          style={{ backgroundColor: method.color }}
                        >
                          {method.logo}
                        </div>
                        <div>
                          <p className="font-medium">{method.name}</p>
                          <p className="text-sm text-gray-500">{method.description}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <ConfirmDeleteModal
                          itemName={`${method.name} payment method`}
                          onConfirmDelete={() => handleDeletePaymentMethod(method.id)}
                        />
                      </div>
                    </div>

                    <div className="flex justify-between items-center pt-2 border-t border-gray-200">
                      <div>
                        {method.connected ? (
                          <Badge className="bg-green-100 text-green-800 border-green-300">
                            Connected
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="text-gray-500">
                            Not Connected
                          </Badge>
                        )}
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleConnectPaymentMethod(method.id)}
                      >
                        {method.connected ? "Disconnect" : "Connect"}
                      </Button>
                    </div>
                  </div>
                ))}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-md">
                <div>
                  <Label htmlFor="paymentName">Name</Label>
                  <Input
                    id="paymentName"
                    value={newPaymentMethod.name}
                    onChange={(e) => setNewPaymentMethod({ ...newPaymentMethod, name: e.target.value })}
                    placeholder="Payment Method Name"
                  />
                </div>

                <div>
                  <Label htmlFor="paymentDescription">Description</Label>
                  <Input
                    id="paymentDescription"
                    value={newPaymentMethod.description}
                    onChange={(e) => setNewPaymentMethod({ ...newPaymentMethod, description: e.target.value })}
                    placeholder="Payment method description"
                  />
                </div>

                <div>
                  <Label htmlFor="paymentApiKey">API Key (Optional)</Label>
                  <Input
                    id="paymentApiKey"
                    value={newPaymentMethod.apiKey}
                    onChange={(e) => setNewPaymentMethod({ ...newPaymentMethod, apiKey: e.target.value })}
                    placeholder="sk_test_123456789"
                    type="password"
                  />
                </div>
              </div>

              <div className="flex justify-end mt-4">
                <Button onClick={handleAddPaymentMethod}>
                  <Plus className="w-4 h-4 mr-2" />
                  Add Payment Method
                </Button>
              </div>
            </div>

            <div>
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-lg font-medium flex items-center gap-2">
                    <Globe className="h-5 w-5" /> Distribution Channels
                  </h3>
                  <p className="text-gray-500 text-sm">Connect to online travel agencies and booking platforms</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                {otaSystems.map((system) => (
                  <div key={system.id} className="p-4 border rounded-md">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <div
                          className="h-10 w-10 rounded-full flex items-center justify-center text-white font-medium"
                          style={{ backgroundColor: system.color }}
                        >
                          {system.logo}
                        </div>
                        <div>
                          <div className="flex items-center gap-2">
                            <p className="font-medium">{system.name}</p>
                            {system.type && <Badge variant="outline" className="text-xs">{system.type}</Badge>}
                          </div>
                          <p className="text-sm text-gray-500">{system.description}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <ConfirmDeleteModal
                          itemName={`${system.name} distribution channel`}
                          onConfirmDelete={() => handleDeleteOtaSystem(system.id)}
                        />
                      </div>
                    </div>

                    <div className="flex justify-between items-center pt-2 border-t border-gray-200">
                      <div>
                        {system.connected ? (
                          <Badge className="bg-green-100 text-green-800 border-green-300">
                            Connected
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="text-gray-500">
                            Not Connected
                          </Badge>
                        )}
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleConnectOtaSystem(system.id)}
                      >
                        {system.connected ? "Disconnect" : "Connect"}
                      </Button>
                    </div>
                  </div>
                ))}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-md">
                <div>
                  <Label htmlFor="otaName">Name</Label>
                  <Input
                    id="otaName"
                    value={newOtaSystem.name}
                    onChange={(e) => setNewOtaSystem({ ...newOtaSystem, name: e.target.value })}
                    placeholder="Channel Name"
                  />
                </div>

                <div>
                  <Label htmlFor="otaDescription">Description</Label>
                  <Input
                    id="otaDescription"
                    value={newOtaSystem.description}
                    onChange={(e) => setNewOtaSystem({ ...newOtaSystem, description: e.target.value })}
                    placeholder="Channel description"
                  />
                </div>

                <div>
                  <Label htmlFor="otaType">Type</Label>
                  <Select
                    value={newOtaSystem.systemType}
                    onValueChange={(value) => setNewOtaSystem({ ...newOtaSystem, systemType: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="OTA">OTA</SelectItem>
                      <SelectItem value="GDS">GDS</SelectItem>
                      <SelectItem value="Channel Manager">Channel Manager</SelectItem>
                      <SelectItem value="Meta Search">Meta Search</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex justify-end mt-4">
                <Button onClick={handleAddOtaSystem}>
                  <Plus className="w-4 h-4 mr-2" />
                  Add Distribution Channel
                </Button>
              </div>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="security" className="bg-white p-6 rounded-lg shadow">
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-medium">Security Settings</h3>
              <p className="text-gray-500 text-sm">Configure security options for your hotel system</p>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-between p-4 border rounded-md">
                <div>
                  <p className="font-medium">Two-Factor Authentication</p>
                  <p className="text-sm text-gray-500">Require staff to use 2FA when logging in</p>
                </div>
                <Switch id="twoFactor" />
              </div>

              <div className="flex items-center justify-between p-4 border rounded-md">
                <div>
                  <p className="font-medium">Session Timeout</p>
                  <p className="text-sm text-gray-500">Automatically log out inactive users</p>
                </div>
                <Select defaultValue="30">
                  <SelectTrigger className="w-40">
                    <SelectValue placeholder="Select timeout" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="15">15 minutes</SelectItem>
                    <SelectItem value="30">30 minutes</SelectItem>
                    <SelectItem value="60">1 hour</SelectItem>
                    <SelectItem value="120">2 hours</SelectItem>
                    <SelectItem value="0">Never</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between p-4 border rounded-md">
                <div>
                  <p className="font-medium">Password Policy</p>
                  <p className="text-sm text-gray-500">Set minimum requirements for passwords</p>
                </div>
                <Select defaultValue="strong">
                  <SelectTrigger className="w-40">
                    <SelectValue placeholder="Select policy" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="basic">Basic</SelectItem>
                    <SelectItem value="moderate">Moderate</SelectItem>
                    <SelectItem value="strong">Strong</SelectItem>
                    <SelectItem value="custom">Custom</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between p-4 border rounded-md">
                <div>
                  <p className="font-medium">Force Password Reset</p>
                  <p className="text-sm text-gray-500">Force all users to reset their passwords</p>
                </div>
                <Button variant="outline">Force Reset</Button>
              </div>
            </div>

            <div className="flex justify-end">
              <Button>Save Changes</Button>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="admin-notifications" className="bg-white p-6 rounded-lg shadow">
          {isCurrentUserSuperAdmin && <NotificationManager />}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default SettingsContent;
</file>

<file path="src/components/Admin/Spa/AddSpaServiceForm.tsx">
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import axios from 'axios';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { toast } from 'sonner';
import { ArrowLeft, Upload, X, Image as ImageIcon, Plus, Trash2 } from 'lucide-react';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Switch } from '@/components/ui/switch';

type ServiceDuration = {
  id: string;
  duration: string;
  price: string;
};

type AddOn = {
  id: string;
  name: string;
  price: string;
  selected: boolean;
};

interface Category {
  _id: string;
  name: string;
  description?: string;
}

interface Specialist {
  _id: string;
  firstName: string;
  lastName: string;
  email?: string;
  status?: string;
}

interface SpaService {
  _id: string;
  title: string;
  description: string;
  categoryId: {
    _id: string;
    name: string;
  };
  specialist: string;
  specialistId: string;
  availability: string;
  status: string;
  isRefundable: boolean;
  refundPolicy: string;
  durations: {
    duration: string;
    price: number;
    _id?: string;
  }[];
  addons: {
    name: string;
    price: number;
    selected: boolean;
    _id?: string;
  }[];
  images: string[];
  popularityScore?: number;
}

interface AddSpaServiceFormProps {
  serviceToEdit?: SpaService;
}

const formSchema = z.object({
  name: z.string().min(2, { message: 'Service name must be at least 2 characters.' }),
  category: z.string().min(1, { message: 'Please select a category.' }),
  specialist: z.string().min(1, { message: 'Please select a specialist.' }),
  availability: z.string().optional(),
  description: z.string().min(10, { message: 'Description must be at least 10 characters.' }),
  status: z.string().default('available'),
});

const AddSpaServiceForm = ({ serviceToEdit }: AddSpaServiceFormProps) => {
  const navigate = useNavigate();
  const [images, setImages] = useState<{ file: File; preview: string }[]>([]);
  const [existingImages, setExistingImages] = useState<string[]>([]);
  const [isDragging, setIsDragging] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const [specialists, setSpecialists] = useState<Specialist[]>([]);
  const [isLoadingCategories, setIsLoadingCategories] = useState(true);
  const [isLoadingSpecialists, setIsLoadingSpecialists] = useState(true);
  const [isEditMode, setIsEditMode] = useState(false);

  const [durations, setDurations] = useState<ServiceDuration[]>([
    { id: '1', duration: '30', price: '50' },
    { id: '2', duration: '60', price: '100' },
  ]);

  const [addOns, setAddOns] = useState<AddOn[]>([
    { id: '1', name: 'Hot Stones', price: '15', selected: false },
    { id: '2', name: 'Essential Oils', price: '10', selected: false },
  ]);

  const [isRefundable, setIsRefundable] = useState(true);
  const [refundPolicy, setRefundPolicy] = useState('Full refund if cancelled up to 48 hours before appointment. 50% refund if cancelled up to 24 hours before appointment.');

  // Fetch categories from API
  useEffect(() => {
    const fetchCategories = async () => {
      setIsLoadingCategories(true);
      try {
        const response = await axios.get('http://localhost:4000/api/categories');
        if (response.data.success) {
          setCategories(response.data.data);
        } else {
          console.error('Failed to fetch categories:', response.data.message);
        }
      } catch (error) {
        console.error('Error fetching categories:', error);
      } finally {
        setIsLoadingCategories(false);
      }
    };

    fetchCategories();
  }, []);

  // Fetch specialists from API
  useEffect(() => {
    const fetchSpecialists = async () => {
      setIsLoadingSpecialists(true);
      try {
        const response = await axios.get('http://localhost:4000/api/specialists');
        if (response.data.success) {
          setSpecialists(response.data.data.filter((specialist: Specialist) =>
            specialist.status === 'active'
          ));
        } else {
          console.error('Failed to fetch specialists:', response.data.message);
        }
      } catch (error) {
        console.error('Error fetching specialists:', error);
      } finally {
        setIsLoadingSpecialists(false);
      }
    };

    fetchSpecialists();
  }, []);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      category: '',
      specialist: '',
      availability: '',
      description: '',
      status: 'available',
    },
  });

  // Initialize form with service data when in edit mode
  useEffect(() => {
    if (serviceToEdit) {
      setIsEditMode(true);
      console.log("Initializing form with service data:", serviceToEdit);

      // Set form values
      form.reset({
        name: serviceToEdit.title,
        category: serviceToEdit.categoryId._id,
        specialist: serviceToEdit.specialistId,
        availability: serviceToEdit.availability,
        description: serviceToEdit.description,
        status: serviceToEdit.status === 'active' ? 'available' : 'unavailable',
      });

      // Set durations
      if (serviceToEdit.durations && serviceToEdit.durations.length > 0) {
        const formattedDurations = serviceToEdit.durations.map((duration, index) => ({
          id: duration._id || `edit-${index}`,
          duration: duration.duration.toString(),
          price: duration.price.toString(),
        }));
        setDurations(formattedDurations);
      }

      // Set addons
      if (serviceToEdit.addons && serviceToEdit.addons.length > 0) {
        const formattedAddons = serviceToEdit.addons.map((addon, index) => ({
          id: addon._id || `edit-${index}`,
          name: addon.name,
          price: addon.price.toString(),
          selected: addon.selected,
        }));
        setAddOns(formattedAddons);
      } else {
        setAddOns([]);
      }

      // Set refund policy
      setIsRefundable(serviceToEdit.isRefundable);
      setRefundPolicy(serviceToEdit.refundPolicy);

      // Set existing images
      if (serviceToEdit.images && serviceToEdit.images.length > 0) {
        setExistingImages(serviceToEdit.images);
      }
    }
  }, [serviceToEdit, form]);

  const addDuration = () => {
    const newId = String(Date.now());
    setDurations([...durations, { id: newId, duration: '', price: '' }]);
  };

  const removeDuration = (id: string) => {
    setDurations(durations.filter(duration => duration.id !== id));
  };

  const updateDuration = (id: string, field: 'duration' | 'price', value: string) => {
    setDurations(durations.map(duration =>
      duration.id === id ? { ...duration, [field]: value } : duration
    ));
  };

  const addAddon = () => {
    const newId = String(Date.now());
    setAddOns([...addOns, { id: newId, name: '', price: '', selected: false }]);
  };

  const removeAddon = (id: string) => {
    setAddOns(addOns.filter(addon => addon.id !== id));
  };

  const updateAddon = (id: string, field: 'name' | 'price' | 'selected', value: any) => {
    setAddOns(addOns.map(addon =>
      addon.id === id ? { ...addon, [field]: value } : addon
    ));
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files);
      const newImages = newFiles.map(file => ({
        file,
        preview: URL.createObjectURL(file),
      }));
      setImages([...images, ...newImages]);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    if (e.dataTransfer.files) {
      const newFiles = Array.from(e.dataTransfer.files);
      const newImages = newFiles.map(file => ({
        file,
        preview: URL.createObjectURL(file),
      }));
      setImages([...images, ...newImages]);
    }
  };

  const handleRemoveImage = (index: number, isExistingImage = false) => {
    if (isExistingImage) {
      // Remove from existing images
      const newExistingImages = [...existingImages];
      newExistingImages.splice(index, 1);
      setExistingImages(newExistingImages);
    } else {
      // Remove from new images
      const newImages = [...images];
      URL.revokeObjectURL(newImages[index].preview);
      newImages.splice(index, 1);
      setImages(newImages);
    }
  };

  // Helper function to get image URL for existing images
  const getImageUrl = (filename: string) => {
    if (filename.startsWith('http')) {
      return filename;
    }
    return `http://localhost:4000/uploads/services/${filename}`;
  };

  // Validate that we have at least one image (either existing or new)
  const validateImages = (): boolean => {
    if (images.length === 0 && existingImages.length === 0) {
      toast.error('Please upload at least one image');
      return false;
    }
    return true;
  };

  const validateDurations = (): boolean => {
    if (durations.length === 0) {
      toast.error('Please add at least one duration option');
      return false;
    }

    for (const duration of durations) {
      if (!duration.duration.trim() || !duration.price.trim()) {
        toast.error('Please fill in all duration and price fields');
        return false;
      }

      if (isNaN(parseFloat(duration.price)) || parseFloat(duration.price) <= 0) {
        toast.error('Price must be a valid positive number');
        return false;
      }

      if (isNaN(parseInt(duration.duration)) || parseInt(duration.duration) <= 0) {
        toast.error('Duration must be a valid positive number');
        return false;
      }
    }

    return true;
  };

  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    if (!validateDurations() || !validateImages()) {
      return;
    }

    setIsLoading(true);

    try {
      // Find the selected specialist to get their full name
      const selectedSpecialist = specialists.find(spec => spec._id === data.specialist);

      if (!selectedSpecialist) {
        toast.error('Please select a valid specialist');
        setIsLoading(false);
        return;
      }

      // Ensure specialist name is a non-empty string
      const specialistName = `${selectedSpecialist.firstName} ${selectedSpecialist.lastName}`.trim();
      if (!specialistName) {
        toast.error('Specialist name cannot be empty');
        setIsLoading(false);
        return;
      }

      // Format durations to match backend model - ENSURE duration is a STRING
      const formattedDurations = durations.map(duration => ({
        duration: String(duration.duration), // Explicitly convert to string
        price: Number(duration.price) // Explicitly convert to number
      }));

      if (formattedDurations.length === 0) {
        toast.error('At least one duration must be provided');
        setIsLoading(false);
        return;
      }

      // Filter valid addons
      const formattedAddons = addOns
        .filter(addon => addon.selected && addon.name.trim() && addon.price.trim())
        .map(addon => ({
          name: String(addon.name).trim(), // Ensure it's a string and trimmed
          price: Number(addon.price), // Ensure it's a number
          selected: Boolean(addon.selected) // Ensure it's a boolean
        }));

      // Create FormData object to handle file uploads
      const formData = new FormData();

      // Append all the text fields
      formData.append('title', String(data.name).trim());
      formData.append('description', String(data.description).trim());
      formData.append('categoryId', data.category);
      formData.append('specialist', specialistName);
      formData.append('specialistId', data.specialist);
      formData.append('availability', data.availability ? String(data.availability).trim() : 'Daily');

      // More explicit status handling
      const statusMapping = {
        'available': 'active',
        'limited': 'active', // Both available and limited are considered active
        'unavailable': 'inactive'
      };
      const backendStatus = statusMapping[data.status as keyof typeof statusMapping] || 'inactive';
      formData.append('status', backendStatus);

      // Also send the display status to the backend
      formData.append('displayStatus', data.status);

      console.log('Status being sent to backend:', backendStatus, 'from form value:', data.status);

      formData.append('isRefundable', String(isRefundable));
      formData.append('refundPolicy', isRefundable ? String(refundPolicy).trim() : 'Non-refundable');

      // Append durations as JSON string
      formData.append('durations', JSON.stringify(formattedDurations));

      // Append addons as JSON string
      formData.append('addons', JSON.stringify(formattedAddons));

      // Add existing images if in edit mode
      if (isEditMode && existingImages.length > 0) {
        formData.append('existingImages', JSON.stringify(existingImages));
      }

      // Append the actual image files
      images.forEach(image => {
        formData.append('images', image.file);
      });

      // Check if we're editing or creating a new service
      if (isEditMode && serviceToEdit) {
        toast.info('Updating service...');

        // Send update request
        try {
          console.log('Sending update request for service ID:', serviceToEdit._id);
          console.log('Form data being sent (partial view):', {
            title: formData.get('title'),
            description: formData.get('description'),
            categoryId: formData.get('categoryId'),
            status: formData.get('status'),
            // Don't log everything to avoid cluttering the console
          });

          const response = await axios.put(
            `http://localhost:4000/api/spa/services/${serviceToEdit._id}`,
            formData,
            {
              headers: {
                'Content-Type': 'multipart/form-data'
              }
            }
          );

          console.log('Server Response:', response.data);

          if (response.data.success) {
            toast.success('Service updated successfully!');
            navigate('/admin/spa');
          } else {
            toast.error(response.data.message || 'Failed to update service');
            console.error('Update failed:', response.data);
          }
        } catch (error) {
          console.error('Error in service update request:', error);
          if (axios.isAxiosError(error) && error.response) {
            console.error('Server error status:', error.response.status);
            console.error('Server error data:', error.response.data);
            toast.error(error.response.data.message || 'Failed to update service');
          } else {
            toast.error('An unexpected error occurred during service update');
          }
        }
      } else {
        toast.info('Creating service...');

        // Send create request
        const response = await axios.post(
          'http://localhost:4000/api/spa/services',
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data'
            }
          }
        );

        console.log('Server Response:', response.data);

        if (response.data.success) {
          toast.success('Service added successfully!');
          navigate('/admin/spa');
        } else {
          toast.error(response.data.message || 'Failed to add service');
          console.error('Validation failed:', response.data);
        }
      }
    } catch (error) {
      console.error(`Error ${isEditMode ? 'updating' : 'adding'} service:`, error);
      if (axios.isAxiosError(error) && error.response) {
        const errorMessage = error.response.data.message || `Failed to ${isEditMode ? 'update' : 'add'} service`;
        toast.error(errorMessage);
        console.error('Server error details:', error.response.data);

        // Log exact details for debugging
        if (error.response.data.error) {
          console.error('Detailed validation error:', error.response.data.error);
        }
      } else {
        toast.error('An unexpected error occurred');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center">
        <Button variant="ghost" onClick={() => navigate('/admin/spa')} className="mr-2">
          <ArrowLeft size={16} />
        </Button>
        <h1 className="text-2xl font-bold">Add Spa Service</h1>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>{isEditMode ? 'Edit Service' : 'Add New Service'}</CardTitle>
          <CardDescription>
            {isEditMode
              ? 'Update the information for this spa service.'
              : 'Complete the form below to add a new spa service.'}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Service Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter service name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="category"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Category</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder={isLoadingCategories ? "Loading categories..." : "Select category"} />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {isLoadingCategories ? (
                            <SelectItem value="loading" disabled>Loading categories...</SelectItem>
                          ) : categories.length > 0 ? (
                            categories.map((category) => (
                              <SelectItem key={category._id} value={category._id}>
                                {category.name}
                              </SelectItem>
                            ))
                          ) : (
                            <SelectItem value="none" disabled>No categories available</SelectItem>
                          )}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="specialist"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Specialist</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder={isLoadingSpecialists ? "Loading specialists..." : "Select specialist"} />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {isLoadingSpecialists ? (
                            <SelectItem value="loading" disabled>Loading specialists...</SelectItem>
                          ) : specialists.length > 0 ? (
                            specialists.map((specialist) => (
                              <SelectItem key={specialist._id} value={specialist._id}>
                                {`${specialist.firstName} ${specialist.lastName}`}
                              </SelectItem>
                            ))
                          ) : (
                            <SelectItem value="none" disabled>No specialists available</SelectItem>
                          )}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="availability"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Availability</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Daily, Weekends" {...field} />
                      </FormControl>
                      <FormDescription>When this service is available</FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="available">Available</SelectItem>
                          <SelectItem value="limited">Limited</SelectItem>
                          <SelectItem value="unavailable">Unavailable</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>Current status: {field.value === "available" ? "Available" : field.value === "limited" ? "Limited" : "Unavailable"}</FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Enter service description"
                        rows={4}
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <Separator className="my-6" />

              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-lg font-semibold">Available Durations & Prices</h3>
                    <p className="text-sm text-gray-500">Add duration options with pricing</p>
                  </div>
                  <Button type="button" variant="outline" size="sm" onClick={addDuration}>
                    <Plus size={16} className="mr-1" />
                    Add Duration
                  </Button>
                </div>

                {durations.map((duration, index) => (
                  <div key={duration.id} className="flex items-end gap-4">
                    <div className="w-1/3">
                      <FormLabel htmlFor={`duration-${duration.id}`}>Duration (minutes)</FormLabel>
                      <Input
                        id={`duration-${duration.id}`}
                        type="number"
                        value={duration.duration}
                        onChange={(e) => updateDuration(duration.id, 'duration', e.target.value)}
                        placeholder="e.g., 60"
                      />
                    </div>
                    <div className="w-1/3">
                      <FormLabel htmlFor={`price-${duration.id}`}>Price ($)</FormLabel>
                      <Input
                        id={`price-${duration.id}`}
                        type="number"
                        value={duration.price}
                        onChange={(e) => updateDuration(duration.id, 'price', e.target.value)}
                        placeholder="e.g., 100"
                      />
                    </div>
                    <Button
                      type="button"
                      variant="outline"
                      size="icon"
                      onClick={() => removeDuration(duration.id)}
                      className="ml-2"
                      disabled={durations.length === 1}
                    >
                      <Trash2 size={16} />
                    </Button>
                  </div>
                ))}
              </div>

              <Separator className="my-6" />

              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-lg font-semibold">Add-ons & Extras (Optional)</h3>
                    <p className="text-sm text-gray-500">Add extra services with additional pricing</p>
                  </div>
                  <Button type="button" variant="outline" size="sm" onClick={addAddon}>
                    <Plus size={16} className="mr-1" />
                    Add Extra
                  </Button>
                </div>

                {addOns.map((addon, index) => (
                  <div key={addon.id} className="flex items-end gap-4">
                    <div className="flex items-center h-10 mt-6 w-8">
                      <Checkbox
                        id={`addon-select-${addon.id}`}
                        checked={addon.selected}
                        onCheckedChange={(checked) => updateAddon(addon.id, 'selected', checked)}
                      />
                    </div>
                    <div className="w-1/2">
                      <FormLabel htmlFor={`addon-name-${addon.id}`}>Name</FormLabel>
                      <Input
                        id={`addon-name-${addon.id}`}
                        value={addon.name}
                        onChange={(e) => updateAddon(addon.id, 'name', e.target.value)}
                        placeholder="e.g., Hot Stones"
                      />
                    </div>
                    <div className="w-1/4">
                      <FormLabel htmlFor={`addon-price-${addon.id}`}>Price ($)</FormLabel>
                      <Input
                        id={`addon-price-${addon.id}`}
                        type="number"
                        value={addon.price}
                        onChange={(e) => updateAddon(addon.id, 'price', e.target.value)}
                        placeholder="e.g., 15"
                      />
                    </div>
                    <Button
                      type="button"
                      variant="outline"
                      size="icon"
                      onClick={() => removeAddon(addon.id)}
                      className="ml-2"
                    >
                      <Trash2 size={16} />
                    </Button>
                  </div>
                ))}
              </div>

              <Separator className="my-6" />

              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-semibold">Refund Policy</h3>
                  <p className="text-sm text-gray-500">Configure refund options for this service</p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <h4 className="text-base font-medium">Refundable Booking</h4>
                      <p className="text-sm text-gray-500">Allow customers to receive refunds when cancelling</p>
                    </div>
                    <Switch
                      checked={isRefundable}
                      onCheckedChange={setIsRefundable}
                    />
                  </div>

                  {isRefundable && (
                    <div>
                      <FormLabel>Refund Policy</FormLabel>
                      <Select
                        value={refundPolicy}
                        onValueChange={setRefundPolicy}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select a refund policy" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Full refund if cancelled up to 48 hours before appointment. 50% refund if cancelled up to 24 hours before appointment.">
                            Standard (48h full/24h partial)
                          </SelectItem>
                          <SelectItem value="Full refund if cancelled up to 72 hours before appointment. No refund after that.">
                            Extended (72h full/no partial)
                          </SelectItem>
                          <SelectItem value="Full refund if cancelled up to 24 hours before appointment.">
                            Limited (24h full/no partial)
                          </SelectItem>
                          <SelectItem value="No refunds available for this service.">
                            No Refunds
                          </SelectItem>
                          <SelectItem value="custom">
                            Custom
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription className="mt-1">
                        Or enter a custom refund policy below
                      </FormDescription>
                      {refundPolicy === "custom" && (
                        <Textarea
                          placeholder="Enter custom refund policy"
                          className="mt-2"
                          value={refundPolicy === "custom" ? "" : refundPolicy}
                          onChange={(e) => setRefundPolicy(e.target.value)}
                          rows={3}
                        />
                      )}
                    </div>
                  )}
                </div>

                {!isRefundable && (
                  <div className="bg-muted p-3 rounded-md">
                    <p className="text-sm text-muted-foreground">This is a non-refundable service. No refunds will be provided for cancellations.</p>
                  </div>
                )}
              </div>

              <Separator className="my-6" />

              <div className="space-y-4">
                <div>
                  <FormLabel>Service Images</FormLabel>
                  <FormDescription>
                    Upload images for this service. You can upload multiple images.
                  </FormDescription>
                </div>

                <div
                  className={`border-2 border-dashed rounded-lg p-8 text-center ${isDragging ? 'border-primary bg-primary/5' : 'border-gray-200'
                    }`}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                >
                  <div className="flex flex-col items-center">
                    <Upload className="h-10 w-10 text-gray-400 mb-4" />
                    <p className="text-sm font-medium mb-1">
                      Drag and drop files here or click to upload
                    </p>
                    <p className="text-sm text-gray-500 mb-4">
                      Upload high-quality images of the service
                    </p>
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => document.getElementById('image-upload')?.click()}
                    >
                      Select Files
                    </Button>
                    <input
                      id="image-upload"
                      type="file"
                      accept="image/*"
                      multiple
                      className="hidden"
                      onChange={handleImageUpload}
                    />
                  </div>
                </div>

                {images.length > 0 || existingImages.length > 0 ? (
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
                    {/* Display existing images */}
                    {existingImages.map((image, index) => (
                      <div key={`existing-${index}`} className="relative group">
                        <div className="aspect-square rounded-lg overflow-hidden border">
                          <img
                            src={getImageUrl(image)}
                            alt={`Existing ${index + 1}`}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <Button
                          type="button"
                          variant="outline"
                          size="icon"
                          className="absolute top-2 right-2 bg-white rounded-full w-6 h-6 p-1"
                          onClick={() => handleRemoveImage(index, true)}
                        >
                          <X size={14} />
                        </Button>
                      </div>
                    ))}

                    {/* Display new images */}
                    {images.map((image, index) => (
                      <div key={`new-${index}`} className="relative group">
                        <div className="aspect-square rounded-lg overflow-hidden border">
                          <img
                            src={image.preview}
                            alt={`Preview ${index + 1}`}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <Button
                          type="button"
                          variant="outline"
                          size="icon"
                          className="absolute top-2 right-2 bg-white rounded-full w-6 h-6 p-1"
                          onClick={() => handleRemoveImage(index, false)}
                        >
                          <X size={14} />
                        </Button>
                      </div>
                    ))}
                  </div>
                ) : null}
              </div>

              <CardFooter className="flex justify-end pt-6 px-0">
                <Button
                  type="button"
                  variant="outline"
                  className="mr-2"
                  onClick={() => navigate('/admin/spa')}
                  disabled={isLoading}
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={isLoading}>
                  {isLoading
                    ? (isEditMode ? "Updating Service..." : "Adding Service...")
                    : (isEditMode ? "Update Service" : "Add Service")}
                </Button>
              </CardFooter>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
};

export default AddSpaServiceForm;
</file>

<file path="src/components/Admin/Spa/AddSpecialistForm.tsx">
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useToast } from "@/components/ui/use-toast";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
} from "@/components/ui/card";
import { CheckCircle2, Upload } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import axios from "axios";

const formSchema = z.object({
  firstName: z.string().min(2, "First name must be at least 2 characters"),
  lastName: z.string().min(2, "Last name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  phone: z.string().min(7, "Phone number must be at least 7 characters"),
  bio: z.string().min(20, "Bio must be at least 20 characters"),
  nationality: z.string().min(2, "Nationality must be at least 2 characters"),
  experienceYears: z.string().optional(),
  status: z.string().default("active"),
  languages: z.string().min(2, "Please enter at least one language"),
  photo: z.any().optional(),
});

type FormValues = z.infer<typeof formSchema>;

// Interface for a category item
interface Category {
  _id: string;
  name: string;
  description?: string;
}

const AddSpecialistForm = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [photoPreview, setPhotoPreview] = useState<string | null>(null);
  const [selectedSpecializations, setSelectedSpecializations] = useState<Category[]>([]);
  const [allCategories, setAllCategories] = useState<Category[]>([]);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [imageUrl, setImageUrl] = useState<string>("");
  const [isUploadingImage, setIsUploadingImage] = useState(false);
  const [isLoadingCategories, setIsLoadingCategories] = useState(true);
  const { toast } = useToast();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      bio: "",
      nationality: "",
      experienceYears: "",
      status: "active",
      languages: "",
      photo: "",
    }
  });

  // Fetch categories from the API
  useEffect(() => {
    const fetchCategories = async () => {
      setIsLoadingCategories(true);
      try {
        const response = await axios.get("http://localhost:4000/api/categories");
        if (response.data.success) {
          setAllCategories(response.data.data);
        } else {
          toast({
            title: "Error",
            description: "Failed to fetch categories",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error fetching categories:", error);
        toast({
          title: "Error",
          description: "Failed to fetch categories",
          variant: "destructive",
        });
      } finally {
        setIsLoadingCategories(false);
      }
    };

    fetchCategories();
  }, [toast]);

  const handlePhotoChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setSelectedFile(file);
    setIsUploadingImage(true);

    // Create preview
    const reader = new FileReader();
    reader.onload = () => {
      setPhotoPreview(reader.result as string);
    };
    reader.readAsDataURL(file);

    try {
      // Upload image to server immediately
      const formData = new FormData();
      formData.append('image', file);

      const uploadResult = await axios.post(
        'http://localhost:4000/api/content/upload-image',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      if (uploadResult.data.success) {
        setImageUrl(uploadResult.data.data.url);
        toast({
          title: "Image Uploaded",
          description: "Profile image uploaded successfully.",
        });
      } else {
        throw new Error("Failed to upload image");
      }
    } catch (error) {
      console.error("Error uploading image:", error);
      toast({
        title: "Upload Error",
        description: "Failed to upload image. Please try again.",
        variant: "destructive",
      });
      // Reset image states on error
      setPhotoPreview(null);
      setSelectedFile(null);
      setImageUrl("");
    } finally {
      setIsUploadingImage(false);
    }
  };

  const toggleSpecialization = (category: Category) => {
    setSelectedSpecializations((prev) => {
      const exists = prev.some(item => item._id === category._id);
      if (exists) {
        return prev.filter(item => item._id !== category._id);
      } else {
        return [...prev, category];
      }
    });
  };

  const onSubmit = async (data: FormValues) => {
    setIsSubmitting(true);

    try {
      // Create FormData object to send form data
      const formData = new FormData();

      // Add form fields
      Object.entries(data).forEach(([key, value]) => {
        if (value !== null && value !== undefined && key !== 'photo') {
          formData.append(key, String(value));
        }
      });

      // Add specializations
      formData.append("specializations", JSON.stringify(selectedSpecializations));

      // Add image URL instead of file
      if (imageUrl) {
        formData.append("photo", imageUrl);
      }

      // Send request to backend API
      const response = await axios.post(
        "http://localhost:4000/api/specialists",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        }
      );

      if (response.data.success) {
        setIsSuccess(true);
        toast({
          title: "Specialist Added",
          description: `${data.firstName} ${data.lastName} has been added successfully.`,
        });

        // Reset form after 2 seconds
        setTimeout(() => {
          form.reset();
          setPhotoPreview(null);
          setSelectedFile(null);
          setImageUrl("");
          setSelectedSpecializations([]);
          setIsSuccess(false);
        }, 2000);
      } else {
        throw new Error(response.data.message || "Failed to add specialist");
      }
    } catch (error) {
      console.error("Error adding specialist:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to add specialist",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card>
      <CardContent className="pt-6">
        {isSuccess ? (
          <div className="flex flex-col items-center justify-center py-12">
            <CheckCircle2 className="h-16 w-16 text-green-500 mb-4" />
            <h3 className="text-xl font-medium text-gray-900">Specialist Added Successfully</h3>
            <p className="text-gray-500 mt-2">The new specialist has been added to the system.</p>
            <Button className="mt-6" onClick={() => setIsSuccess(false)}>
              Add Another Specialist
            </Button>
          </div>
        ) : (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="flex justify-center mb-6">
                <div className="flex flex-col items-center">
                  <div className="relative w-32 h-32 rounded-full overflow-hidden border-2 border-gray-200 mb-2">
                    {photoPreview ? (
                      <img
                        src={photoPreview}
                        alt="Profile preview"
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full bg-gray-100 flex items-center justify-center text-gray-400">
                        <Upload size={32} />
                      </div>
                    )}
                    {isUploadingImage && (
                      <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                        <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      </div>
                    )}
                  </div>
                  <Input
                    id="photo"
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={handlePhotoChange}
                    disabled={isUploadingImage}
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => document.getElementById("photo")?.click()}
                    className="text-sm"
                    disabled={isUploadingImage}
                  >
                    {isUploadingImage ? "Uploading..." : "Upload Photo"}
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter first name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter last name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email Address*</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="Enter email address" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="phone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Phone Number*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter phone number" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="nationality"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nationality*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter nationality" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="languages"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Languages Spoken*</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g. English, Spanish, French" {...field} />
                      </FormControl>
                      <FormDescription>
                        Separate multiple languages with commas
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="experienceYears"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Years of Experience</FormLabel>
                      <FormControl>
                        <Input type="number" placeholder="Enter years of experience" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status*</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="active">Active</SelectItem>
                          <SelectItem value="inactive">Inactive</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="col-span-1 md:col-span-2">
                  <div className="mb-6">
                    <FormLabel className="block mb-2">Specializations*</FormLabel>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="outline" className="w-full justify-start">
                          <span className="truncate">
                            {selectedSpecializations.length === 0
                              ? "Select specializations"
                              : `${selectedSpecializations.length} selected`}
                          </span>
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent className="w-56">
                        <DropdownMenuLabel>Categories</DropdownMenuLabel>
                        <DropdownMenuSeparator />
                        {isLoadingCategories ? (
                          <div className="px-2 py-1.5 text-sm">Loading categories...</div>
                        ) : allCategories.length > 0 ? (
                          allCategories.map((category) => (
                            <DropdownMenuCheckboxItem
                              key={category._id}
                              checked={selectedSpecializations.some(item => item._id === category._id)}
                              onCheckedChange={() => toggleSpecialization(category)}
                            >
                              {category.name}
                            </DropdownMenuCheckboxItem>
                          ))
                        ) : (
                          <div className="px-2 py-1.5 text-sm">No categories available</div>
                        )}
                      </DropdownMenuContent>
                    </DropdownMenu>

                    {selectedSpecializations.length > 0 && (
                      <div className="mt-2 flex flex-wrap gap-2">
                        {selectedSpecializations.map(spec => (
                          <Badge key={spec._id} variant="secondary" className="p-1">
                            {spec.name}
                          </Badge>
                        ))}
                      </div>
                    )}

                    {selectedSpecializations.length === 0 && (
                      <p className="text-sm text-red-500 mt-2">
                        Please select at least one specialization
                      </p>
                    )}
                  </div>

                  <FormField
                    control={form.control}
                    name="bio"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Specialist Bio*</FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder="Enter specialist bio and description"
                            className="min-h-[120px]"
                            {...field}
                          />
                        </FormControl>
                        <FormDescription>
                          Provide details about specialist's background, certifications and expertise.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              <div className="flex justify-end space-x-4 pt-4">
                <Button variant="outline" type="button">
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting || selectedSpecializations.length === 0}
                >
                  {isSubmitting ? "Adding..." : "Add Specialist"}
                </Button>
              </div>
            </form>
          </Form>
        )}
      </CardContent>
    </Card>
  );
};

export default AddSpecialistForm;
</file>

<file path="src/components/Admin/Spa/SpaBookingsContent.tsx">
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Search, Filter, Calendar as CalendarIcon, Check, X, Clock, RotateCcw, Globe, Smartphone } from "lucide-react";
import { format } from "date-fns";
import { Switch } from "@/components/ui/switch";
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle, 
  DialogFooter 
} from "@/components/ui/dialog";
import { toast } from "sonner";

interface SpaBooking {
  id: string;
  clientName: string;
  service: string;
  specialist: string;
  date: string;
  time: string;
  duration: number;
  status: "confirmed" | "pending" | "cancelled" | "completed";
  isRefundable: boolean;
  refundPolicy: string;
  email: string;
  phone: string;
  source: "website" | "app";
}

const SpaBookingsContent = () => {
  const [bookings, setBookings] = useState<SpaBooking[]>([]);
  const [filter, setFilter] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [date, setDate] = useState<Date | undefined>(new Date());
  const [showRefundDialog, setShowRefundDialog] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState<SpaBooking | null>(null);
  const [showDetailsDialog, setShowDetailsDialog] = useState(false);

  useEffect(() => {
    const mockBookings: SpaBooking[] = [
      { 
        id: "b1", 
        clientName: "Sarah Johnson", 
        service: "Swedish Massage", 
        specialist: "Emma Thompson", 
        date: "2025-04-09", 
        time: "10:00 AM", 
        duration: 60, 
        status: "confirmed",
        isRefundable: true,
        refundPolicy: "Full refund if cancelled 24 hours before appointment. 50% refund if cancelled 12 hours before appointment.",
        email: "sarah.johnson@example.com",
        phone: "+1-555-123-4567",
        source: "website"
      },
      { 
        id: "b2", 
        clientName: "Michael Brown", 
        service: "Deep Tissue Massage", 
        specialist: "David Wilson", 
        date: "2025-04-09", 
        time: "11:30 AM", 
        duration: 90, 
        status: "completed",
        isRefundable: false,
        refundPolicy: "Non-refundable for premium services.",
        email: "michael.brown@example.com",
        phone: "+1-555-987-6543",
        source: "app"
      },
      { 
        id: "b3", 
        clientName: "Jennifer Davis", 
        service: "Hot Stone Therapy", 
        specialist: "Emma Thompson", 
        date: "2025-04-09", 
        time: "2:00 PM", 
        duration: 90, 
        status: "confirmed",
        isRefundable: true,
        refundPolicy: "Full refund if cancelled 24 hours before appointment.",
        email: "jennifer.davis@example.com",
        phone: "+1-555-234-5678",
        source: "website"
      },
      { 
        id: "b4", 
        clientName: "Robert Miller", 
        service: "Aromatherapy Facial", 
        specialist: "Lisa Anderson", 
        date: "2025-04-10", 
        time: "9:30 AM", 
        duration: 45, 
        status: "pending",
        isRefundable: true,
        refundPolicy: "Full refund if cancelled 24 hours before appointment.",
        email: "robert.miller@example.com",
        phone: "+1-555-345-6789",
        source: "app"
      },
      { 
        id: "b5", 
        clientName: "Elizabeth Wilson", 
        service: "Deluxe Spa Package", 
        specialist: "David Wilson", 
        date: "2025-04-10", 
        time: "1:00 PM", 
        duration: 120, 
        status: "cancelled",
        isRefundable: false,
        refundPolicy: "Deluxe packages are non-refundable once confirmed.",
        email: "elizabeth.wilson@example.com",
        phone: "+1-555-456-7890",
        source: "website"
      },
      { 
        id: "b6", 
        clientName: "James Taylor", 
        service: "Swedish Massage", 
        specialist: "Emma Thompson", 
        date: "2025-04-11", 
        time: "3:30 PM", 
        duration: 60, 
        status: "confirmed",
        isRefundable: true,
        refundPolicy: "Full refund if cancelled 24 hours before appointment.",
        email: "james.taylor@example.com",
        phone: "+1-555-567-8901",
        source: "app"
      },
      { 
        id: "b7", 
        clientName: "Patricia Moore", 
        service: "Deep Tissue Massage", 
        specialist: "Lisa Anderson", 
        date: "2025-04-11", 
        time: "11:00 AM", 
        duration: 90, 
        status: "pending",
        isRefundable: true,
        refundPolicy: "Full refund if cancelled 24 hours before appointment. 50% refund if cancelled 12 hours before appointment.",
        email: "patricia.moore@example.com",
        phone: "+1-555-678-9012",
        source: "website"
      },
      { 
        id: "b8", 
        clientName: "John Anderson", 
        service: "Hot Stone Therapy", 
        specialist: "David Wilson", 
        date: "2025-04-12", 
        time: "10:00 AM", 
        duration: 90, 
        status: "confirmed",
        isRefundable: true,
        refundPolicy: "Full refund if cancelled 24 hours before appointment.",
        email: "john.anderson@example.com",
        phone: "+1-555-789-0123",
        source: "app"
      },
    ];
    setBookings(mockBookings);
  }, []);

  const filteredBookings = bookings.filter(booking => {
    if (filter !== "all" && booking.status !== filter) return false;
    if (date && booking.date !== format(date, "yyyy-MM-dd")) return false;
    if (searchQuery && !booking.clientName.toLowerCase().includes(searchQuery.toLowerCase()) &&
        !booking.service.toLowerCase().includes(searchQuery.toLowerCase()) &&
        !booking.specialist.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }
    return true;
  });

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "confirmed":
        return <Badge className="bg-green-500">Confirmed</Badge>;
      case "pending":
        return <Badge className="bg-yellow-500">Pending</Badge>;
      case "cancelled":
        return <Badge className="bg-red-500">Cancelled</Badge>;
      case "completed":
        return <Badge className="bg-blue-500">Completed</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  const handleRefundRequest = (booking: SpaBooking) => {
    setSelectedBooking(booking);
    setShowRefundDialog(true);
  };

  const handleProcessRefund = () => {
    if (selectedBooking) {
      toast.success(`Refund request for booking ${selectedBooking.id} has been initiated`);
      setShowRefundDialog(false);
    }
  };

  const handleViewDetails = (booking: SpaBooking) => {
    setSelectedBooking(booking);
    setShowDetailsDialog(true);
  };

  const getSourceIcon = (source: "website" | "app") => {
    if (source === "website") {
      return <Globe className="h-4 w-4 text-blue-500" />;
    } else if (source === "app") {
      return <Smartphone className="h-4 w-4 text-green-500" />;
    }
    return null;
  };

  const [isSuperAdmin, setIsSuperAdmin] = useState(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const userData = JSON.parse(userDataString);
      return userData.role === "Administrator" || userData.accessLevel === "Full Access";
    }
    return false;
  });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Spa Bookings</h1>
        <Button>
          New Booking
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle>Bookings</CardTitle>
            <div className="flex flex-col sm:flex-row gap-2 mt-2">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
                <Input
                  placeholder="Search by client, service, or specialist..."
                  className="pl-8"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              <Select value={filter} onValueChange={setFilter}>
                <SelectTrigger className="w-full sm:w-[180px]">
                  <SelectValue placeholder="Filter by status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Bookings</SelectItem>
                  <SelectItem value="confirmed">Confirmed</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="cancelled">Cancelled</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Client</TableHead>
                    <TableHead>Service</TableHead>
                    <TableHead>Specialist</TableHead>
                    <TableHead>Time</TableHead>
                    <TableHead>Duration</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Refundable</TableHead>
                    {isSuperAdmin && <TableHead>Source</TableHead>}
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredBookings.length > 0 ? (
                    filteredBookings.map((booking) => (
                      <TableRow key={booking.id}>
                        <TableCell>{booking.clientName}</TableCell>
                        <TableCell>{booking.service}</TableCell>
                        <TableCell>{booking.specialist}</TableCell>
                        <TableCell>{booking.time}</TableCell>
                        <TableCell>{booking.duration} min</TableCell>
                        <TableCell>{getStatusBadge(booking.status)}</TableCell>
                        <TableCell>
                          {booking.isRefundable ? (
                            <Check className="h-4 w-4 text-green-500" />
                          ) : (
                            <X className="h-4 w-4 text-red-500" />
                          )}
                        </TableCell>
                        {isSuperAdmin && (
                          <TableCell>
                            <div className="flex items-center gap-1.5">
                              {getSourceIcon(booking.source)}
                              <span className="text-xs capitalize">{booking.source}</span>
                            </div>
                          </TableCell>
                        )}
                        <TableCell className="text-right space-x-2">
                          <Button size="sm" variant="outline" onClick={() => handleViewDetails(booking)}>View</Button>
                          <Button size="sm" variant="outline">Edit</Button>
                          {isSuperAdmin && booking.status !== "cancelled" && booking.isRefundable && (
                            <Button 
                              size="sm" 
                              variant="outline" 
                              className="text-blue-500 hover:text-blue-700"
                              onClick={() => handleRefundRequest(booking)}
                            >
                              <RotateCcw className="h-4 w-4 mr-1" /> Refund
                            </Button>
                          )}
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={isSuperAdmin ? 9 : 8} className="text-center py-4">
                        No bookings found matching your criteria
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Calendar</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <Calendar
              mode="single"
              selected={date}
              onSelect={setDate}
              className="rounded-md border"
            />
            <div className="mt-4 space-y-2">
              <h3 className="font-medium">Today's Overview</h3>
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4 text-gray-500" />
                <span>8 bookings scheduled</span>
              </div>
              <div className="flex items-center gap-2">
                <Check className="h-4 w-4 text-green-500" />
                <span>3 completed</span>
              </div>
              <div className="flex items-center gap-2">
                <X className="h-4 w-4 text-red-500" />
                <span>1 cancelled</span>
              </div>
              <Button className="w-full mt-4" variant="outline">View Full Schedule</Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <Dialog open={showRefundDialog} onOpenChange={setShowRefundDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Process Refund</DialogTitle>
            <DialogDescription>
              {selectedBooking?.isRefundable 
                ? "Are you sure you want to process a refund for this booking?" 
                : "This booking is marked as non-refundable."}
            </DialogDescription>
          </DialogHeader>
          
          {selectedBooking && (
            <div className="py-4">
              <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                <h3 className="text-sm font-medium mb-2">Refund Policy:</h3>
                <p className="text-sm text-gray-700">{selectedBooking.refundPolicy}</p>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-sm font-medium">Booking ID:</p>
                  <p className="text-sm">{selectedBooking.id}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Client:</p>
                  <p className="text-sm">{selectedBooking.clientName}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Service:</p>
                  <p className="text-sm">{selectedBooking.service}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Contact:</p>
                  <p className="text-sm">{selectedBooking.email}</p>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowRefundDialog(false)}>Cancel</Button>
            <Button 
              disabled={selectedBooking && !selectedBooking.isRefundable} 
              onClick={handleProcessRefund}
            >
              Process Refund
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Booking Details</DialogTitle>
            <DialogDescription>
              Complete information about the booking
            </DialogDescription>
          </DialogHeader>
          
          {selectedBooking && (
            <div className="mt-4 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Booking Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Booking ID:</span>
                      <span className="text-sm">{selectedBooking.id}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Status:</span>
                      <span className="text-sm">{getStatusBadge(selectedBooking.status)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Date:</span>
                      <span className="text-sm">{selectedBooking.date}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Time:</span>
                      <span className="text-sm">{selectedBooking.time}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Service:</span>
                      <span className="text-sm">{selectedBooking.service}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Specialist:</span>
                      <span className="text-sm">{selectedBooking.specialist}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Duration:</span>
                      <span className="text-sm">{selectedBooking.duration} min</span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Client Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Name:</span>
                      <span className="text-sm">{selectedBooking.clientName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Email:</span>
                      <span className="text-sm">{selectedBooking.email}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Phone:</span>
                      <span className="text-sm">{selectedBooking.phone}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div>
                <div className="flex items-center justify-between mb-2">
                  <h4 className="text-sm font-medium text-muted-foreground">Refund Policy</h4>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm">Refundable:</span>
                    <Switch checked={selectedBooking.isRefundable} id="refundable-toggle" disabled />
                  </div>
                </div>
                <p className="text-sm p-3 bg-gray-50 rounded-md">{selectedBooking.refundPolicy}</p>
              </div>
              
              {isSuperAdmin && selectedBooking.status !== "cancelled" && selectedBooking.isRefundable && (
                <div className="flex justify-end">
                  <Button onClick={() => {
                    setShowDetailsDialog(false);
                    setTimeout(() => handleRefundRequest(selectedBooking), 100);
                  }}>
                    <RotateCcw className="h-4 w-4 mr-2" />
                    Process Refund
                  </Button>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default SpaBookingsContent;
</file>

<file path="src/components/Admin/Spa/SpaCategoriesContent.tsx">
import React, { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Plus, Edit, Trash2, Search } from "lucide-react";
import { toast } from "sonner";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import axios from "axios";

interface Category {
  _id: string;
  name: string;
  description: string;
  serviceCount: number;
  status: string;
}

const formSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  description: z.string().min(10, "Description must be at least 10 characters"),
  status: z.string().default("active")
});

const SpaCategoriesContent = () => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [categoryToDelete, setCategoryToDelete] = useState<string | null>(null);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      description: "",
      status: "active"
    }
  });

  // Fetch categories from API
  const fetchCategories = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get("http://localhost:4000/api/categories");
      if (response.data.success) {
        setCategories(response.data.data);
      } else {
        toast.error("Failed to fetch categories");
      }
    } catch (error) {
      console.error("Error fetching categories:", error);
      toast.error("Failed to fetch categories");
    } finally {
      setIsLoading(false);
    }
  };

  // Initialize with data from API
  useEffect(() => {
    fetchCategories();
  }, []);

  const handleCreate = async (data: z.infer<typeof formSchema>) => {
    try {
      const response = await axios.post("http://localhost:4000/api/categories", data);

      if (response.data.success) {
        toast.success("Category created successfully");
        fetchCategories(); // Refresh the categories list
        form.reset();
        setCreateDialogOpen(false); // Close the dialog after successful creation
      } else {
        toast.error(response.data.message || "Failed to create category");
      }
    } catch (error) {
      console.error("Error creating category:", error);
      toast.error(error.response?.data?.message || "Failed to create category");
    }
  };

  const handleEdit = (category: Category) => {
    setEditingCategory(category);
    form.reset({
      name: category.name,
      description: category.description,
      status: category.status
    });
  };

  const handleUpdate = async (data: z.infer<typeof formSchema>) => {
    if (!editingCategory) return;

    try {
      const response = await axios.put(
        `http://localhost:4000/api/categories/${editingCategory._id}`,
        data
      );

      if (response.data.success) {
        toast.success("Category updated successfully");
        fetchCategories(); // Refresh the categories list
        setEditingCategory(null);
        form.reset();
      } else {
        toast.error(response.data.message || "Failed to update category");
      }
    } catch (error) {
      console.error("Error updating category:", error);
      toast.error(error.response?.data?.message || "Failed to update category");
    }
  };

  const confirmDelete = (id: string) => {
    setCategoryToDelete(id);
    setDeleteDialogOpen(true);
  };

  const handleDelete = async () => {
    if (!categoryToDelete) return;

    try {
      const response = await axios.delete(`http://localhost:4000/api/categories/${categoryToDelete}`);

      if (response.data.success) {
        toast.success("Category deleted successfully");
        fetchCategories(); // Refresh the categories list
      } else {
        toast.error(response.data.message || "Failed to delete category");
      }
    } catch (error) {
      console.error("Error deleting category:", error);
      // Check if the error is due to category being used by services
      if (error.response?.data?.serviceCount) {
        toast.error(`Cannot delete category that is associated with ${error.response.data.serviceCount} services`);
      } else {
        toast.error(error.response?.data?.message || "Failed to delete category");
      }
    } finally {
      setCategoryToDelete(null);
      setDeleteDialogOpen(false);
    }
  };

  // Seed initial categories
  const handleSeedInitialCategories = async () => {
    if (categories.length > 0) {
      toast.info("Categories already exist");
      return;
    }

    try {
      const response = await axios.post("http://localhost:4000/api/categories/seed");

      if (response.data.success) {
        toast.success(`${response.data.count} categories seeded successfully`);
        fetchCategories(); // Refresh the categories list
      } else {
        toast.error(response.data.message || "Failed to seed categories");
      }
    } catch (error) {
      console.error("Error seeding categories:", error);
      toast.error(error.response?.data?.message || "Failed to seed categories");
    }
  };

  const filteredCategories = categories.filter(category =>
    category.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    category.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
    category.serviceCount.toString().includes(searchQuery) ||
    category.status.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Spa Categories</h1>
        <div className="flex gap-2">
          {categories.length === 0 && (
            <Button onClick={handleSeedInitialCategories} variant="outline" className="flex items-center gap-2">
              <Plus size={16} />
              <span>Seed Initial Categories</span>
            </Button>
          )}
          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button className="flex items-center gap-2" onClick={() => setCreateDialogOpen(true)}>
                <Plus size={16} />
                <span>Add Category</span>
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Add New Category</DialogTitle>
              </DialogHeader>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(handleCreate)} className="space-y-4">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Category Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Enter category name" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Description</FormLabel>
                        <FormControl>
                          <Textarea placeholder="Enter category description" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <DialogFooter>
                    <Button variant="outline" type="button" onClick={() => setCreateDialogOpen(false)}>Cancel</Button>
                    <Button type="submit">Create Category</Button>
                  </DialogFooter>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Manage Categories</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center">
              <div className="relative w-full max-w-sm">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
                <Input
                  type="text"
                  placeholder="Search categories..."
                  className="pl-10"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>

            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead>Services Count</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {isLoading ? (
                    <TableRow>
                      <TableCell colSpan={5} className="text-center py-10">
                        Loading categories...
                      </TableCell>
                    </TableRow>
                  ) : filteredCategories.length > 0 ? (
                    filteredCategories.map((category) => (
                      <TableRow key={category._id}>
                        <TableCell className="font-medium">{category.name}</TableCell>
                        <TableCell>{category.description}</TableCell>
                        <TableCell>{category.serviceCount}</TableCell>
                        <TableCell>
                          <Badge variant={category.status === "active" ? "default" : "outline"}>
                            {category.status === "active" ? "Active" : "Inactive"}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <Dialog>
                              <DialogTrigger asChild>
                                <Button variant="ghost" size="icon" onClick={() => handleEdit(category)}>
                                  <Edit size={16} />
                                </Button>
                              </DialogTrigger>
                              <DialogContent>
                                <DialogHeader>
                                  <DialogTitle>Edit Category</DialogTitle>
                                </DialogHeader>
                                <Form {...form}>
                                  <form onSubmit={form.handleSubmit(handleUpdate)} className="space-y-4">
                                    <FormField
                                      control={form.control}
                                      name="name"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>Category Name</FormLabel>
                                          <FormControl>
                                            <Input placeholder="Enter category name" {...field} />
                                          </FormControl>
                                          <FormMessage />
                                        </FormItem>
                                      )}
                                    />
                                    <FormField
                                      control={form.control}
                                      name="description"
                                      render={({ field }) => (
                                        <FormItem>
                                          <FormLabel>Description</FormLabel>
                                          <FormControl>
                                            <Textarea placeholder="Enter category description" {...field} />
                                          </FormControl>
                                          <FormMessage />
                                        </FormItem>
                                      )}
                                    />
                                    <DialogFooter>
                                      <DialogClose asChild>
                                        <Button variant="outline" type="button">Cancel</Button>
                                      </DialogClose>
                                      <Button type="submit">Update Category</Button>
                                    </DialogFooter>
                                  </form>
                                </Form>
                              </DialogContent>
                            </Dialog>
                            <Button
                              variant="ghost"
                              size="icon"
                              className="text-red-500 hover:text-red-700"
                              onClick={() => confirmDelete(category._id)}
                            >
                              <Trash2 size={16} />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={5} className="text-center py-10 text-gray-500">
                        No categories found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <p>Are you sure you want to delete this category? This action cannot be undone.</p>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDelete}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default SpaCategoriesContent;
</file>

<file path="src/components/Admin/Spa/SpaManagementContent.tsx">
import { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Search,
  Plus,
  Edit,
  Trash2,
  Calendar,
  BarChart,
  Award,
  Briefcase,
  FileText,
  Bell,
  Upload
} from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import axios from "axios";
import { useToast } from "@/components/ui/use-toast";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from "@/components/ui/dropdown-menu";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

// Interface for spa service - update to match backend model
interface SpaService {
  _id: string;
  title: string;
  description: string;
  categoryId: {
    _id: string;
    name: string;
  };
  images: string[];
  isPopular: boolean;
  status: string;
  displayStatus?: string; // Optional because older records might not have it
  specialist: string;
  availability: string;
  durations: {
    duration: string;
    price: number;
  }[];
  addons: {
    name: string;
    price: number;
    selected: boolean;
  }[];
  popularityScore: number;
  specialistId: string;
}

// Interface for spa specialist
interface SpaSpecialist {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  bio: string;
  nationality: string;
  experienceYears: string;
  status: string;
  languages: string;
  specializations: {
    _id: string;
    name: string;
  }[];
  photo?: string;
}

// Interface for current user
interface CurrentUser {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

// Interface for category
interface Category {
  _id: string;
  name: string;
  description?: string;
}

// Form schema for specialist editing
const specialistFormSchema = z.object({
  firstName: z.string().min(2, "First name must be at least 2 characters"),
  lastName: z.string().min(2, "Last name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  phone: z.string().min(7, "Phone number must be at least 7 characters"),
  bio: z.string().min(20, "Bio must be at least 20 characters"),
  nationality: z.string().min(2, "Nationality must be at least 2 characters"),
  experienceYears: z.string().optional(),
  status: z.string().default("active"),
  languages: z.string().min(2, "Please enter at least one language"),
});

type SpecialistFormValues = z.infer<typeof specialistFormSchema>;

const SpaManagementContent = () => {
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState("");
  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
  const [activeTab, setActiveTab] = useState("services");
  const [specialists, setSpecialists] = useState<SpaSpecialist[]>([]);
  const [services, setServices] = useState<SpaService[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingServices, setIsLoadingServices] = useState(true);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [specialistToDelete, setSpecialistToDelete] = useState<string | null>(null);
  const [serviceToDelete, setServiceToDelete] = useState<string | null>(null);
  const [deleteServiceDialogOpen, setDeleteServiceDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [currentSpecialist, setCurrentSpecialist] = useState<SpaSpecialist | null>(null);
  const [photoPreview, setPhotoPreview] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [allCategories, setAllCategories] = useState<Category[]>([]);
  const [selectedSpecializations, setSelectedSpecializations] = useState<Category[]>([]);
  const [isLoadingCategories, setIsLoadingCategories] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  // Form setup
  const form = useForm<SpecialistFormValues>({
    resolver: zodResolver(specialistFormSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      bio: "",
      nationality: "",
      experienceYears: "",
      status: "active",
      languages: "",
    }
  });

  // Get current user from localStorage
  useEffect(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      setCurrentUser(JSON.parse(userDataString));
    }
  }, []);

  // Fetch specialists from API
  useEffect(() => {
    const fetchSpecialists = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get("http://localhost:4000/api/specialists");
        if (response.data.success) {
          setSpecialists(response.data.data);
        } else {
          toast({
            title: "Error",
            description: "Failed to fetch specialists",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error fetching specialists:", error);
        toast({
          title: "Error",
          description: "Failed to fetch specialists",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchSpecialists();
  }, [toast]);

  // Fetch categories from the API
  useEffect(() => {
    const fetchCategories = async () => {
      setIsLoadingCategories(true);
      try {
        const response = await axios.get("http://localhost:4000/api/categories");
        if (response.data.success) {
          setAllCategories(response.data.data);
        } else {
          toast({
            title: "Error",
            description: "Failed to fetch categories",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error fetching categories:", error);
        toast({
          title: "Error",
          description: "Failed to fetch categories",
          variant: "destructive",
        });
      } finally {
        setIsLoadingCategories(false);
      }
    };

    fetchCategories();
  }, [toast]);

  // Fetch services from API
  useEffect(() => {
    const fetchServices = async () => {
      setIsLoadingServices(true);
      try {
        const response = await axios.get("http://localhost:4000/api/spa/services");
        if (response.data.success) {
          setServices(response.data.data);
        } else {
          toast({
            title: "Error",
            description: "Failed to fetch services",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error fetching services:", error);
        toast({
          title: "Error",
          description: "Failed to fetch services",
          variant: "destructive",
        });
      } finally {
        setIsLoadingServices(false);
      }
    };

    fetchServices();
  }, [toast]);

  // Filter services based on search query
  const filteredServices = services.filter((service) => {
    return service.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (service.categoryId?.name?.toLowerCase() || "").includes(searchQuery.toLowerCase()) ||
      service.specialist.toLowerCase().includes(searchQuery.toLowerCase());
  });

  // Filter specialists based on search query
  const filteredSpecialists = specialists.filter((specialist) => {
    const fullName = `${specialist.firstName} ${specialist.lastName}`.toLowerCase();
    const specializations = specialist.specializations.map(spec => spec.name).join(" ").toLowerCase();
    const query = searchQuery.toLowerCase();

    return fullName.includes(query) ||
      specialist.nationality.toLowerCase().includes(query) ||
      specializations.includes(query) ||
      specialist.experienceYears.toString().toLowerCase().includes(query) ||
      specialist.languages.toLowerCase().includes(query) ||
      specialist.email.toLowerCase().includes(query);
  });

  // Get the count of active specialists
  const activeSpecialistsCount = specialists.filter(specialist =>
    specialist.status === "active").length;

  // Check if user can add content
  const canAddContent =
    !currentUser ||
    currentUser.accessLevel === "Full Access" ||
    currentUser.accessLevel === "Administrative" ||
    (currentUser.role === "Manager" && currentUser.department === "Spa & Wellness");

  // Helper function to get the specialist photo URL
  const getSpecialistPhotoUrl = (imagePath?: string) => {
    if (!imagePath) return 'https://via.placeholder.com/40?text=NA';
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    return `http://localhost:4000/uploads/specialists/${imagePath}`;
  };

  // Helper function to get service image URL
  const getServiceImageUrl = (imagePath?: string) => {
    if (!imagePath) return 'https://via.placeholder.com/40?text=NA';
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    return `http://localhost:4000/uploads/services/${imagePath}`;
  };

  // Handle editing a specialist
  const handleEditSpecialist = (specialistId: string) => {
    const specialist = specialists.find(s => s._id === specialistId);
    if (!specialist) return;

    setCurrentSpecialist(specialist);
    setSelectedSpecializations(specialist.specializations as unknown as Category[]);

    // Set photo preview if exists
    if (specialist.photo) {
      setPhotoPreview(getSpecialistPhotoUrl(specialist.photo));
    } else {
      setPhotoPreview(null);
    }

    // Reset form with specialist data
    form.reset({
      firstName: specialist.firstName,
      lastName: specialist.lastName,
      email: specialist.email,
      phone: specialist.phone,
      bio: specialist.bio,
      nationality: specialist.nationality,
      experienceYears: specialist.experienceYears,
      status: specialist.status,
      languages: specialist.languages,
    });

    setEditDialogOpen(true);
  };

  // Toggle specialization selection
  const toggleSpecialization = (category: Category) => {
    setSelectedSpecializations((prev) => {
      const exists = prev.some(item => item._id === category._id);
      if (exists) {
        return prev.filter(item => item._id !== category._id);
      } else {
        return [...prev, category];
      }
    });
  };

  // Handle photo change
  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setSelectedFile(file);

    // Create preview
    const reader = new FileReader();
    reader.onload = () => {
      setPhotoPreview(reader.result as string);
    };
    reader.readAsDataURL(file);
  };

  // Submit specialist updates
  const onSubmit = async (data: SpecialistFormValues) => {
    if (!currentSpecialist) return;
    setIsSubmitting(true);

    try {
      // Create FormData object to send file and form data
      const formData = new FormData();

      // Add form fields
      Object.entries(data).forEach(([key, value]) => {
        if (value !== null && value !== undefined) {
          formData.append(key, String(value));
        }
      });

      // Add specializations
      formData.append("specializations", JSON.stringify(selectedSpecializations));

      // Add photo if selected
      if (selectedFile) {
        formData.append("photo", selectedFile);
      }

      // Send request to backend API
      const response = await axios.put(
        `http://localhost:4000/api/specialists/${currentSpecialist._id}`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        }
      );

      if (response.data.success) {
        // Update specialists list
        setSpecialists(specialists.map(s =>
          s._id === currentSpecialist._id ? response.data.data : s
        ));

        toast({
          title: "Success",
          description: "Specialist updated successfully",
        });

        // Close dialog and reset state
        setEditDialogOpen(false);
        setCurrentSpecialist(null);
        setSelectedFile(null);
        setPhotoPreview(null);
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to update specialist",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error updating specialist:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to update specialist",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Open delete confirmation dialog
  const confirmDeleteSpecialist = (specialistId: string) => {
    setSpecialistToDelete(specialistId);
    setDeleteDialogOpen(true);
  };

  // Delete specialist
  const handleDeleteSpecialist = async () => {
    if (!specialistToDelete) return;

    try {
      const response = await axios.delete(`http://localhost:4000/api/specialists/${specialistToDelete}`);

      if (response.data.success) {
        // Update the specialists list
        setSpecialists(specialists.filter(specialist => specialist._id !== specialistToDelete));

        toast({
          title: "Success",
          description: "Specialist deleted successfully",
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to delete specialist",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error deleting specialist:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to delete specialist",
        variant: "destructive",
      });
    } finally {
      // Close the dialog
      setDeleteDialogOpen(false);
      setSpecialistToDelete(null);
    }
  };

  // Open delete service confirmation dialog
  const confirmDeleteService = (serviceId: string) => {
    setServiceToDelete(serviceId);
    setDeleteServiceDialogOpen(true);
  };

  // Delete service
  const handleDeleteService = async () => {
    if (!serviceToDelete) return;

    try {
      const response = await axios.delete(`http://localhost:4000/api/spa/services/${serviceToDelete}`);

      if (response.data.success) {
        // Update the services list
        setServices(services.filter(service => service._id !== serviceToDelete));

        toast({
          title: "Success",
          description: "Service deleted successfully",
        });
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to delete service",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error deleting service:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to delete service",
        variant: "destructive",
      });
    } finally {
      // Close the dialog
      setDeleteServiceDialogOpen(false);
      setServiceToDelete(null);
    }
  };

  // Navigate to edit service page
  const navigateToEditService = (serviceId: string) => {
    try {
      console.log("Navigating to edit service:", serviceId);
      toast({
        title: "Navigating to edit page",
        description: `Opening edit page for service ID: ${serviceId}`,
      });
      navigate(`/admin/spa/edit-service/${serviceId}`);
    } catch (error) {
      console.error("Navigation error:", error);
      toast({
        title: "Navigation Error",
        description: "Could not navigate to edit page. See console for details.",
        variant: "destructive",
      });
    }
  };

  // Let's also add a quick navigation test at component mount
  useEffect(() => {
    // Check if the '/admin/spa/edit-service/test' route can be navigated to
    const testRoute = () => {
      try {
        // This is just to test if the route is registered, we'll immediately go back
        const canNavigate = navigate && typeof navigate === 'function';
        console.log("Navigation function available:", canNavigate);
      } catch (error) {
        console.error("Navigation test error:", error);
      }
    };
    testRoute();
  }, [navigate]);

  // Function to determine service status display
  const getServiceStatusDisplay = (service: SpaService) => {
    // Use displayStatus field if available
    if (service.displayStatus) {
      switch (service.displayStatus) {
        case 'available':
          return { text: "Available", variant: "default" as const };
        case 'limited':
          return { text: "Limited", variant: "secondary" as const };
        case 'unavailable':
          return { text: "Unavailable", variant: "outline" as const };
        default:
          break;
      }
    }

    // Fallback to the old logic for backwards compatibility
    if (service.status === 'active') {
      // We need to determine if it's "Available" or "Limited"
      if (service.isPopular || service.popularityScore > 7) {
        // Limited services are usually popular and have higher scores
        return { text: "Limited", variant: "secondary" as const };
      }
      return { text: "Available", variant: "default" as const };
    } else {
      return { text: "Unavailable", variant: "outline" as const };
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Spa Management</h1>
        {canAddContent && (
          <div className="flex gap-2">
            <Link to="/admin/spa/add-service">
              <Button variant="outline" className="flex items-center gap-2">
                <Plus size={16} />
                <span>Add Service</span>
              </Button>
            </Link>
            <Link to="/admin/spa/add-specialist">
              <Button className="flex items-center gap-2">
                <Plus size={16} />
                <span>Add Specialist</span>
              </Button>
            </Link>
          </div>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-blue-100 rounded-full text-blue-600">
                <Calendar size={24} />
              </div>
              <div>
                <p className="text-sm text-gray-500">Today's Appointments</p>
                <h3 className="text-2xl font-bold">24</h3>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-green-100 rounded-full text-green-600">
                <BarChart size={24} />
              </div>
              <div>
                <p className="text-sm text-gray-500">Monthly Revenue</p>
                <h3 className="text-2xl font-bold">$12,845</h3>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-purple-100 rounded-full text-purple-600">
                <Award size={24} />
              </div>
              <div>
                <p className="text-sm text-gray-500">Top Service</p>
                <h3 className="text-lg font-bold">Aromatherapy</h3>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-amber-100 rounded-full text-amber-600">
                <Briefcase size={24} />
              </div>
              <div>
                <p className="text-sm text-gray-500">Active Specialists</p>
                <h3 className="text-2xl font-bold">{activeSpecialistsCount}</h3>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Spa Management</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Search bar positioned at top-right */}
            <div className="flex items-center justify-between">
              <div></div> {/* Empty div to push search to the right */}
              <div className="relative w-80">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                <Input
                  type="text"
                  placeholder="Search..."
                  className="pl-10"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>

            {/* Main Tabs Component - Full Width */}
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-2 max-w-md">
                <TabsTrigger value="services">Services</TabsTrigger>
                <TabsTrigger value="specialists">Specialists</TabsTrigger>
              </TabsList>

              <TabsContent value="services" className="mt-4">
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Name</TableHead>
                        <TableHead>Duration</TableHead>
                        <TableHead>Price</TableHead>
                        <TableHead>Category</TableHead>
                        <TableHead>Specialist</TableHead>
                        <TableHead>Popularity</TableHead>
                        <TableHead>Status</TableHead>
                        {canAddContent && <TableHead className="text-right">Actions</TableHead>}
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {isLoadingServices ? (
                        <TableRow>
                          <TableCell colSpan={canAddContent ? 8 : 7} className="text-center py-10 text-gray-500">
                            Loading services...
                          </TableCell>
                        </TableRow>
                      ) : filteredServices.length > 0 ? (
                        filteredServices.map((service) => (
                          <TableRow key={service._id}>
                            <TableCell className="font-medium">{service.title}</TableCell>
                            <TableCell>
                              {service.durations && service.durations.length > 0 ?
                                `${service.durations[0].duration} min` :
                                "N/A"}
                            </TableCell>
                            <TableCell>
                              {service.durations && service.durations.length > 0 ?
                                `$${service.durations[0].price}` :
                                "N/A"}
                            </TableCell>
                            <TableCell>{service.categoryId?.name || "Uncategorized"}</TableCell>
                            <TableCell>{service.specialist}</TableCell>
                            <TableCell>
                              <div className="flex items-center">
                                <span className="mr-2">{service.popularityScore.toFixed(1)}</span>
                                <div className="w-24 h-2 bg-gray-200 rounded-full overflow-hidden">
                                  <div
                                    className="h-full bg-hotel-primary"
                                    style={{ width: `${service.popularityScore * 10}%` }}
                                  ></div>
                                </div>
                              </div>
                            </TableCell>
                            <TableCell>
                              {(() => {
                                const status = getServiceStatusDisplay(service);
                                return (
                                  <Badge variant={status.variant}>
                                    {status.text}
                                  </Badge>
                                );
                              })()}
                            </TableCell>
                            {canAddContent && (
                              <TableCell className="text-right">
                                <div className="flex justify-end gap-2">
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => navigateToEditService(service._id)}
                                  >
                                    <Edit size={16} />
                                  </Button>
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    className="text-red-500 hover:text-red-700"
                                    onClick={() => confirmDeleteService(service._id)}
                                  >
                                    <Trash2 size={16} />
                                  </Button>
                                </div>
                              </TableCell>
                            )}
                          </TableRow>
                        ))
                      ) : (
                        <TableRow>
                          <TableCell colSpan={canAddContent ? 8 : 7} className="text-center py-10 text-gray-500">
                            No services found
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </div>
              </TabsContent>

              <TabsContent value="specialists" className="mt-4">
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Name</TableHead>
                        <TableHead>Nationality</TableHead>
                        <TableHead>Specializations</TableHead>
                        <TableHead>Experience</TableHead>
                        <TableHead>Languages</TableHead>
                        <TableHead>Email</TableHead>
                        <TableHead>Status</TableHead>
                        {canAddContent && <TableHead className="text-right">Actions</TableHead>}
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {isLoading ? (
                        <TableRow>
                          <TableCell colSpan={canAddContent ? 8 : 7} className="text-center py-10 text-gray-500">
                            Loading specialists...
                          </TableCell>
                        </TableRow>
                      ) : filteredSpecialists.length > 0 ? (
                        filteredSpecialists.map((specialist) => (
                          <TableRow key={specialist._id}>
                            <TableCell className="font-medium">
                              <div className="flex items-center gap-2">
                                <div className="w-7 h-7 rounded-full overflow-hidden">
                                  <img
                                    src={getSpecialistPhotoUrl(specialist.photo)}
                                    alt={`${specialist.firstName} ${specialist.lastName}`}
                                    className="w-full h-full object-cover"
                                    onError={(e) => {
                                      (e.target as HTMLImageElement).src = 'https://via.placeholder.com/40?text=NA';
                                    }}
                                  />
                                </div>
                                {specialist.firstName} {specialist.lastName}
                              </div>
                            </TableCell>
                            <TableCell>{specialist.nationality}</TableCell>
                            <TableCell>
                              <div className="flex flex-wrap gap-1">
                                {specialist.specializations.slice(0, 2).map((specialty) => (
                                  <Badge key={specialty._id} variant="outline" className="text-xs">
                                    {specialty.name}
                                  </Badge>
                                ))}
                                {specialist.specializations.length > 2 && (
                                  <Badge variant="outline" className="text-xs">
                                    +{specialist.specializations.length - 2}
                                  </Badge>
                                )}
                              </div>
                            </TableCell>
                            <TableCell>{specialist.experienceYears} years</TableCell>
                            <TableCell>{specialist.languages}</TableCell>
                            <TableCell>{specialist.email}</TableCell>
                            <TableCell>
                              <Badge variant={specialist.status === "active" ? "default" : "outline"}>
                                {specialist.status}
                              </Badge>
                            </TableCell>
                            {canAddContent && (
                              <TableCell className="text-right">
                                <div className="flex justify-end gap-2">
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() => handleEditSpecialist(specialist._id)}
                                  >
                                    <Edit size={16} />
                                  </Button>
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    className="text-red-500 hover:text-red-700"
                                    onClick={() => confirmDeleteSpecialist(specialist._id)}
                                  >
                                    <Trash2 size={16} />
                                  </Button>
                                </div>
                              </TableCell>
                            )}
                          </TableRow>
                        ))
                      ) : (
                        <TableRow>
                          <TableCell colSpan={canAddContent ? 8 : 7} className="text-center py-10 text-gray-500">
                            No specialists found
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </CardContent>
      </Card>

      {/* Upcoming Appointments Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-lg font-medium">Upcoming Appointments</CardTitle>
            <Button variant="ghost" size="sm" className="text-blue-500">View all</Button>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center justify-between border-b pb-4">
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 p-2 rounded-full">
                    <Calendar size={16} className="text-blue-600" />
                  </div>
                  <div>
                    <p className="font-medium">Deep Tissue Massage</p>
                    <p className="text-sm text-gray-500">Client: Robert Brown</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-sm font-medium">2:30 PM</p>
                  <p className="text-xs text-gray-500">Today</p>
                </div>
              </div>

              <div className="flex items-center justify-between border-b pb-4">
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 p-2 rounded-full">
                    <Calendar size={16} className="text-blue-600" />
                  </div>
                  <div>
                    <p className="font-medium">Aromatherapy Massage</p>
                    <p className="text-sm text-gray-500">Client: Sarah Johnson</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-sm font-medium">4:00 PM</p>
                  <p className="text-xs text-gray-500">Today</p>
                </div>
              </div>

              <div className="flex items-center justify-between border-b pb-4">
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 p-2 rounded-full">
                    <Calendar size={16} className="text-blue-600" />
                  </div>
                  <div>
                    <p className="font-medium">Facial Treatment</p>
                    <p className="text-sm text-gray-500">Client: Emily Davis</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-sm font-medium">10:15 AM</p>
                  <p className="text-xs text-gray-500">Tomorrow</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-lg font-medium">Recent Insights</CardTitle>
            <Button variant="ghost" size="sm" className="text-blue-500">Export</Button>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <p className="text-sm font-medium">Most Requested Service</p>
                  <div className="flex items-center">
                    <span className="text-lg font-bold">Aromatherapy Massage</span>
                    <span className="text-sm text-green-600 ml-2">+12% ↑</span>
                  </div>
                </div>
                <div className="p-2 bg-green-100 rounded-full text-green-600">
                  <BarChart size={20} />
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <p className="text-sm font-medium">Top Specialist by Bookings</p>
                  <div className="flex items-center">
                    <span className="text-lg font-bold">
                      {specialists.length > 0 ? `${specialists[0].firstName} ${specialists[0].lastName}` : "Loading..."}
                    </span>
                    <span className="text-sm text-green-600 ml-2">4.9 ★</span>
                  </div>
                </div>
                <div className="p-2 bg-purple-100 rounded-full text-purple-600">
                  <Award size={20} />
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <p className="text-sm font-medium">Capacity Utilization</p>
                  <div className="flex items-center">
                    <span className="text-lg font-bold">78%</span>
                    <span className="text-sm text-amber-600 ml-2">+3% ↑</span>
                  </div>
                </div>
                <div className="p-2 bg-amber-100 rounded-full text-amber-600">
                  <FileText size={20} />
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <p className="text-sm font-medium">Customer Satisfaction</p>
                  <div className="flex items-center">
                    <span className="text-lg font-bold">4.8/5.0</span>
                    <span className="text-sm text-green-600 ml-2">+0.2 ↑</span>
                  </div>
                </div>
                <div className="p-2 bg-blue-100 rounded-full text-blue-600">
                  <Bell size={20} />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Delete Specialist Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this specialist? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteSpecialist}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Service Confirmation Dialog */}
      <Dialog open={deleteServiceDialogOpen} onOpenChange={setDeleteServiceDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Service Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this service? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteServiceDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteService}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Specialist Dialog */}
      <Dialog open={editDialogOpen} onOpenChange={(open) => {
        if (!open) {
          // Reset states when dialog is closed
          setCurrentSpecialist(null);
          setSelectedFile(null);
          setPhotoPreview(null);
        }
        setEditDialogOpen(open);
      }}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit Specialist</DialogTitle>
          </DialogHeader>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Photo Upload Section */}
              <div className="flex justify-center mb-6">
                <div className="flex flex-col items-center">
                  <div className="relative w-32 h-32 rounded-full overflow-hidden border-2 border-gray-200 mb-2">
                    {photoPreview ? (
                      <img
                        src={photoPreview}
                        alt="Profile preview"
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full bg-gray-100 flex items-center justify-center text-gray-400">
                        <Upload size={32} />
                      </div>
                    )}
                  </div>
                  <Input
                    id="photo"
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={handlePhotoChange}
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => document.getElementById("photo")?.click()}
                    className="text-sm"
                  >
                    Upload Photo
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter first name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter last name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email Address*</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="Enter email address" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="phone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Phone Number*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter phone number" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="nationality"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nationality*</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter nationality" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="languages"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Languages Spoken*</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g. English, Spanish, French" {...field} />
                      </FormControl>
                      <FormDescription>
                        Separate multiple languages with commas
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="experienceYears"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Years of Experience</FormLabel>
                      <FormControl>
                        <Input type="number" placeholder="Enter years of experience" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status*</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="active">Active</SelectItem>
                          <SelectItem value="inactive">Inactive</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="col-span-1 md:col-span-2">
                  <div className="mb-6">
                    <FormLabel className="block mb-2">Specializations*</FormLabel>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="outline" className="w-full justify-start">
                          <span className="truncate">
                            {selectedSpecializations.length === 0
                              ? "Select specializations"
                              : `${selectedSpecializations.length} selected`}
                          </span>
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent className="w-56">
                        <DropdownMenuLabel>Categories</DropdownMenuLabel>
                        <DropdownMenuSeparator />
                        {isLoadingCategories ? (
                          <div className="px-2 py-1.5 text-sm">Loading categories...</div>
                        ) : allCategories.length > 0 ? (
                          allCategories.map((category) => (
                            <DropdownMenuCheckboxItem
                              key={category._id}
                              checked={selectedSpecializations.some(item => item._id === category._id)}
                              onCheckedChange={() => toggleSpecialization(category)}
                            >
                              {category.name}
                            </DropdownMenuCheckboxItem>
                          ))
                        ) : (
                          <div className="px-2 py-1.5 text-sm">No categories available</div>
                        )}
                      </DropdownMenuContent>
                    </DropdownMenu>

                    {selectedSpecializations.length > 0 && (
                      <div className="mt-2 flex flex-wrap gap-2">
                        {selectedSpecializations.map(spec => (
                          <Badge key={spec._id} variant="secondary" className="p-1">
                            {spec.name}
                          </Badge>
                        ))}
                      </div>
                    )}

                    {selectedSpecializations.length === 0 && (
                      <p className="text-sm text-red-500 mt-2">
                        Please select at least one specialization
                      </p>
                    )}
                  </div>

                  <FormField
                    control={form.control}
                    name="bio"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Specialist Bio*</FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder="Enter specialist bio and description"
                            className="min-h-[120px]"
                            {...field}
                          />
                        </FormControl>
                        <FormDescription>
                          Provide details about specialist's background, certifications and expertise.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              <DialogFooter className="sticky bottom-0 pt-4 bg-white">
                <Button
                  variant="outline"
                  type="button"
                  onClick={() => setEditDialogOpen(false)}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting || selectedSpecializations.length === 0}
                >
                  {isSubmitting ? "Updating..." : "Update Specialist"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default SpaManagementContent;
</file>

<file path="src/components/Admin/Spa/SpaReportsContent.tsx">
import React, { useState } from "react";
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  CardDescription
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { DateRange } from "react-day-picker";
import { DateRangePicker } from "@/components/ui/date-range-picker";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  BarChart, 
  LineChart, 
  Line, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer, 
  PieChart, 
  Pie, 
  Cell 
} from "recharts";
import { 
  Download, 
  CalendarRange, 
  BarChart as BarChartIcon, 
  PieChart as PieChartIcon, 
  TrendingUp 
} from "lucide-react";
import { addDays, format, subDays } from "date-fns";

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];

const SpaReportsContent = () => {
  const [activeTab, setActiveTab] = useState("revenue");
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: subDays(new Date(), 30),
    to: new Date(),
  });
  const [timeframe, setTimeframe] = useState("monthly");

  // Mock data for revenue chart
  const revenueData = [
    { name: 'Jan', massage: 4000, facial: 2400, body: 1800 },
    { name: 'Feb', massage: 5000, facial: 1398, body: 2210 },
    { name: 'Mar', massage: 6000, facial: 4000, body: 2290 },
    { name: 'Apr', massage: 8780, facial: 3908, body: 2000 },
    { name: 'May', massage: 9890, facial: 4800, body: 2181 },
    { name: 'Jun', massage: 10000, facial: 5800, body: 2500 },
  ];

  // Mock data for appointments
  const appointmentsData = [
    { name: 'Jan', bookings: 65 },
    { name: 'Feb', bookings: 78 },
    { name: 'Mar', bookings: 82 },
    { name: 'Apr', bookings: 95 },
    { name: 'May', bookings: 110 },
    { name: 'Jun', bookings: 120 },
  ];

  // Mock data for service popularity
  const servicePopularityData = [
    { name: 'Swedish Massage', value: 30 },
    { name: 'Deep Tissue', value: 25 },
    { name: 'Hot Stone', value: 15 },
    { name: 'Aromatherapy', value: 12 },
    { name: 'Facial Treatment', value: 10 },
    { name: 'Body Wrap', value: 8 },
  ];

  // Mock data for specialist performance
  const specialistPerformanceData = [
    { name: 'Emily', clients: 142, revenue: 15600, rating: 4.9 },
    { name: 'Michael', clients: 98, revenue: 11200, rating: 4.8 },
    { name: 'Sophia', clients: 156, revenue: 18400, rating: 5.0 },
    { name: 'Olivia', clients: 112, revenue: 13800, rating: 4.7 },
    { name: 'Thomas', clients: 86, revenue: 9800, rating: 4.6 },
  ];

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Spa Reports</h1>
        <Button variant="outline" className="flex items-center gap-2">
          <Download size={16} />
          <span>Export Report</span>
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex flex-col space-y-2">
              <span className="text-sm text-gray-500">Total Revenue (30 days)</span>
              <span className="text-3xl font-bold">$42,580</span>
              <span className="text-sm text-green-500">+12% from previous period</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex flex-col space-y-2">
              <span className="text-sm text-gray-500">Total Appointments (30 days)</span>
              <span className="text-3xl font-bold">324</span>
              <span className="text-sm text-green-500">+8% from previous period</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex flex-col space-y-2">
              <span className="text-sm text-gray-500">Average Rating</span>
              <span className="text-3xl font-bold">4.8/5.0</span>
              <span className="text-sm text-green-500">+0.2 from previous period</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2">
            <CardTitle>Reports Dashboard</CardTitle>
            <div className="flex flex-col sm:flex-row gap-2 mt-2 sm:mt-0">
              <DateRangePicker
                value={dateRange}
                onValueChange={setDateRange}
              />
              <Select value={timeframe} onValueChange={setTimeframe}>
                <SelectTrigger className="w-[150px]">
                  <SelectValue placeholder="Select timeframe" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="daily">Daily</SelectItem>
                  <SelectItem value="weekly">Weekly</SelectItem>
                  <SelectItem value="monthly">Monthly</SelectItem>
                  <SelectItem value="yearly">Yearly</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="revenue" className="w-full" onValueChange={setActiveTab} value={activeTab}>
            <TabsList className="grid w-full grid-cols-3 md:grid-cols-4">
              <TabsTrigger value="revenue">Revenue</TabsTrigger>
              <TabsTrigger value="appointments">Appointments</TabsTrigger>
              <TabsTrigger value="services">Services</TabsTrigger>
              <TabsTrigger value="specialists">Specialists</TabsTrigger>
            </TabsList>
            
            <TabsContent value="revenue" className="mt-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <BarChartIcon className="mr-2" size={16} />
                    Revenue by Service Category
                  </CardTitle>
                  <CardDescription>
                    Revenue breakdown by service category over time
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        width={500}
                        height={300}
                        data={revenueData}
                        margin={{
                          top: 5,
                          right: 30,
                          left: 20,
                          bottom: 5,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="massage" fill="#8884d8" name="Massage" />
                        <Bar dataKey="facial" fill="#82ca9d" name="Facial" />
                        <Bar dataKey="body" fill="#ffc658" name="Body Treatment" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="appointments" className="mt-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <CalendarRange className="mr-2" size={16} />
                    Appointments Trend
                  </CardTitle>
                  <CardDescription>
                    Number of appointments over time
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        width={500}
                        height={300}
                        data={appointmentsData}
                        margin={{
                          top: 5,
                          right: 30,
                          left: 20,
                          bottom: 5,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Line type="monotone" dataKey="bookings" stroke="#8884d8" activeDot={{ r: 8 }} name="Appointments" />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="services" className="mt-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <PieChartIcon className="mr-2" size={16} />
                    Service Popularity
                  </CardTitle>
                  <CardDescription>
                    Distribution of service bookings by type
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart width={400} height={400}>
                        <Pie
                          data={servicePopularityData}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                          outerRadius={120}
                          fill="#8884d8"
                          dataKey="value"
                        >
                          {servicePopularityData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                        <Legend />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="specialists" className="mt-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <TrendingUp className="mr-2" size={16} />
                    Specialist Performance
                  </CardTitle>
                  <CardDescription>
                    Performance metrics by specialist
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        width={500}
                        height={300}
                        data={specialistPerformanceData}
                        margin={{
                          top: 5,
                          right: 30,
                          left: 20,
                          bottom: 5,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis yAxisId="left" />
                        <YAxis yAxisId="right" orientation="right" />
                        <Tooltip />
                        <Legend />
                        <Bar yAxisId="left" dataKey="clients" fill="#8884d8" name="Clients" />
                        <Bar yAxisId="right" dataKey="revenue" fill="#82ca9d" name="Revenue ($100s)" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default SpaReportsContent;
</file>

<file path="src/components/Admin/Staff/AddAccessLevelContent.tsx">
import { useState, useEffect } from "react";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { PlusCircle, Search, Edit, Trash2, Loader2 } from "lucide-react";
import { toast } from "sonner";
import axios from "axios";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
    DialogClose
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";

// Interface for current user
interface CurrentUser {
    name: string;
    email: string;
    role: string;
    department: string;
    accessLevel: string;
}

// Interface for access level
interface AccessLevel {
    _id: string;
    name: string;
    description?: string;
    permissions?: string[];
    createdAt: string;
    updatedAt: string;
}

// API endpoint
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const ACCESS_LEVEL_ENDPOINT = `${API_URL}/api/access-levels`;

const AddAccessLevelContent = () => {
    const [searchQuery, setSearchQuery] = useState("");
    const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
    const [accessLevels, setAccessLevels] = useState<AccessLevel[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [selectedAccessLevel, setSelectedAccessLevel] = useState<AccessLevel | null>(null);

    // New access level form state
    const [newAccessLevelName, setNewAccessLevelName] = useState("");
    const [newAccessLevelDescription, setNewAccessLevelDescription] = useState("");

    // Edit access level form state
    const [editAccessLevelName, setEditAccessLevelName] = useState("");
    const [editAccessLevelDescription, setEditAccessLevelDescription] = useState("");

    // Get current user from localStorage
    useEffect(() => {
        const userDataString = localStorage.getItem("currentUser");
        if (userDataString) {
            setCurrentUser(JSON.parse(userDataString));
        }
    }, []);

    // Fetch access levels data
    const fetchAccessLevelsData = async () => {
        try {
            setIsLoading(true);
            console.log("Fetching all access levels from:", ACCESS_LEVEL_ENDPOINT);

            const response = await axios({
                method: 'GET',
                url: ACCESS_LEVEL_ENDPOINT,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            console.log("API Response:", response.data);

            // Handle different response formats based on the actual API response
            let accessLevelsData = [];
            const data = response.data;

            if (data.data && data.data.accessLevels && Array.isArray(data.data.accessLevels)) {
                accessLevelsData = data.data.accessLevels;
            } else if (data.data && Array.isArray(data.data)) {
                accessLevelsData = data.data;
            } else if (Array.isArray(data)) {
                accessLevelsData = data;
            } else if (data.accessLevels && Array.isArray(data.accessLevels)) {
                accessLevelsData = data.accessLevels;
            }

            setAccessLevels(accessLevelsData);
            setError(null);
        } catch (err) {
            console.error("Failed to fetch access levels data:", err);

            if (axios.isAxiosError(err)) {
                const statusCode = err.response?.status;
                const responseData = err.response?.data;

                console.error(`Status code: ${statusCode}`);
                console.error("Response data:", responseData);

                const errorMessage = responseData?.message ||
                    err.message ||
                    "Failed to load access levels data";

                setError("Failed to load access levels data. Please try again later.");
                toast.error(errorMessage);
            } else {
                setError("Failed to load access levels data. Please try again later.");
                toast.error(err instanceof Error ? err.message : "Failed to load access levels data");
            }

            setAccessLevels([]); // Set empty array on error
        } finally {
            setIsLoading(false);
        }
    };

    // Initial data fetch
    useEffect(() => {
        fetchAccessLevelsData();
    }, []);

    // Create new access level
    const createAccessLevel = async () => {
        if (!newAccessLevelName.trim()) {
            toast.error("Access level name is required");
            return;
        }

        try {
            const response = await axios({
                method: 'POST',
                url: ACCESS_LEVEL_ENDPOINT,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: {
                    name: newAccessLevelName,
                    description: newAccessLevelDescription
                }
            });

            console.log("Create access level response:", response.data);
            toast.success("Access level created successfully");

            // Reset form and close modal
            setNewAccessLevelName("");
            setNewAccessLevelDescription("");
            setIsAddModalOpen(false);

            // Refresh data
            fetchAccessLevelsData();
        } catch (error) {
            console.error("Error creating access level:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to create access level";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to create access level");
            }
        }
    };

    // Delete access level
    const deleteAccessLevel = async (id: string) => {
        try {
            await axios({
                method: 'DELETE',
                url: `${ACCESS_LEVEL_ENDPOINT}/${id}`,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            toast.success("Access level deleted successfully");

            // Refresh data
            fetchAccessLevelsData();
        } catch (error) {
            console.error("Error deleting access level:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to delete access level";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to delete access level");
            }
        }
    };

    // Update access level
    const updateAccessLevel = async () => {
        if (!selectedAccessLevel || !editAccessLevelName.trim()) {
            toast.error("Access level name is required");
            return;
        }

        try {
            const response = await axios({
                method: 'PUT',
                url: `${ACCESS_LEVEL_ENDPOINT}/${selectedAccessLevel._id}`,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: {
                    name: editAccessLevelName,
                    description: editAccessLevelDescription
                }
            });

            console.log("Update access level response:", response.data);
            toast.success("Access level updated successfully");

            // Reset form and close modal
            setEditAccessLevelName("");
            setEditAccessLevelDescription("");
            setIsEditModalOpen(false);
            setSelectedAccessLevel(null);

            // Refresh data
            fetchAccessLevelsData();
        } catch (error) {
            console.error("Error updating access level:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to update access level";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to update access level");
            }
        }
    };

    // Open edit modal
    const openEditModal = (accessLevel: AccessLevel) => {
        setSelectedAccessLevel(accessLevel);
        setEditAccessLevelName(accessLevel.name);
        setEditAccessLevelDescription(accessLevel.description || "");
        setIsEditModalOpen(true);
    };

    // Filter access levels based on search query
    const filteredAccessLevels = accessLevels.filter((accessLevel) =>
        accessLevel.name.toLowerCase().includes(searchQuery.toLowerCase())
    );

    // Check if user has permission to manage access levels
    const canManageAccessLevels =
        !currentUser ||
        currentUser.accessLevel === "Full Access" ||
        currentUser.accessLevel === "Administrative" ||
        currentUser.role === "Administrator";

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">Access Level Management</h1>
                {canManageAccessLevels && (
                    <Button
                        className="flex items-center gap-2"
                        onClick={() => setIsAddModalOpen(true)}
                    >
                        <PlusCircle size={16} />
                        <span>Add Access Level</span>
                    </Button>
                )}
            </div>

            <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center justify-between mb-6">
                    <div className="relative w-80">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                        <Input
                            type="text"
                            placeholder="Search access levels..."
                            className="pl-10"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                        />
                    </div>
                </div>

                <div className="rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Access Level Name</TableHead>
                                <TableHead>Description</TableHead>
                                <TableHead>Created Date</TableHead>
                                {canManageAccessLevels && <TableHead className="text-right">Actions</TableHead>}
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {isLoading ? (
                                <TableRow>
                                    <TableCell colSpan={canManageAccessLevels ? 4 : 3} className="text-center py-10">
                                        <div className="flex justify-center items-center">
                                            <Loader2 className="h-6 w-6 animate-spin text-primary mr-2" />
                                            <span>Loading access levels data...</span>
                                        </div>
                                    </TableCell>
                                </TableRow>
                            ) : error ? (
                                <TableRow>
                                    <TableCell colSpan={canManageAccessLevels ? 4 : 3} className="text-center py-10 text-red-500">
                                        {error}
                                    </TableCell>
                                </TableRow>
                            ) : filteredAccessLevels.length > 0 ? (
                                filteredAccessLevels.map((accessLevel) => (
                                    <TableRow key={accessLevel._id}>
                                        <TableCell className="font-medium">{accessLevel.name}</TableCell>
                                        <TableCell>{accessLevel.description || "No description"}</TableCell>
                                        <TableCell>{new Date(accessLevel.createdAt).toLocaleDateString()}</TableCell>
                                        {canManageAccessLevels && (
                                            <TableCell className="text-right">
                                                <div className="flex justify-end gap-2">
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        onClick={() => openEditModal(accessLevel)}
                                                    >
                                                        <Edit size={16} />
                                                    </Button>
                                                    {currentUser?.accessLevel === "Full Access" && (
                                                        <Button
                                                            variant="ghost"
                                                            size="icon"
                                                            className="text-red-500 hover:text-red-700"
                                                            onClick={() => deleteAccessLevel(accessLevel._id)}
                                                        >
                                                            <Trash2 size={16} />
                                                        </Button>
                                                    )}
                                                </div>
                                            </TableCell>
                                        )}
                                    </TableRow>
                                ))
                            ) : (
                                <TableRow>
                                    <TableCell colSpan={canManageAccessLevels ? 4 : 3} className="text-center py-10 text-gray-500">
                                        No access levels found
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </div>
            </div>

            {/* Add Access Level Modal */}
            <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Add New Access Level</DialogTitle>
                        <DialogDescription>
                            Create a new access level for your organization.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4 py-2">
                        <div className="space-y-2">
                            <Label htmlFor="accessLevelName">Access Level Name *</Label>
                            <Input
                                id="accessLevelName"
                                placeholder="Enter access level name"
                                value={newAccessLevelName}
                                onChange={(e) => setNewAccessLevelName(e.target.value)}
                            />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="accessLevelDescription">Description (Optional)</Label>
                            <Textarea
                                id="accessLevelDescription"
                                placeholder="Enter access level description"
                                value={newAccessLevelDescription}
                                onChange={(e) => setNewAccessLevelDescription(e.target.value)}
                                rows={3}
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <DialogClose asChild>
                            <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={createAccessLevel}>Create Access Level</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>

            {/* Edit Access Level Modal */}
            <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Edit Access Level</DialogTitle>
                        <DialogDescription>
                            Update the access level information.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4 py-2">
                        <div className="space-y-2">
                            <Label htmlFor="editAccessLevelName">Access Level Name *</Label>
                            <Input
                                id="editAccessLevelName"
                                placeholder="Enter access level name"
                                value={editAccessLevelName}
                                onChange={(e) => setEditAccessLevelName(e.target.value)}
                            />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="editAccessLevelDescription">Description (Optional)</Label>
                            <Textarea
                                id="editAccessLevelDescription"
                                placeholder="Enter access level description"
                                value={editAccessLevelDescription}
                                onChange={(e) => setEditAccessLevelDescription(e.target.value)}
                                rows={3}
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <DialogClose asChild>
                            <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={updateAccessLevel}>Update Access Level</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default AddAccessLevelContent;
</file>

<file path="src/components/Admin/Staff/AddDepartmentContent.tsx">
import { useState, useEffect } from "react";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { PlusCircle, Search, Edit, Trash2, Loader2 } from "lucide-react";
import { toast } from "sonner";
import axios from "axios";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
    DialogClose
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";

// Interface for current user
interface CurrentUser {
    name: string;
    email: string;
    role: string;
    department: string;
    accessLevel: string;
}

// Interface for department
interface Department {
    _id: string;
    name: string;
    description?: string;
    createdAt: string;
    updatedAt: string;
}

// API endpoint
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const DEPARTMENT_ENDPOINT = `${API_URL}/api/departments`;

const AddDepartmentContent = () => {
    const [searchQuery, setSearchQuery] = useState("");
    const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
    const [departments, setDepartments] = useState<Department[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null);

    // New department form state
    const [newDepartmentName, setNewDepartmentName] = useState("");
    const [newDepartmentDescription, setNewDepartmentDescription] = useState("");

    // Edit department form state
    const [editDepartmentName, setEditDepartmentName] = useState("");
    const [editDepartmentDescription, setEditDepartmentDescription] = useState("");

    // Get current user from localStorage
    useEffect(() => {
        const userDataString = localStorage.getItem("currentUser");
        if (userDataString) {
            setCurrentUser(JSON.parse(userDataString));
        }
    }, []);

    // Fetch departments data
    const fetchDepartmentsData = async () => {
        try {
            setIsLoading(true);
            console.log("Fetching all departments from:", DEPARTMENT_ENDPOINT);

            const response = await axios({
                method: 'GET',
                url: DEPARTMENT_ENDPOINT,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            console.log("API Response:", response.data);

            // Handle different response formats based on the actual API response
            let departmentsData = [];
            const data = response.data;

            if (data.data && data.data.departments && Array.isArray(data.data.departments)) {
                departmentsData = data.data.departments;
            } else if (data.data && Array.isArray(data.data)) {
                departmentsData = data.data;
            } else if (Array.isArray(data)) {
                departmentsData = data;
            } else if (data.departments && Array.isArray(data.departments)) {
                departmentsData = data.departments;
            }

            setDepartments(departmentsData);
            setError(null);
        } catch (err) {
            console.error("Failed to fetch departments data:", err);

            if (axios.isAxiosError(err)) {
                const statusCode = err.response?.status;
                const responseData = err.response?.data;

                console.error(`Status code: ${statusCode}`);
                console.error("Response data:", responseData);

                const errorMessage = responseData?.message ||
                    err.message ||
                    "Failed to load departments data";

                setError("Failed to load departments data. Please try again later.");
                toast.error(errorMessage);
            } else {
                setError("Failed to load departments data. Please try again later.");
                toast.error(err instanceof Error ? err.message : "Failed to load departments data");
            }

            setDepartments([]); // Set empty array on error
        } finally {
            setIsLoading(false);
        }
    };

    // Initial data fetch
    useEffect(() => {
        fetchDepartmentsData();
    }, []);

    // Create new department
    const createDepartment = async () => {
        if (!newDepartmentName.trim()) {
            toast.error("Department name is required");
            return;
        }

        try {
            const response = await axios({
                method: 'POST',
                url: DEPARTMENT_ENDPOINT,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: {
                    name: newDepartmentName,
                    description: newDepartmentDescription
                }
            });

            console.log("Create department response:", response.data);
            toast.success("Department created successfully");

            // Reset form and close modal
            setNewDepartmentName("");
            setNewDepartmentDescription("");
            setIsAddModalOpen(false);

            // Refresh data
            fetchDepartmentsData();
        } catch (error) {
            console.error("Error creating department:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to create department";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to create department");
            }
        }
    };

    // Delete department
    const deleteDepartment = async (id: string) => {
        try {
            await axios({
                method: 'DELETE',
                url: `${DEPARTMENT_ENDPOINT}/${id}`,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            toast.success("Department deleted successfully");

            // Refresh data
            fetchDepartmentsData();
        } catch (error) {
            console.error("Error deleting department:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to delete department";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to delete department");
            }
        }
    };

    // Update department
    const updateDepartment = async () => {
        if (!selectedDepartment || !editDepartmentName.trim()) {
            toast.error("Department name is required");
            return;
        }

        try {
            const response = await axios({
                method: 'PUT',
                url: `${DEPARTMENT_ENDPOINT}/${selectedDepartment._id}`,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: {
                    name: editDepartmentName,
                    description: editDepartmentDescription
                }
            });

            console.log("Update department response:", response.data);
            toast.success("Department updated successfully");

            // Reset form and close modal
            setEditDepartmentName("");
            setEditDepartmentDescription("");
            setIsEditModalOpen(false);
            setSelectedDepartment(null);

            // Refresh data
            fetchDepartmentsData();
        } catch (error) {
            console.error("Error updating department:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to update department";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to update department");
            }
        }
    };

    // Open edit modal
    const openEditModal = (department: Department) => {
        setSelectedDepartment(department);
        setEditDepartmentName(department.name);
        setEditDepartmentDescription(department.description || "");
        setIsEditModalOpen(true);
    };

    // Filter departments based on search query
    const filteredDepartments = departments.filter((department) =>
        department.name.toLowerCase().includes(searchQuery.toLowerCase())
    );

    // Check if user has permission to manage departments
    const canManageDepartments =
        !currentUser ||
        currentUser.accessLevel === "Full Access" ||
        currentUser.accessLevel === "Administrative" ||
        currentUser.role === "Administrator" ||
        currentUser.role === "Manager";

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">Department Management</h1>
                {canManageDepartments && (
                    <Button
                        className="flex items-center gap-2"
                        onClick={() => setIsAddModalOpen(true)}
                    >
                        <PlusCircle size={16} />
                        <span>Add Department</span>
                    </Button>
                )}
            </div>

            <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center justify-between mb-6">
                    <div className="relative w-80">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                        <Input
                            type="text"
                            placeholder="Search departments..."
                            className="pl-10"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                        />
                    </div>
                </div>

                <div className="rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Department Name</TableHead>
                                <TableHead>Description</TableHead>
                                <TableHead>Created Date</TableHead>
                                {canManageDepartments && <TableHead className="text-right">Actions</TableHead>}
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {isLoading ? (
                                <TableRow>
                                    <TableCell colSpan={canManageDepartments ? 4 : 3} className="text-center py-10">
                                        <div className="flex justify-center items-center">
                                            <Loader2 className="h-6 w-6 animate-spin text-primary mr-2" />
                                            <span>Loading departments data...</span>
                                        </div>
                                    </TableCell>
                                </TableRow>
                            ) : error ? (
                                <TableRow>
                                    <TableCell colSpan={canManageDepartments ? 4 : 3} className="text-center py-10 text-red-500">
                                        {error}
                                    </TableCell>
                                </TableRow>
                            ) : filteredDepartments.length > 0 ? (
                                filteredDepartments.map((department) => (
                                    <TableRow key={department._id}>
                                        <TableCell className="font-medium">{department.name}</TableCell>
                                        <TableCell>{department.description || "No description"}</TableCell>
                                        <TableCell>{new Date(department.createdAt).toLocaleDateString()}</TableCell>
                                        {canManageDepartments && (
                                            <TableCell className="text-right">
                                                <div className="flex justify-end gap-2">
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        onClick={() => openEditModal(department)}
                                                    >
                                                        <Edit size={16} />
                                                    </Button>
                                                    {(currentUser?.accessLevel === "Full Access" || currentUser?.role === "Administrator") && (
                                                        <Button
                                                            variant="ghost"
                                                            size="icon"
                                                            className="text-red-500 hover:text-red-700"
                                                            onClick={() => deleteDepartment(department._id)}
                                                        >
                                                            <Trash2 size={16} />
                                                        </Button>
                                                    )}
                                                </div>
                                            </TableCell>
                                        )}
                                    </TableRow>
                                ))
                            ) : (
                                <TableRow>
                                    <TableCell colSpan={canManageDepartments ? 4 : 3} className="text-center py-10 text-gray-500">
                                        No departments found
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </div>
            </div>

            {/* Add Department Modal */}
            <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Add New Department</DialogTitle>
                        <DialogDescription>
                            Create a new department for your organization.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4 py-2">
                        <div className="space-y-2">
                            <Label htmlFor="departmentName">Department Name *</Label>
                            <Input
                                id="departmentName"
                                placeholder="Enter department name"
                                value={newDepartmentName}
                                onChange={(e) => setNewDepartmentName(e.target.value)}
                            />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="departmentDescription">Description (Optional)</Label>
                            <Textarea
                                id="departmentDescription"
                                placeholder="Enter department description"
                                value={newDepartmentDescription}
                                onChange={(e) => setNewDepartmentDescription(e.target.value)}
                                rows={3}
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <DialogClose asChild>
                            <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={createDepartment}>Create Department</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>

            {/* Edit Department Modal */}
            <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Edit Department</DialogTitle>
                        <DialogDescription>
                            Update the department information.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4 py-2">
                        <div className="space-y-2">
                            <Label htmlFor="editDepartmentName">Department Name *</Label>
                            <Input
                                id="editDepartmentName"
                                placeholder="Enter department name"
                                value={editDepartmentName}
                                onChange={(e) => setEditDepartmentName(e.target.value)}
                            />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="editDepartmentDescription">Description (Optional)</Label>
                            <Textarea
                                id="editDepartmentDescription"
                                placeholder="Enter department description"
                                value={editDepartmentDescription}
                                onChange={(e) => setEditDepartmentDescription(e.target.value)}
                                rows={3}
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <DialogClose asChild>
                            <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={updateDepartment}>Update Department</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default AddDepartmentContent;
</file>

<file path="src/components/Admin/Staff/AddRoleContent.tsx">
import { useState, useEffect } from "react";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { PlusCircle, Search, Edit, Trash2, Loader2 } from "lucide-react";
import { toast } from "sonner";
import axios from "axios";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
    DialogClose
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// Interface for current user
interface CurrentUser {
    name: string;
    email: string;
    role: string;
    department: string;
    accessLevel: string;
}

// Interface for role
interface Role {
    _id: string;
    name: string;
    description?: string;
    department?: string;
    permissions?: string[];
    createdAt: string;
    updatedAt: string;
}

// Interface for department
interface Department {
    _id: string;
    name: string;
}

// API endpoint
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const ROLE_ENDPOINT = `${API_URL}/api/roles`;
const DEPARTMENT_ENDPOINT = `${API_URL}/api/departments`;

const AddRoleContent = () => {
    const [searchQuery, setSearchQuery] = useState("");
    const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
    const [roles, setRoles] = useState<Role[]>([]);
    const [departments, setDepartments] = useState<Department[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [selectedRole, setSelectedRole] = useState<Role | null>(null);

    // New role form state
    const [newRoleName, setNewRoleName] = useState("");
    const [newRoleDescription, setNewRoleDescription] = useState("");
    const [newRoleDepartment, setNewRoleDepartment] = useState("");

    // Edit role form state
    const [editRoleName, setEditRoleName] = useState("");
    const [editRoleDescription, setEditRoleDescription] = useState("");
    const [editRoleDepartment, setEditRoleDepartment] = useState("");

    // Get current user from localStorage
    useEffect(() => {
        const userDataString = localStorage.getItem("currentUser");
        if (userDataString) {
            setCurrentUser(JSON.parse(userDataString));
        }
    }, []);

    // Fetch roles data
    const fetchRolesData = async () => {
        try {
            setIsLoading(true);
            console.log("Fetching all roles from:", ROLE_ENDPOINT);

            const response = await axios({
                method: 'GET',
                url: ROLE_ENDPOINT,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            console.log("API Response:", response.data);

            // Handle different response formats based on the actual API response
            let rolesData = [];
            const data = response.data;

            if (data.data && data.data.roles && Array.isArray(data.data.roles)) {
                rolesData = data.data.roles;
            } else if (data.data && Array.isArray(data.data)) {
                rolesData = data.data;
            } else if (Array.isArray(data)) {
                rolesData = data;
            } else if (data.roles && Array.isArray(data.roles)) {
                rolesData = data.roles;
            }

            setRoles(rolesData);
            setError(null);
        } catch (err) {
            console.error("Failed to fetch roles data:", err);

            if (axios.isAxiosError(err)) {
                const statusCode = err.response?.status;
                const responseData = err.response?.data;

                console.error(`Status code: ${statusCode}`);
                console.error("Response data:", responseData);

                const errorMessage = responseData?.message ||
                    err.message ||
                    "Failed to load roles data";

                setError("Failed to load roles data. Please try again later.");
                toast.error(errorMessage);
            } else {
                setError("Failed to load roles data. Please try again later.");
                toast.error(err instanceof Error ? err.message : "Failed to load roles data");
            }

            setRoles([]); // Set empty array on error
        } finally {
            setIsLoading(false);
        }
    };

    // Fetch departments data
    const fetchDepartmentsData = async () => {
        try {
            const response = await axios({
                method: 'GET',
                url: DEPARTMENT_ENDPOINT,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            // Handle different response formats
            let departmentsData = [];
            const data = response.data;

            if (data.data && data.data.departments && Array.isArray(data.data.departments)) {
                departmentsData = data.data.departments;
            } else if (data.data && Array.isArray(data.data)) {
                departmentsData = data.data;
            } else if (Array.isArray(data)) {
                departmentsData = data;
            } else if (data.departments && Array.isArray(data.departments)) {
                departmentsData = data.departments;
            }

            setDepartments(departmentsData);
        } catch (error) {
            console.error("Failed to fetch departments:", error);
            toast.error("Failed to load departments. Some features may be limited.");
        }
    };

    // Initial data fetch
    useEffect(() => {
        Promise.all([fetchRolesData(), fetchDepartmentsData()]);
    }, []);

    // Create new role
    const createRole = async () => {
        if (!newRoleName.trim()) {
            toast.error("Role name is required");
            return;
        }

        try {
            const response = await axios({
                method: 'POST',
                url: ROLE_ENDPOINT,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: {
                    name: newRoleName,
                    description: newRoleDescription,
                    department: newRoleDepartment || undefined
                }
            });

            console.log("Create role response:", response.data);
            toast.success("Role created successfully");

            // Reset form and close modal
            setNewRoleName("");
            setNewRoleDescription("");
            setNewRoleDepartment("");
            setIsAddModalOpen(false);

            // Refresh data
            fetchRolesData();
        } catch (error) {
            console.error("Error creating role:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to create role";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to create role");
            }
        }
    };

    // Delete role
    const deleteRole = async (id: string) => {
        try {
            await axios({
                method: 'DELETE',
                url: `${ROLE_ENDPOINT}/${id}`,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            toast.success("Role deleted successfully");

            // Refresh data
            fetchRolesData();
        } catch (error) {
            console.error("Error deleting role:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to delete role";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to delete role");
            }
        }
    };

    // Update role
    const updateRole = async () => {
        if (!selectedRole || !editRoleName.trim()) {
            toast.error("Role name is required");
            return;
        }

        try {
            const response = await axios({
                method: 'PUT',
                url: `${ROLE_ENDPOINT}/${selectedRole._id}`,
                headers: {
                    'Content-Type': 'application/json'
                },
                data: {
                    name: editRoleName,
                    description: editRoleDescription,
                    department: editRoleDepartment || undefined
                }
            });

            console.log("Update role response:", response.data);
            toast.success("Role updated successfully");

            // Reset form and close modal
            setEditRoleName("");
            setEditRoleDescription("");
            setEditRoleDepartment("");
            setIsEditModalOpen(false);
            setSelectedRole(null);

            // Refresh data
            fetchRolesData();
        } catch (error) {
            console.error("Error updating role:", error);

            if (axios.isAxiosError(error)) {
                const errorMessage = error.response?.data?.message || "Failed to update role";
                toast.error(errorMessage);
            } else {
                toast.error("Failed to update role");
            }
        }
    };

    // Open edit modal
    const openEditModal = (role: Role) => {
        setSelectedRole(role);
        setEditRoleName(role.name);
        setEditRoleDescription(role.description || "");
        setEditRoleDepartment(role.department || "");
        setIsEditModalOpen(true);
    };

    // Filter roles based on search query
    const filteredRoles = roles.filter((role) =>
        role.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (role.department && role.department.toLowerCase().includes(searchQuery.toLowerCase()))
    );

    // Find department name by ID
    const getDepartmentName = (departmentId: string) => {
        const department = departments.find(d => d._id === departmentId);
        return department ? department.name : 'Unknown Department';
    };

    // Check if user has permission to manage roles
    const canManageRoles =
        !currentUser ||
        currentUser.accessLevel === "Full Access" ||
        currentUser.accessLevel === "Administrative" ||
        currentUser.role === "Administrator" ||
        currentUser.role === "Manager";

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">Role Management</h1>
                {canManageRoles && (
                    <Button
                        className="flex items-center gap-2"
                        onClick={() => setIsAddModalOpen(true)}
                    >
                        <PlusCircle size={16} />
                        <span>Add Role</span>
                    </Button>
                )}
            </div>

            <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center justify-between mb-6">
                    <div className="relative w-80">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                        <Input
                            type="text"
                            placeholder="Search roles..."
                            className="pl-10"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                        />
                    </div>
                </div>

                <div className="rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Role Name</TableHead>
                                <TableHead>Department</TableHead>
                                <TableHead>Description</TableHead>
                                <TableHead>Created Date</TableHead>
                                {canManageRoles && <TableHead className="text-right">Actions</TableHead>}
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {isLoading ? (
                                <TableRow>
                                    <TableCell colSpan={canManageRoles ? 5 : 4} className="text-center py-10">
                                        <div className="flex justify-center items-center">
                                            <Loader2 className="h-6 w-6 animate-spin text-primary mr-2" />
                                            <span>Loading roles data...</span>
                                        </div>
                                    </TableCell>
                                </TableRow>
                            ) : error ? (
                                <TableRow>
                                    <TableCell colSpan={canManageRoles ? 5 : 4} className="text-center py-10 text-red-500">
                                        {error}
                                    </TableCell>
                                </TableRow>
                            ) : filteredRoles.length > 0 ? (
                                filteredRoles.map((role) => (
                                    <TableRow key={role._id}>
                                        <TableCell className="font-medium">{role.name}</TableCell>
                                        <TableCell>{role.department ? getDepartmentName(role.department) : 'All Departments'}</TableCell>
                                        <TableCell>{role.description || "No description"}</TableCell>
                                        <TableCell>{new Date(role.createdAt).toLocaleDateString()}</TableCell>
                                        {canManageRoles && (
                                            <TableCell className="text-right">
                                                <div className="flex justify-end gap-2">
                                                    <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        onClick={() => openEditModal(role)}
                                                    >
                                                        <Edit size={16} />
                                                    </Button>
                                                    {(currentUser?.accessLevel === "Full Access" || currentUser?.role === "Administrator") && (
                                                        <Button
                                                            variant="ghost"
                                                            size="icon"
                                                            className="text-red-500 hover:text-red-700"
                                                            onClick={() => deleteRole(role._id)}
                                                        >
                                                            <Trash2 size={16} />
                                                        </Button>
                                                    )}
                                                </div>
                                            </TableCell>
                                        )}
                                    </TableRow>
                                ))
                            ) : (
                                <TableRow>
                                    <TableCell colSpan={canManageRoles ? 5 : 4} className="text-center py-10 text-gray-500">
                                        No roles found
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </div>
            </div>

            {/* Add Role Modal */}
            <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Add New Role</DialogTitle>
                        <DialogDescription>
                            Create a new role for your organization.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4 py-2">
                        <div className="space-y-2">
                            <Label htmlFor="roleName">Role Name *</Label>
                            <Input
                                id="roleName"
                                placeholder="Enter role name"
                                value={newRoleName}
                                onChange={(e) => setNewRoleName(e.target.value)}
                            />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="roleDepartment">Department (Optional)</Label>
                            <Select value={newRoleDepartment} onValueChange={setNewRoleDepartment}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select department" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="">All Departments</SelectItem>
                                    {departments.map((department) => (
                                        <SelectItem key={department._id} value={department._id}>
                                            {department.name}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="roleDescription">Description (Optional)</Label>
                            <Textarea
                                id="roleDescription"
                                placeholder="Enter role description"
                                value={newRoleDescription}
                                onChange={(e) => setNewRoleDescription(e.target.value)}
                                rows={3}
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <DialogClose asChild>
                            <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={createRole}>Create Role</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>

            {/* Edit Role Modal */}
            <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Edit Role</DialogTitle>
                        <DialogDescription>
                            Update the role information.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4 py-2">
                        <div className="space-y-2">
                            <Label htmlFor="editRoleName">Role Name *</Label>
                            <Input
                                id="editRoleName"
                                placeholder="Enter role name"
                                value={editRoleName}
                                onChange={(e) => setEditRoleName(e.target.value)}
                            />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="editRoleDepartment">Department (Optional)</Label>
                            <Select value={editRoleDepartment} onValueChange={setEditRoleDepartment}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select department" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="">All Departments</SelectItem>
                                    {departments.map((department) => (
                                        <SelectItem key={department._id} value={department._id}>
                                            {department.name}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="editRoleDescription">Description (Optional)</Label>
                            <Textarea
                                id="editRoleDescription"
                                placeholder="Enter role description"
                                value={editRoleDescription}
                                onChange={(e) => setEditRoleDescription(e.target.value)}
                                rows={3}
                            />
                        </div>
                    </div>
                    <DialogFooter>
                        <DialogClose asChild>
                            <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={updateRole}>Update Role</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default AddRoleContent;
</file>

<file path="src/components/Admin/Staff/AddStaffMemberForm.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";
import axios from "axios";

import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Loader2 } from "lucide-react";
import { Link } from "react-router-dom";

// API endpoints
const API_BASE_URL = "http://localhost:4000/api";
const STAFF_API_URL = `${API_BASE_URL}/staff`;
const ROLES_API_URL = `${API_BASE_URL}/roles`;
const DEPARTMENTS_API_URL = `${API_BASE_URL}/departments`;
const ACCESS_LEVELS_API_URL = `${API_BASE_URL}/access-levels`;

interface AddStaffMemberFormProps {
  currentUserDepartment: string;
  currentUserRole: string;
}

// Interface for role, department, and access level
interface Role {
  _id: string;
  name: string;
}

interface Department {
  _id: string;
  name: string;
}

interface AccessLevel {
  _id: string;
  name: string;
  level: number;
}

const staffFormSchema = z.object({
  name: z.string().min(2, {
    message: "Name must be at least 2 characters.",
  }),
  position: z.string().min(2, {
    message: "Position must be at least 2 characters.",
  }),
  department: z.string().min(2, {
    message: "Department is required.",
  }),
  email: z.string().email({
    message: "Please enter a valid email address.",
  }),
  phone: z.string().min(7, {
    message: "Phone number must be at least 7 characters.",
  }),
  role: z.string().min(1, {
    message: "Role is required.",
  }),
  status: z.string().default("Active"),
  accessLevel: z.string().default("Standard"),
  startDate: z.string().optional(),
  emergencyContact: z.string().optional(),
  address: z.string().optional(),
});

type StaffFormValues = z.infer<typeof staffFormSchema>;

const AddStaffMemberForm = ({ currentUserDepartment, currentUserRole }: AddStaffMemberFormProps) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [canEditAllDepartments, setCanEditAllDepartments] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [roles, setRoles] = useState<Role[]>([]);
  const [departments, setDepartments] = useState<Department[]>([]);
  const [accessLevels, setAccessLevels] = useState<AccessLevel[]>([]);
  const navigate = useNavigate();

  // Fetch roles, departments, and access levels from the database
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        // Fetch all data in parallel
        const [rolesResponse, departmentsResponse, accessLevelsResponse] = await Promise.all([
          axios.get(ROLES_API_URL),
          axios.get(DEPARTMENTS_API_URL),
          axios.get(ACCESS_LEVELS_API_URL)
        ]);

        // Process roles data
        let rolesData = [];
        if (rolesResponse.data.data && Array.isArray(rolesResponse.data.data)) {
          rolesData = rolesResponse.data.data;
        } else if (rolesResponse.data.roles && Array.isArray(rolesResponse.data.roles)) {
          rolesData = rolesResponse.data.roles;
        } else if (Array.isArray(rolesResponse.data)) {
          rolesData = rolesResponse.data;
        }
        setRoles(rolesData);

        // Process departments data
        let departmentsData = [];
        if (departmentsResponse.data.data && Array.isArray(departmentsResponse.data.data)) {
          departmentsData = departmentsResponse.data.data;
        } else if (departmentsResponse.data.departments && Array.isArray(departmentsResponse.data.departments)) {
          departmentsData = departmentsResponse.data.departments;
        } else if (Array.isArray(departmentsResponse.data)) {
          departmentsData = departmentsResponse.data;
        }
        setDepartments(departmentsData);

        // Process access levels data
        let accessLevelsData = [];
        if (accessLevelsResponse.data.data && Array.isArray(accessLevelsResponse.data.data)) {
          accessLevelsData = accessLevelsResponse.data.data;
        } else if (accessLevelsResponse.data.accessLevels && Array.isArray(accessLevelsResponse.data.accessLevels)) {
          accessLevelsData = accessLevelsResponse.data.accessLevels;
        } else if (Array.isArray(accessLevelsResponse.data)) {
          accessLevelsData = accessLevelsResponse.data;
        }
        setAccessLevels(accessLevelsData);
      } catch (error) {
        console.error("Error fetching data:", error);
        toast.error("Failed to load form data. Some options may be limited.");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  // Check if user can edit all departments based on their role and department
  useEffect(() => {
    if (currentUserRole === "Administrator" || currentUserDepartment === "Management" || currentUserDepartment === "Human Resources") {
      setCanEditAllDepartments(true);
    }
  }, [currentUserRole, currentUserDepartment]);

  const form = useForm<StaffFormValues>({
    resolver: zodResolver(staffFormSchema),
    defaultValues: {
      name: "",
      position: "",
      department: canEditAllDepartments ? "" : currentUserDepartment,
      email: "",
      phone: "",
      role: "",
      status: "Active",
      accessLevel: "Standard",
      startDate: "",
      emergencyContact: "",
      address: "",
    },
  });

  useEffect(() => {
    // Update form default values when canEditAllDepartments changes
    if (!canEditAllDepartments) {
      form.setValue("department", currentUserDepartment);
    }
  }, [canEditAllDepartments, currentUserDepartment, form]);

  const onSubmit = async (values: StaffFormValues) => {
    setIsSubmitting(true);

    try {
      // Submit data to backend API
      const response = await axios.post(STAFF_API_URL, values);

      toast.success("Staff member added successfully");

      setTimeout(() => {
        navigate("/admin/staff");
      }, 1500);
    } catch (error) {
      console.error("Error submitting form:", error);
      toast.error(
        axios.isAxiosError(error) && error.response?.data?.message
          ? error.response.data.message
          : "Failed to add staff member. Please try again."
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  // Generate available department options based on user permissions
  const getDepartmentOptions = () => {
    if (departments.length === 0) {
      return canEditAllDepartments
        ? ["Management", "Human Resources"] // Fallback defaults if API fails
        : [currentUserDepartment];
    }

    return canEditAllDepartments
      ? departments
      : departments.filter(dept => dept.name === currentUserDepartment);
  };

  // Get available roles based on user role
  const getAvailableRoles = () => {
    if (roles.length === 0) {
      // Fallback defaults if API fails
      const defaultRoles = ["Manager", "Supervisor", "Staff", "Intern", "Contractor"];
      return currentUserRole === "Administrator"
        ? ["Administrator", ...defaultRoles]
        : defaultRoles;
    }

    // If user is not an admin, filter out the Administrator role
    return currentUserRole === "Administrator"
      ? roles
      : roles.filter(role => role.name !== "Administrator");
  };

  // Get available access levels based on user role
  const getAccessLevelOptions = () => {
    if (accessLevels.length === 0) {
      // Fallback to hardcoded values if API fails
      if (currentUserRole === "Administrator") {
        return ["Full Access", "Administrative", "Standard", "Limited", "Read Only"];
      } else if (currentUserRole === "Manager") {
        return ["Standard", "Limited", "Read Only"];
      } else {
        return ["Limited", "Read Only"];
      }
    }

    // Sort access levels by their level number (higher number = higher access)
    const sortedLevels = [...accessLevels].sort((a, b) => b.level - a.level);

    if (currentUserRole === "Administrator") {
      return sortedLevels;
    } else if (currentUserRole === "Manager") {
      // Managers can assign standard and lower access levels
      return sortedLevels.filter(level =>
        ["Standard", "Limited", "Read Only"].includes(level.name)
      );
    } else {
      // Other roles can only assign limited and read-only access
      return sortedLevels.filter(level =>
        ["Limited", "Read Only"].includes(level.name)
      );
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="ml-2">Loading form data...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2">
        <Link to="/admin/staff">
          <Button variant="outline" size="icon">
            <ArrowLeft size={16} />
          </Button>
        </Link>
        <h1 className="text-2xl font-bold text-gray-800">Add New Staff Member</h1>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Personal Information */}
              <div className="space-y-4">
                <h2 className="text-lg font-semibold border-b pb-2">Personal Information</h2>

                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Full Name</FormLabel>
                      <FormControl>
                        <Input placeholder="John Doe" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                      <FormControl>
                        <Input placeholder="john.doe@parksideplaza.com" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="phone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Phone Number</FormLabel>
                      <FormControl>
                        <Input placeholder="+1 (555) 123-4567" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="address"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Address</FormLabel>
                      <FormControl>
                        <Input placeholder="123 Main St, City, State, ZIP" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="emergencyContact"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Emergency Contact</FormLabel>
                      <FormControl>
                        <Input placeholder="+1 (555) 987-6543" {...field} />
                      </FormControl>
                      <FormDescription>
                        Contact number in case of emergency
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              {/* Employment Information */}
              <div className="space-y-4">
                <h2 className="text-lg font-semibold border-b pb-2">Employment Information</h2>

                <FormField
                  control={form.control}
                  name="position"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Position</FormLabel>
                      <FormControl>
                        <Input placeholder="Front Desk Manager" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="department"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Department</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={field.value}
                        disabled={!canEditAllDepartments}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a department" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {getDepartmentOptions().map((dept) => (
                            <SelectItem key={dept._id || dept} value={dept.name || dept}>
                              {dept.name || dept}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      {!canEditAllDepartments && (
                        <FormDescription>
                          You can only add staff to your department: {currentUserDepartment}
                        </FormDescription>
                      )}
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="role"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Role</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a role" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {getAvailableRoles().map((role) => (
                            <SelectItem key={role._id || role} value={role.name || role}>
                              {role.name || role}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="accessLevel"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Access Level</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select access level" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {getAccessLevelOptions().map((level) => (
                            <SelectItem key={level._id || level} value={level.name || level}>
                              {level.name || level}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Determines what areas of the system the staff member can access
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Active">Active</SelectItem>
                          <SelectItem value="On Leave">On Leave</SelectItem>
                          <SelectItem value="Suspended">Suspended</SelectItem>
                          <SelectItem value="Terminated">Terminated</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="startDate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Start Date</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            <div className="flex justify-end gap-3">
              <Button variant="outline" type="button" onClick={() => navigate("/admin/staff")}>
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Adding...
                  </>
                ) : (
                  "Add Staff Member"
                )}
              </Button>
            </div>
          </form>
        </Form>
      </div>
    </div>
  );
};

export default AddStaffMemberForm;
</file>

<file path="src/components/Admin/Staff/DeleteStaffModal.tsx">
import { useState } from "react";
import { toast } from "sonner";
import axios from "axios";
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface DeleteStaffModalProps {
    isOpen: boolean;
    onClose: () => void;
    staffId: string;
    staffName: string;
    onSuccess: () => void;
}

const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const STAFF_ENDPOINT = `${API_URL}/api/staff`;

const DeleteStaffModal = ({
    isOpen,
    onClose,
    staffId,
    staffName,
    onSuccess,
}: DeleteStaffModalProps) => {
    const [isDeleting, setIsDeleting] = useState(false);

    const handleDelete = async () => {
        try {
            setIsDeleting(true);
            console.log("Deleting staff with ID:", staffId);
            console.log("Delete endpoint:", `${API_URL}/api/staff/${staffId}`);

            // Using direct axios call instead of the instance
            const response = await axios({
                method: 'DELETE',
                url: `${API_URL}/api/staff/${staffId}`,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            console.log("Delete response:", response.data);

            toast.success("Staff member deleted successfully");
            onSuccess();
            onClose();
        } catch (error) {
            console.error("Error deleting staff:", error);

            // Detailed axios error logging
            if (axios.isAxiosError(error)) {
                const statusCode = error.response?.status;
                const responseData = error.response?.data;

                console.error(`Status code: ${statusCode}`);
                console.error("Response data:", responseData);

                const errorMessage = responseData?.message ||
                    error.message ||
                    "Failed to delete staff member";

                toast.error(errorMessage);
            } else {
                toast.error("Failed to delete staff member");
            }
        } finally {
            setIsDeleting(false);
        }
    };

    return (
        <AlertDialog open={isOpen} onOpenChange={onClose}>
            <AlertDialogContent>
                <AlertDialogHeader>
                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                    <AlertDialogDescription>
                        This action cannot be undone. This will permanently delete{" "}
                        <span className="font-semibold">{staffName}</span> from the staff
                        database.
                    </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                    <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
                    <AlertDialogAction
                        onClick={handleDelete}
                        disabled={isDeleting}
                        className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                    >
                        {isDeleting ? "Deleting..." : "Delete"}
                    </AlertDialogAction>
                </AlertDialogFooter>
            </AlertDialogContent>
        </AlertDialog>
    );
};

export default DeleteStaffModal;
</file>

<file path="src/components/Admin/Staff/EditStaffModal.tsx">
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { toast } from "sonner";
import axios from "axios";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogFooter,
} from "@/components/ui/dialog";
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Loader2 } from "lucide-react";

// API endpoints
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const STAFF_API_URL = `${API_URL}/api/staff`;
const ROLES_API_URL = `${API_URL}/api/roles`;
const DEPARTMENTS_API_URL = `${API_URL}/api/departments`;
const ACCESS_LEVELS_API_URL = `${API_URL}/api/access-levels`;

// Interfaces for data types
interface Role {
    _id: string;
    name: string;
}

interface Department {
    _id: string;
    name: string;
}

interface AccessLevel {
    _id: string;
    name: string;
    level: number;
}

// Schema for form validation
const formSchema = z.object({
    name: z.string().min(2, { message: "Name must be at least 2 characters" }),
    position: z.string().min(2, { message: "Position must be at least 2 characters" }),
    department: z.string().min(1, { message: "Department is required" }),
    email: z.string().email({ message: "Invalid email address" }),
    phone: z.string().min(7, { message: "Phone number must be at least 7 characters" }),
    role: z.string().min(1, { message: "Role is required" }),
    status: z.string().min(1, { message: "Status is required" }),
    accessLevel: z.string().min(1, { message: "Access level is required" }),
    active: z.boolean().default(true),
});

type FormValues = z.infer<typeof formSchema>;

interface EditStaffModalProps {
    isOpen: boolean;
    onClose: () => void;
    staffId: string;
    onSuccess: () => void;
}

const EditStaffModal = ({
    isOpen,
    onClose,
    staffId,
    onSuccess,
}: EditStaffModalProps) => {
    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [roles, setRoles] = useState<Role[]>([]);
    const [departments, setDepartments] = useState<Department[]>([]);
    const [accessLevels, setAccessLevels] = useState<AccessLevel[]>([]);
    const [currentUserRole, setCurrentUserRole] = useState<string>("Staff");

    // Form definition
    const form = useForm<FormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            name: "",
            position: "",
            department: "",
            email: "",
            phone: "",
            role: "",
            status: "Active",
            accessLevel: "Standard",
            active: true,
        },
    });

    // Get current user from localStorage for role-based permissions
    useEffect(() => {
        const userDataString = localStorage.getItem("currentUser");
        if (userDataString) {
            try {
                const userData = JSON.parse(userDataString);
                setCurrentUserRole(userData.role || "Staff");
            } catch (error) {
                console.error("Error parsing user data:", error);
            }
        }
    }, []);

    // Fetch roles, departments, and access levels data
    useEffect(() => {
        if (!isOpen) return;

        const fetchMetadata = async () => {
            try {
                // Fetch all data in parallel
                const [rolesResponse, departmentsResponse, accessLevelsResponse] = await Promise.all([
                    axios.get(ROLES_API_URL),
                    axios.get(DEPARTMENTS_API_URL),
                    axios.get(ACCESS_LEVELS_API_URL)
                ]);

                // Process roles data
                let rolesData = [];
                if (rolesResponse.data.data && Array.isArray(rolesResponse.data.data)) {
                    rolesData = rolesResponse.data.data;
                } else if (rolesResponse.data.roles && Array.isArray(rolesResponse.data.roles)) {
                    rolesData = rolesResponse.data.roles;
                } else if (Array.isArray(rolesResponse.data)) {
                    rolesData = rolesResponse.data;
                }
                setRoles(rolesData);

                // Process departments data
                let departmentsData = [];
                if (departmentsResponse.data.data && Array.isArray(departmentsResponse.data.data)) {
                    departmentsData = departmentsResponse.data.data;
                } else if (departmentsResponse.data.departments && Array.isArray(departmentsResponse.data.departments)) {
                    departmentsData = departmentsResponse.data.departments;
                } else if (Array.isArray(departmentsResponse.data)) {
                    departmentsData = departmentsResponse.data;
                }
                setDepartments(departmentsData);

                // Process access levels data
                let accessLevelsData = [];
                if (accessLevelsResponse.data.data && Array.isArray(accessLevelsResponse.data.data)) {
                    accessLevelsData = accessLevelsResponse.data.data;
                } else if (accessLevelsResponse.data.accessLevels && Array.isArray(accessLevelsResponse.data.accessLevels)) {
                    accessLevelsData = accessLevelsResponse.data.accessLevels;
                } else if (Array.isArray(accessLevelsResponse.data)) {
                    accessLevelsData = accessLevelsResponse.data;
                }
                setAccessLevels(accessLevelsData);
            } catch (error) {
                console.error("Error fetching metadata:", error);
                toast.error("Failed to load some form options. Some fields may be limited.");
            }
        };

        fetchMetadata();
    }, [isOpen]);

    // Fetch staff data
    useEffect(() => {
        const fetchStaffData = async () => {
            if (!isOpen || !staffId) return;

            try {
                setIsFetching(true);
                console.log("Fetching staff with ID:", staffId);
                console.log("Fetch endpoint:", `${STAFF_API_URL}/${staffId}`);

                // Using direct axios call instead of the instance
                const response = await axios({
                    method: 'GET',
                    url: `${STAFF_API_URL}/${staffId}`,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                console.log("Staff detail API response:", response.data);

                // Extract staff data from the response
                const data = response.data;
                let staffData;

                if (data.data && data.data.staff) {
                    staffData = data.data.staff;
                } else if (data.data && data.data.doc) {
                    // Some APIs return data in a doc field
                    staffData = data.data.doc;
                } else if (data.data) {
                    staffData = data.data;
                } else if (data.staff) {
                    staffData = data.staff;
                } else if (data.doc) {
                    staffData = data.doc;
                } else {
                    staffData = data;
                }

                console.log("Processed staff data:", staffData);

                if (!staffData) {
                    throw new Error("Could not find staff data in the response");
                }

                // Set form values
                form.reset({
                    name: staffData.name || "",
                    position: staffData.position || "",
                    department: staffData.department || "",
                    email: staffData.email || "",
                    phone: staffData.phone || "",
                    role: staffData.role || "",
                    status: staffData.status || "Active",
                    accessLevel: staffData.accessLevel || "Standard",
                    active: staffData.active ?? true,
                });

                setError(null);
            } catch (err) {
                console.error("Failed to fetch staff data:", err);

                // Detailed axios error logging
                if (axios.isAxiosError(err)) {
                    const statusCode = err.response?.status;
                    const responseData = err.response?.data;

                    console.error(`Status code: ${statusCode}`);
                    console.error("Response data:", responseData);

                    const errorMessage = responseData?.message ||
                        err.message ||
                        "Failed to load staff data";

                    setError("Failed to load staff data. Please try again.");
                    toast.error(errorMessage);
                } else {
                    setError("Failed to load staff data. Please try again.");
                    toast.error("Failed to load staff data");
                }
            } finally {
                setIsFetching(false);
            }
        };

        fetchStaffData();
    }, [isOpen, staffId, form]);

    // Get available roles based on user role
    const getAvailableRoles = () => {
        if (roles.length === 0) {
            // Fallback defaults if API fails
            const defaultRoles = ["Manager", "Supervisor", "Staff", "Intern", "Contractor"];
            return currentUserRole === "Administrator"
                ? ["Administrator", ...defaultRoles]
                : defaultRoles;
        }

        // If user is not an admin, filter out the Administrator role
        return currentUserRole === "Administrator"
            ? roles
            : roles.filter(role => role.name !== "Administrator");
    };

    // Get available access levels based on user role
    const getAccessLevelOptions = () => {
        if (accessLevels.length === 0) {
            // Fallback to hardcoded values if API fails
            if (currentUserRole === "Administrator") {
                return ["Full Access", "Administrative", "Standard", "Limited", "Read Only"];
            } else if (currentUserRole === "Manager") {
                return ["Standard", "Limited", "Read Only"];
            } else {
                return ["Limited", "Read Only"];
            }
        }

        // Sort access levels by their level number (higher number = higher access)
        const sortedLevels = [...accessLevels].sort((a, b) => b.level - a.level);

        if (currentUserRole === "Administrator") {
            return sortedLevels;
        } else if (currentUserRole === "Manager") {
            // Managers can assign standard and lower access levels
            return sortedLevels.filter(level =>
                ["Standard", "Limited", "Read Only"].includes(level.name)
            );
        } else {
            // Other roles can only assign limited and read-only access
            return sortedLevels.filter(level =>
                ["Limited", "Read Only"].includes(level.name)
            );
        }
    };

    // Submit handler
    const onSubmit = async (data: FormValues) => {
        try {
            setIsLoading(true);
            console.log("Submitting form data:", data);

            // Create the request body
            const requestBody = {
                name: data.name,
                position: data.position,
                department: data.department,
                email: data.email,
                phone: data.phone,
                role: data.role,
                status: data.status,
                accessLevel: data.accessLevel,
                active: data.active
            };

            console.log("Request endpoint:", `${STAFF_API_URL}/${staffId}`);
            console.log("Request body:", requestBody);

            // Try with different configurations to handle CORS and network issues
            try {
                // Attempt 1: Standard axios call with all credentials
                const response = await axios({
                    method: 'PATCH',
                    url: `${STAFF_API_URL}/${staffId}`,
                    data: requestBody,
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    withCredentials: true
                });

                console.log("Update response:", response.data);
                console.log("Updated staff data:", response.data.data?.staff || response.data.data);
                toast.success("Staff member updated successfully");
                onSuccess();
                onClose();
                return;
            } catch (axiosError) {
                console.error("First attempt failed:", axiosError);

                // If the first attempt fails, try another approach
                try {
                    // Attempt 2: Without credentials, different content type
                    const response = await axios({
                        method: 'PATCH',
                        url: `${STAFF_API_URL}/${staffId}`,
                        data: requestBody,
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': '*/*'
                        },
                        withCredentials: false
                    });

                    console.log("Second attempt response:", response.data);
                    toast.success("Staff member updated successfully");
                    onSuccess();
                    onClose();
                    return;
                } catch (secondError) {
                    console.error("Second attempt failed:", secondError);

                    // Try a third approach with FormData instead of JSON
                    try {
                        // Create FormData
                        const formData = new FormData();
                        Object.entries(requestBody).forEach(([key, value]) => {
                            formData.append(key, value.toString());
                        });

                        const response = await axios({
                            method: 'PATCH',
                            url: `${STAFF_API_URL}/${staffId}`,
                            data: formData,
                            headers: {
                                'Accept': '*/*'
                            },
                            withCredentials: false
                        });

                        console.log("FormData attempt response:", response.data);
                        toast.success("Staff member updated successfully");
                        onSuccess();
                        onClose();
                        return;
                    } catch (thirdError) {
                        console.error("FormData attempt failed:", thirdError);
                        throw thirdError;
                    }
                }
            }
        } catch (error) {
            console.error("Error updating staff:", error);

            let errorMessage = "Failed to update staff member";

            if (axios.isAxiosError(error)) {
                // Network errors often don't have response data
                if (error.message === "Network Error") {
                    errorMessage = "Network error - Please check your connection and the API server";

                    // Log additional debug info
                    console.error("Network error details:");
                    console.error("- Error name:", error.name);
                    console.error("- Error message:", error.message);
                    console.error("- Error code:", error.code);
                    console.error("- Error config:", error.config);
                } else {
                    errorMessage = error.response?.data?.message || error.message || errorMessage;
                }
            } else if (error instanceof Error) {
                errorMessage = error.message;
            }

            toast.error(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                    <DialogTitle className="text-xl">Edit Staff Member</DialogTitle>
                </DialogHeader>

                {isFetching ? (
                    <div className="flex justify-center items-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin text-primary" />
                    </div>
                ) : error ? (
                    <div className="text-center py-4 text-red-500">{error}</div>
                ) : (
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <FormField
                                    control={form.control}
                                    name="name"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Full Name</FormLabel>
                                            <FormControl>
                                                <Input placeholder="John Doe" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="position"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Position</FormLabel>
                                            <FormControl>
                                                <Input placeholder="Hotel Manager" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <FormField
                                    control={form.control}
                                    name="department"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Department</FormLabel>
                                            <Select
                                                onValueChange={field.onChange}
                                                value={field.value}
                                            >
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder="Select a department" />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    {departments.length > 0 ? (
                                                        departments.map((dept) => (
                                                            <SelectItem key={dept._id || dept.name} value={dept.name}>
                                                                {dept.name}
                                                            </SelectItem>
                                                        ))
                                                    ) : (
                                                        <>
                                                            <SelectItem value="Management">Management</SelectItem>
                                                            <SelectItem value="Front Office">Front Office</SelectItem>
                                                            <SelectItem value="Housekeeping">Housekeeping</SelectItem>
                                                            <SelectItem value="Food & Beverage">Food & Beverage</SelectItem>
                                                            <SelectItem value="Maintenance">Maintenance</SelectItem>
                                                            <SelectItem value="Spa & Wellness">Spa & Wellness</SelectItem>
                                                            <SelectItem value="Security">Security</SelectItem>
                                                            <SelectItem value="IT">IT</SelectItem>
                                                            <SelectItem value="Human Resources">Human Resources</SelectItem>
                                                            <SelectItem value="Sales & Marketing">Sales & Marketing</SelectItem>
                                                        </>
                                                    )}
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="role"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Role</FormLabel>
                                            <Select
                                                onValueChange={field.onChange}
                                                value={field.value}
                                            >
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder="Select a role" />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    {getAvailableRoles().length > 0 ? (
                                                        getAvailableRoles().map((role) => (
                                                            <SelectItem
                                                                key={role._id || role.name || role}
                                                                value={role.name || role}
                                                            >
                                                                {role.name || role}
                                                            </SelectItem>
                                                        ))
                                                    ) : (
                                                        <>
                                                            {currentUserRole === "Administrator" && (
                                                                <SelectItem value="Administrator">Administrator</SelectItem>
                                                            )}
                                                            <SelectItem value="Manager">Manager</SelectItem>
                                                            <SelectItem value="Supervisor">Supervisor</SelectItem>
                                                            <SelectItem value="Staff">Staff</SelectItem>
                                                            <SelectItem value="Intern">Intern</SelectItem>
                                                            <SelectItem value="Contractor">Contractor</SelectItem>
                                                        </>
                                                    )}
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <FormField
                                    control={form.control}
                                    name="email"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Email</FormLabel>
                                            <FormControl>
                                                <Input type="email" placeholder="john.doe@example.com" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="phone"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Phone</FormLabel>
                                            <FormControl>
                                                <Input placeholder="+1 (555) 123-4567" {...field} />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <FormField
                                    control={form.control}
                                    name="status"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Status</FormLabel>
                                            <Select
                                                onValueChange={field.onChange}
                                                value={field.value}
                                            >
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder="Select a status" />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    <SelectItem value="Active">Active</SelectItem>
                                                    <SelectItem value="On Leave">On Leave</SelectItem>
                                                    <SelectItem value="Suspended">Suspended</SelectItem>
                                                    <SelectItem value="Terminated">Terminated</SelectItem>
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                <FormField
                                    control={form.control}
                                    name="accessLevel"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Access Level</FormLabel>
                                            <Select
                                                onValueChange={field.onChange}
                                                value={field.value}
                                            >
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder="Select an access level" />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    {getAccessLevelOptions().length > 0 ? (
                                                        getAccessLevelOptions().map((level) => (
                                                            <SelectItem
                                                                key={level._id || level.name || level}
                                                                value={level.name || level}
                                                            >
                                                                {level.name || level}
                                                            </SelectItem>
                                                        ))
                                                    ) : (
                                                        <>
                                                            <SelectItem value="Full Access">Full Access</SelectItem>
                                                            <SelectItem value="Administrative">Administrative</SelectItem>
                                                            <SelectItem value="Standard">Standard</SelectItem>
                                                            <SelectItem value="Limited">Limited</SelectItem>
                                                            <SelectItem value="Read Only">Read Only</SelectItem>
                                                        </>
                                                    )}
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>

                            <FormField
                                control={form.control}
                                name="active"
                                render={({ field }) => (
                                    <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                                        <div className="space-y-0.5">
                                            <FormLabel>Account Status</FormLabel>
                                            <div className="text-sm text-muted-foreground">
                                                Disable to deactivate this user account
                                            </div>
                                        </div>
                                        <FormControl>
                                            <Switch
                                                checked={field.value}
                                                onCheckedChange={field.onChange}
                                            />
                                        </FormControl>
                                    </FormItem>
                                )}
                            />

                            <DialogFooter>
                                <Button
                                    type="button"
                                    variant="outline"
                                    onClick={onClose}
                                    disabled={isLoading}
                                >
                                    Cancel
                                </Button>
                                <Button type="submit" disabled={isLoading}>
                                    {isLoading ? (
                                        <>
                                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                            Saving...
                                        </>
                                    ) : (
                                        "Save Changes"
                                    )}
                                </Button>
                            </DialogFooter>
                        </form>
                    </Form>
                )}
            </DialogContent>
        </Dialog>
    );
};

export default EditStaffModal;
</file>

<file path="src/components/Admin/Staff/StaffManagementContent.tsx">
import { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { PlusCircle, Search, Edit, Trash2, UserPlus, Loader2 } from "lucide-react";
import { Link } from "react-router-dom";
import { StaffMember } from "@/types/staff";
import { toast } from "sonner";
import DeleteStaffModal from "./DeleteStaffModal";
import EditStaffModal from "./EditStaffModal";
import axios from "axios";

// Interface for current user
interface CurrentUser {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

// API endpoint
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const STAFF_ENDPOINT = `${API_URL}/api/staff`;

const StaffManagementContent = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
  const [staffMembers, setStaffMembers] = useState<StaffMember[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedStaff, setSelectedStaff] = useState<StaffMember | null>(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  // Get current user from localStorage
  useEffect(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      setCurrentUser(JSON.parse(userDataString));
    }
  }, []);

  // Fetch staff data with axios
  const fetchStaffData = async () => {
    try {
      setIsLoading(true);
      console.log("Fetching all staff members from:", `${API_URL}/api/staff`);

      // Using direct axios call instead of the instance
      const response = await axios({
        method: 'GET',
        url: `${API_URL}/api/staff`,
        headers: {
          'Content-Type': 'application/json'
        }
      });

      console.log("API Response:", response.data);

      // Handle different response formats based on the actual API response
      let staffData = [];
      const data = response.data;

      if (data.data && data.data.staff && Array.isArray(data.data.staff)) {
        // Format: { data: { staff: [...] } }
        staffData = data.data.staff;
      } else if (data.data && Array.isArray(data.data)) {
        // Format: { data: [...] }
        staffData = data.data;
      } else if (Array.isArray(data)) {
        // Format: [...]
        staffData = data;
      } else if (data.staff && Array.isArray(data.staff)) {
        // Format: { staff: [...] }
        staffData = data.staff;
      }

      console.log("Processed staff data:", staffData);
      console.log("Data type:", Array.isArray(staffData) ? "Array" : typeof staffData);
      console.log("Data length:", Array.isArray(staffData) ? staffData.length : "N/A");

      setStaffMembers(staffData);
      setError(null);
    } catch (err) {
      console.error("Failed to fetch staff data:", err);

      // Detailed axios error logging
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const responseData = err.response?.data;

        console.error(`Status code: ${statusCode}`);
        console.error("Response data:", responseData);

        const errorMessage = responseData?.message ||
          err.message ||
          "Failed to load staff data";

        setError("Failed to load staff data. Please try again later.");
        toast.error(errorMessage);
      } else {
        setError("Failed to load staff data. Please try again later.");
        toast.error(err instanceof Error ? err.message : "Failed to load staff data");
      }

      setStaffMembers([]); // Set empty array on error
    } finally {
      setIsLoading(false);
    }
  };

  // Initial data fetch
  useEffect(() => {
    fetchStaffData();
  }, []);

  // Delete staff member with axios
  const deleteStaffMember = async (id: string) => {
    try {
      console.log("Deleting staff with ID:", id);
      console.log("Delete endpoint:", `${API_URL}/api/staff/${id}`);

      // Using direct axios call
      const response = await axios({
        method: 'DELETE',
        url: `${API_URL}/api/staff/${id}`,
        headers: {
          'Content-Type': 'application/json'
        }
      });

      console.log("Delete response:", response.data);

      // Refresh data after successful deletion
      fetchStaffData();
      return true;
    } catch (error) {
      console.error("Error deleting staff member:", error);

      // Detailed axios error logging
      if (axios.isAxiosError(error)) {
        const statusCode = error.response?.status;
        const responseData = error.response?.data;

        console.error(`Status code: ${statusCode}`);
        console.error("Response data:", responseData);

        const errorMessage = responseData?.message ||
          error.message ||
          "Failed to delete staff member";

        console.error("Error message:", errorMessage);
      }

      throw error;
    }
  };

  // Handle successful delete
  const handleDeleteSuccess = () => {
    fetchStaffData();
  };

  // Handle successful edit
  const handleEditSuccess = () => {
    fetchStaffData();
  };

  // Filter staff based on user's department and search query
  const filteredStaff = Array.isArray(staffMembers)
    ? staffMembers.filter((staff) => {
      // Filter by department if not Full Access user and not in Management
      const departmentFilter =
        !currentUser ||
        currentUser.accessLevel === "Full Access" ||
        currentUser.department === "Management" ||
        currentUser.department === staff.department;

      // Filter by search query
      const searchFilter =
        staff.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        staff.position.toLowerCase().includes(searchQuery.toLowerCase()) ||
        staff.department.toLowerCase().includes(searchQuery.toLowerCase()) ||
        staff.email.toLowerCase().includes(searchQuery.toLowerCase());

      return departmentFilter && searchFilter;
    })
    : [];

  // Check if user has permission to add staff
  const canAddStaff =
    !currentUser ||
    currentUser.accessLevel === "Full Access" ||
    currentUser.accessLevel === "Administrative" ||
    currentUser.role === "Administrator" ||
    currentUser.role === "Manager";

  // Open delete modal
  const openDeleteModal = (staff: StaffMember) => {
    setSelectedStaff(staff);
    setIsDeleteModalOpen(true);
  };

  // Open edit modal
  const openEditModal = (staff: StaffMember) => {
    setSelectedStaff(staff);
    setIsEditModalOpen(true);
  };

  // Function to determine status color
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Active':
        return 'bg-green-100 text-green-800';
      case 'Suspended':
        return 'bg-red-100 text-red-800';
      case 'Terminated':
        return 'bg-red-100 text-red-800';
      case 'On Leave':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Staff Management</h1>
        {canAddStaff && (
          <Link to="/admin/staff/add">
            <Button className="flex items-center gap-2">
              <UserPlus size={16} />
              <span>Add Staff Member</span>
            </Button>
          </Link>
        )}
      </div>

      {/* Display department filter info if not admin */}
      {currentUser && currentUser.accessLevel !== "Full Access" && (
        <div className="bg-blue-50 border-l-4 border-blue-400 p-4 mb-4">
          <p className="text-sm text-blue-700">
            Viewing staff for: <span className="font-medium">{currentUser.department}</span>
          </p>
        </div>
      )}

      <div className="bg-white p-6 rounded-lg shadow">
        <div className="flex items-center justify-between mb-6">
          <div className="relative w-80">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <Input
              type="text"
              placeholder="Search staff..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <div className="flex gap-2">
            {currentUser && (currentUser.accessLevel === "Full Access" || currentUser.role === "Manager") && (
              <>
                <Button variant="outline">Export</Button>
                <Button variant="outline">Filter</Button>
              </>
            )}
          </div>
        </div>

        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Position</TableHead>
                <TableHead>Department</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Phone</TableHead>
                <TableHead>Status</TableHead>
                {canAddStaff && <TableHead className="text-right">Actions</TableHead>}
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                <TableRow>
                  <TableCell colSpan={canAddStaff ? 7 : 6} className="text-center py-10">
                    <div className="flex justify-center items-center">
                      <Loader2 className="h-6 w-6 animate-spin text-primary mr-2" />
                      <span>Loading staff data...</span>
                    </div>
                  </TableCell>
                </TableRow>
              ) : error ? (
                <TableRow>
                  <TableCell colSpan={canAddStaff ? 7 : 6} className="text-center py-10 text-red-500">
                    {error}
                  </TableCell>
                </TableRow>
              ) : filteredStaff.length > 0 ? (
                filteredStaff.map((staff) => (
                  <TableRow key={staff._id}>
                    <TableCell className="font-medium">{staff.name}</TableCell>
                    <TableCell>{staff.position}</TableCell>
                    <TableCell>{staff.department}</TableCell>
                    <TableCell>{staff.email}</TableCell>
                    <TableCell>{staff.phone}</TableCell>
                    <TableCell>
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(staff.status)}`}
                      >
                        {staff.status}
                      </span>
                    </TableCell>
                    {canAddStaff && (
                      <TableCell className="text-right">
                        <div className="flex justify-end gap-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => openEditModal(staff)}
                          >
                            <Edit size={16} />
                          </Button>
                          {(currentUser?.accessLevel === "Full Access" || currentUser?.role === "Administrator") && (
                            <Button
                              variant="ghost"
                              size="icon"
                              className="text-red-500 hover:text-red-700"
                              onClick={() => openDeleteModal(staff)}
                            >
                              <Trash2 size={16} />
                            </Button>
                          )}
                        </div>
                      </TableCell>
                    )}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={canAddStaff ? 7 : 6} className="text-center py-10 text-gray-500">
                    No staff members found
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </div>

      {/* Add EditStaffModal */}
      {selectedStaff && (
        <>
          <DeleteStaffModal
            isOpen={isDeleteModalOpen}
            onClose={() => setIsDeleteModalOpen(false)}
            staffId={selectedStaff._id}
            staffName={selectedStaff.name}
            onSuccess={handleDeleteSuccess}
          />
          <EditStaffModal
            isOpen={isEditModalOpen}
            onClose={() => setIsEditModalOpen(false)}
            staffId={selectedStaff._id}
            onSuccess={handleEditSuccess}
          />
        </>
      )}
    </div>
  );
};

export default StaffManagementContent;
</file>

<file path="src/components/Admin/Staff/StaffManagementPage.tsx">
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "sonner";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
    Search,
    Plus,
    MoreHorizontal,
    UserPlus,
    Pencil,
    Trash2,
    Mail,
    Phone,
    Eye,
    Filter,
} from "lucide-react";

// API endpoint
const STAFF_API_URL = "http://localhost:4000/api/staff";

// Staff interface
interface Staff {
    _id: string;
    name: string;
    email: string;
    phone: string;
    position: string;
    department: string;
    role: string;
    status: string;
    accessLevel: string;
    startDate: string;
    emergencyContact?: string;
    address?: string;
    photo?: string;
    createdAt: string;
    updatedAt: string;
    employmentLength?: string;
}

const StaffManagementPage = () => {
    const navigate = useNavigate();
    const [staff, setStaff] = useState<Staff[]>([]);
    const [loading, setLoading] = useState(true);
    const [searchQuery, setSearchQuery] = useState("");
    const [departmentFilter, setDepartmentFilter] = useState<string>("");
    const [statusFilter, setStatusFilter] = useState<string>("");
    const [staffToDelete, setStaffToDelete] = useState<Staff | null>(null);

    // Current user details (would normally come from authentication context)
    const currentUser = {
        role: "Administrator", // or "Manager", "Staff", etc.
        department: "Management", // or other department
    };

    const fetchStaff = async () => {
        try {
            setLoading(true);
            let url = STAFF_API_URL;

            // Add any active filters
            if (departmentFilter || statusFilter) {
                url += "?";
                if (departmentFilter) {
                    url += `department=${departmentFilter}`;
                }

                if (statusFilter) {
                    url += departmentFilter ? `&status=${statusFilter}` : `status=${statusFilter}`;
                }
            }

            const response = await axios.get(url);
            setStaff(response.data.data.staff);
        } catch (error) {
            console.error("Error fetching staff:", error);
            toast.error("Failed to load staff members");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchStaff();
    }, [departmentFilter, statusFilter]);

    const handleAddStaff = () => {
        navigate("/admin/staff/add");
    };

    const handleEditStaff = (staffId: string) => {
        navigate(`/admin/staff/edit/${staffId}`);
    };

    const handleViewStaff = (staffId: string) => {
        navigate(`/admin/staff/view/${staffId}`);
    };

    const handleDeleteStaff = async () => {
        if (!staffToDelete) return;

        try {
            await axios.delete(`${STAFF_API_URL}/${staffToDelete._id}`);
            toast.success("Staff member deleted successfully");
            setStaffToDelete(null);
            fetchStaff();
        } catch (error) {
            console.error("Error deleting staff:", error);
            toast.error("Failed to delete staff member");
        }
    };

    const getStatusBadgeVariant = (status: string) => {
        switch (status) {
            case "Active":
                return "success";
            case "On Leave":
                return "warning";
            case "Suspended":
                return "default";
            case "Terminated":
                return "destructive";
            default:
                return "secondary";
        }
    };

    // Filter staff based on search query
    const filteredStaff = staff.filter((member) => {
        const matchesSearch = searchQuery
            ? member.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            member.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            member.position.toLowerCase().includes(searchQuery.toLowerCase()) ||
            member.department.toLowerCase().includes(searchQuery.toLowerCase())
            : true;

        return matchesSearch;
    });

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
            day: "numeric",
        });
    };

    const canManageStaff = (staff: Staff) => {
        // Allow administrators to manage all staff
        if (currentUser.role === "Administrator") return true;

        // Managers can manage staff in their department
        if (currentUser.role === "Manager" && staff.department === currentUser.department) return true;

        // HR can manage all staff
        if (currentUser.department === "Human Resources") return true;

        return false;
    };

    return (
        <div className="space-y-6 p-6">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                    <h1 className="text-2xl font-bold">Staff Management</h1>
                    <p className="text-muted-foreground">Manage hotel staff members and their roles</p>
                </div>
                <Button onClick={handleAddStaff} className="flex items-center gap-2">
                    <UserPlus className="h-4 w-4" />
                    <span>Add Staff</span>
                </Button>
            </div>

            <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
                <div className="relative w-full sm:w-96">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                        placeholder="Search staff..."
                        className="pl-10"
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                    />
                </div>

                <div className="flex flex-wrap gap-2 self-start sm:self-auto">
                    <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                            <Button variant="outline" className="flex items-center gap-2">
                                <Filter className="h-4 w-4" />
                                Department
                            </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("")}>
                                All Departments
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Management")}>
                                Management
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Front Office")}>
                                Front Office
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Housekeeping")}>
                                Housekeeping
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Food & Beverage")}>
                                Food & Beverage
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Maintenance")}>
                                Maintenance
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Spa & Wellness")}>
                                Spa & Wellness
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Security")}>
                                Security
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("IT")}>
                                IT
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Human Resources")}>
                                Human Resources
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setDepartmentFilter("Sales & Marketing")}>
                                Sales & Marketing
                            </DropdownMenuItem>
                        </DropdownMenuContent>
                    </DropdownMenu>

                    <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                            <Button variant="outline" className="flex items-center gap-2">
                                <Filter className="h-4 w-4" />
                                Status
                            </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent>
                            <DropdownMenuItem onClick={() => setStatusFilter("")}>
                                All Statuses
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem onClick={() => setStatusFilter("Active")}>
                                Active
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setStatusFilter("On Leave")}>
                                On Leave
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setStatusFilter("Suspended")}>
                                Suspended
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => setStatusFilter("Terminated")}>
                                Terminated
                            </DropdownMenuItem>
                        </DropdownMenuContent>
                    </DropdownMenu>

                    {(departmentFilter || statusFilter) && (
                        <Button
                            variant="outline"
                            onClick={() => {
                                setDepartmentFilter("");
                                setStatusFilter("");
                            }}
                        >
                            Clear Filters
                        </Button>
                    )}
                </div>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>Staff Members</CardTitle>
                    <CardDescription>
                        {departmentFilter && `Department: ${departmentFilter}`}
                        {statusFilter && departmentFilter && ` | `}
                        {statusFilter && `Status: ${statusFilter}`}
                        {!departmentFilter && !statusFilter && "All staff members"}
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    {loading ? (
                        <div className="flex justify-center items-center py-8">
                            <p>Loading staff members...</p>
                        </div>
                    ) : filteredStaff.length === 0 ? (
                        <div className="flex flex-col items-center justify-center py-8">
                            <p className="text-muted-foreground mb-4">No staff members found</p>
                            <Button onClick={handleAddStaff}>Add Staff Member</Button>
                        </div>
                    ) : (
                        <div className="overflow-x-auto">
                            <Table>
                                <TableHeader>
                                    <TableRow>
                                        <TableHead>Name</TableHead>
                                        <TableHead>Position</TableHead>
                                        <TableHead>Department</TableHead>
                                        <TableHead>Email</TableHead>
                                        <TableHead>Status</TableHead>
                                        <TableHead className="text-right">Actions</TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {filteredStaff.map((member) => (
                                        <TableRow key={member._id}>
                                            <TableCell className="flex items-center gap-3 font-medium">
                                                <Avatar className="h-8 w-8">
                                                    <AvatarImage src={member.photo} />
                                                    <AvatarFallback>{member.name.charAt(0)}</AvatarFallback>
                                                </Avatar>
                                                {member.name}
                                            </TableCell>
                                            <TableCell>{member.position}</TableCell>
                                            <TableCell>{member.department}</TableCell>
                                            <TableCell>
                                                <a
                                                    href={`mailto:${member.email}`}
                                                    className="flex items-center gap-1 text-blue-600 hover:text-blue-800"
                                                >
                                                    <Mail className="h-3 w-3" />
                                                    {member.email}
                                                </a>
                                            </TableCell>
                                            <TableCell>
                                                <Badge
                                                    variant={
                                                        member.status === "Active"
                                                            ? "success"
                                                            : member.status === "On Leave"
                                                                ? "warning"
                                                                : member.status === "Suspended"
                                                                    ? "default"
                                                                    : "destructive"
                                                    }
                                                >
                                                    {member.status}
                                                </Badge>
                                            </TableCell>
                                            <TableCell className="text-right">
                                                <DropdownMenu>
                                                    <DropdownMenuTrigger asChild>
                                                        <Button variant="ghost" className="h-8 w-8 p-0">
                                                            <span className="sr-only">Open menu</span>
                                                            <MoreHorizontal className="h-4 w-4" />
                                                        </Button>
                                                    </DropdownMenuTrigger>
                                                    <DropdownMenuContent align="end">
                                                        <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                                        <DropdownMenuSeparator />
                                                        <DropdownMenuItem onClick={() => handleViewStaff(member._id)}>
                                                            <Eye className="mr-2 h-4 w-4" />
                                                            View Details
                                                        </DropdownMenuItem>

                                                        {canManageStaff(member) && (
                                                            <>
                                                                <DropdownMenuItem onClick={() => handleEditStaff(member._id)}>
                                                                    <Pencil className="mr-2 h-4 w-4" />
                                                                    Edit
                                                                </DropdownMenuItem>

                                                                <AlertDialog>
                                                                    <AlertDialogTrigger asChild>
                                                                        <DropdownMenuItem
                                                                            className="text-red-600"
                                                                            onSelect={(e) => {
                                                                                e.preventDefault();
                                                                                setStaffToDelete(member);
                                                                            }}
                                                                        >
                                                                            <Trash2 className="mr-2 h-4 w-4" />
                                                                            Delete
                                                                        </DropdownMenuItem>
                                                                    </AlertDialogTrigger>
                                                                </AlertDialog>
                                                            </>
                                                        )}
                                                    </DropdownMenuContent>
                                                </DropdownMenu>
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </div>
                    )}
                </CardContent>
            </Card>

            {/* Confirmation Dialog for Delete */}
            <AlertDialog open={!!staffToDelete} onOpenChange={(open) => !open && setStaffToDelete(null)}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                            This will permanently remove {staffToDelete?.name} from the staff list. This action cannot be undone.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDeleteStaff} className="bg-red-600 hover:bg-red-700">
                            Delete
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </div>
    );
};

export default StaffManagementPage;
</file>

<file path="src/components/Admin/Tax/TaxSettingsContent.tsx">
import { useState } from "react";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle,
  CardFooter
} from "@/components/ui/card";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger 
} from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { DollarSign, Percent, Plus } from "lucide-react";

// Define tax rule interface
interface TaxRule {
  id: string;
  serviceType: string;
  subType?: string;
  enabled: boolean;
  taxType: "percentage" | "fixed";
  value: number;
  department?: string;
  isGlobal?: boolean;
}

// Define service type by department
interface DepartmentService {
  department: string;
  services: {
    id: string;
    name: string;
  }[];
}

const TaxSettingsContent = () => {
  const { toast } = useToast();
  const [dialogOpen, setDialogOpen] = useState(false);
  const [newTaxRule, setNewTaxRule] = useState<{
    department: string;
    serviceId: string;
    taxType: "percentage" | "fixed";
    value: number;
  }>({
    department: "",
    serviceId: "",
    taxType: "percentage",
    value: 0
  });
  
  // Department services mapping
  const departmentServices: DepartmentService[] = [
    {
      department: "Rooms",
      services: [
        { id: "standard", name: "Standard Room" },
        { id: "deluxe", name: "Deluxe Room" },
        { id: "suite", name: "Suite" },
        { id: "penthouse", name: "Penthouse" }
      ]
    },
    {
      department: "Spa",
      services: [
        { id: "massage", name: "Massage" },
        { id: "facial", name: "Facial" },
        { id: "sauna", name: "Sauna" },
        { id: "manicure", name: "Manicure & Pedicure" }
      ]
    },
    {
      department: "Events",
      services: [
        { id: "conference", name: "Conference" },
        { id: "wedding", name: "Wedding" },
        { id: "birthday", name: "Birthday" },
        { id: "corporate", name: "Corporate Event" }
      ]
    },
    {
      department: "Restaurant",
      services: [
        { id: "dine-in", name: "Dine-In" },
        { id: "room-service", name: "Room Service" },
        { id: "delivery", name: "Delivery" },
        { id: "buffet", name: "Buffet" }
      ]
    },
  ];
  
  // Initial tax rules for each service type
  const [taxRules, setTaxRules] = useState<TaxRule[]>([
    {
      id: "room-standard",
      serviceType: "room",
      subType: "Standard Room",
      enabled: true,
      taxType: "percentage",
      value: 8,
      department: "Rooms"
    },
    {
      id: "room-deluxe",
      serviceType: "room",
      subType: "Deluxe Room",
      enabled: true,
      taxType: "percentage",
      value: 10,
      department: "Rooms"
    },
    {
      id: "room-suite",
      serviceType: "room",
      subType: "Suite",
      enabled: true,
      taxType: "percentage",
      value: 12,
      department: "Rooms"
    },
    {
      id: "spa-massage",
      serviceType: "spa",
      subType: "Massage",
      enabled: true,
      taxType: "percentage",
      value: 5,
      department: "Spa"
    },
    {
      id: "spa-facial",
      serviceType: "spa",
      subType: "Facial",
      enabled: true,
      taxType: "percentage",
      value: 5,
      department: "Spa"
    },
    {
      id: "event-conference",
      serviceType: "event",
      subType: "Conference",
      enabled: true,
      taxType: "percentage",
      value: 7,
      department: "Events"
    },
    {
      id: "event-wedding",
      serviceType: "event",
      subType: "Wedding",
      enabled: true,
      taxType: "percentage",
      value: 7,
      department: "Events"
    },
    {
      id: "restaurant-dine-in",
      serviceType: "restaurant",
      subType: "Dine-In",
      enabled: true,
      taxType: "percentage",
      value: 6,
      department: "Restaurant"
    },
    {
      id: "restaurant-room-service",
      serviceType: "restaurant",
      subType: "Room Service",
      enabled: true,
      taxType: "percentage",
      value: 8,
      department: "Restaurant"
    },
    {
      id: "restaurant-delivery",
      serviceType: "restaurant",
      subType: "Delivery",
      enabled: true,
      taxType: "percentage",
      value: 6,
      department: "Restaurant"
    }
  ]);

  // Handle tax rule change
  const handleTaxRuleChange = (id: string, field: string, value: any) => {
    setTaxRules(prev => 
      prev.map(rule => 
        rule.id === id ? { ...rule, [field]: value } : rule
      )
    );
  };

  // Handle save changes
  const handleSaveChanges = () => {
    toast({
      title: "Tax settings saved",
      description: "Your tax settings have been updated successfully.",
    });
  };

  // Get rules for a specific service type
  const getRulesByServiceType = (serviceType: string) => {
    return taxRules.filter(rule => rule.serviceType === serviceType);
  };

  // Get available services for selected department
  const getServicesForDepartment = (department: string) => {
    if (department === "All Departments") {
      return [{ id: "all", name: "All Services" }];
    }
    
    const found = departmentServices.find(d => d.department === department);
    return found ? [{ id: "all", name: "All Services" }, ...found.services] : [];
  };

  // Handle form input changes
  const handleFormChange = (field: string, value: any) => {
    if (field === "department" && value !== newTaxRule.department) {
      setNewTaxRule(prev => ({
        ...prev,
        [field]: value,
        serviceId: ""
      }));
    } else {
      setNewTaxRule(prev => ({
        ...prev,
        [field]: value
      }));
    }
  };

  // Create new tax rule
  const handleCreateTaxRule = () => {
    const { department, serviceId, taxType, value } = newTaxRule;
    
    if (!department || !serviceId || value === 0) {
      toast({
        title: "Missing information",
        description: "Please fill in all required fields",
        variant: "destructive"
      });
      return;
    }

    if (department === "All Departments" && serviceId === "all") {
      const id = `global-${taxType}-${Date.now()}`;
      
      const newRule: TaxRule = {
        id,
        serviceType: "global",
        subType: "All Services",
        enabled: true,
        taxType,
        value,
        department: "All Departments",
        isGlobal: true
      };
      
      setTaxRules(prev => [...prev, newRule]);
      
      toast({
        title: "Global tax rule created",
        description: `New tax rule has been created for all departments and services`
      });
    } else if (department === "All Departments") {
      toast({
        title: "Invalid selection",
        description: "When selecting All Departments, you must select All Services",
        variant: "destructive"
      });
      return;
    } else if (serviceId === "all") {
      const id = `${department.toLowerCase()}-all-${Date.now()}`;
      
      const newRule: TaxRule = {
        id,
        serviceType: department.toLowerCase(),
        subType: "All Services",
        enabled: true,
        taxType,
        value,
        department
      };
      
      setTaxRules(prev => [...prev, newRule]);
      
      toast({
        title: "Department tax rule created",
        description: `New tax rule has been created for all ${department} services`
      });
    } else {
      const deptInfo = departmentServices.find(d => d.department === department);
      if (!deptInfo) return;
      
      const serviceInfo = deptInfo.services.find(s => s.id === serviceId);
      if (!serviceInfo) return;
      
      const serviceType = department.toLowerCase();
      const id = `${serviceType}-${serviceId}-${Date.now()}`;
      
      const newRule: TaxRule = {
        id,
        serviceType,
        subType: serviceInfo.name,
        enabled: true,
        taxType,
        value,
        department
      };
      
      setTaxRules(prev => [...prev, newRule]);
      
      toast({
        title: "Tax rule created",
        description: `New tax rule for ${serviceInfo.name} has been created`
      });
    }
    
    setNewTaxRule({
      department: "",
      serviceId: "",
      taxType: "percentage",
      value: 0
    });
    
    setDialogOpen(false);
  };

  // Tax rule table component
  const TaxRuleTable = ({ rules }: { rules: TaxRule[] }) => (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Service</TableHead>
          <TableHead>Tax Type</TableHead>
          <TableHead>Value</TableHead>
          <TableHead>Status</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {rules.map((rule) => (
          <TableRow key={rule.id}>
            <TableCell className="font-medium">{rule.subType}</TableCell>
            <TableCell>
              <Select
                value={rule.taxType}
                onValueChange={(value) => handleTaxRuleChange(rule.id, 'taxType', value)}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="percentage">
                    <span className="flex items-center">
                      <Percent className="mr-2 h-4 w-4" />
                      Percentage
                    </span>
                  </SelectItem>
                  <SelectItem value="fixed">
                    <span className="flex items-center">
                      <DollarSign className="mr-2 h-4 w-4" />
                      Fixed Amount
                    </span>
                  </SelectItem>
                </SelectContent>
              </Select>
            </TableCell>
            <TableCell>
              <div className="flex items-center">
                {rule.taxType === "percentage" ? (
                  <>
                    <Input
                      type="number"
                      min="0"
                      max="100"
                      value={rule.value}
                      onChange={(e) => handleTaxRuleChange(rule.id, 'value', parseFloat(e.target.value) || 0)}
                      className="w-20 mr-2"
                    />
                    <span>%</span>
                  </>
                ) : (
                  <>
                    <span className="mr-2">$</span>
                    <Input
                      type="number"
                      min="0"
                      step="0.01"
                      value={rule.value}
                      onChange={(e) => handleTaxRuleChange(rule.id, 'value', parseFloat(e.target.value) || 0)}
                      className="w-20"
                    />
                  </>
                )}
              </div>
            </TableCell>
            <TableCell>
              <div className="flex items-center">
                <Switch
                  checked={rule.enabled}
                  onCheckedChange={(checked) => handleTaxRuleChange(rule.id, 'enabled', checked)}
                />
                <span className="ml-2">{rule.enabled ? 'Enabled' : 'Disabled'}</span>
              </div>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">Tax Settings</h1>
          <p className="text-gray-500 mt-1">Manage tax rates for all hotel services</p>
        </div>
        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" /> 
              Add New Tax Rule
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create New Tax Rule</DialogTitle>
              <DialogDescription>
                Select the department and service to apply a new tax rule
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="department">Department</Label>
                <Select 
                  onValueChange={(value) => handleFormChange("department", value)}
                  value={newTaxRule.department}
                >
                  <SelectTrigger id="department">
                    <SelectValue placeholder="Select department" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="All Departments">All Departments</SelectItem>
                    {departmentServices.map((dept) => (
                      <SelectItem key={dept.department} value={dept.department}>
                        {dept.department}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="service">Service</Label>
                <Select 
                  onValueChange={(value) => handleFormChange("serviceId", value)}
                  value={newTaxRule.serviceId}
                  disabled={!newTaxRule.department}
                >
                  <SelectTrigger id="service">
                    <SelectValue placeholder="Select service" />
                  </SelectTrigger>
                  <SelectContent>
                    {getServicesForDepartment(newTaxRule.department).map((service) => (
                      <SelectItem key={service.id} value={service.id}>
                        {service.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="taxType">Tax Type</Label>
                <Select 
                  onValueChange={(value: "percentage" | "fixed") => handleFormChange("taxType", value)}
                  value={newTaxRule.taxType}
                >
                  <SelectTrigger id="taxType">
                    <SelectValue placeholder="Select tax type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="percentage">
                      <span className="flex items-center">
                        <Percent className="mr-2 h-4 w-4" />
                        Percentage
                      </span>
                    </SelectItem>
                    <SelectItem value="fixed">
                      <span className="flex items-center">
                        <DollarSign className="mr-2 h-4 w-4" />
                        Fixed Amount
                      </span>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="value">
                  {newTaxRule.taxType === "percentage" ? "Percentage Value" : "Fixed Amount"}
                </Label>
                <div className="flex items-center">
                  {newTaxRule.taxType === "percentage" ? (
                    <>
                      <Input
                        id="value"
                        type="number"
                        min="0"
                        max="100"
                        value={newTaxRule.value}
                        onChange={(e) => handleFormChange("value", parseFloat(e.target.value) || 0)}
                        className="w-20 mr-2"
                      />
                      <span>%</span>
                    </>
                  ) : (
                    <>
                      <span className="mr-2">$</span>
                      <Input
                        id="value"
                        type="number"
                        min="0"
                        step="0.01"
                        value={newTaxRule.value}
                        onChange={(e) => handleFormChange("value", parseFloat(e.target.value) || 0)}
                        className="w-20"
                      />
                    </>
                  )}
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setDialogOpen(false)}>Cancel</Button>
              <Button onClick={handleCreateTaxRule}>Create Tax Rule</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Tax Configuration</CardTitle>
          <CardDescription>
            Set up tax rates for different services. Taxes will be automatically applied during checkout.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="rooms" className="w-full">
            <TabsList className="mb-4">
              <TabsTrigger value="rooms">Rooms</TabsTrigger>
              <TabsTrigger value="spa">Spa</TabsTrigger>
              <TabsTrigger value="events">Events</TabsTrigger>
              <TabsTrigger value="restaurant">Restaurant</TabsTrigger>
              {taxRules.some(rule => rule.isGlobal) && (
                <TabsTrigger value="global">Global Rules</TabsTrigger>
              )}
            </TabsList>

            <TabsContent value="rooms">
              <div className="space-y-4">
                <TaxRuleTable rules={getRulesByServiceType('room')} />
              </div>
            </TabsContent>

            <TabsContent value="spa">
              <div className="space-y-4">
                <TaxRuleTable rules={getRulesByServiceType('spa')} />
              </div>
            </TabsContent>

            <TabsContent value="events">
              <div className="space-y-4">
                <TaxRuleTable rules={getRulesByServiceType('event')} />
              </div>
            </TabsContent>

            <TabsContent value="restaurant">
              <div className="space-y-4">
                <TaxRuleTable rules={getRulesByServiceType('restaurant')} />
              </div>
            </TabsContent>

            {taxRules.some(rule => rule.isGlobal) && (
              <TabsContent value="global">
                <div className="space-y-4">
                  <TaxRuleTable rules={taxRules.filter(rule => rule.isGlobal)} />
                </div>
              </TabsContent>
            )}
          </Tabs>

          <div className="flex justify-end mt-6">
            <Button onClick={handleSaveChanges}>
              Save Changes
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TaxSettingsContent;
</file>

<file path="src/components/Admin/Users/UserBookings.tsx">
import { useState, useEffect } from "react";
import axios from "axios";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle
} from "@/components/ui/card";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/components/ui/use-toast";
import { format } from "date-fns";
import { ArrowLeft, Calendar, Clock, Users, Bed } from "lucide-react";
import { User } from "@/types/user";

// API configuration
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const USERS_ENDPOINT = `${API_URL}/api/users`;

// Booking type (you may need to adjust this based on your actual data structure)
interface Booking {
    _id: string;
    roomNumber?: string;
    roomType?: string;
    checkInDate: string | Date;
    checkOutDate: string | Date;
    totalAmount: number;
    status: "Confirmed" | "Cancelled" | "Completed" | "Pending";
    guestCount: number;
    createdAt: string | Date;
}

interface UserBookingsProps {
    userId: string;
    onBack: () => void;
}

const UserBookings = ({ userId, onBack }: UserBookingsProps) => {
    const [user, setUser] = useState<User | null>(null);
    const [bookings, setBookings] = useState<Booking[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchUserAndBookings = async () => {
            setLoading(true);
            setError(null);

            try {
                // Fetch user data
                const userResponse = await axios.get(`${USERS_ENDPOINT}/${userId}`);
                setUser(userResponse.data.data);

                // For demonstration purposes, let's create mock bookings
                // In a real application, you would fetch actual bookings from your API
                const mockBookings: Booking[] = [
                    {
                        _id: "1",
                        roomNumber: "101",
                        roomType: "Deluxe Suite",
                        checkInDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
                        checkOutDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 days from now
                        totalAmount: 650,
                        status: "Confirmed",
                        guestCount: 2,
                        createdAt: new Date()
                    },
                    {
                        _id: "2",
                        roomNumber: "205",
                        roomType: "Executive Room",
                        checkInDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago
                        checkOutDate: new Date(Date.now() - 28 * 24 * 60 * 60 * 1000), // 28 days ago
                        totalAmount: 350,
                        status: "Completed",
                        guestCount: 1,
                        createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)
                    },
                    {
                        _id: "3",
                        roomNumber: "312",
                        roomType: "Luxury Suite",
                        checkInDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 90 days ago
                        checkOutDate: new Date(Date.now() - 85 * 24 * 60 * 60 * 1000), // 85 days ago
                        totalAmount: 970,
                        status: "Cancelled",
                        guestCount: 3,
                        createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000)
                    }
                ];

                setBookings(mockBookings);
            } catch (err: any) {
                console.error("Error fetching data:", err);
                setError(err.response?.data?.error || err.message || "Failed to load data");
                toast({
                    title: "Error",
                    description: "Failed to load bookings. Please try again.",
                    variant: "destructive",
                });
            } finally {
                setLoading(false);
            }
        };

        fetchUserAndBookings();
    }, [userId]);

    const formatDate = (dateString: string | Date) => {
        return format(new Date(dateString), "PPP"); // Format: Jan 1, 2021
    };

    const getStatusBadge = (status: string) => {
        switch (status) {
            case "Confirmed":
                return <Badge className="bg-green-100 text-green-800 hover:bg-green-200">{status}</Badge>;
            case "Cancelled":
                return <Badge className="bg-red-100 text-red-800 hover:bg-red-200">{status}</Badge>;
            case "Completed":
                return <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">{status}</Badge>;
            case "Pending":
                return <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-200">{status}</Badge>;
            default:
                return <Badge variant="outline">{status}</Badge>;
        }
    };

    if (loading) {
        return (
            <div className="space-y-4">
                <div className="flex items-center">
                    <Button variant="ghost" onClick={onBack} className="mr-2">
                        <ArrowLeft size={16} />
                    </Button>
                    <Skeleton className="h-8 w-40" />
                </div>
                <Card>
                    <CardHeader>
                        <Skeleton className="h-7 w-40 mb-2" />
                        <Skeleton className="h-5 w-60" />
                    </CardHeader>
                    <CardContent>
                        <Skeleton className="h-64 w-full" />
                    </CardContent>
                </Card>
            </div>
        );
    }

    if (error || !user) {
        return (
            <div className="space-y-4">
                <div className="flex items-center">
                    <Button variant="ghost" onClick={onBack} className="mr-2">
                        <ArrowLeft size={16} />
                    </Button>
                    <h2 className="text-xl font-semibold">User Bookings</h2>
                </div>
                <Card>
                    <CardContent className="py-10">
                        <div className="text-center text-red-500">
                            <p>{error || "Failed to load user data"}</p>
                            <Button variant="outline" className="mt-4" onClick={onBack}>
                                Go Back
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            <div className="flex items-center">
                <Button variant="ghost" onClick={onBack} className="mr-2">
                    <ArrowLeft size={16} />
                </Button>
                <h2 className="text-xl font-semibold">Bookings for {user.fullName}</h2>
            </div>

            <Card>
                <CardHeader>
                    <CardTitle>Reservation History</CardTitle>
                    <CardDescription>
                        View all bookings and reservations made by this user
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    {bookings.length > 0 ? (
                        <div className="rounded-md border">
                            <Table>
                                <TableHeader>
                                    <TableRow>
                                        <TableHead>Room</TableHead>
                                        <TableHead>Check-in</TableHead>
                                        <TableHead>Check-out</TableHead>
                                        <TableHead>Guests</TableHead>
                                        <TableHead>Amount</TableHead>
                                        <TableHead>Status</TableHead>
                                        <TableHead>Booked On</TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {bookings.map((booking) => (
                                        <TableRow key={booking._id}>
                                            <TableCell>
                                                <div className="flex flex-col">
                                                    <span className="font-medium">{booking.roomType}</span>
                                                    <span className="text-xs text-gray-500">Room {booking.roomNumber}</span>
                                                </div>
                                            </TableCell>
                                            <TableCell>
                                                <div className="flex items-center">
                                                    <Calendar size={14} className="mr-1 text-gray-500" />
                                                    <span>{formatDate(booking.checkInDate)}</span>
                                                </div>
                                            </TableCell>
                                            <TableCell>
                                                <div className="flex items-center">
                                                    <Calendar size={14} className="mr-1 text-gray-500" />
                                                    <span>{formatDate(booking.checkOutDate)}</span>
                                                </div>
                                            </TableCell>
                                            <TableCell>
                                                <div className="flex items-center">
                                                    <Users size={14} className="mr-1 text-gray-500" />
                                                    <span>{booking.guestCount}</span>
                                                </div>
                                            </TableCell>
                                            <TableCell>
                                                ${booking.totalAmount.toFixed(2)}
                                            </TableCell>
                                            <TableCell>
                                                {getStatusBadge(booking.status)}
                                            </TableCell>
                                            <TableCell>
                                                <div className="flex items-center">
                                                    <Clock size={14} className="mr-1 text-gray-500" />
                                                    <span>{formatDate(booking.createdAt)}</span>
                                                </div>
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </div>
                    ) : (
                        <div className="py-20 text-center">
                            <Bed className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                            <h3 className="text-xl font-medium text-gray-900 mb-1">No Bookings Found</h3>
                            <p className="text-gray-500">This user hasn't made any reservations yet.</p>
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
};

export default UserBookings;
</file>

<file path="src/components/Admin/Users/UserEditForm.tsx">
import { useState, useEffect } from "react";
import axios from "axios";
import {
    Card,
    CardContent,
    CardFooter,
    CardHeader,
    CardTitle
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { Label } from "@/components/ui/label";
import { toast } from "@/components/ui/use-toast";
import { ArrowLeft } from "lucide-react";
import { User } from "@/types/user";

// API configuration
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const USERS_ENDPOINT = `${API_URL}/api/users`;

interface UserEditFormProps {
    userId: string;
    onBack: () => void;
    onUserUpdated: (user: User) => void;
}

const UserEditForm = ({ userId, onBack, onUserUpdated }: UserEditFormProps) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [saving, setSaving] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    // Form state
    const [formData, setFormData] = useState({
        fullName: "",
        userName: "",
        email: "",
        phone: "",
        password: "",
        role: "",
        department: "",
        loyaltyPoints: 0
    });

    useEffect(() => {
        const fetchUserData = async () => {
            setLoading(true);
            setError(null);

            try {
                const response = await axios.get(`${USERS_ENDPOINT}/${userId}`);
                const userData = response.data.data;
                setUser(userData);

                // Initialize form with user data
                setFormData({
                    fullName: userData.fullName || "",
                    userName: userData.userName || "",
                    email: userData.email || "",
                    phone: userData.phone || "",
                    password: "", // Don't set existing password
                    role: userData.role || "",
                    department: userData.department || "",
                    loyaltyPoints: userData.loyaltyPoints || 0
                });
            } catch (err: any) {
                console.error("Error fetching user:", err);
                setError(err.response?.data?.error || err.message || "Failed to load user data");
                toast({
                    title: "Error",
                    description: "Failed to load user data. Please try again.",
                    variant: "destructive",
                });
            } finally {
                setLoading(false);
            }
        };

        fetchUserData();
    }, [userId]);

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;

        setFormData(prev => ({
            ...prev,
            [name]: name === "loyaltyPoints" ? parseInt(value) || 0 : value
        }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setSaving(true);

        try {
            // Create an object with only the fields that have changed
            const updateData: Partial<User> = {};

            if (formData.fullName !== user?.fullName) updateData.fullName = formData.fullName;
            if (formData.userName !== user?.userName) updateData.userName = formData.userName;
            if (formData.email !== user?.email) updateData.email = formData.email;
            if (formData.phone !== user?.phone) updateData.phone = formData.phone;
            if (formData.role !== user?.role) updateData.role = formData.role;
            if (formData.department !== user?.department) updateData.department = formData.department;
            if (formData.loyaltyPoints !== user?.loyaltyPoints) updateData.loyaltyPoints = formData.loyaltyPoints;
            if (formData.password) updateData.password = formData.password;

            const response = await axios.patch(`${USERS_ENDPOINT}/${userId}`, updateData);
            const updatedUser = response.data.data;

            setUser(updatedUser);
            onUserUpdated(updatedUser);

            toast({
                title: "Success",
                description: "User information updated successfully!",
            });
        } catch (err: any) {
            console.error("Error updating user:", err);
            toast({
                title: "Error",
                description: err.response?.data?.error || err.message || "Failed to update user. Please try again.",
                variant: "destructive",
            });
        } finally {
            setSaving(false);
        }
    };

    if (loading) {
        return (
            <div className="space-y-4">
                <div className="flex items-center">
                    <Button variant="ghost" onClick={onBack} className="mr-2">
                        <ArrowLeft size={16} />
                    </Button>
                    <Skeleton className="h-8 w-32" />
                </div>
                <Card>
                    <CardHeader>
                        <Skeleton className="h-7 w-40" />
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <Skeleton className="h-5 w-full" />
                        <Skeleton className="h-5 w-full" />
                        <Skeleton className="h-5 w-3/4" />
                    </CardContent>
                </Card>
            </div>
        );
    }

    if (error || !user) {
        return (
            <div className="space-y-4">
                <div className="flex items-center">
                    <Button variant="ghost" onClick={onBack} className="mr-2">
                        <ArrowLeft size={16} />
                    </Button>
                    <h2 className="text-xl font-semibold">Edit User</h2>
                </div>
                <Card>
                    <CardContent className="py-10">
                        <div className="text-center text-red-500">
                            <p>{error || "Failed to load user data"}</p>
                            <Button variant="outline" className="mt-4" onClick={onBack}>
                                Go Back
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            <div className="flex items-center">
                <Button variant="ghost" onClick={onBack} className="mr-2">
                    <ArrowLeft size={16} />
                </Button>
                <h2 className="text-xl font-semibold">Edit User: {user.fullName}</h2>
            </div>

            <Card>
                <form onSubmit={handleSubmit}>
                    <CardHeader>
                        <CardTitle>Edit User Information</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <Label htmlFor="fullName">Full Name</Label>
                                <Input
                                    id="fullName"
                                    name="fullName"
                                    value={formData.fullName}
                                    onChange={handleInputChange}
                                    required
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="userName">Username</Label>
                                <Input
                                    id="userName"
                                    name="userName"
                                    value={formData.userName}
                                    onChange={handleInputChange}
                                    required
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="email">Email</Label>
                                <Input
                                    id="email"
                                    name="email"
                                    type="email"
                                    value={formData.email}
                                    onChange={handleInputChange}
                                    required
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="phone">Phone</Label>
                                <Input
                                    id="phone"
                                    name="phone"
                                    value={formData.phone}
                                    onChange={handleInputChange}
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="password">Password (leave empty to keep current)</Label>
                                <Input
                                    id="password"
                                    name="password"
                                    type="password"
                                    value={formData.password}
                                    onChange={handleInputChange}
                                    placeholder="••••••••"
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="role">Role</Label>
                                <select
                                    id="role"
                                    name="role"
                                    value={formData.role}
                                    onChange={handleInputChange}
                                    className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                    required
                                >
                                    {user.isStaff ? (
                                        <>
                                            <option value="Administrator">Administrator</option>
                                            <option value="Manager">Manager</option>
                                            <option value="Front Desk">Front Desk</option>
                                        </>
                                    ) : (
                                        <>
                                            <option value="Guest">Guest</option>
                                            <option value="VIP Guest">VIP Guest</option>
                                        </>
                                    )}
                                </select>
                            </div>

                            {user.isStaff && (
                                <div className="space-y-2">
                                    <Label htmlFor="department">Department</Label>
                                    <Input
                                        id="department"
                                        name="department"
                                        value={formData.department}
                                        onChange={handleInputChange}
                                    />
                                </div>
                            )}

                            {!user.isStaff && (
                                <div className="space-y-2">
                                    <Label htmlFor="loyaltyPoints">Loyalty Points</Label>
                                    <Input
                                        id="loyaltyPoints"
                                        name="loyaltyPoints"
                                        type="number"
                                        value={formData.loyaltyPoints}
                                        onChange={handleInputChange}
                                    />
                                </div>
                            )}
                        </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                        <Button type="button" variant="outline" onClick={onBack}>
                            Cancel
                        </Button>
                        <Button type="submit" disabled={saving}>
                            {saving ? "Saving..." : "Save Changes"}
                        </Button>
                    </CardFooter>
                </form>
            </Card>
        </div>
    );
};

export default UserEditForm;
</file>

<file path="src/components/Admin/Users/UserProfile.tsx">
import { useState, useEffect } from "react";
import axios from "axios";
import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { toast } from "@/components/ui/use-toast";
import { format } from "date-fns";
import { ArrowLeft, Mail, Phone, Calendar, Award, Clock } from "lucide-react";
import { User } from "@/types/user";

// API configuration
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const USERS_ENDPOINT = `${API_URL}/api/users`;

interface UserProfileProps {
    userId: string;
    onBack: () => void;
}

const UserProfile = ({ userId, onBack }: UserProfileProps) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchUserData = async () => {
            setLoading(true);
            setError(null);

            try {
                const response = await axios.get(`${USERS_ENDPOINT}/${userId}`);
                setUser(response.data.data);
            } catch (err: any) {
                console.error("Error fetching user:", err);
                setError(err.response?.data?.error || err.message || "Failed to load user data");
                toast({
                    title: "Error",
                    description: "Failed to load user profile. Please try again.",
                    variant: "destructive",
                });
            } finally {
                setLoading(false);
            }
        };

        fetchUserData();
    }, [userId]);

    const getStatusColor = (status: string) => {
        switch (status) {
            case "Active":
                return "bg-green-100 text-green-800 hover:bg-green-200";
            case "Inactive":
                return "bg-gray-100 text-gray-800 hover:bg-gray-200";
            default:
                return "bg-gray-100 text-gray-800";
        }
    };

    const getRoleBadge = (role: string) => {
        switch (role) {
            case "VIP Guest":
                return <Badge className="bg-purple-100 text-purple-800 hover:bg-purple-200">{role}</Badge>;
            case "Administrator":
                return <Badge className="bg-red-100 text-red-800 hover:bg-red-200">{role}</Badge>;
            case "Manager":
                return <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">{role}</Badge>;
            case "Front Desk":
                return <Badge className="bg-teal-100 text-teal-800 hover:bg-teal-200">{role}</Badge>;
            default:
                return <Badge variant="outline">{role}</Badge>;
        }
    };

    const formatDate = (dateString: string | Date | null | undefined) => {
        if (!dateString) return "N/A";
        try {
            return format(new Date(dateString), "yyyy-MM-dd");
        } catch (error) {
            return "Invalid date";
        }
    };

    const formatDateTime = (dateString: string | Date | null | undefined) => {
        if (!dateString) return "N/A";
        try {
            return format(new Date(dateString), "yyyy-MM-dd HH:mm");
        } catch (error) {
            return "Invalid date";
        }
    };

    if (loading) {
        return (
            <div className="space-y-4">
                <div className="flex items-center">
                    <Button variant="ghost" onClick={onBack} className="mr-2">
                        <ArrowLeft size={16} />
                    </Button>
                    <Skeleton className="h-8 w-32" />
                </div>
                <Card>
                    <CardHeader>
                        <Skeleton className="h-7 w-40 mb-2" />
                        <Skeleton className="h-5 w-60" />
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <Skeleton className="h-5 w-full" />
                        <Skeleton className="h-5 w-full" />
                        <Skeleton className="h-5 w-3/4" />
                        <Skeleton className="h-5 w-1/2" />
                    </CardContent>
                </Card>
            </div>
        );
    }

    if (error || !user) {
        return (
            <div className="space-y-4">
                <div className="flex items-center">
                    <Button variant="ghost" onClick={onBack} className="mr-2">
                        <ArrowLeft size={16} />
                    </Button>
                    <h2 className="text-xl font-semibold">User Profile</h2>
                </div>
                <Card>
                    <CardContent className="py-10">
                        <div className="text-center text-red-500">
                            <p>{error || "Failed to load user data"}</p>
                            <Button variant="outline" className="mt-4" onClick={onBack}>
                                Go Back
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            <div className="flex items-center">
                <Button variant="ghost" onClick={onBack} className="mr-2">
                    <ArrowLeft size={16} />
                </Button>
                <h2 className="text-xl font-semibold">User Profile</h2>
            </div>

            <Card>
                <CardHeader>
                    <div className="flex justify-between items-start">
                        <div>
                            <CardTitle className="text-2xl">{user.fullName}</CardTitle>
                            <CardDescription className="flex items-center mt-1">
                                <Mail className="mr-1" size={14} />
                                {user.email}
                            </CardDescription>
                        </div>
                        <div className="flex space-x-2">
                            <Badge className={getStatusColor(user.status)}>
                                {user.status}
                            </Badge>
                            {getRoleBadge(user.role)}
                        </div>
                    </div>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-3">
                            <h3 className="font-medium text-gray-500">Basic Information</h3>

                            <div className="space-y-2">
                                <div className="flex items-center text-sm">
                                    <span className="font-medium w-32">Full Name:</span>
                                    <span>{user.fullName}</span>
                                </div>
                                <div className="flex items-center text-sm">
                                    <span className="font-medium w-32">Username:</span>
                                    <span>{user.userName}</span>
                                </div>
                                <div className="flex items-center text-sm">
                                    <span className="font-medium w-32">Email:</span>
                                    <span>{user.email}</span>
                                </div>
                                <div className="flex items-center text-sm">
                                    <Phone size={14} className="mr-1 text-gray-500" />
                                    <span className="font-medium w-28">Phone:</span>
                                    <span>{user.phone || "Not provided"}</span>
                                </div>
                                <div className="flex items-center text-sm">
                                    <span className="font-medium w-32">Status:</span>
                                    <Badge className={getStatusColor(user.status)}>
                                        {user.status}
                                    </Badge>
                                </div>
                                <div className="flex items-center text-sm">
                                    <span className="font-medium w-32">Role:</span>
                                    {getRoleBadge(user.role)}
                                </div>
                                {user.isStaff && user.department && (
                                    <div className="flex items-center text-sm">
                                        <span className="font-medium w-32">Department:</span>
                                        <span>{user.department}</span>
                                    </div>
                                )}
                            </div>
                        </div>

                        <div className="space-y-3">
                            <h3 className="font-medium text-gray-500">Additional Information</h3>

                            <div className="space-y-2">
                                <div className="flex items-center text-sm">
                                    <Calendar size={14} className="mr-1 text-gray-500" />
                                    <span className="font-medium w-32">Registered:</span>
                                    <span>{formatDate(user.registeredDate)}</span>
                                </div>
                                <div className="flex items-center text-sm">
                                    <Clock size={14} className="mr-1 text-gray-500" />
                                    <span className="font-medium w-32">Last Visit:</span>
                                    <span>{formatDate(user.lastVisit)}</span>
                                </div>
                                <div className="flex items-center text-sm">
                                    <Clock size={14} className="mr-1 text-gray-500" />
                                    <span className="font-medium w-32">Last Login:</span>
                                    <span>{formatDateTime(user.lastLogin)}</span>
                                </div>
                                {!user.isStaff && (
                                    <div className="flex items-center text-sm">
                                        <Award size={14} className="mr-1 text-gray-500" />
                                        <span className="font-medium w-32">Loyalty Points:</span>
                                        <span>{user.loyaltyPoints.toLocaleString()}</span>
                                    </div>
                                )}
                                <div className="flex items-center text-sm">
                                    <span className="font-medium w-32">Created At:</span>
                                    <span>{formatDateTime(user.createdAt)}</span>
                                </div>
                                <div className="flex items-center text-sm">
                                    <span className="font-medium w-32">Updated At:</span>
                                    <span>{formatDateTime(user.updatedAt)}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </CardContent>
                <CardFooter className="flex justify-between">
                    <Button variant="outline" onClick={onBack}>
                        Go Back
                    </Button>
                    <div className="space-x-2">
                        <Button
                            variant="outline"
                            onClick={() => window.history.pushState({}, '', `/admin/bookings/${userId}`)}
                        >
                            View Bookings
                        </Button>
                        <Button
                            onClick={() => window.history.pushState({}, '', `/admin/users/edit/${userId}`)}
                        >
                            Edit User
                        </Button>
                    </div>
                </CardFooter>
            </Card>
        </div>
    );
};

export default UserProfile;
</file>

<file path="src/components/Admin/Users/UsersManagementContent.tsx">
import { useState, useEffect } from "react";
import axios from "axios";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search, Edit, Trash2, UserPlus, Mail, Phone, Shield, MoreHorizontal } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { toast } from "@/components/ui/use-toast";
import { format } from "date-fns";
import { User } from "@/types/user";
import UserProfile from "./UserProfile";
import UserEditForm from "./UserEditForm";
import UserBookings from "./UserBookings";

// API configuration
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const USERS_ENDPOINT = `${API_URL}/api/users`;

// View modes for the user management content
type ViewMode = "list" | "profile" | "edit" | "bookings";

const UsersManagementContent = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [guests, setGuests] = useState<User[]>([]);
  const [staffUsers, setStaffUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isAddUserDialogOpen, setIsAddUserDialogOpen] = useState(false);
  const [isAddStaffDialogOpen, setIsAddStaffDialogOpen] = useState(false);
  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false);
  const [userToDelete, setUserToDelete] = useState<User | null>(null);

  // State for view mode and selected user
  const [viewMode, setViewMode] = useState<ViewMode>("list");
  const [selectedUserId, setSelectedUserId] = useState<string>("");

  // Form state for adding new user
  const [newUserForm, setNewUserForm] = useState({
    fullName: "",
    userName: "",
    email: "",
    phone: "",
    password: "",
    role: "Guest",
    isStaff: false,
    department: "",
  });

  // Fetch users data
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);

      try {
        // Fetch guest users
        const guestResponse = await axios.get(`${USERS_ENDPOINT}/guests`);
        setGuests(guestResponse.data.data || []);

        // Fetch staff users
        const staffResponse = await axios.get(`${USERS_ENDPOINT}/staff`);
        setStaffUsers(staffResponse.data.data || []);
      } catch (err: any) {
        console.error("Error fetching users:", err);
        setError("Failed to load users. Please try again later.");
        toast({
          title: "Error",
          description: err.message || "Failed to load users. Please try again later.",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Filter users based on search query
  const filteredGuests = guests.filter(
    (user) =>
      user.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.phone.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.role.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredStaffUsers = staffUsers.filter(
    (user) =>
      user.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.phone.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.role.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (user.department && user.department.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;

    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setNewUserForm(prev => ({
        ...prev,
        [name]: checked
      }));
    } else {
      setNewUserForm(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  // Handle add new user
  const handleAddUser = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const userData = {
        ...newUserForm,
        isStaff: newUserForm.isStaff || newUserForm.role === "Administrator" ||
          newUserForm.role === "Manager" || newUserForm.role === "Front Desk"
      };

      const response = await axios.post(`${USERS_ENDPOINT}/signup`, userData);

      // Get user from response
      const user = response.data.user;

      // Update state based on user type
      if (user.isStaff) {
        setStaffUsers(prev => [user, ...prev]);
        setIsAddStaffDialogOpen(false);
      } else {
        setGuests(prev => [user, ...prev]);
        setIsAddUserDialogOpen(false);
      }

      // Reset form
      setNewUserForm({
        fullName: "",
        userName: "",
        email: "",
        phone: "",
        password: "",
        role: "Guest",
        isStaff: false,
        department: "",
      });

      toast({
        title: "Success",
        description: "User created successfully!",
      });
    } catch (err: any) {
      console.error("Error creating user:", err);
      toast({
        title: "Error",
        description: err.response?.data?.error || err.message || "Failed to create user. Please try again.",
        variant: "destructive",
      });
    }
  };

  // Handle delete user
  const handleDeleteUser = async () => {
    if (!userToDelete) return;

    try {
      await axios.delete(`${USERS_ENDPOINT}/${userToDelete._id}`);

      // Update state based on user type
      if (userToDelete.isStaff) {
        setStaffUsers(prev => prev.filter(user => user._id !== userToDelete._id));
      } else {
        setGuests(prev => prev.filter(user => user._id !== userToDelete._id));
      }

      setIsConfirmDeleteOpen(false);
      setUserToDelete(null);

      toast({
        title: "Success",
        description: "User deleted successfully!",
      });
    } catch (err: any) {
      console.error("Error deleting user:", err);
      toast({
        title: "Error",
        description: err.response?.data?.error || err.message || "Failed to delete user. Please try again.",
        variant: "destructive",
      });
    }
  };

  // Handle user status update
  const handleStatusChange = async (user: User, newStatus: "Active" | "Inactive") => {
    try {
      const response = await axios.patch(`${USERS_ENDPOINT}/${user._id}/status`, { status: newStatus });
      const updatedUser = response.data.data;

      // Update state based on user type
      if (user.isStaff) {
        setStaffUsers(prev =>
          prev.map(u => u._id === user._id ? updatedUser : u)
        );
      } else {
        setGuests(prev =>
          prev.map(u => u._id === user._id ? updatedUser : u)
        );
      }

      toast({
        title: "Success",
        description: `User status updated to ${newStatus}!`,
      });
    } catch (err: any) {
      console.error("Error updating user status:", err);
      toast({
        title: "Error",
        description: err.response?.data?.error || err.message || "Failed to update user status. Please try again.",
        variant: "destructive",
      });
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Active":
        return "bg-green-100 text-green-800 hover:bg-green-200";
      case "Inactive":
        return "bg-gray-100 text-gray-800 hover:bg-gray-200";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getRoleBadge = (role: string) => {
    switch (role) {
      case "VIP Guest":
        return <Badge className="bg-purple-100 text-purple-800 hover:bg-purple-200">{role}</Badge>;
      case "Administrator":
        return <Badge className="bg-red-100 text-red-800 hover:bg-red-200">{role}</Badge>;
      case "Manager":
        return <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">{role}</Badge>;
      case "Front Desk":
        return <Badge className="bg-teal-100 text-teal-800 hover:bg-teal-200">{role}</Badge>;
      default:
        return <Badge variant="outline">{role}</Badge>;
    }
  };

  // Format date for display
  const formatDate = (dateString: string | Date | null | undefined) => {
    if (!dateString) return "N/A";
    try {
      return format(new Date(dateString), "yyyy-MM-dd");
    } catch (error) {
      return "Invalid date";
    }
  };

  // Format datetime for display
  const formatDateTime = (dateString: string | Date | null | undefined) => {
    if (!dateString) return "N/A";
    try {
      return format(new Date(dateString), "yyyy-MM-dd HH:mm");
    } catch (error) {
      return "Invalid date";
    }
  };

  // Handler for viewing user profile
  const handleViewProfile = (userId: string) => {
    setSelectedUserId(userId);
    setViewMode("profile");
  };

  // Handler for editing user
  const handleEditUser = (userId: string) => {
    setSelectedUserId(userId);
    setViewMode("edit");
  };

  // Handler for viewing user bookings
  const handleViewBookings = (userId: string) => {
    setSelectedUserId(userId);
    setViewMode("bookings");
  };

  // Handler for going back to the user list
  const handleBackToList = () => {
    setViewMode("list");
    setSelectedUserId("");
  };

  // Handler for user update
  const handleUserUpdated = (updatedUser: User) => {
    // Update the user in the appropriate list
    if (updatedUser.isStaff) {
      setStaffUsers(prev =>
        prev.map(user => user._id === updatedUser._id ? updatedUser : user)
      );
    } else {
      setGuests(prev =>
        prev.map(user => user._id === updatedUser._id ? updatedUser : user)
      );
    }
  };

  // Render the appropriate view based on viewMode
  if (viewMode === "profile") {
    return <UserProfile userId={selectedUserId} onBack={handleBackToList} />;
  }

  if (viewMode === "edit") {
    return <UserEditForm
      userId={selectedUserId}
      onBack={handleBackToList}
      onUserUpdated={handleUserUpdated}
    />;
  }

  if (viewMode === "bookings") {
    return <UserBookings userId={selectedUserId} onBack={handleBackToList} />;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">User Management</h1>
      </div>

      <Tabs defaultValue="guests" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="guests">Guest Users</TabsTrigger>
          <TabsTrigger value="staff">Staff Users</TabsTrigger>
        </TabsList>

        <TabsContent value="guests" className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-6">
            <div className="relative w-80">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <Input
                type="text"
                placeholder="Search users..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <div className="flex gap-2">
              <Button className="flex items-center gap-2" onClick={() => setIsAddUserDialogOpen(true)}>
                <UserPlus size={16} />
                <span>Add New User</span>
              </Button>
              <Button variant="outline">Export</Button>
              <Button variant="outline">Filter</Button>
            </div>
          </div>

          {loading ? (
            <div className="text-center py-10">
              <p>Loading users...</p>
            </div>
          ) : error ? (
            <div className="text-center py-10 text-red-500">
              <p>{error}</p>
            </div>
          ) : (
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>User</TableHead>
                    <TableHead>Contact</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Registered</TableHead>
                    <TableHead>Last Visit</TableHead>
                    <TableHead>Loyalty Points</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredGuests.length > 0 ? (
                    filteredGuests.map((user) => (
                      <TableRow key={user._id}>
                        <TableCell className="font-medium">{user.fullName}</TableCell>
                        <TableCell>
                          <div className="flex flex-col">
                            <div className="flex items-center gap-1">
                              <Mail size={14} className="text-gray-500" />
                              <span className="text-sm">{user.email}</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <Phone size={14} className="text-gray-500" />
                              <span className="text-sm">{user.phone || "N/A"}</span>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(user.status)}>
                            {user.status}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          {getRoleBadge(user.role)}
                        </TableCell>
                        <TableCell>{formatDate(user.registeredDate)}</TableCell>
                        <TableCell>{formatDate(user.lastVisit)}</TableCell>
                        <TableCell>{user.loyaltyPoints.toLocaleString()}</TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon">
                                <MoreHorizontal size={16} />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem onClick={() => handleViewProfile(user._id)}>
                                View Profile
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleEditUser(user._id)}>
                                Edit Details
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleViewBookings(user._id)}>
                                View Bookings
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              {user.status === "Active" ? (
                                <DropdownMenuItem
                                  className="text-amber-500"
                                  onClick={() => handleStatusChange(user, "Inactive")}
                                >
                                  Deactivate Account
                                </DropdownMenuItem>
                              ) : (
                                <DropdownMenuItem
                                  className="text-green-500"
                                  onClick={() => handleStatusChange(user, "Active")}
                                >
                                  Activate Account
                                </DropdownMenuItem>
                              )}
                              <DropdownMenuItem
                                className="text-red-500"
                                onClick={() => {
                                  setUserToDelete(user);
                                  setIsConfirmDeleteOpen(true);
                                }}
                              >
                                Delete Account
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={8} className="text-center py-10 text-gray-500">
                        {searchQuery ? "No users found matching your search" : "No guest users found"}
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          )}
        </TabsContent>

        <TabsContent value="staff" className="bg-white p-6 rounded-lg shadow">
          <div className="flex items-center justify-between mb-6">
            <div className="relative w-80">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <Input
                type="text"
                placeholder="Search staff users..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <Button
              className="flex items-center gap-2"
              onClick={() => {
                setNewUserForm(prev => ({ ...prev, isStaff: true, role: "Front Desk" }));
                setIsAddStaffDialogOpen(true);
              }}
            >
              <UserPlus size={16} />
              <span>Add Staff User</span>
            </Button>
          </div>

          {loading ? (
            <div className="text-center py-10">
              <p>Loading staff users...</p>
            </div>
          ) : error ? (
            <div className="text-center py-10 text-red-500">
              <p>{error}</p>
            </div>
          ) : (
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>User</TableHead>
                    <TableHead>Contact</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Department</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Last Login</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredStaffUsers.length > 0 ? (
                    filteredStaffUsers.map((user) => (
                      <TableRow key={user._id}>
                        <TableCell className="font-medium">{user.fullName}</TableCell>
                        <TableCell>
                          <div className="flex flex-col">
                            <div className="flex items-center gap-1">
                              <Mail size={14} className="text-gray-500" />
                              <span className="text-sm">{user.email}</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <Phone size={14} className="text-gray-500" />
                              <span className="text-sm">{user.phone || "N/A"}</span>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-1">
                            <Shield size={14} className="text-gray-500" />
                            {getRoleBadge(user.role)}
                          </div>
                        </TableCell>
                        <TableCell>{user.department || "N/A"}</TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(user.status)}>
                            {user.status}
                          </Badge>
                        </TableCell>
                        <TableCell>{formatDateTime(user.lastLogin)}</TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon">
                                <MoreHorizontal size={16} />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem onClick={() => handleViewProfile(user._id)}>
                                View Profile
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleEditUser(user._id)}>
                                Edit Details
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleViewBookings(user._id)}>
                                View Bookings
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              {user.status === "Active" ? (
                                <DropdownMenuItem
                                  className="text-amber-500"
                                  onClick={() => handleStatusChange(user, "Inactive")}
                                >
                                  Deactivate Account
                                </DropdownMenuItem>
                              ) : (
                                <DropdownMenuItem
                                  className="text-green-500"
                                  onClick={() => handleStatusChange(user, "Active")}
                                >
                                  Activate Account
                                </DropdownMenuItem>
                              )}
                              <DropdownMenuItem
                                className="text-red-500"
                                onClick={() => {
                                  setUserToDelete(user);
                                  setIsConfirmDeleteOpen(true);
                                }}
                              >
                                Delete Account
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center py-10 text-gray-500">
                        {searchQuery ? "No staff users found matching your search" : "No staff users found"}
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          )}
        </TabsContent>
      </Tabs>

      {/* Add Guest User Dialog */}
      <Dialog open={isAddUserDialogOpen} onOpenChange={setIsAddUserDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Add New Guest</DialogTitle>
            <DialogDescription>
              Create a new guest user account. Fill in all required fields.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleAddUser}>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="fullName">Full Name*</Label>
                <Input
                  id="fullName"
                  name="fullName"
                  value={newUserForm.fullName}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="userName">Username*</Label>
                <Input
                  id="userName"
                  name="userName"
                  value={newUserForm.userName}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="email">Email*</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={newUserForm.email}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="phone">Phone</Label>
                <Input
                  id="phone"
                  name="phone"
                  value={newUserForm.phone}
                  onChange={handleInputChange}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="password">Password*</Label>
                <Input
                  id="password"
                  name="password"
                  type="password"
                  value={newUserForm.password}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="role">Role</Label>
                <select
                  id="role"
                  name="role"
                  value={newUserForm.role}
                  onChange={handleInputChange}
                  className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                >
                  <option value="Guest">Guest</option>
                  <option value="VIP Guest">VIP Guest</option>
                </select>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsAddUserDialogOpen(false)}>
                Cancel
              </Button>
              <Button type="submit">Create User</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Add Staff User Dialog */}
      <Dialog open={isAddStaffDialogOpen} onOpenChange={setIsAddStaffDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Add New Staff User</DialogTitle>
            <DialogDescription>
              Create a new staff user account. Fill in all required fields.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleAddUser}>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="fullName">Full Name*</Label>
                <Input
                  id="fullName"
                  name="fullName"
                  value={newUserForm.fullName}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="userName">Username*</Label>
                <Input
                  id="userName"
                  name="userName"
                  value={newUserForm.userName}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="email">Email*</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={newUserForm.email}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="phone">Phone</Label>
                <Input
                  id="phone"
                  name="phone"
                  value={newUserForm.phone}
                  onChange={handleInputChange}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="password">Password*</Label>
                <Input
                  id="password"
                  name="password"
                  type="password"
                  value={newUserForm.password}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="role">Role*</Label>
                <select
                  id="role"
                  name="role"
                  value={newUserForm.role}
                  onChange={handleInputChange}
                  className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                >
                  <option value="Administrator">Administrator</option>
                  <option value="Manager">Manager</option>
                  <option value="Front Desk">Front Desk</option>
                </select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="department">Department</Label>
                <Input
                  id="department"
                  name="department"
                  value={newUserForm.department}
                  onChange={handleInputChange}
                  placeholder="e.g. Management, Reception, etc."
                />
              </div>
              <input type="hidden" name="isStaff" value="true" />
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsAddStaffDialogOpen(false)}>
                Cancel
              </Button>
              <Button type="submit">Create Staff User</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Confirm Delete Dialog */}
      <Dialog open={isConfirmDeleteOpen} onOpenChange={setIsConfirmDeleteOpen}>
        <DialogContent className="sm:max-w-[400px]">
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this user? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            {userToDelete && (
              <div className="text-center">
                <p className="font-medium">{userToDelete.fullName}</p>
                <p className="text-sm text-gray-500">{userToDelete.email}</p>
                <p className="text-sm text-gray-500">{userToDelete.role}</p>
              </div>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsConfirmDeleteOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteUser}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default UsersManagementContent;
</file>

<file path="src/components/Events/EventCard.tsx">
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { CalendarDays, Clock, MapPin, Ticket } from "lucide-react";
import { format } from "date-fns";
import { useToast } from "@/components/ui/use-toast";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

interface EventCardProps {
  id: string;
  title: string;
  description: string;
  date: Date;
  imageUrl: string;
  price: number;
  location: string;
}

const EventCard = ({
  id,
  title,
  description,
  date,
  imageUrl,
  price,
  location
}: EventCardProps) => {
  const [showTicketForm, setShowTicketForm] = useState(false);
  const [ticketCount, setTicketCount] = useState(1);
  const { toast } = useToast();

  const handlePurchase = () => {
    // In a real app, this would call an API to process the ticket purchase
    toast({
      title: "Tickets Purchased",
      description: `You have purchased ${ticketCount} ticket(s) for ${title}.`,
    });
    setShowTicketForm(false);
  };

  const formattedDate = format(new Date(date), "EEEE, MMMM d, yyyy");
  const formattedTime = format(new Date(date), "h:mm a");

  return (
    <div className="bg-white rounded-lg overflow-hidden shadow-md">
      <div
        className="h-48 bg-cover bg-center"
        style={{ backgroundImage: `url(${imageUrl})` }}
      />
      <div className="p-4">
        <h3 className="text-lg font-semibold text-gray-800 mb-1">{title}</h3>
        <p className="text-sm text-gray-600 mb-3">{description}</p>
        
        <div className="space-y-2 mb-4">
          <div className="flex items-center text-sm text-gray-500">
            <CalendarDays size={16} className="mr-1" />
            <span>{formattedDate}</span>
          </div>
          <div className="flex items-center text-sm text-gray-500">
            <Clock size={16} className="mr-1" />
            <span>{formattedTime}</span>
          </div>
          <div className="flex items-center text-sm text-gray-500">
            <MapPin size={16} className="mr-1" />
            <span>{location}</span>
          </div>
        </div>
        
        <div className="flex justify-between items-center mb-4">
          <div className="text-lg font-semibold text-hotel-primary">${price}<span className="text-sm text-gray-500">/ticket</span></div>
        </div>
        
        <Button 
          onClick={() => setShowTicketForm(!showTicketForm)}
          className="w-full bg-hotel-primary hover:bg-opacity-90 text-white"
        >
          <Ticket size={16} className="mr-2" />
          {showTicketForm ? "Hide Ticket Form" : "Purchase Tickets"}
        </Button>
        
        {showTicketForm && (
          <div className="mt-4 border-t border-gray-200 pt-4 space-y-4">
            <div className="space-y-2">
              <Label htmlFor="ticket-count">Number of Tickets</Label>
              <Input
                id="ticket-count"
                type="number"
                min={1}
                value={ticketCount}
                onChange={(e) => setTicketCount(parseInt(e.target.value))}
              />
            </div>
            
            <div className="bg-gray-50 p-3 rounded-md">
              <div className="flex justify-between mb-2">
                <span>Price per ticket:</span>
                <span>${price}</span>
              </div>
              <div className="flex justify-between font-semibold">
                <span>Total price:</span>
                <span>${price * ticketCount}</span>
              </div>
            </div>
            
            <Button
              onClick={handlePurchase}
              className="w-full bg-hotel-primary hover:bg-opacity-90"
            >
              Confirm Purchase
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default EventCard;
</file>

<file path="src/components/Events/EventsList.tsx">
import EventCard from "./EventCard";

const EventsList = () => {
  // In a real app, this would be fetched from an API
  const events = [
    {
      id: "e1",
      title: "Summer Jazz Night",
      description: "Enjoy an evening of smooth jazz by the poolside with renowned local musicians.",
      date: new Date("2023-09-15T19:00:00"),
      imageUrl: "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      price: 75,
      location: "Hotel Poolside"
    },
    {
      id: "e2",
      title: "Wine Tasting Gala",
      description: "Sample exquisite wines from around the world paired with gourmet appetizers.",
      date: new Date("2023-09-20T18:00:00"),
      imageUrl: "https://images.unsplash.com/photo-1510812431401-41d2bd2722f3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      price: 120,
      location: "Grand Ballroom"
    },
    {
      id: "e3",
      title: "Cooking Masterclass",
      description: "Learn to prepare signature dishes with our executive chef in this interactive class.",
      date: new Date("2023-09-25T11:00:00"),
      imageUrl: "https://images.unsplash.com/photo-1556910103-1c02745aae4d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      price: 150,
      location: "Hotel Kitchen"
    },
    {
      id: "e4",
      title: "Weekend Wellness Retreat",
      description: "A full weekend of yoga, meditation, and wellness workshops to rejuvenate your mind and body.",
      date: new Date("2023-10-01T09:00:00"),
      imageUrl: "https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      price: 299,
      location: "Wellness Center"
    }
  ];

  return (
    <div className="space-y-6 pb-6">
      {events.map(event => (
        <EventCard
          key={event.id}
          id={event.id}
          title={event.title}
          description={event.description}
          date={event.date}
          imageUrl={event.imageUrl}
          price={event.price}
          location={event.location}
        />
      ))}
    </div>
  );
};

export default EventsList;
</file>

<file path="src/components/Home/FeaturedCard.tsx">
import { Link } from "react-router-dom";

interface FeaturedCardProps {
  title: string;
  description: string;
  imageUrl: string;
  type: string;
}

const FeaturedCard = ({ title, description, imageUrl, type }: FeaturedCardProps) => {
  const getLink = () => {
    switch (type) {
      case "room":
        return "/rooms";
      case "dining":
        return "/restaurant";
      case "event":
        return "/events";
      case "spa":
        return "/spa";
      default:
        return "/";
    }
  };

  return (
    <Link
      to={getLink()}
      className="flex-shrink-0 w-64 rounded-lg overflow-hidden shadow-md bg-white animate-fade-in"
    >
      <div
        className="h-36 bg-cover bg-center"
        style={{ backgroundImage: `url(${imageUrl})` }}
      />
      <div className="p-4">
        <h3 className="text-lg font-semibold text-gray-800 mb-1">{title}</h3>
        <p className="text-sm text-gray-600">{description}</p>
      </div>
    </Link>
  );
};

export default FeaturedCard;
</file>

<file path="src/components/Home/HomeScreen.tsx">
import { useState } from "react";
import FeaturedCard from "./FeaturedCard";
import ServiceCard from "./ServiceCard";
import { Bed, Heart, Ticket, Utensils, Award, User } from "lucide-react";
import { Link } from "react-router-dom";

const HomeScreen = () => {
  const [greeting, setGreeting] = useState("Welcome to");
  
  // In a real app, we would fetch these from an API
  const featuredItems = [
    {
      id: "f1",
      title: "Luxury Suite",
      description: "Experience ultimate comfort with our premium suites",
      imageUrl: "https://images.unsplash.com/photo-1566665797739-1674de7a421a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      type: "room"
    },
    {
      id: "f2",
      title: "Gourmet Dinner",
      description: "Enjoy our chef's special 5-course meal",
      imageUrl: "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      type: "dining"
    },
    {
      id: "f3",
      title: "Summer Concert",
      description: "Live music by the poolside every weekend",
      imageUrl: "https://images.unsplash.com/photo-1459749411175-04bf5292ceea?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      type: "event"
    },
  ];

  const services = [
    {
      icon: <Bed size={24} />,
      title: "Rooms",
      description: "Book your perfect stay",
      path: "/rooms",
      color: "bg-blue-100"
    },
    {
      icon: <Heart size={24} />,
      title: "Spa",
      description: "Relax and rejuvenate",
      path: "/spa",
      color: "bg-green-100"
    },
    {
      icon: <Ticket size={24} />,
      title: "Events",
      description: "Explore our events",
      path: "/events",
      color: "bg-purple-100"
    },
    {
      icon: <Utensils size={24} />,
      title: "Dining",
      description: "Savor our cuisine",
      path: "/restaurant",
      color: "bg-orange-100"
    },
    {
      icon: <Award size={24} />,
      title: "Rewards",
      description: "Loyalty benefits",
      path: "/loyalty",
      color: "bg-red-100"
    }
  ];

  return (
    <div className="pb-16">
      {/* Header */}
      <div className="hotel-gradient text-white px-4 pt-12 pb-8 relative">
        <div className="flex flex-col space-y-1">
          <p className="text-lg opacity-90">{greeting}</p>
          <h1 className="text-3xl font-semibold">Parkside Plaza</h1>
          <p className="text-sm opacity-80 mt-1">Your luxury getaway awaits</p>
        </div>
        <div className="absolute top-4 right-4">
          <Link to="/admin-login" className="flex items-center px-3 py-1.5 bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full text-sm text-white transition-colors">
            <User size={14} className="mr-1" />
            Admin Access
          </Link>
        </div>
      </div>

      {/* Featured Items */}
      <div className="px-4 py-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold text-gray-800">Featured</h2>
          <Link to="/rooms" className="text-sm text-hotel-primary font-medium">
            View All
          </Link>
        </div>
        
        <div className="flex overflow-x-auto pb-4 space-x-4 hide-scrollbar">
          {featuredItems.map((item) => (
            <FeaturedCard
              key={item.id}
              title={item.title}
              description={item.description}
              imageUrl={item.imageUrl}
              type={item.type}
            />
          ))}
        </div>
      </div>

      {/* Services */}
      <div className="px-4 py-6">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Our Services</h2>
        <div className="grid grid-cols-2 gap-4">
          {services.map((service) => (
            <ServiceCard
              key={service.title}
              icon={service.icon}
              title={service.title}
              description={service.description}
              path={service.path}
              color={service.color}
            />
          ))}
        </div>
      </div>
      
      {/* Footer with admin link */}
      <div className="mt-8 text-center pb-4 flex flex-col items-center gap-2">
        <Link to="/admin-login" className="inline-flex items-center px-4 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-100 transition-colors">
          <User size={16} className="mr-2 text-hotel-primary" />
          Admin Portal
        </Link>
        <p className="text-xs text-gray-500">
          © {new Date().getFullYear()} Parkside Plaza Hotel. All rights reserved.
        </p>
      </div>
    </div>
  );
};

export default HomeScreen;
</file>

<file path="src/components/Home/ServiceCard.tsx">
import { Link } from "react-router-dom";
import { ReactNode } from "react";

interface ServiceCardProps {
  icon: ReactNode;
  title: string;
  description: string;
  path: string;
  color: string;
}

const ServiceCard = ({ icon, title, description, path, color }: ServiceCardProps) => {
  return (
    <Link
      to={path}
      className="flex flex-col items-center p-4 rounded-lg shadow-md bg-white hover:shadow-lg transition-shadow duration-200"
    >
      <div className={`${color} p-3 rounded-full mb-3`}>
        <div className="text-hotel-primary">{icon}</div>
      </div>
      <h3 className="text-base font-medium text-gray-800 mb-1">{title}</h3>
      <p className="text-xs text-gray-600 text-center">{description}</p>
    </Link>
  );
};

export default ServiceCard;
</file>

<file path="src/components/Layout/AppLayout.tsx">
import { Outlet } from "react-router-dom";
import BottomNavigation from "./BottomNavigation";

const AppLayout = () => {
  return (
    <div className="flex flex-col min-h-screen bg-hotel-light">
      <main className="flex-1 pb-16">
        <Outlet />
      </main>
      <div className="fixed bottom-0 left-0 right-0 z-50">
        <BottomNavigation />
      </div>
    </div>
  );
};

export default AppLayout;
</file>

<file path="src/components/Layout/BottomNavigation.tsx">
import { useState } from "react";
import { Link, useLocation } from "react-router-dom";
import { Bed, Heart, Ticket, Utensils, Award, Home, Smartphone, Globe } from "lucide-react";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

const BottomNavigation = () => {
  const location = useLocation();
  const pathname = location.pathname;
  const [viewMode, setViewMode] = useState<"website" | "mobile">("website");

  // Website navigation items (no loyalty or restaurant ordering)
  const websiteNavItems = [
    { icon: <Home size={20} />, label: "Home", path: "/" },
    { icon: <Bed size={20} />, label: "Rooms", path: "/rooms" },
    { icon: <Heart size={20} />, label: "Spa", path: "/spa" },
    { icon: <Ticket size={20} />, label: "Events", path: "/events" },
  ];

  // Mobile app navigation items (includes everything)
  const mobileNavItems = [
    { icon: <Home size={20} />, label: "Home", path: "/" },
    { icon: <Bed size={20} />, label: "Rooms", path: "/rooms" },
    { icon: <Heart size={20} />, label: "Spa", path: "/spa" },
    { icon: <Ticket size={20} />, label: "Events", path: "/events" },
    { icon: <Utensils size={20} />, label: "Dining", path: "/restaurant" },
    { icon: <Award size={20} />, label: "Rewards", path: "/loyalty" },
  ];

  const navItems = viewMode === "website" ? websiteNavItems : mobileNavItems;

  return (
    <div className="bg-white shadow-lg border-t border-gray-200">
      <div className="px-2 pt-2">
        <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as "website" | "mobile")}>
          <TabsList className="grid w-full grid-cols-2 mb-2">
            <TabsTrigger value="website" className="flex items-center gap-1">
              <Globe size={16} />
              <span>Website</span>
            </TabsTrigger>
            <TabsTrigger value="mobile" className="flex items-center gap-1">
              <Smartphone size={16} />
              <span>Mobile App</span>
            </TabsTrigger>
          </TabsList>
        </Tabs>
      </div>
      
      <div className="flex justify-around px-2 py-3">
        {navItems.map((item) => {
          const isActive = 
            (item.path === "/" && pathname === "/") || 
            (item.path !== "/" && pathname.startsWith(item.path));
          
          return (
            <Link
              key={item.path}
              to={item.path}
              className={`flex flex-col items-center justify-center px-2 ${
                isActive
                  ? "text-hotel-primary font-medium"
                  : "text-gray-500"
              }`}
            >
              {item.icon}
              <span className="text-xs mt-1">{item.label}</span>
            </Link>
          );
        })}
      </div>
    </div>
  );
};

export default BottomNavigation;
</file>

<file path="src/components/Loyalty/LoyaltyDashboard.tsx">
import { Award, Gift, TrendingUp } from "lucide-react";
import { Progress } from "@/components/ui/progress";

const LoyaltyDashboard = () => {
  // In a real app, this would be fetched from an API based on the user's data
  const loyaltyData = {
    tier: "Silver",
    points: 2750,
    nextTier: "Gold",
    pointsForNextTier: 5000,
    rewards: [
      {
        id: "r1",
        name: "Free Breakfast",
        pointsCost: 500,
        description: "Enjoy a complimentary breakfast for two at our restaurant."
      },
      {
        id: "r2",
        name: "Room Upgrade",
        pointsCost: 1000,
        description: "Upgrade your next stay to the next room category."
      },
      {
        id: "r3",
        name: "Spa Credit",
        pointsCost: 1500,
        description: "$50 credit to use at our spa."
      }
    ],
    recentActivity: [
      {
        id: "a1",
        type: "earned",
        points: 250,
        description: "Room booking - Deluxe Suite",
        date: "2023-08-25"
      },
      {
        id: "a2",
        type: "earned",
        points: 100,
        description: "Restaurant order - Dinner",
        date: "2023-08-26"
      },
      {
        id: "a3",
        type: "redeemed",
        points: 500,
        description: "Free breakfast reward",
        date: "2023-08-27"
      }
    ]
  };

  const progressPercentage = (loyaltyData.points / loyaltyData.pointsForNextTier) * 100;

  return (
    <div className="space-y-8 pb-6">
      {/* Tier Status */}
      <div className="bg-white rounded-lg shadow-md p-4">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              {loyaltyData.tier} Member
            </h3>
            <p className="text-sm text-gray-600">
              {loyaltyData.points} points earned
            </p>
          </div>
          <div className="bg-hotel-primary p-2 rounded-full text-white">
            <Award size={24} />
          </div>
        </div>
        
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>{loyaltyData.tier}</span>
            <span>{loyaltyData.nextTier}</span>
          </div>
          <Progress value={progressPercentage} className="h-2" />
          <p className="text-xs text-gray-500 text-right">
            {loyaltyData.pointsForNextTier - loyaltyData.points} points needed for {loyaltyData.nextTier}
          </p>
        </div>
      </div>

      {/* Available Rewards */}
      <div className="bg-white rounded-lg shadow-md p-4">
        <div className="flex items-center mb-4">
          <Gift size={20} className="text-hotel-primary mr-2" />
          <h3 className="text-lg font-semibold text-gray-800">Available Rewards</h3>
        </div>
        
        <div className="space-y-4">
          {loyaltyData.rewards.map((reward) => (
            <div key={reward.id} className="border border-gray-200 rounded-md p-3">
              <div className="flex justify-between items-start mb-2">
                <h4 className="font-medium text-gray-800">{reward.name}</h4>
                <span className="bg-hotel-accent text-hotel-primary rounded-full px-2 py-1 text-xs font-medium">
                  {reward.pointsCost} points
                </span>
              </div>
              <p className="text-sm text-gray-600">{reward.description}</p>
              <button
                className={`w-full mt-2 py-1.5 rounded-md text-sm font-medium ${
                  loyaltyData.points >= reward.pointsCost
                    ? "bg-hotel-primary text-white"
                    : "bg-gray-100 text-gray-400"
                }`}
                disabled={loyaltyData.points < reward.pointsCost}
              >
                {loyaltyData.points >= reward.pointsCost ? "Redeem Reward" : "Not Enough Points"}
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-white rounded-lg shadow-md p-4">
        <div className="flex items-center mb-4">
          <TrendingUp size={20} className="text-hotel-primary mr-2" />
          <h3 className="text-lg font-semibold text-gray-800">Recent Activity</h3>
        </div>
        
        <div className="space-y-3">
          {loyaltyData.recentActivity.map((activity) => (
            <div key={activity.id} className="flex items-start justify-between">
              <div>
                <p className="text-sm font-medium text-gray-800">{activity.description}</p>
                <p className="text-xs text-gray-500">{activity.date}</p>
              </div>
              <span className={`text-sm font-medium ${
                activity.type === "earned" ? "text-green-600" : "text-red-600"
              }`}>
                {activity.type === "earned" ? "+" : "-"}{activity.points}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default LoyaltyDashboard;
</file>

<file path="src/components/Restaurant/MenuCategories.tsx">
import { useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import MenuItem from "./MenuItem";

const MenuCategories = () => {
  const [activeCategory, setActiveCategory] = useState("breakfast");
  
  // In a real app, this would be fetched from an API
  const menuItems = {
    breakfast: [
      {
        id: "b1",
        name: "Continental Breakfast",
        description: "A selection of pastries, fresh fruit, yogurt, and coffee or tea.",
        price: 18,
        imageUrl: "https://images.unsplash.com/photo-1533920379810-6bedac961555?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "b2",
        name: "Eggs Benedict",
        description: "Poached eggs with hollandaise sauce on English muffin with ham or smoked salmon.",
        price: 22,
        imageUrl: "https://images.unsplash.com/photo-1608039829572-78524f79c4c7?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "b3",
        name: "Belgian Waffles",
        description: "Served with whipped cream, fresh berries, and maple syrup.",
        price: 16,
        imageUrl: "https://images.unsplash.com/photo-1562376552-0d160a2f35ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      }
    ],
    lunch: [
      {
        id: "l1",
        name: "Caesar Salad",
        description: "Romaine lettuce, croutons, parmesan cheese, and Caesar dressing.",
        price: 14,
        imageUrl: "https://images.unsplash.com/photo-1599021419847-d8a7a6aba5b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "l2",
        name: "Club Sandwich",
        description: "Triple-decker sandwich with turkey, bacon, lettuce, tomato, and mayo.",
        price: 16,
        imageUrl: "https://images.unsplash.com/photo-1528736235302-52922df5c122?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "l3",
        name: "Pasta Primavera",
        description: "Fresh seasonal vegetables in a light cream sauce over linguine.",
        price: 19,
        imageUrl: "https://images.unsplash.com/photo-1563379926898-05f4575a45d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      }
    ],
    dinner: [
      {
        id: "d1",
        name: "Filet Mignon",
        description: "8oz filet with red wine reduction, served with mashed potatoes and asparagus.",
        price: 38,
        imageUrl: "https://images.unsplash.com/photo-1558030006-450675393462?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "d2",
        name: "Grilled Salmon",
        description: "Fresh Atlantic salmon with lemon butter sauce, served with wild rice and seasonal vegetables.",
        price: 28,
        imageUrl: "https://images.unsplash.com/photo-1519708227418-c8fd9a32b7a2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "d3",
        name: "Vegetable Risotto",
        description: "Creamy arborio rice with roasted vegetables and parmesan cheese.",
        price: 24,
        imageUrl: "https://images.unsplash.com/photo-1476124369491-e7addf5db371?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      }
    ],
    dessert: [
      {
        id: "ds1",
        name: "Chocolate Lava Cake",
        description: "Warm chocolate cake with a molten center, served with vanilla ice cream.",
        price: 12,
        imageUrl: "https://images.unsplash.com/photo-1606313564200-e75d5e30476c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "ds2",
        name: "New York Cheesecake",
        description: "Classic cheesecake with graham cracker crust and berry compote.",
        price: 10,
        imageUrl: "https://images.unsplash.com/photo-1533134242443-d4fd215305ad?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      },
      {
        id: "ds3",
        name: "Crème Brûlée",
        description: "Rich custard topped with a layer of caramelized sugar.",
        price: 11,
        imageUrl: "https://images.unsplash.com/photo-1579954115545-a95591f28bfc?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
      }
    ]
  };

  return (
    <div className="pb-6">
      <Tabs defaultValue={activeCategory} onValueChange={setActiveCategory}>
        <div className="mb-4">
          <TabsList className="w-full bg-gray-100">
            <TabsTrigger value="breakfast" className="flex-1">Breakfast</TabsTrigger>
            <TabsTrigger value="lunch" className="flex-1">Lunch</TabsTrigger>
            <TabsTrigger value="dinner" className="flex-1">Dinner</TabsTrigger>
            <TabsTrigger value="dessert" className="flex-1">Dessert</TabsTrigger>
          </TabsList>
        </div>
        
        <TabsContent value="breakfast" className="space-y-6">
          {menuItems.breakfast.map(item => (
            <MenuItem
              key={item.id}
              id={item.id}
              name={item.name}
              description={item.description}
              price={item.price}
              imageUrl={item.imageUrl}
            />
          ))}
        </TabsContent>
        
        <TabsContent value="lunch" className="space-y-6">
          {menuItems.lunch.map(item => (
            <MenuItem
              key={item.id}
              id={item.id}
              name={item.name}
              description={item.description}
              price={item.price}
              imageUrl={item.imageUrl}
            />
          ))}
        </TabsContent>
        
        <TabsContent value="dinner" className="space-y-6">
          {menuItems.dinner.map(item => (
            <MenuItem
              key={item.id}
              id={item.id}
              name={item.name}
              description={item.description}
              price={item.price}
              imageUrl={item.imageUrl}
            />
          ))}
        </TabsContent>
        
        <TabsContent value="dessert" className="space-y-6">
          {menuItems.dessert.map(item => (
            <MenuItem
              key={item.id}
              id={item.id}
              name={item.name}
              description={item.description}
              price={item.price}
              imageUrl={item.imageUrl}
            />
          ))}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default MenuCategories;
</file>

<file path="src/components/Restaurant/MenuItem.tsx">
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { MinusCircle, PlusCircle } from "lucide-react";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";

interface MenuItemProps {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
}

const MenuItem = ({
  id,
  name,
  description,
  price,
  imageUrl
}: MenuItemProps) => {
  const [quantity, setQuantity] = useState(1);
  const [showOrderOptions, setShowOrderOptions] = useState(false);
  const [orderType, setOrderType] = useState("room-service");
  const [specialInstructions, setSpecialInstructions] = useState("");
  const { toast } = useToast();

  const handleAddToCart = () => {
    // In a real app, this would add the item to the user's cart
    toast({
      title: "Added to Order",
      description: `${quantity} ${name}(s) have been added to your order.`,
    });
    setShowOrderOptions(false);
  };

  return (
    <div className="bg-white rounded-lg overflow-hidden shadow-md flex flex-col sm:flex-row">
      <div
        className="h-32 sm:h-auto sm:w-32 bg-cover bg-center"
        style={{ backgroundImage: `url(${imageUrl})` }}
      />
      <div className="p-4 flex-1">
        <div className="flex justify-between items-start">
          <h3 className="text-lg font-semibold text-gray-800">{name}</h3>
          <div className="text-lg font-semibold text-hotel-primary">${price}</div>
        </div>
        <p className="text-sm text-gray-600 mb-3">{description}</p>
        
        <Button 
          onClick={() => setShowOrderOptions(!showOrderOptions)}
          className="w-full sm:w-auto bg-hotel-primary hover:bg-opacity-90 text-white"
        >
          {showOrderOptions ? "Hide Options" : "Order Now"}
        </Button>
        
        {showOrderOptions && (
          <div className="mt-4 border-t border-gray-200 pt-4 space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">Order Type</label>
              <RadioGroup value={orderType} onValueChange={setOrderType}>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="room-service" id="room-service" />
                  <Label htmlFor="room-service">Room Service</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="restaurant" id="restaurant" />
                  <Label htmlFor="restaurant">Dine In</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="takeaway" id="takeaway" />
                  <Label htmlFor="takeaway">Takeaway</Label>
                </div>
              </RadioGroup>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">Quantity</label>
              <div className="flex items-center">
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setQuantity(Math.max(1, quantity - 1))}
                >
                  <MinusCircle className="h-4 w-4" />
                </Button>
                <span className="mx-4 text-lg font-medium w-6 text-center">
                  {quantity}
                </span>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setQuantity(quantity + 1)}
                >
                  <PlusCircle className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">Special Instructions (Optional)</label>
              <Textarea
                placeholder="Any allergies or special requests?"
                value={specialInstructions}
                onChange={(e) => setSpecialInstructions(e.target.value)}
              />
            </div>
            
            <div className="bg-gray-50 p-3 rounded-md">
              <div className="flex justify-between font-semibold">
                <span>Total price:</span>
                <span>${(price * quantity).toFixed(2)}</span>
              </div>
            </div>
            
            <Button
              onClick={handleAddToCart}
              className="w-full bg-hotel-primary hover:bg-opacity-90"
            >
              Add to Order
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default MenuItem;
</file>

<file path="src/components/Rooms/RoomBookingForm.tsx">
import { useState } from "react";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, Users, InfoIcon } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface RoomBookingFormProps {
  roomId: string;
  roomName: string;
  price: number;
  isRefundable?: boolean;
  refundPolicy?: string;
}

const RoomBookingForm = ({ 
  roomId, 
  roomName, 
  price, 
  isRefundable = true,
  refundPolicy = "Full refund if cancelled up to 48 hours before check-in. 50% refund if cancelled up to 24 hours before check-in."
}: RoomBookingFormProps) => {
  const [checkInDate, setCheckInDate] = useState<Date | undefined>(undefined);
  const [checkOutDate, setCheckOutDate] = useState<Date | undefined>(undefined);
  const [guests, setGuests] = useState(1);
  const [specialRequests, setSpecialRequests] = useState("");
  const { toast } = useToast();
  
  const isDateValid = checkInDate && checkOutDate && checkOutDate > checkInDate;
  
  const getTotalNights = () => {
    if (!isDateValid) return 0;
    return Math.ceil(
      (checkOutDate!.getTime() - checkInDate!.getTime()) / (1000 * 60 * 60 * 24)
    );
  };
  
  const totalPrice = getTotalNights() * price;

  const handleSubmit = () => {
    // In a real app, this would call an API to process the booking
    toast({
      title: "Booking Submitted",
      description: `Your ${roomName} has been booked successfully for ${getTotalNights()} nights.`,
    });
  };

  return (
    <div className="mt-4 border-t border-gray-200 pt-4">
      <div className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="check-in">Check-in Date</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  id="check-in"
                  className="w-full justify-start text-left font-normal"
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {checkInDate ? (
                    format(checkInDate, "PPP")
                  ) : (
                    <span>Select date</span>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={checkInDate}
                  onSelect={setCheckInDate}
                  initialFocus
                  disabled={(date) => 
                    date < new Date(new Date().setHours(0, 0, 0, 0))
                  }
                />
              </PopoverContent>
            </Popover>
          </div>

          <div className="space-y-2">
            <Label htmlFor="check-out">Check-out Date</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  id="check-out"
                  className="w-full justify-start text-left font-normal"
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {checkOutDate ? (
                    format(checkOutDate, "PPP")
                  ) : (
                    <span>Select date</span>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={checkOutDate}
                  onSelect={setCheckOutDate}
                  initialFocus
                  disabled={(date) => 
                    date < (checkInDate || new Date(new Date().setHours(0, 0, 0, 0)))
                  }
                />
              </PopoverContent>
            </Popover>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="guests">Number of Guests</Label>
          <div className="flex items-center">
            <Users size={16} className="mr-2 text-gray-500" />
            <Input
              id="guests"
              type="number"
              min={1}
              max={4}
              value={guests}
              onChange={(e) => setGuests(parseInt(e.target.value))}
              className="w-full"
            />
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="special-requests">Special Requests (Optional)</Label>
          <Input
            id="special-requests"
            placeholder="e.g., High floor, early check-in..."
            value={specialRequests}
            onChange={(e) => setSpecialRequests(e.target.value)}
          />
        </div>

        <div className="flex items-center justify-between pb-2">
          <div className="flex items-center gap-1">
            <Label htmlFor="refundable" className="text-sm font-medium">Refundable</Label>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger>
                  <InfoIcon className="h-4 w-4 text-gray-400" />
                </TooltipTrigger>
                <TooltipContent className="max-w-xs">
                  <p className="text-sm">{refundPolicy}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
          <Switch id="refundable" checked={isRefundable} disabled />
        </div>

        {isDateValid && (
          <div className="bg-gray-50 p-3 rounded-md">
            <div className="flex justify-between mb-2">
              <span>Total nights:</span>
              <span>{getTotalNights()}</span>
            </div>
            <div className="flex justify-between font-semibold">
              <span>Total price:</span>
              <span>${totalPrice}</span>
            </div>
          </div>
        )}

        <Button
          className="w-full bg-hotel-primary hover:bg-opacity-90"
          onClick={handleSubmit}
          disabled={!isDateValid}
        >
          Confirm Booking
        </Button>
      </div>
    </div>
  );
};

export default RoomBookingForm;
</file>

<file path="src/components/Rooms/RoomCard.tsx">
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Calendar, Users, Check } from "lucide-react";
import RoomBookingForm from "./RoomBookingForm";

interface RoomCardProps {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  amenities: string[];
  capacity: number;
}

const RoomCard = ({
  id,
  name,
  description,
  price,
  imageUrl,
  amenities,
  capacity
}: RoomCardProps) => {
  const [showBookingForm, setShowBookingForm] = useState(false);

  return (
    <div className="bg-white rounded-lg overflow-hidden shadow-md">
      <div
        className="h-48 bg-cover bg-center"
        style={{ backgroundImage: `url(${imageUrl})` }}
      />
      <div className="p-4">
        <div className="flex justify-between items-start mb-2">
          <h3 className="text-lg font-semibold text-gray-800">{name}</h3>
          <div className="text-lg font-semibold text-hotel-primary">${price}<span className="text-sm text-gray-500">/night</span></div>
        </div>
        <p className="text-sm text-gray-600 mb-4">{description}</p>
        
        <div className="flex items-center text-sm text-gray-500 mb-3">
          <Users size={16} className="mr-1" />
          <span>Up to {capacity} guests</span>
        </div>
        
        <div className="mb-4">
          <h4 className="text-sm font-medium text-gray-700 mb-2">Amenities</h4>
          <div className="flex flex-wrap gap-2">
            {amenities.map((amenity, index) => (
              <div key={index} className="flex items-center text-xs bg-gray-100 rounded-full px-2 py-1">
                <Check size={12} className="text-hotel-primary mr-1" />
                {amenity}
              </div>
            ))}
          </div>
        </div>
        
        <Button 
          onClick={() => setShowBookingForm(!showBookingForm)}
          className="w-full bg-hotel-primary hover:bg-opacity-90 text-white"
        >
          <Calendar size={16} className="mr-2" />
          {showBookingForm ? "Hide Booking Form" : "Book Now"}
        </Button>
        
        {showBookingForm && <RoomBookingForm roomId={id} roomName={name} price={price} />}
      </div>
    </div>
  );
};

export default RoomCard;
</file>

<file path="src/components/Rooms/RoomsList.tsx">
import RoomCard from "./RoomCard";

const RoomsList = () => {
  // In a real app, this would be fetched from an API
  const rooms = [
    {
      id: "r1",
      name: "Classic Room",
      description: "Our cozy classic rooms offer comfort and style for the budget-conscious traveler.",
      price: 199,
      imageUrl: "https://images.unsplash.com/photo-1566665797739-1674de7a421a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      amenities: ["King Bed", "Wi-Fi", "TV", "Mini-bar"],
      capacity: 2
    },
    {
      id: "r2",
      name: "Deluxe Suite",
      description: "Spacious and elegant, our deluxe suites provide a luxurious home away from home.",
      price: 349,
      imageUrl: "https://images.unsplash.com/photo-1631049307264-da0ec9d70304?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      amenities: ["King Bed", "Lounge Area", "Wi-Fi", "TV", "Mini-bar", "Bathtub"],
      capacity: 3
    },
    {
      id: "r3",
      name: "Presidential Suite",
      description: "The epitome of luxury, our presidential suite offers unparalleled comfort and amenities.",
      price: 599,
      imageUrl: "https://images.unsplash.com/photo-1578683010236-d716f9a3f461?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      amenities: ["King Bed", "Separate Living Room", "Dining Area", "Wi-Fi", "TV", "Mini-bar", "Jacuzzi", "Balcony"],
      capacity: 4
    },
    {
      id: "r4",
      name: "Family Room",
      description: "Perfect for families, our spacious family rooms ensure everyone has room to relax.",
      price: 299,
      imageUrl: "https://images.unsplash.com/photo-1540518614846-7eded433c457?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
      amenities: ["2 Queen Beds", "Wi-Fi", "TV", "Mini-bar", "Extra Space"],
      capacity: 4
    }
  ];

  return (
    <div className="space-y-6 pb-6">
      {rooms.map(room => (
        <RoomCard
          key={room.id}
          id={room.id}
          name={room.name}
          description={room.description}
          price={room.price}
          imageUrl={room.imageUrl}
          amenities={room.amenities}
          capacity={room.capacity}
        />
      ))}
    </div>
  );
};

export default RoomsList;
</file>

<file path="src/components/Spa/SpaServiceCard.tsx">
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Clock, Calendar as CalendarIcon } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/components/ui/use-toast";

interface SpaServiceCardProps {
  id: string;
  name: string;
  description: string;
  duration: number;
  price: number;
  imageUrl: string;
}

const SpaServiceCard = ({
  id,
  name,
  description,
  duration,
  price,
  imageUrl
}: SpaServiceCardProps) => {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);
  const [selectedTime, setSelectedTime] = useState<string | undefined>(undefined);
  const [showBookingOptions, setShowBookingOptions] = useState(false);
  const { toast } = useToast();

  // Available time slots for demo
  const timeSlots = ["10:00", "11:00", "13:00", "14:00", "15:00", "16:00"];

  const handleBooking = () => {
    // In a real app, this would call an API to process the booking
    toast({
      title: "Spa Appointment Booked",
      description: `Your ${name} appointment has been scheduled for ${format(selectedDate!, "PPP")} at ${selectedTime}.`,
    });
    setShowBookingOptions(false);
  };

  return (
    <div className="bg-white rounded-lg overflow-hidden shadow-md">
      <div
        className="h-48 bg-cover bg-center"
        style={{ backgroundImage: `url(${imageUrl})` }}
      />
      <div className="p-4">
        <div className="flex justify-between items-start mb-2">
          <h3 className="text-lg font-semibold text-gray-800">{name}</h3>
          <div className="text-lg font-semibold text-hotel-primary">${price}</div>
        </div>
        <p className="text-sm text-gray-600 mb-3">{description}</p>
        
        <div className="flex items-center text-sm text-gray-500 mb-4">
          <Clock size={16} className="mr-1" />
          <span>{duration} minutes</span>
        </div>
        
        <Button 
          onClick={() => setShowBookingOptions(!showBookingOptions)}
          className="w-full bg-hotel-primary hover:bg-opacity-90 text-white"
        >
          {showBookingOptions ? "Hide Booking Options" : "Book Appointment"}
        </Button>
        
        {showBookingOptions && (
          <div className="mt-4 border-t border-gray-200 pt-4 space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">Select Date</label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className="w-full justify-start text-left font-normal"
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {selectedDate ? (
                      format(selectedDate, "PPP")
                    ) : (
                      <span>Select date</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={selectedDate}
                    onSelect={setSelectedDate}
                    initialFocus
                    disabled={(date) => 
                      date < new Date(new Date().setHours(0, 0, 0, 0))
                    }
                  />
                </PopoverContent>
              </Popover>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">Select Time</label>
              <Select onValueChange={setSelectedTime}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select time" />
                </SelectTrigger>
                <SelectContent>
                  {timeSlots.map((time) => (
                    <SelectItem key={time} value={time}>{time}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <Button
              onClick={handleBooking}
              disabled={!selectedDate || !selectedTime}
              className="w-full bg-hotel-primary hover:bg-opacity-90"
            >
              Confirm Appointment
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default SpaServiceCard;
</file>

<file path="src/components/Spa/SpaServicesList.tsx">
import SpaServiceCard from "./SpaServiceCard";

const SpaServicesList = () => {
  // In a real app, this would be fetched from an API
  const spaServices = [
    {
      id: "s1",
      name: "Classic Massage",
      description: "A traditional full-body massage designed to relax muscles and improve circulation.",
      duration: 60,
      price: 120,
      imageUrl: "https://images.unsplash.com/photo-1544161515-4ab6ce6db874?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
    },
    {
      id: "s2",
      name: "Hot Stone Therapy",
      description: "Heated stones are placed on specific parts of your body to enhance relaxation and release tension.",
      duration: 90,
      price: 180,
      imageUrl: "https://images.unsplash.com/photo-1600334129128-685c5582fd35?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
    },
    {
      id: "s3",
      name: "Aromatherapy Facial",
      description: "A rejuvenating facial treatment using essential oils to cleanse, exfoliate, and hydrate your skin.",
      duration: 45,
      price: 95,
      imageUrl: "https://images.unsplash.com/photo-1570172619644-dfd03ed5d881?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
    },
    {
      id: "s4",
      name: "Deluxe Spa Package",
      description: "A complete spa experience including massage, facial, and body scrub for ultimate relaxation.",
      duration: 120,
      price: 250,
      imageUrl: "https://images.unsplash.com/photo-1540555700478-4be289fbecef?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80"
    }
  ];

  return (
    <div className="space-y-6 pb-6">
      {spaServices.map(service => (
        <SpaServiceCard
          key={service.id}
          id={service.id}
          name={service.name}
          description={service.description}
          duration={service.duration}
          price={service.price}
          imageUrl={service.imageUrl}
        />
      ))}
    </div>
  );
};

export default SpaServicesList;
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/charts.tsx">
import * as React from "react";
import * as Recharts from "recharts";
import { ChartContainer } from "./chart";

// Types for the different chart configs
export type BarChartConfig = {
  xAxis?: Array<{
    data: Array<string>;
    scaleType: string;
  }>;
  series: Array<{
    data: Array<number>;
    label?: string;
    type: "bar";
    color?: string;
  }>;
  height?: number;
  width?: number;
};

export type LineChartConfig = {
  xAxis?: Array<{
    data: Array<string>;
    scaleType: string;
  }>;
  series: Array<{
    data: Array<number>;
    label?: string;
    type: "line";
    color?: string;
    curve?: "linear" | "monotone" | "step" | "stepBefore" | "stepAfter";
  }>;
  height?: number;
  width?: number;
};

export type PieChartConfig = {
  series: Array<{
    data: Array<{
      id: string;
      value: number;
      label?: string;
    }>;
    type: "pie";
    innerRadius?: number;
    outerRadius?: number;
    paddingAngle?: number;
    cornerRadius?: number;
    startAngle?: number;
    endAngle?: number;
    highlightScope?: {
      faded?: string;
      highlighted?: string;
    };
  }>;
  height?: number;
  width?: number;
  legend?: {
    hidden?: boolean;
  };
};

// Create a mapping of colors for our chart configs
const chartColors = {
  primary: "#4f46e5",
  success: "#10b981",
  warning: "#f59e0b",
  danger: "#ef4444",
  info: "#3b82f6",
  gray: "#6b7280",
};

// Bar Chart Component
export const BarChart = ({ config }: { config: BarChartConfig }) => {
  const chartConfig = {
    primary: { label: "Primary", theme: { light: chartColors.primary, dark: chartColors.primary } },
    secondary: { label: "Secondary", theme: { light: chartColors.info, dark: chartColors.info } },
    success: { label: "Success", theme: { light: chartColors.success, dark: chartColors.success } },
    warning: { label: "Warning", theme: { light: chartColors.warning, dark: chartColors.warning } },
    danger: { label: "Danger", theme: { light: chartColors.danger, dark: chartColors.danger } },
  };

  return (
    <ChartContainer config={chartConfig}>
      <Recharts.BarChart>
        {config.xAxis?.map((axis, index) => (
          <Recharts.XAxis 
            key={`x-axis-${index}`}
            dataKey="name"
            type="category"
          />
        ))}
        <Recharts.YAxis />
        <Recharts.CartesianGrid strokeDasharray="3 3" />
        <Recharts.Tooltip />
        
        {config.series.map((item, index) => {
          const data = item.data.map((value, i) => ({
            name: config.xAxis?.[0]?.data?.[i] || `Item ${i}`,
            value,
          }));
          
          return (
            <Recharts.Bar 
              key={`bar-${index}`}
              name={item.label}
              dataKey="value"
              fill={item.color || chartColors.primary}
              data={data}
            />
          );
        })}
      </Recharts.BarChart>
    </ChartContainer>
  );
};

// Line Chart Component
export const LineChart = ({ config }: { config: LineChartConfig }) => {
  const chartConfig = {
    primary: { label: "Primary", theme: { light: chartColors.primary, dark: chartColors.primary } },
    secondary: { label: "Secondary", theme: { light: chartColors.info, dark: chartColors.info } },
    success: { label: "Success", theme: { light: chartColors.success, dark: chartColors.success } },
    warning: { label: "Warning", theme: { light: chartColors.warning, dark: chartColors.warning } },
    danger: { label: "Danger", theme: { light: chartColors.danger, dark: chartColors.danger } },
  };

  return (
    <ChartContainer config={chartConfig}>
      <Recharts.LineChart>
        {config.xAxis?.map((axis, index) => (
          <Recharts.XAxis 
            key={`x-axis-${index}`}
            dataKey="name"
            type="category"
          />
        ))}
        <Recharts.YAxis />
        <Recharts.CartesianGrid strokeDasharray="3 3" />
        <Recharts.Tooltip />
        
        {config.series.map((item, index) => {
          const data = item.data.map((value, i) => ({
            name: config.xAxis?.[0]?.data?.[i] || `Item ${i}`,
            value,
          }));
          
          return (
            <Recharts.Line 
              key={`line-${index}`}
              name={item.label}
              dataKey="value"
              stroke={item.color || chartColors.primary}
              data={data}
              type={item.curve || "linear"}
            />
          );
        })}
      </Recharts.LineChart>
    </ChartContainer>
  );
};

// Pie Chart Component
export const PieChart = ({ config }: { config: PieChartConfig }) => {
  const chartConfig = {
    primary: { label: "Primary", theme: { light: chartColors.primary, dark: chartColors.primary } },
    secondary: { label: "Secondary", theme: { light: chartColors.info, dark: chartColors.info } },
    success: { label: "Success", theme: { light: chartColors.success, dark: chartColors.success } },
    warning: { label: "Warning", theme: { light: chartColors.warning, dark: chartColors.warning } },
    danger: { label: "Danger", theme: { light: chartColors.danger, dark: chartColors.danger } },
  };

  const pieColors = [chartColors.primary, chartColors.success, chartColors.warning, chartColors.danger, chartColors.info];

  return (
    <ChartContainer config={chartConfig}>
      <Recharts.PieChart>
        {config.series.map((item, index) => {
          const data = item.data.map((segment) => ({
            name: segment.label || segment.id,
            value: segment.value,
            id: segment.id,
          }));
          
          return (
            <Recharts.Pie
              key={`pie-${index}`}
              data={data}
              dataKey="value"
              nameKey="name"
              innerRadius={item.innerRadius || 0}
              outerRadius={item.outerRadius || 80}
              paddingAngle={item.paddingAngle || 0}
              cornerRadius={item.cornerRadius || 0}
              startAngle={item.startAngle || 0}
              endAngle={item.endAngle || 360}
            >
              {data.map((entry, i) => (
                <Recharts.Cell key={`cell-${i}`} fill={pieColors[i % pieColors.length]} />
              ))}
            </Recharts.Pie>
          );
        })}
        <Recharts.Tooltip />
        {!config.legend?.hidden && <Recharts.Legend />}
      </Recharts.PieChart>
    </ChartContainer>
  );
};
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/date-range-picker.tsx">
import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"
import { DateRange } from "react-day-picker"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

interface DateRangePickerProps {
  value?: DateRange | undefined;
  onValueChange?: (value: DateRange | undefined) => void;
  className?: string;
}

export function DateRangePicker({
  value,
  onValueChange,
  className,
}: DateRangePickerProps) {
  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn(
              "w-[300px] justify-start text-left font-normal",
              !value && "text-muted-foreground"
            )}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {value?.from ? (
              value.to ? (
                <>
                  {format(value.from, "LLL dd, y")} -{" "}
                  {format(value.to, "LLL dd, y")}
                </>
              ) : (
                format(value.from, "LLL dd, y")
              )
            ) : (
              <span>Pick a date range</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={value?.from}
            selected={value}
            onSelect={onValueChange}
            numberOfMonths={2}
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/contexts/SearchContext.tsx">
import React, { createContext, useState, useContext, ReactNode } from 'react';

interface SearchContextType {
    searchQuery: string;
    setSearchQuery: React.Dispatch<React.SetStateAction<string>>;
    searchTarget: string;
    setSearchTarget: React.Dispatch<React.SetStateAction<string>>;
}

const SearchContext = createContext<SearchContextType | undefined>(undefined);

export const SearchProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [searchQuery, setSearchQuery] = useState('');
    const [searchTarget, setSearchTarget] = useState(''); // Indicates which page is being searched

    return (
        <SearchContext.Provider value={{ searchQuery, setSearchQuery, searchTarget, setSearchTarget }}>
            {children}
        </SearchContext.Provider>
    );
};

export const useSearch = (): SearchContextType => {
    const context = useContext(SearchContext);
    if (context === undefined) {
        throw new Error('useSearch must be used within a SearchProvider');
    }
    return context;
};
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/Admin/Availability/AvailabilityManagementPage.tsx">
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Bed, Heart, Utensils, User } from "lucide-react";
import { useState, useEffect } from "react";
import AvailabilityCalendar from "@/components/Admin/Availability/AvailabilityCalendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";
import { getAllRooms, Room } from "@/services/roomService";
import { getAllSpaServices, getAllSpaSpecialists, SpaService, SpaSpecialist } from "@/services/spaService";
import { getAllRestaurantSections, RestaurantSection } from "@/services/restaurantService";

interface UserData {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

// API base URL
const API_URL = "http://localhost:4000/api";

const AvailabilityManagementPage = () => {
  const [activeTab, setActiveTab] = useState<string | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [availableTabs, setAvailableTabs] = useState<string[]>([]);

  // Room states
  const [roomTypes, setRoomTypes] = useState<Room[]>([]);
  const [selectedRoom, setSelectedRoom] = useState<string>("");

  // Spa services states
  const [spaServices, setSpaServices] = useState<SpaService[]>([]);
  const [selectedSpaService, setSelectedSpaService] = useState<string>("");

  // Spa specialists states
  const [spaSpecialists, setSpaSpecialists] = useState<SpaSpecialist[]>([]);
  const [selectedSpaSpecialist, setSelectedSpaSpecialist] = useState<string>("");

  // Restaurant sections states
  const [restaurantSections, setRestaurantSections] = useState<RestaurantSection[]>([]);
  const [selectedRestaurantSection, setSelectedRestaurantSection] = useState<string>("");

  // Loading states
  const [isLoadingRooms, setIsLoadingRooms] = useState(true);
  const [isLoadingSpaServices, setIsLoadingSpaServices] = useState(true);
  const [isLoadingSpaSpecialists, setIsLoadingSpaSpecialists] = useState(true);
  const [isLoadingRestaurantSections, setIsLoadingRestaurantSections] = useState(true);

  // Get selected room details
  const getSelectedRoom = () => {
    const room = roomTypes.find(room => room._id === selectedRoom);
    return room ? {
      id: room._id,
      name: room.name,
      capacity: room.totalRooms
    } : { id: "", name: "Loading...", capacity: 0 };
  };

  // Get selected spa service details
  const getSelectedSpaService = () => {
    const service = spaServices.find(service => service._id === selectedSpaService);
    return service ? {
      id: service._id,
      name: service.name,
      capacity: service.capacity
    } : { id: "", name: "Loading...", capacity: 0 };
  };

  // Get selected spa specialist details
  const getSelectedSpaSpecialist = () => {
    const specialist = spaSpecialists.find(specialist => specialist._id === selectedSpaSpecialist);
    return specialist ? {
      id: specialist._id,
      name: specialist.name,
      capacity: specialist.capacity,
      role: specialist.role
    } : { id: "", name: "Loading...", capacity: 0, role: "" };
  };

  // Get selected restaurant section details
  const getSelectedRestaurantSection = () => {
    const section = restaurantSections.find(section => section._id === selectedRestaurantSection);
    return section ? {
      id: section._id,
      name: section.name,
      capacity: section.capacity
    } : { id: "", name: "Loading...", capacity: 0 };
  };

  // Fetch rooms from API
  const fetchRooms = async () => {
    try {
      setIsLoadingRooms(true);
      const rooms = await getAllRooms();

      if (rooms && rooms.length > 0) {
        setRoomTypes(rooms);
        setSelectedRoom(rooms[0]._id);
      }
    } catch (error) {
      console.error("Error fetching room types:", error);
    } finally {
      setIsLoadingRooms(false);
    }
  };

  // Fetch spa services from API
  const fetchSpaServices = async () => {
    try {
      setIsLoadingSpaServices(true);
      const services = await getAllSpaServices();

      if (services && services.length > 0) {
        setSpaServices(services);
        setSelectedSpaService(services[0]._id);
      }
    } catch (error) {
      console.error("Error fetching spa services:", error);
    } finally {
      setIsLoadingSpaServices(false);
    }
  };

  // Fetch spa specialists from API
  const fetchSpaSpecialists = async () => {
    try {
      setIsLoadingSpaSpecialists(true);
      const specialists = await getAllSpaSpecialists();

      if (specialists && specialists.length > 0) {
        setSpaSpecialists(specialists);
        setSelectedSpaSpecialist(specialists[0]._id);
      }
    } catch (error) {
      console.error("Error fetching spa specialists:", error);
    } finally {
      setIsLoadingSpaSpecialists(false);
    }
  };

  // Fetch restaurant sections from API
  const fetchRestaurantSections = async () => {
    try {
      setIsLoadingRestaurantSections(true);
      const sections = await getAllRestaurantSections();

      if (sections && sections.length > 0) {
        setRestaurantSections(sections);
        setSelectedRestaurantSection(sections[0]._id);
      }
    } catch (error) {
      console.error("Error fetching restaurant sections:", error);
    } finally {
      setIsLoadingRestaurantSections(false);
    }
  };

  // Fetch all data on component mount
  useEffect(() => {
    fetchRooms();
    fetchSpaServices();
    fetchSpaSpecialists();
    fetchRestaurantSections();
  }, []);

  useEffect(() => {
    // Get user data from localStorage
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const user = JSON.parse(userDataString);
      setUserData(user);

      // Determine which tabs are available based on department
      const tabs: string[] = [];

      if (user.department === "Front Office" || user.department === "Housekeeping" ||
        user.department === "Management") {
        tabs.push("rooms");
      }

      if (user.department === "Spa & Wellness" || user.department === "Management") {
        tabs.push("spa");
        tabs.push("specialists"); // Add specialists tab for Spa department
      }

      if (user.department === "Food & Beverage" || user.department === "Management") {
        tabs.push("restaurant");
      }

      setAvailableTabs(tabs);

      // Set active tab to the first available one
      if (tabs.length > 0 && !activeTab) {
        setActiveTab(tabs[0]);
      }
    }
  }, [activeTab]);

  if (!userData || availableTabs.length === 0) {
    return (
      <div className="flex justify-center items-center h-64">
        <p>Loading availability data...</p>
      </div>
    );
  }

  return (
    <AuthGuard requiredDepartments={["Management", "Front Office", "Housekeeping", "Spa & Wellness", "Food & Beverage"]}>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">
            {userData?.department} Availability Management
          </h1>
        </div>

        <Tabs value={activeTab || availableTabs[0]} onValueChange={setActiveTab}>
          <TabsList className={`grid w-full ${availableTabs.length === 1 ? 'grid-cols-1' :
            availableTabs.length === 2 ? 'grid-cols-2' :
              availableTabs.length === 3 ? 'grid-cols-3' :
                'grid-cols-4'} mb-6`}>
            {availableTabs.includes("rooms") && (
              <TabsTrigger value="rooms" className="flex items-center gap-2">
                <Bed className="h-4 w-4" />
                <span>Rooms</span>
              </TabsTrigger>
            )}
            {availableTabs.includes("spa") && (
              <TabsTrigger value="spa" className="flex items-center gap-2">
                <Heart className="h-4 w-4" />
                <span>Spa Services</span>
              </TabsTrigger>
            )}
            {availableTabs.includes("specialists") && (
              <TabsTrigger value="specialists" className="flex items-center gap-2">
                <User className="h-4 w-4" />
                <span>Spa Specialists</span>
              </TabsTrigger>
            )}
            {availableTabs.includes("restaurant") && (
              <TabsTrigger value="restaurant" className="flex items-center gap-2">
                <Utensils className="h-4 w-4" />
                <span>Restaurant</span>
              </TabsTrigger>
            )}
          </TabsList>

          {availableTabs.includes("rooms") && (
            <TabsContent value="rooms" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Room Availability</CardTitle>
                  <CardDescription>Manage room availability by date</CardDescription>
                  <div className="mt-4">
                    <Select value={selectedRoom} onValueChange={setSelectedRoom} disabled={isLoadingRooms || roomTypes.length === 0}>
                      <SelectTrigger>
                        <SelectValue placeholder={isLoadingRooms ? "Loading room types..." : "Select room type"} />
                      </SelectTrigger>
                      <SelectContent>
                        {roomTypes.map(room => (
                          <SelectItem key={room._id} value={room._id}>
                            {room.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardHeader>
                <CardContent className="w-full max-w-none">
                  {selectedRoom ? (
                    <AvailabilityCalendar
                      serviceType="room"
                      initialCapacity={getSelectedRoom().capacity}
                      name={getSelectedRoom().name}
                      serviceId={selectedRoom}
                    />
                  ) : (
                    <div className="flex justify-center items-center h-64">
                      <p>Select a room type to manage availability</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}

          {availableTabs.includes("spa") && (
            <TabsContent value="spa" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Spa Availability</CardTitle>
                  <CardDescription>Manage spa service availability by date</CardDescription>
                  <div className="mt-4">
                    <Select value={selectedSpaService} onValueChange={setSelectedSpaService} disabled={isLoadingSpaServices || spaServices.length === 0}>
                      <SelectTrigger>
                        <SelectValue placeholder={isLoadingSpaServices ? "Loading spa services..." : "Select spa service"} />
                      </SelectTrigger>
                      <SelectContent>
                        {spaServices.map(service => (
                          <SelectItem key={service._id} value={service._id}>
                            {service.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardHeader>
                <CardContent className="w-full max-w-none">
                  {selectedSpaService ? (
                    <AvailabilityCalendar
                      serviceType="spa"
                      initialCapacity={getSelectedSpaService().capacity}
                      name={getSelectedSpaService().name}
                      serviceId={selectedSpaService}
                    />
                  ) : (
                    <div className="flex justify-center items-center h-64">
                      <p>{isLoadingSpaServices ? "Loading spa services..." : "No spa services available"}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}

          {availableTabs.includes("specialists") && (
            <TabsContent value="specialists" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Spa Specialist Availability</CardTitle>
                  <CardDescription>Manage spa specialist availability by date</CardDescription>
                  <div className="mt-4">
                    <Select value={selectedSpaSpecialist} onValueChange={setSelectedSpaSpecialist} disabled={isLoadingSpaSpecialists || spaSpecialists.length === 0}>
                      <SelectTrigger>
                        <SelectValue placeholder={isLoadingSpaSpecialists ? "Loading specialists..." : "Select specialist"} />
                      </SelectTrigger>
                      <SelectContent>
                        {spaSpecialists.map(specialist => (
                          <SelectItem key={specialist._id} value={specialist._id}>
                            {specialist.name} - {specialist.role}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardHeader>
                <CardContent className="w-full max-w-none">
                  {selectedSpaSpecialist ? (
                    <AvailabilityCalendar
                      serviceType="specialist"
                      initialCapacity={getSelectedSpaSpecialist().capacity}
                      name={getSelectedSpaSpecialist().name}
                      serviceId={selectedSpaSpecialist}
                    />
                  ) : (
                    <div className="flex justify-center items-center h-64">
                      <p>{isLoadingSpaSpecialists ? "Loading spa specialists..." : "No spa specialists available"}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}

          {availableTabs.includes("restaurant") && (
            <TabsContent value="restaurant" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Restaurant Availability</CardTitle>
                  <CardDescription>Manage restaurant table availability by date</CardDescription>
                  <div className="mt-4">
                    <Select value={selectedRestaurantSection} onValueChange={setSelectedRestaurantSection} disabled={isLoadingRestaurantSections || restaurantSections.length === 0}>
                      <SelectTrigger>
                        <SelectValue placeholder={isLoadingRestaurantSections ? "Loading restaurant sections..." : "Select restaurant section"} />
                      </SelectTrigger>
                      <SelectContent>
                        {restaurantSections.map(section => (
                          <SelectItem key={section._id} value={section._id}>
                            {section.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardHeader>
                <CardContent className="w-full max-w-none">
                  {selectedRestaurantSection ? (
                    <AvailabilityCalendar
                      serviceType="restaurant"
                      initialCapacity={getSelectedRestaurantSection().capacity}
                      name={getSelectedRestaurantSection().name}
                      serviceId={selectedRestaurantSection}
                    />
                  ) : (
                    <div className="flex justify-center items-center h-64">
                      <p>{isLoadingRestaurantSections ? "Loading restaurant sections..." : "No restaurant sections available"}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}
        </Tabs>
      </div>
    </AuthGuard>
  );
};

export default AvailabilityManagementPage;
</file>

<file path="src/pages/Admin/ContentManagement/ContentManagementPage.tsx">
import ContentManagementDashboard from "@/components/Admin/ContentManagement/ContentManagementDashboard";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const ContentManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Sales & Marketing"]}>
      <div className="container mx-auto">
        <ContentManagementDashboard />
      </div>
    </AuthGuard>
  );
};

export default ContentManagementPage;
</file>

<file path="src/pages/Admin/Events/AddEventPage.tsx">
import AddEventForm from "@/components/Admin/Events/AddEventForm";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const AddEventPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Events"]}>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold mb-6">Add New Event</h1>
        <AddEventForm />
      </div>
    </AuthGuard>
  );
};

export default AddEventPage;
</file>

<file path="src/pages/Admin/Events/EventsBookingsPage.tsx">
import EventsBookingsContent from "@/components/Admin/Events/EventsBookingsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const EventsBookingsPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Events"]}>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold mb-6">Events Bookings</h1>
        <EventsBookingsContent />
      </div>
    </AuthGuard>
  );
};

export default EventsBookingsPage;
</file>

<file path="src/pages/Admin/Events/EventsManagementPage.tsx">
import EventsManagementContent from "@/components/Admin/Events/EventsManagementContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const EventsManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Events"]}>
      <div className="container mx-auto">
        <EventsManagementContent />
      </div>
    </AuthGuard>
  );
};

export default EventsManagementPage;
</file>

<file path="src/pages/Admin/Events/EventsReportsPage.tsx">
import EventsReportsContent from "@/components/Admin/Events/EventsReportsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const EventsReportsPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Events", "Sales & Marketing"]}>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold mb-6">Event Analytics & Reports</h1>
        <EventsReportsContent />
      </div>
    </AuthGuard>
  );
};

export default EventsReportsPage;
</file>

<file path="src/pages/Admin/Events/EventsScannerPage.tsx">
import QrCodeScanner from "@/components/Admin/Events/QrCodeScanner";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const EventsScannerPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Events"]}>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold mb-6">Event Check-in Scanner</h1>
        <p className="mb-6 text-gray-600">
          Scan attendee QR codes to check them in for events. Each successful scan will be recorded.
        </p>
        <QrCodeScanner />
      </div>
    </AuthGuard>
  );
};

export default EventsScannerPage;
</file>

<file path="src/pages/Admin/Housekeeping/HousekeepingPage.tsx">
import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import RoomStatusDashboard from "@/components/Admin/Housekeeping/RoomStatusDashboard";
import StaffManagement from "@/components/Admin/Housekeeping/StaffManagement";
import TaskManagement from "@/components/Admin/Housekeeping/TaskManagement";
import SuppliesManagement from "@/components/Admin/Housekeeping/SuppliesManagement";
import ScheduleManagement from "@/components/Admin/Housekeeping/ScheduleManagement";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const HousekeepingPage = () => {
  const [activeTab, setActiveTab] = useState("room-status");

  return (
    <AuthGuard requiredDepartments={["Management", "Housekeeping"]}>
      <div className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Housekeeping Management</h1>
        </div>

        <Tabs defaultValue="room-status" value={activeTab} onValueChange={setActiveTab}>
          <div className="mb-6">
            <TabsList className="grid grid-cols-1 sm:grid-cols-3 md:grid-cols-6 w-full">
              <TabsTrigger value="room-status">Room Status</TabsTrigger>
              <TabsTrigger value="tasks">Tasks</TabsTrigger>
              <TabsTrigger value="staff">Staff</TabsTrigger>
              <TabsTrigger value="supplies">Supplies</TabsTrigger>
              <TabsTrigger value="schedule">Schedule</TabsTrigger>
              <TabsTrigger value="reports">Reports</TabsTrigger>
            </TabsList>
          </div>

          <TabsContent value="room-status">
            <RoomStatusDashboard />
          </TabsContent>

          <TabsContent value="tasks">
            <TaskManagement />
          </TabsContent>

          <TabsContent value="staff">
            <StaffManagement />
          </TabsContent>

          <TabsContent value="supplies">
            <SuppliesManagement />
          </TabsContent>

          <TabsContent value="schedule">
            <ScheduleManagement />
          </TabsContent>

          <TabsContent value="reports">
            <div className="text-center py-8">
              <p className="text-gray-500">Reports content will be implemented soon.</p>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </AuthGuard>
  );
};

export default HousekeepingPage;
</file>

<file path="src/pages/Admin/Housekeeping/ReportsPage.tsx">
import HousekeepingReports from "@/components/Admin/Housekeeping/HousekeepingReports";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const ReportsPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Housekeeping"]}>
      <div className="container mx-auto">
        <HousekeepingReports />
      </div>
    </AuthGuard>
  );
};

export default ReportsPage;
</file>

<file path="src/pages/Admin/Housekeeping/SchedulePage.tsx">
import ScheduleManagement from "@/components/Admin/Housekeeping/ScheduleManagement";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const SchedulePage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Housekeeping"]}>
      <div className="container mx-auto">
        <ScheduleManagement />
      </div>
    </AuthGuard>
  );
};

export default SchedulePage;
</file>

<file path="src/pages/Admin/Housekeeping/StaffManagementPage.tsx">
import StaffManagement from "@/components/Admin/Housekeeping/StaffManagement";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const StaffManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Housekeeping"]}>
      <div className="container mx-auto">
        <StaffManagement />
      </div>
    </AuthGuard>
  );
};

export default StaffManagementPage;
</file>

<file path="src/pages/Admin/Housekeeping/SuppliesPage.tsx">
import SuppliesManagement from "@/components/Admin/Housekeeping/SuppliesManagement";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const SuppliesPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Housekeeping"]}>
      <div className="container mx-auto">
        <SuppliesManagement />
      </div>
    </AuthGuard>
  );
};

export default SuppliesPage;
</file>

<file path="src/pages/Admin/Housekeeping/TaskManagementPage.tsx">
import TaskManagement from "@/components/Admin/Housekeeping/TaskManagement";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const TaskManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Housekeeping"]}>
      <div className="container mx-auto">
        <TaskManagement />
      </div>
    </AuthGuard>
  );
};

export default TaskManagementPage;
</file>

<file path="src/pages/Admin/Loyalty/LoyaltyManagementPage.tsx">
import LoyaltyManagementContent from "@/components/Admin/Loyalty/LoyaltyManagementContent";
import { AlertCircle } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const LoyaltyManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Sales & Marketing"]}>
      <div className="container mx-auto">
        <Alert className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Mobile App Feature</AlertTitle>
          <AlertDescription>
            Loyalty program features are only available in the mobile app version, not on the website.
          </AlertDescription>
        </Alert>
        <LoyaltyManagementContent />
      </div>
    </AuthGuard>
  );
};

export default LoyaltyManagementPage;
</file>

<file path="src/pages/Admin/MeetingHall/MeetingHallPage.tsx">
import MeetingHallContent from "@/components/Admin/MeetingHall/MeetingHallContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const MeetingHallPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Front Office", "Sales & Marketing"]}>
      <div className="container mx-auto">
        <MeetingHallContent />
      </div>
    </AuthGuard>
  );
};

export default MeetingHallPage;
</file>

<file path="src/pages/Admin/PromoCode/PromoCodePage.tsx">
import PromoCodeContent from "@/components/Admin/PromoCode/PromoCodeContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const PromoCodePage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Sales & Marketing"]}>
      <div className="container mx-auto">
        <PromoCodeContent />
      </div>
    </AuthGuard>
  );
};

export default PromoCodePage;
</file>

<file path="src/pages/Admin/Refunds/RefundsPage.tsx">
import RefundsContent from "@/components/Admin/Refunds/RefundsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const RefundsPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Finance"]} requiredRoles={["Administrator"]}>
      <div className="container mx-auto">
        <RefundsContent />
      </div>
    </AuthGuard>
  );
};

export default RefundsPage;
</file>

<file path="src/pages/Admin/Reports/ReportsPage.tsx">
import ReportsContent from "@/components/Admin/Reports/ReportsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";
import { useState, useEffect } from "react";

interface UserData {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

const ReportsPage = () => {
  const [userData, setUserData] = useState<UserData | null>(null);

  useEffect(() => {
    // Get user data from localStorage
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const user = JSON.parse(userDataString);
      setUserData(user);
    }
  }, []);

  // Allow access to all departments, regardless of access level
  return (
    <AuthGuard>
      <div className="container mx-auto">
        <ReportsContent department={userData?.department || 'Management'} />
      </div>
    </AuthGuard>
  );
};

export default ReportsPage;
</file>

<file path="src/pages/Admin/Restaurant/AddMenuItemPage.tsx">
import React from 'react';
import AddMenuItemForm from '@/components/Admin/Restaurant/AddMenuItemForm';
import AuthGuard from '@/components/Admin/Auth/AuthGuard';

const AddMenuItemPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Food & Beverage"]}>
      <div className="container mx-auto py-6">
        <AddMenuItemForm />
      </div>
    </AuthGuard>
  );
};

export default AddMenuItemPage;
</file>

<file path="src/pages/Admin/Restaurant/MenuCategoriesPage.tsx">
import React from "react";
import MenuCategoriesContent from "@/components/Admin/Restaurant/MenuCategoriesContent";

const MenuCategoriesPage: React.FC = () => {
  return <MenuCategoriesContent />;
};

export default MenuCategoriesPage;
</file>

<file path="src/pages/Admin/Restaurant/RestaurantManagementPage.tsx">
import React from 'react';
import RestaurantManagementContent from '@/components/Admin/Restaurant/RestaurantManagementContent';
import AuthGuard from '@/components/Admin/Auth/AuthGuard';

const RestaurantManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Food & Beverage"]}>
      <div className="container mx-auto">
        <RestaurantManagementContent />
      </div>
    </AuthGuard>
  );
};

export default RestaurantManagementPage;
</file>

<file path="src/pages/Admin/Restaurant/RestaurantOrdersPage.tsx">
import React from 'react';
import RestaurantOrdersContent from '@/components/Admin/Restaurant/RestaurantOrdersContent';
import AuthGuard from '@/components/Admin/Auth/AuthGuard';

const RestaurantOrdersPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Food & Beverage"]}>
      <div className="container mx-auto">
        <RestaurantOrdersContent />
      </div>
    </AuthGuard>
  );
};

export default RestaurantOrdersPage;
</file>

<file path="src/pages/Admin/Restaurant/RestaurantReportsPage.tsx">
import RestaurantReportsContent from "@/components/Admin/Restaurant/RestaurantReportsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const RestaurantReportsPage = () => {
  return (
    <AuthGuard>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold mb-6">Restaurant Analytics & Reports</h1>
        <RestaurantReportsContent />
      </div>
    </AuthGuard>
  );
};

export default RestaurantReportsPage;
</file>

<file path="src/pages/Admin/Restaurant/RestaurantTablesPage.tsx">
import React from 'react';
import RestaurantTablesContent from '@/components/Admin/Restaurant/RestaurantTablesContent';
import AuthGuard from '@/components/Admin/Auth/AuthGuard';

const RestaurantTablesPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Food & Beverage"]}>
      <div className="container mx-auto">
        <RestaurantTablesContent />
      </div>
    </AuthGuard>
  );
};

export default RestaurantTablesPage;
</file>

<file path="src/pages/Admin/Rooms/AddRoomPage.tsx">
import { useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/components/ui/use-toast";
import { ArrowLeft, Upload, Plus, Edit, Trash } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import axios from "axios";

const roomFormSchema = z.object({
  name: z.string().min(2, { message: "Room name is required" }),
  type: z.string().min(1, { message: "Room type is required" }),
  category: z.string().min(1, { message: "Room category is required" }),
  bedType: z.string().min(1, { message: "Bed type is required" }),
  capacity: z.number().min(1, { message: "Capacity must be at least 1" }),
  price: z.number().min(0, { message: "Price must be a positive number" }),
  totalRooms: z.number().min(1, { message: "Must have at least 1 room" }),
  description: z.string().min(10, { message: "Description must be at least 10 characters" }),
  isRefundable: z.boolean().default(true),
  refundPolicy: z.string().optional(),
});

type RoomFormValues = z.infer<typeof roomFormSchema>;

const AddRoomPage = () => {
  const navigate = useNavigate();
  const { toast } = useToast();

  const form = useForm<RoomFormValues>({
    resolver: zodResolver(roomFormSchema),
    defaultValues: {
      name: "",
      type: "",
      category: "",
      bedType: "",
      capacity: 2,
      price: 0,
      totalRooms: 1,
      description: "",
      isRefundable: true,
      refundPolicy: "Full refund if cancelled up to 48 hours before check-in. 50% refund if cancelled up to 24 hours before check-in.",
    },
  });

  const [formData, setFormData] = useState({
    breakfastIncluded: false,
    checkInTime: "14:00",
    checkOutTime: "12:00",
    amenities: [],
    extras: [],
    payNow: true,
    payAtHotel: true,
    discount: {
      name: "",
      type: "percentage",
      value: 0,
      capacity: 0,
      active: false,
      publishWebsite: true,
      publishApp: true
    },
    cancellationPolicy: "flexible",
    publishWebsite: true,
    publishApp: true,
    active: true,
    images: []
  });

  const [availableAmenities, setAvailableAmenities] = useState([
    { id: "wifi", label: "Free Wi-Fi" },
    { id: "tv", label: "Flat-screen TV" },
    { id: "ac", label: "Air conditioning" },
    { id: "minibar", label: "Minibar" },
    { id: "safe", label: "In-room safe" },
    { id: "workspace", label: "Work desk" },
    { id: "balcony", label: "Private balcony" },
    { id: "bathtub", label: "Bathtub" },
    { id: "shower", label: "Rain shower" },
    { id: "coffeeMaker", label: "Coffee maker" },
    { id: "hairDryer", label: "Hair dryer" },
    { id: "iron", label: "Iron and ironing board" },
    { id: "robe", label: "Bathrobes and slippers" }
  ]);

  const [amenityDialogOpen, setAmenityDialogOpen] = useState(false);
  const [currentAmenity, setCurrentAmenity] = useState({ id: "", label: "" });
  const [isEditingAmenity, setIsEditingAmenity] = useState(false);

  // State for extras/add-ons
  const [extraDialogOpen, setExtraDialogOpen] = useState(false);
  const [currentExtra, setCurrentExtra] = useState({ name: "", price: 0 });
  const [isEditingExtra, setIsEditingExtra] = useState(false);
  const [currentExtraIndex, setCurrentExtraIndex] = useState(-1);

  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;

    if (type === 'number') {
      setFormData({
        ...formData,
        [name]: parseFloat(value) || 0
      });
    } else {
      setFormData({
        ...formData,
        [name]: value
      });
    }
  };

  const handleSwitchChange = (name: string, value: boolean) => {
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleAmenityChange = (id: string, checked: boolean) => {
    if (checked) {
      setFormData({
        ...formData,
        amenities: [...formData.amenities, id]
      });
    } else {
      setFormData({
        ...formData,
        amenities: formData.amenities.filter(item => item !== id)
      });
    }
  };

  const handleAddAmenity = () => {
    setCurrentAmenity({ id: "", label: "" });
    setIsEditingAmenity(false);
    setAmenityDialogOpen(true);
  };

  const handleEditAmenity = (amenity: { id: string, label: string }) => {
    setCurrentAmenity({ ...amenity });
    setIsEditingAmenity(true);
    setAmenityDialogOpen(true);
  };

  const handleDeleteAmenity = (id: string) => {
    setAvailableAmenities(availableAmenities.filter(amenity => amenity.id !== id));

    if (formData.amenities.includes(id)) {
      setFormData({
        ...formData,
        amenities: formData.amenities.filter(amenityId => amenityId !== id)
      });
    }

    toast({
      title: "Amenity Deleted",
      description: "The amenity has been removed."
    });
  };

  const saveAmenity = () => {
    if (!currentAmenity.label.trim() || !currentAmenity.id.trim()) {
      toast({
        title: "Invalid Input",
        description: "Both ID and Label are required.",
        variant: "destructive"
      });
      return;
    }

    if (isEditingAmenity) {
      setAvailableAmenities(availableAmenities.map(amenity =>
        amenity.id === currentAmenity.id ? { ...currentAmenity } : amenity
      ));

      toast({
        title: "Amenity Updated",
        description: `${currentAmenity.label} has been updated.`
      });
    } else {
      if (availableAmenities.some(amenity => amenity.id === currentAmenity.id)) {
        toast({
          title: "Duplicate ID",
          description: "This amenity ID already exists. Please use a unique ID.",
          variant: "destructive"
        });
        return;
      }

      setAvailableAmenities([...availableAmenities, { ...currentAmenity }]);

      toast({
        title: "Amenity Added",
        description: `${currentAmenity.label} has been added to the list.`
      });
    }

    setAmenityDialogOpen(false);
  };

  // Extra/Add-on handlers
  const handleAddExtra = () => {
    setCurrentExtra({ name: "", price: 0 });
    setIsEditingExtra(false);
    setCurrentExtraIndex(-1);
    setExtraDialogOpen(true);
  };

  const handleEditExtra = (extra: { name: string, price: number }, index: number) => {
    setCurrentExtra({ ...extra });
    setIsEditingExtra(true);
    setCurrentExtraIndex(index);
    setExtraDialogOpen(true);
  };

  const handleDeleteExtra = (index: number) => {
    setFormData({
      ...formData,
      extras: formData.extras.filter((_, i) => i !== index)
    });

    toast({
      title: "Extra Deleted",
      description: "The extra has been removed."
    });
  };

  const saveExtra = () => {
    if (!currentExtra.name.trim()) {
      toast({
        title: "Invalid Input",
        description: "Name is required.",
        variant: "destructive"
      });
      return;
    }

    if (currentExtra.price < 0) {
      toast({
        title: "Invalid Price",
        description: "Price must be a positive number.",
        variant: "destructive"
      });
      return;
    }

    if (isEditingExtra && currentExtraIndex >= 0) {
      // Update existing extra
      const updatedExtras = [...formData.extras];
      updatedExtras[currentExtraIndex] = { ...currentExtra };

      setFormData({
        ...formData,
        extras: updatedExtras
      });

      toast({
        title: "Extra Updated",
        description: `${currentExtra.name} has been updated.`
      });
    } else {
      // Add new extra
      setFormData({
        ...formData,
        extras: [...formData.extras, { ...currentExtra }]
      });

      toast({
        title: "Extra Added",
        description: `${currentExtra.name} has been added.`
      });
    }

    setExtraDialogOpen(false);
  };

  const handleFileSelect = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files) {
      const fileArray = Array.from(files);
      setSelectedFiles(prev => [...prev, ...fileArray]);

      // Create preview URLs
      const imageUrls = fileArray.map(file => URL.createObjectURL(file));
      setFormData(prev => ({
        ...prev,
        images: [...prev.images, ...imageUrls]
      }));
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    const files = e.dataTransfer.files;
    if (files) {
      const fileArray = Array.from(files);
      setSelectedFiles(prev => [...prev, ...fileArray]);

      // Create preview URLs
      const imageUrls = fileArray.map(file => URL.createObjectURL(file));
      setFormData(prev => ({
        ...prev,
        images: [...prev.images, ...imageUrls]
      }));
    }
  };

  const removeImage = (index: number) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const onSubmit = async (values: RoomFormValues) => {
    try {
      // Create FormData for file upload
      const formDataObj = new FormData();

      // Append form values from react-hook-form
      formDataObj.append('name', values.name);
      formDataObj.append('type', values.type);
      formDataObj.append('category', values.category);
      formDataObj.append('bedType', values.bedType);
      formDataObj.append('capacity', values.capacity.toString());
      formDataObj.append('price', values.price.toString());
      formDataObj.append('totalRooms', values.totalRooms.toString());
      formDataObj.append('description', values.description);
      formDataObj.append('isRefundable', values.isRefundable.toString());
      formDataObj.append('refundPolicy', values.refundPolicy || '');

      // Append additional form data as strings (backend expects string values)
      formDataObj.append('breakfastIncluded', formData.breakfastIncluded.toString());
      formDataObj.append('checkInTime', formData.checkInTime);
      formDataObj.append('checkOutTime', formData.checkOutTime);
      formDataObj.append('payNow', formData.payNow.toString());
      formDataObj.append('payAtHotel', formData.payAtHotel.toString());
      formDataObj.append('cancellationPolicy', formData.cancellationPolicy);
      formDataObj.append('publishWebsite', formData.publishWebsite.toString());
      formDataObj.append('publishApp', formData.publishApp.toString());
      formDataObj.append('active', formData.active.toString());

      // Append JSON fields (backend expects these as JSON strings)
      formDataObj.append('amenities', JSON.stringify(formData.amenities));
      formDataObj.append('extras', JSON.stringify(formData.extras));
      formDataObj.append('discount', JSON.stringify(formData.discount));

      // Append files
      selectedFiles.forEach(file => {
        formDataObj.append('images', file);
      });

      // Log all form data entries for debugging
      console.log("=== Form Data Contents ===");
      for (let [key, value] of formDataObj.entries()) {
        console.log(`${key}:`, value);
      }
      console.log("=== End Form Data ===");

      // Send data to backend
      const response = await axios.post("http://localhost:4000/api/rooms", formDataObj, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      if (response.data.success) {
        toast({
          title: "Room Added Successfully",
          description: `${values.name} has been added to your inventory.`
        });

        // Navigate back to rooms list
        navigate("/admin/rooms");
      } else {
        toast({
          title: "Error",
          description: response.data.message || "Failed to add room",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Error submitting room:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to add room",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2">
        <Button
          variant="outline"
          size="icon"
          onClick={() => navigate("/admin/rooms")}
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-2xl font-bold">Add New Room</h1>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Room Details</CardTitle>
                  <CardDescription>Enter the basic information about the room.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Room Name</FormLabel>
                          <FormControl>
                            <Input
                              placeholder="e.g., Deluxe King Room"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="type"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Room Type</FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select a room type" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="standard">Standard</SelectItem>
                              <SelectItem value="deluxe">Deluxe</SelectItem>
                              <SelectItem value="premium">Premium</SelectItem>
                              <SelectItem value="suite">Suite</SelectItem>
                              <SelectItem value="executive">Executive</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="category"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Room Category</FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select a category" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="single">Single</SelectItem>
                              <SelectItem value="double">Double</SelectItem>
                              <SelectItem value="twin">Twin</SelectItem>
                              <SelectItem value="family">Family</SelectItem>
                              <SelectItem value="accessible">Accessible</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="bedType"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Bed Type</FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select bed type" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="king">King</SelectItem>
                              <SelectItem value="queen">Queen</SelectItem>
                              <SelectItem value="twin">Twin</SelectItem>
                              <SelectItem value="double">Double</SelectItem>
                              <SelectItem value="single">Single</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <FormField
                      control={form.control}
                      name="capacity"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Capacity (Guests)</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              min={1}
                              max={10}
                              {...field}
                              onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="price"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Price per Night ($)</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              min={0}
                              {...field}
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="totalRooms"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Total Rooms Available</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              min={1}
                              {...field}
                              onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="checkInTime">Check-in Time</Label>
                      <Input
                        id="checkInTime"
                        name="checkInTime"
                        type="time"
                        value={formData.checkInTime}
                        onChange={handleChange}
                        required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="checkOutTime">Check-out Time</Label>
                      <Input
                        id="checkOutTime"
                        name="checkOutTime"
                        type="time"
                        value={formData.checkOutTime}
                        onChange={handleChange}
                        required
                      />
                    </div>

                    <div className="flex items-center space-x-2 pt-8">
                      <Switch
                        id="breakfastIncluded"
                        checked={formData.breakfastIncluded}
                        onCheckedChange={(checked) => handleSwitchChange("breakfastIncluded", checked)}
                      />
                      <Label htmlFor="breakfastIncluded">Breakfast Included</Label>
                    </div>
                  </div>

                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Description</FormLabel>
                        <FormControl>
                          <ReactQuill
                            theme="snow"
                            value={field.value}
                            onChange={field.onChange}
                            modules={{
                              toolbar: [
                                [{ 'header': [1, 2, 3, false] }],
                                ['bold', 'italic', 'underline', 'strike'],
                                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                                [{ 'indent': '-1' }, { 'indent': '+1' }],
                                [{ 'align': [] }],
                                ['clean']
                              ],
                            }}
                            style={{ height: '250px', marginBottom: '50px' }}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle>Room Amenities</CardTitle>
                    <CardDescription>Select the amenities available in this room type.</CardDescription>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={handleAddAmenity}
                    className="ml-auto"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Amenity
                  </Button>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-y-4">
                    {availableAmenities.map((amenity) => (
                      <div key={amenity.id} className="flex items-start space-x-2">
                        <Checkbox
                          id={amenity.id}
                          checked={formData.amenities.includes(amenity.id)}
                          onCheckedChange={(checked) => handleAmenityChange(amenity.id, checked === true)}
                          className="mt-1"
                        />
                        <div className="flex flex-col">
                          <Label htmlFor={amenity.id} className="flex items-center">
                            {amenity.label}
                            <div className="ml-2 flex space-x-1">
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                className="h-6 w-6 p-0"
                                onClick={() => handleEditAmenity(amenity)}
                              >
                                <Edit className="h-3 w-3 text-gray-500" />
                              </Button>
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                className="h-6 w-6 p-0 hover:text-red-600"
                                onClick={() => handleDeleteAmenity(amenity.id)}
                              >
                                <Trash className="h-3 w-3 text-gray-500 hover:text-red-600" />
                              </Button>
                            </div>
                          </Label>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Add-ons & Extras Card */}
              <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle>Add-ons & Extras (Optional)</CardTitle>
                    <CardDescription>Add extra services with additional pricing</CardDescription>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={handleAddExtra}
                    className="ml-auto"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Extra
                  </Button>
                </CardHeader>
                <CardContent>
                  {formData.extras.length === 0 ? (
                    <div className="text-center py-4 text-muted-foreground">
                      No extras added. Click "Add Extra" to add optional services.
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {formData.extras.map((extra, index) => (
                        <div key={index} className="flex items-center justify-between border rounded-md p-3">
                          <div className="space-y-1">
                            <p className="font-medium">{extra.name}</p>
                            <p className="text-sm text-muted-foreground">Price: ${extra.price}</p>
                          </div>
                          <div className="flex space-x-2">
                            <Button
                              type="button"
                              variant="ghost"
                              size="sm"
                              onClick={() => handleEditExtra(extra, index)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              type="button"
                              variant="ghost"
                              size="sm"
                              className="text-red-500 hover:text-red-700"
                              onClick={() => handleDeleteExtra(index)}
                            >
                              <Trash className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Payment & Booking Options</CardTitle>
                  <CardDescription>Configure payment and booking settings.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-4">
                    <Label>Payment Options</Label>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center justify-between border p-4 rounded-md">
                        <div>
                          <p className="font-medium">Pay Now</p>
                          <p className="text-sm text-gray-500">Allow guests to pay online when booking</p>
                        </div>
                        <Switch
                          checked={formData.payNow}
                          onCheckedChange={(checked) => handleSwitchChange("payNow", checked)}
                        />
                      </div>

                      <div className="flex items-center justify-between border p-4 rounded-md">
                        <div>
                          <p className="font-medium">Pay at Hotel</p>
                          <p className="text-sm text-gray-500">Allow guests to pay during check-in</p>
                        </div>
                        <Switch
                          checked={formData.payAtHotel}
                          onCheckedChange={(checked) => handleSwitchChange("payAtHotel", checked)}
                        />
                      </div>
                    </div>
                  </div>

                  <Separator className="my-4" />

                  <h3 className="text-lg font-medium">Refund Policy</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Configure refund options for this room
                  </p>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="isRefundable"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">
                              Refundable Booking
                            </FormLabel>
                            <FormDescription>
                              Allow customers to cancel and receive refunds
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />

                    {form.watch("isRefundable") && (
                      <FormField
                        control={form.control}
                        name="refundPolicy"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Refund Policy</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              value={field.value || ""}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select a refund policy" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="Full refund if cancelled up to 48 hours before check-in. 50% refund if cancelled up to 24 hours before check-in.">
                                  Standard (48h full/24h partial)
                                </SelectItem>
                                <SelectItem value="Full refund if cancelled up to 72 hours before check-in. No refund after that.">
                                  Extended (72h full/no partial)
                                </SelectItem>
                                <SelectItem value="Full refund if cancelled up to 24 hours before check-in. No refund after that.">
                                  Limited (24h full/no partial)
                                </SelectItem>
                                <SelectItem value="No refunds available for this booking.">
                                  No Refunds
                                </SelectItem>
                                <SelectItem value="custom">
                                  Custom
                                </SelectItem>
                              </SelectContent>
                            </Select>
                            <FormDescription>
                              Or enter a custom refund policy below
                            </FormDescription>
                            {field.value === "custom" && (
                              <ReactQuill
                                theme="snow"
                                value={field.value === "custom" ? "" : field.value}
                                onChange={field.onChange}
                                modules={{
                                  toolbar: [
                                    ['bold', 'italic', 'underline'],
                                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                                    ['clean']
                                  ],
                                }}
                                style={{ height: '150px', marginBottom: '50px' }}
                              />
                            )}
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}
                  </div>

                  {!form.watch("isRefundable") && (
                    <div className="bg-muted p-3 rounded-md">
                      <p className="text-sm text-muted-foreground">This is a non-refundable room. No refunds will be provided for cancellations.</p>
                    </div>
                  )}

                  <Separator className="my-4" />

                  <div className="space-y-4">
                    <Label>Cancellation Policy</Label>
                    <Select
                      onValueChange={(value) => handleSelectChange("cancellationPolicy", value)}
                      value={formData.cancellationPolicy}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select policy" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="flexible">Flexible (24 hour notice)</SelectItem>
                        <SelectItem value="moderate">Moderate (3 days notice)</SelectItem>
                        <SelectItem value="strict">Strict (7 days notice)</SelectItem>
                        <SelectItem value="custom">Custom</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Room Images</CardTitle>
                  <CardDescription>Upload photos of the room</CardDescription>
                </CardHeader>
                <CardContent>
                  <div
                    className={`border-2 border-dashed rounded-md p-6 flex flex-col items-center text-center ${isDragging ? 'border-blue-500 bg-blue-50' : 'border-gray-300'
                      }`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                  >
                    <Upload className="h-10 w-10 text-gray-400 mb-2" />
                    <p className="text-sm font-medium">Drag & drop images here</p>
                    <p className="text-xs text-gray-500 mt-1">or</p>
                    <Button
                      className="mt-2"
                      variant="outline"
                      size="sm"
                      onClick={handleFileSelect}
                    >
                      Select Files
                    </Button>
                    <input
                      type="file"
                      ref={fileInputRef}
                      onChange={handleFileChange}
                      accept="image/jpeg,image/png,image/webp"
                      multiple
                      className="hidden"
                    />
                    <p className="text-xs text-gray-500 mt-2">
                      Supports JPG, PNG, WEBP. Max 5MB each.
                    </p>
                  </div>

                  {/* Display selected images */}
                  {formData.images.length > 0 && (
                    <div className="mt-4 grid grid-cols-2 md:grid-cols-3 gap-4">
                      {formData.images.map((imageUrl, index) => (
                        <div key={index} className="relative group">
                          <img
                            src={imageUrl}
                            alt={`Room image ${index + 1}`}
                            className="w-full h-32 object-cover rounded-md"
                          />
                          <Button
                            type="button"
                            variant="destructive"
                            size="icon"
                            className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                            onClick={() => removeImage(index)}
                          >
                            <Trash className="h-4 w-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Discount Settings</CardTitle>
                  <CardDescription>Set special rates and discounts</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="discountActive">Enable Discount</Label>
                    <Switch
                      id="discountActive"
                      checked={formData.discount.active}
                      onCheckedChange={(checked) => {
                        setFormData({
                          ...formData,
                          discount: {
                            ...formData.discount,
                            active: checked
                          }
                        });
                      }}
                    />
                  </div>

                  {formData.discount.active && (
                    <div className="space-y-4 pt-2">
                      <div className="space-y-2">
                        <Label htmlFor="discountName">Discount Name (Optional)</Label>
                        <Input
                          id="discountName"
                          value={formData.discount.name}
                          onChange={(e) => {
                            setFormData({
                              ...formData,
                              discount: {
                                ...formData.discount,
                                name: e.target.value
                              }
                            });
                          }}
                          placeholder="e.g., Summer Special"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label>Discount Type</Label>
                        <div className="flex gap-4">
                          <div className="flex items-center space-x-2">
                            <input
                              type="radio"
                              id="percentage"
                              name="discountType"
                              value="percentage"
                              checked={formData.discount.type === "percentage"}
                              onChange={() => {
                                setFormData({
                                  ...formData,
                                  discount: {
                                    ...formData.discount,
                                    type: "percentage"
                                  }
                                });
                              }}
                            />
                            <Label htmlFor="percentage">Percentage (%)</Label>
                          </div>

                          <div className="flex items-center space-x-2">
                            <input
                              type="radio"
                              id="fixed"
                              name="discountType"
                              value="fixed"
                              checked={formData.discount.type === "fixed"}
                              onChange={() => {
                                setFormData({
                                  ...formData,
                                  discount: {
                                    ...formData.discount,
                                    type: "fixed"
                                  }
                                });
                              }}
                            />
                            <Label htmlFor="fixed">Fixed Amount ($)</Label>
                          </div>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="discountValue">
                          Discount {formData.discount.type === "percentage" ? "Percentage" : "Amount"}
                        </Label>
                        <Input
                          id="discountValue"
                          type="number"
                          value={formData.discount.value}
                          onChange={(e) => {
                            setFormData({
                              ...formData,
                              discount: {
                                ...formData.discount,
                                value: parseFloat(e.target.value) || 0
                              }
                            });
                          }}
                          min={0}
                          max={formData.discount.type === "percentage" ? 100 : undefined}
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="discountCapacity">Guest Limit (0 = unlimited)</Label>
                        <Input
                          id="discountCapacity"
                          type="number"
                          value={formData.discount.capacity}
                          onChange={(e) => {
                            setFormData({
                              ...formData,
                              discount: {
                                ...formData.discount,
                                capacity: parseInt(e.target.value) || 0
                              }
                            });
                          }}
                          min={0}
                        />
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Publishing Options</CardTitle>
                  <CardDescription>Control where this room appears</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">Publish on Website</p>
                      <p className="text-sm text-gray-500">Show this room on the hotel website</p>
                    </div>
                    <Switch
                      checked={formData.publishWebsite}
                      onCheckedChange={(checked) => handleSwitchChange("publishWebsite", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">Publish on Mobile App</p>
                      <p className="text-sm text-gray-500">Show this room in the mobile app</p>
                    </div>
                    <Switch
                      checked={formData.publishApp}
                      onCheckedChange={(checked) => handleSwitchChange("publishApp", checked)}
                    />
                  </div>

                  <div className="flex items-center justify-between pt-2">
                    <div>
                      <p className="font-medium">Room Status</p>
                      <p className="text-sm text-gray-500">Is this room active and bookable?</p>
                    </div>
                    <Switch
                      checked={formData.active}
                      onCheckedChange={(checked) => handleSwitchChange("active", checked)}
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="pt-6">
                  <Button type="submit" className="w-full bg-hotel-primary hover:bg-opacity-90">
                    Save Room
                  </Button>
                  <Button type="button" variant="outline" className="w-full mt-2" onClick={() => navigate("/admin/rooms")}>
                    Cancel
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        </form>
      </Form>

      <Dialog open={amenityDialogOpen} onOpenChange={setAmenityDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>{isEditingAmenity ? "Edit Amenity" : "Add New Amenity"}</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="amenity-id">Amenity ID</Label>
              <Input
                id="amenity-id"
                value={currentAmenity.id}
                onChange={(e) => setCurrentAmenity({ ...currentAmenity, id: e.target.value })}
                placeholder="e.g., wifi"
                disabled={isEditingAmenity}
              />
              <p className="text-xs text-gray-500">Unique identifier for this amenity</p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="amenity-label">Display Name</Label>
              <Input
                id="amenity-label"
                value={currentAmenity.label}
                onChange={(e) => setCurrentAmenity({ ...currentAmenity, label: e.target.value })}
                placeholder="e.g., Free Wi-Fi"
              />
              <p className="text-xs text-gray-500">Name displayed to users</p>
            </div>
          </div>
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => setAmenityDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button
              type="button"
              onClick={saveAmenity}
            >
              {isEditingAmenity ? "Update" : "Add"} Amenity
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Extra Dialog */}
      <Dialog open={extraDialogOpen} onOpenChange={setExtraDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>{isEditingExtra ? "Edit Extra" : "Add New Extra"}</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="extra-name">Name</Label>
              <Input
                id="extra-name"
                value={currentExtra.name}
                onChange={(e) => setCurrentExtra({ ...currentExtra, name: e.target.value })}
                placeholder="e.g., Hot Stones"
              />
              <p className="text-xs text-gray-500">Name of the extra service</p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="extra-price">Price ($)</Label>
              <Input
                id="extra-price"
                type="number"
                min="0"
                step="0.01"
                value={currentExtra.price}
                onChange={(e) => setCurrentExtra({
                  ...currentExtra,
                  price: parseFloat(e.target.value) || 0
                })}
                placeholder="e.g., 15.00"
              />
              <p className="text-xs text-gray-500">Additional cost for this service</p>
            </div>
          </div>
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => setExtraDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button
              type="button"
              onClick={saveExtra}
            >
              {isEditingExtra ? "Update" : "Add"} Extra
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AddRoomPage;
</file>

<file path="src/pages/Admin/Rooms/EditRoomPage.tsx">
import { useState, useEffect, useRef } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
    CardFooter,
} from "@/components/ui/card";
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/components/ui/use-toast";
import { ArrowLeft, Upload, Plus, Edit, Trash, X, Check } from "lucide-react";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogFooter,
} from "@/components/ui/dialog";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import axios from "axios";

const roomFormSchema = z.object({
    name: z.string().min(2, { message: "Room name is required" }),
    type: z.string().min(1, { message: "Room type is required" }),
    category: z.string().min(1, { message: "Room category is required" }),
    bedType: z.string().min(1, { message: "Bed type is required" }),
    capacity: z.number().min(1, { message: "Capacity must be at least 1" }),
    price: z.number().min(0, { message: "Price must be a positive number" }),
    totalRooms: z.number().min(1, { message: "Must have at least 1 room" }),
    description: z.string().min(10, { message: "Description must be at least 10 characters" }),
    isRefundable: z.boolean().default(true),
    refundPolicy: z.string().optional(),
    breakfastIncluded: z.boolean().default(false),
    checkInTime: z.string().optional(),
    checkOutTime: z.string().optional(),
    amenities: z.array(z.string()).default([]),
    payNow: z.boolean().default(true),
    payAtHotel: z.boolean().default(true),
    discount: z.record(z.any()).optional(),
    cancellationPolicy: z.string().optional(),
    publishWebsite: z.boolean().default(true),
    publishApp: z.boolean().default(true),
    active: z.boolean().default(true),
    images: z.array(z.string()).default([]),
});

type RoomFormValues = z.infer<typeof roomFormSchema>;

const EditRoomPage = () => {
    const navigate = useNavigate();
    const { id } = useParams();
    const { toast } = useToast();
    const [loading, setLoading] = useState(true);
    const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [isDragging, setIsDragging] = useState(false);
    const [amenityDialogOpen, setAmenityDialogOpen] = useState(false);
    const [currentAmenity, setCurrentAmenity] = useState({ id: "", label: "" });
    const [isEditingAmenity, setIsEditingAmenity] = useState(false);
    const [availableAmenities, setAvailableAmenities] = useState([
        { id: "wifi", label: "Free Wi-Fi" },
        { id: "tv", label: "Flat-screen TV" },
        { id: "ac", label: "Air conditioning" },
        { id: "minibar", label: "Minibar" },
        { id: "safe", label: "In-room safe" },
        { id: "workspace", label: "Work desk" },
        { id: "balcony", label: "Private balcony" },
        { id: "bathtub", label: "Bathtub" },
        { id: "shower", label: "Rain shower" },
        { id: "coffeeMaker", label: "Coffee maker" },
        { id: "hairDryer", label: "Hair dryer" },
        { id: "iron", label: "Iron and ironing board" },
        { id: "robe", label: "Bathrobes and slippers" }
    ]);

    const [formData, setFormData] = useState({
        breakfastIncluded: false,
        checkInTime: "14:00",
        checkOutTime: "12:00",
        amenities: [],
        payNow: true,
        payAtHotel: true,
        discount: {
            name: "",
            type: "percentage",
            value: 0,
            capacity: 0,
            active: false,
            publishWebsite: true,
            publishApp: true
        },
        cancellationPolicy: "flexible",
        publishWebsite: true,
        publishApp: true,
        active: true,
        images: []
    });

    const form = useForm<RoomFormValues>({
        resolver: zodResolver(roomFormSchema),
        defaultValues: {
            name: "",
            type: "",
            category: "",
            bedType: "",
            capacity: 2,
            price: 0,
            totalRooms: 1,
            description: "",
            isRefundable: true,
            refundPolicy: "Full refund if cancelled up to 48 hours before check-in. 50% refund if cancelled up to 24 hours before check-in.",
            breakfastIncluded: false,
            checkInTime: "14:00",
            checkOutTime: "12:00",
            amenities: [],
            payNow: true,
            payAtHotel: true,
            discount: {
                name: "",
                type: "percentage",
                value: 0,
                capacity: 0,
                active: false,
                publishWebsite: true,
                publishApp: true
            },
            cancellationPolicy: "flexible",
            publishWebsite: true,
            publishApp: true,
            active: true,
            images: []
        }
    });

    useEffect(() => {
        const fetchRoomData = async () => {
            try {
                const response = await axios.get(`http://localhost:4000/api/rooms/${id}`);
                if (response.data.success) {
                    const roomData = response.data.data;
                    form.reset({
                        name: roomData.name,
                        type: roomData.type,
                        category: roomData.category,
                        bedType: roomData.bedType,
                        capacity: roomData.capacity,
                        price: roomData.price,
                        totalRooms: roomData.totalRooms,
                        description: roomData.description,
                        isRefundable: roomData.isRefundable,
                        refundPolicy: roomData.refundPolicy,
                        breakfastIncluded: roomData.breakfastIncluded,
                        checkInTime: roomData.checkInTime,
                        checkOutTime: roomData.checkOutTime,
                        amenities: roomData.amenities || [],
                        payNow: roomData.payNow,
                        payAtHotel: roomData.payAtHotel,
                        discount: roomData.discount || {},
                        cancellationPolicy: roomData.cancellationPolicy,
                        publishWebsite: roomData.publishWebsite,
                        publishApp: roomData.publishApp,
                        active: roomData.active,
                        images: roomData.images || []
                    });
                    setFormData({
                        breakfastIncluded: roomData.breakfastIncluded,
                        checkInTime: roomData.checkInTime || "14:00",
                        checkOutTime: roomData.checkOutTime || "12:00",
                        amenities: roomData.amenities || [],
                        payNow: roomData.payNow,
                        payAtHotel: roomData.payAtHotel,
                        discount: roomData.discount || {
                            name: "",
                            type: "percentage",
                            value: 0,
                            capacity: 0,
                            active: false,
                            publishWebsite: true,
                            publishApp: true
                        },
                        cancellationPolicy: roomData.cancellationPolicy || "flexible",
                        publishWebsite: roomData.publishWebsite,
                        publishApp: roomData.publishApp,
                        active: roomData.active,
                        images: roomData.images || []
                    });
                    console.log("Loaded room data:", roomData);
                }
            } catch (error) {
                console.error("Error fetching room data:", error);
                toast({
                    title: "Error",
                    description: "Failed to fetch room data",
                    variant: "destructive",
                });
                navigate("/admin/rooms");
            } finally {
                setLoading(false);
            }
        };

        if (id) {
            fetchRoomData();
        }
    }, [id, form, navigate, toast]);

    // Handler functions
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value, type } = e.target;
        if (type === 'number') {
            setFormData({
                ...formData,
                [name]: parseFloat(value) || 0
            });
        } else {
            setFormData({
                ...formData,
                [name]: value
            });
        }
    };

    const handleSwitchChange = (name: string, value: boolean) => {
        setFormData({
            ...formData,
            [name]: value
        });
    };

    const handleSelectChange = (name: string, value: string) => {
        setFormData({
            ...formData,
            [name]: value
        });
    };

    const handleAmenityChange = (id: string, checked: boolean) => {
        if (checked) {
            setFormData({
                ...formData,
                amenities: [...formData.amenities, id]
            });
        } else {
            setFormData({
                ...formData,
                amenities: formData.amenities.filter(item => item !== id)
            });
        }
    };

    const handleAddAmenity = () => {
        setCurrentAmenity({ id: "", label: "" });
        setIsEditingAmenity(false);
        setAmenityDialogOpen(true);
    };

    const handleEditAmenity = (amenity: { id: string, label: string }) => {
        setCurrentAmenity({ ...amenity });
        setIsEditingAmenity(true);
        setAmenityDialogOpen(true);
    };

    const handleDeleteAmenity = (id: string) => {
        setAvailableAmenities(availableAmenities.filter(amenity => amenity.id !== id));
        if (formData.amenities.includes(id)) {
            setFormData({
                ...formData,
                amenities: formData.amenities.filter(amenityId => amenityId !== id)
            });
        }
        toast({
            title: "Amenity Deleted",
            description: "The amenity has been removed."
        });
    };

    const saveAmenity = () => {
        if (!currentAmenity.label.trim() || !currentAmenity.id.trim()) {
            toast({
                title: "Invalid Input",
                description: "Both ID and Label are required.",
                variant: "destructive"
            });
            return;
        }

        if (isEditingAmenity) {
            setAvailableAmenities(availableAmenities.map(amenity =>
                amenity.id === currentAmenity.id ? { ...currentAmenity } : amenity
            ));
            toast({
                title: "Amenity Updated",
                description: `${currentAmenity.label} has been updated.`
            });
        } else {
            if (availableAmenities.some(amenity => amenity.id === currentAmenity.id)) {
                toast({
                    title: "Duplicate ID",
                    description: "This amenity ID already exists. Please use a unique ID.",
                    variant: "destructive"
                });
                return;
            }
            setAvailableAmenities([...availableAmenities, { ...currentAmenity }]);
            toast({
                title: "Amenity Added",
                description: `${currentAmenity.label} has been added to the list.`
            });
        }
        setAmenityDialogOpen(false);
    };

    // File handling functions
    const handleFileSelect = () => {
        fileInputRef.current?.click();
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (files) {
            const fileArray = Array.from(files);
            setSelectedFiles(prev => [...prev, ...fileArray]);

            // Create preview URLs
            const imageUrls = fileArray.map(file => URL.createObjectURL(file));
            setFormData(prev => ({
                ...prev,
                images: [...prev.images, ...imageUrls]
            }));
        }
    };

    const handleDragOver = (e: React.DragEvent) => {
        e.preventDefault();
        setIsDragging(true);
    };

    const handleDragLeave = (e: React.DragEvent) => {
        e.preventDefault();
        setIsDragging(false);
    };

    const handleDrop = (e: React.DragEvent) => {
        e.preventDefault();
        setIsDragging(false);

        const files = e.dataTransfer.files;
        if (files) {
            const fileArray = Array.from(files);
            setSelectedFiles(prev => [...prev, ...fileArray]);

            // Create preview URLs
            const imageUrls = fileArray.map(file => URL.createObjectURL(file));
            setFormData(prev => ({
                ...prev,
                images: [...prev.images, ...imageUrls]
            }));
        }
    };

    const removeImage = (index: number) => {
        // If we're removing a new file (that has a URL created by URL.createObjectURL)
        if (typeof formData.images[index] === 'string' && formData.images[index].startsWith('blob:')) {
            // Remove from selectedFiles array too
            const fileIndex = selectedFiles.findIndex((_, i) => i === index - (formData.images.length - selectedFiles.length));
            if (fileIndex !== -1) {
                setSelectedFiles(prev => prev.filter((_, i) => i !== fileIndex));
            }
        }

        // Remove from formData.images
        setFormData(prev => ({
            ...prev,
            images: prev.images.filter((_, i) => i !== index)
        }));
    };

    const onSubmit = async (values: RoomFormValues) => {
        try {
            const formDataObj = new FormData();

            // Log what we're submitting
            console.log("Submitting data:", values);
            console.log("FormData:", formData);
            console.log("Selected files:", selectedFiles);

            // Create a combined data object with all values
            const combinedData = {
                ...values,
                // Override specific values from formData
                breakfastIncluded: formData.breakfastIncluded,
                checkInTime: formData.checkInTime,
                checkOutTime: formData.checkOutTime,
                amenities: formData.amenities,
                payNow: formData.payNow,
                payAtHotel: formData.payAtHotel,
                discount: formData.discount,
                cancellationPolicy: formData.cancellationPolicy,
                publishWebsite: formData.publishWebsite,
                publishApp: formData.publishApp,
                active: formData.active
            };

            console.log("Combined data:", combinedData);

            // Append all data as single values (not arrays)
            Object.entries(combinedData).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    if (key === 'images') {
                        // Skip images as they'll be handled separately
                    } else if (key === 'amenities') {
                        formDataObj.append(key, JSON.stringify(value));
                    } else if (typeof value === 'boolean') {
                        formDataObj.append(key, value.toString());
                    } else if (typeof value === 'object') {
                        formDataObj.append(key, JSON.stringify(value));
                    } else {
                        formDataObj.append(key, String(value));
                    }
                }
            });

            // Only include existing server images (not the blob URLs)
            const existingImages = formData.images.filter(img =>
                typeof img === 'string' && !img.startsWith('blob:')
            );
            formDataObj.append('existingImages', JSON.stringify(existingImages));

            // Append files - only new files are in the selectedFiles array
            if (selectedFiles.length > 0) {
                selectedFiles.forEach(file => {
                    formDataObj.append('images', file);
                });
            }

            // Log the FormData before sending
            console.log("Form data entries:");
            for (let [key, value] of formDataObj.entries()) {
                console.log(`${key}:`, value);
            }

            const response = await axios.put(
                `http://localhost:4000/api/rooms/${id}`,
                formDataObj,
                {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                }
            );

            if (response.data.success) {
                toast({
                    title: "Room Updated Successfully",
                    description: `${values.name} has been updated.`
                });
                navigate("/admin/rooms");
            }
        } catch (error) {
            console.error("Error updating room:", error);
            toast({
                title: "Error",
                description: error.response?.data?.message || "Failed to update room",
                variant: "destructive"
            });
        }
    };

    if (loading) {
        return <div className="flex items-center justify-center h-screen">
            <div className="text-xl">Loading...</div>
        </div>;
    }

    const getImageUrl = (imagePath: string) => {
        if (!imagePath) return '';

        // If it's a blob URL (new uploaded image preview)
        if (typeof imagePath === 'string' && imagePath.startsWith('blob:')) {
            return imagePath;
        }

        // If it's a full URL
        if (typeof imagePath === 'string' && imagePath.startsWith('http')) {
            return imagePath;
        }

        // Otherwise it's a relative path from the server
        return `http://localhost:4000/uploads/rooms/${imagePath}`;
    };

    return (
        <div className="space-y-6">
            <div className="flex items-center gap-2">
                <Button
                    variant="outline"
                    size="icon"
                    onClick={() => navigate("/admin/rooms")}
                >
                    <ArrowLeft className="h-4 w-4" />
                </Button>
                <h1 className="text-2xl font-bold">Edit Room</h1>
            </div>

            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)}>
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                        <div className="lg:col-span-2 space-y-6">
                            {/* Room Details Card */}
                            <Card>
                                <CardHeader>
                                    <CardTitle>Room Details</CardTitle>
                                    <CardDescription>Update the basic information about the room.</CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <FormField
                                            control={form.control}
                                            name="name"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Room Name</FormLabel>
                                                    <FormControl>
                                                        <Input
                                                            placeholder="e.g., Deluxe King Room"
                                                            {...field}
                                                        />
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />

                                        <FormField
                                            control={form.control}
                                            name="type"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Room Type</FormLabel>
                                                    <Select
                                                        onValueChange={field.onChange}
                                                        defaultValue={field.value}
                                                    >
                                                        <FormControl>
                                                            <SelectTrigger>
                                                                <SelectValue placeholder="Select a room type" />
                                                            </SelectTrigger>
                                                        </FormControl>
                                                        <SelectContent>
                                                            <SelectItem value="standard">Standard</SelectItem>
                                                            <SelectItem value="deluxe">Deluxe</SelectItem>
                                                            <SelectItem value="premium">Premium</SelectItem>
                                                            <SelectItem value="suite">Suite</SelectItem>
                                                            <SelectItem value="executive">Executive</SelectItem>
                                                        </SelectContent>
                                                    </Select>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />
                                    </div>

                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <FormField
                                            control={form.control}
                                            name="category"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Room Category</FormLabel>
                                                    <Select
                                                        onValueChange={field.onChange}
                                                        defaultValue={field.value}
                                                    >
                                                        <FormControl>
                                                            <SelectTrigger>
                                                                <SelectValue placeholder="Select a category" />
                                                            </SelectTrigger>
                                                        </FormControl>
                                                        <SelectContent>
                                                            <SelectItem value="single">Single</SelectItem>
                                                            <SelectItem value="double">Double</SelectItem>
                                                            <SelectItem value="twin">Twin</SelectItem>
                                                            <SelectItem value="family">Family</SelectItem>
                                                            <SelectItem value="accessible">Accessible</SelectItem>
                                                        </SelectContent>
                                                    </Select>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />

                                        <FormField
                                            control={form.control}
                                            name="bedType"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Bed Type</FormLabel>
                                                    <Select
                                                        onValueChange={field.onChange}
                                                        defaultValue={field.value}
                                                    >
                                                        <FormControl>
                                                            <SelectTrigger>
                                                                <SelectValue placeholder="Select bed type" />
                                                            </SelectTrigger>
                                                        </FormControl>
                                                        <SelectContent>
                                                            <SelectItem value="king">King</SelectItem>
                                                            <SelectItem value="queen">Queen</SelectItem>
                                                            <SelectItem value="twin">Twin</SelectItem>
                                                            <SelectItem value="double">Double</SelectItem>
                                                            <SelectItem value="single">Single</SelectItem>
                                                        </SelectContent>
                                                    </Select>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />
                                    </div>

                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <FormField
                                            control={form.control}
                                            name="capacity"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Capacity (Guests)</FormLabel>
                                                    <FormControl>
                                                        <Input
                                                            type="number"
                                                            min={1}
                                                            {...field}
                                                            onChange={(e) => {
                                                                field.onChange(Number(e.target.value))
                                                            }}
                                                        />
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />

                                        <FormField
                                            control={form.control}
                                            name="price"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Price per Night ($)</FormLabel>
                                                    <FormControl>
                                                        <Input
                                                            type="number"
                                                            min={0}
                                                            {...field}
                                                            onChange={(e) => {
                                                                field.onChange(Number(e.target.value))
                                                            }}
                                                        />
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />

                                        <FormField
                                            control={form.control}
                                            name="totalRooms"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Total Rooms</FormLabel>
                                                    <FormControl>
                                                        <Input
                                                            type="number"
                                                            min={1}
                                                            {...field}
                                                            onChange={(e) => {
                                                                field.onChange(Number(e.target.value))
                                                            }}
                                                        />
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />
                                    </div>

                                    <FormField
                                        control={form.control}
                                        name="description"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Description</FormLabel>
                                                <FormControl>
                                                    <ReactQuill
                                                        theme="snow"
                                                        value={field.value}
                                                        onChange={field.onChange}
                                                        modules={{
                                                            toolbar: [
                                                                [{ 'header': [1, 2, 3, false] }],
                                                                ['bold', 'italic', 'underline', 'strike'],
                                                                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                                                                [{ 'indent': '-1' }, { 'indent': '+1' }],
                                                                [{ 'align': [] }],
                                                                ['clean']
                                                            ],
                                                        }}
                                                        style={{ height: '250px', marginBottom: '50px' }}
                                                    />
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />
                                </CardContent>
                            </Card>

                            {/* Amenities Card */}
                            <Card>
                                <CardHeader>
                                    <CardTitle>Amenities</CardTitle>
                                    <CardDescription>Select the amenities available in this room.</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                                        {availableAmenities.map((amenity) => (
                                            <div className="flex items-center space-x-2" key={amenity.id}>
                                                <Checkbox
                                                    id={`amenity-${amenity.id}`}
                                                    checked={formData.amenities.includes(amenity.id)}
                                                    onCheckedChange={(checked) =>
                                                        handleAmenityChange(amenity.id, checked as boolean)
                                                    }
                                                />
                                                <label
                                                    htmlFor={`amenity-${amenity.id}`}
                                                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                                                >
                                                    {amenity.label}
                                                </label>
                                            </div>
                                        ))}
                                    </div>

                                    <div className="mt-4 flex justify-end">
                                        <Button
                                            type="button"
                                            variant="outline"
                                            size="sm"
                                            onClick={handleAddAmenity}
                                        >
                                            <Plus className="h-4 w-4 mr-1" /> Add New Amenity
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>

                            {/* Room Options Card */}
                            <Card>
                                <CardHeader>
                                    <CardTitle>Room Options</CardTitle>
                                    <CardDescription>Configure additional room options and services.</CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <Label htmlFor="breakfastIncluded" className="font-medium">
                                                Breakfast Included
                                            </Label>
                                            <p className="text-sm text-gray-500">
                                                Room rate includes breakfast
                                            </p>
                                        </div>
                                        <Switch
                                            id="breakfastIncluded"
                                            checked={formData.breakfastIncluded}
                                            onCheckedChange={(checked) =>
                                                handleSwitchChange("breakfastIncluded", checked)
                                            }
                                        />
                                    </div>

                                    <Separator />

                                    <div className="space-y-4">
                                        <Label className="font-medium">Check-in/Check-out Time</Label>
                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label htmlFor="checkInTime" className="text-sm">Check-in</Label>
                                                <Input
                                                    id="checkInTime"
                                                    type="time"
                                                    value={formData.checkInTime}
                                                    onChange={(e) => handleChange(e)}
                                                    name="checkInTime"
                                                />
                                            </div>
                                            <div className="space-y-2">
                                                <Label htmlFor="checkOutTime" className="text-sm">Check-out</Label>
                                                <Input
                                                    id="checkOutTime"
                                                    type="time"
                                                    value={formData.checkOutTime}
                                                    onChange={(e) => handleChange(e)}
                                                    name="checkOutTime"
                                                />
                                            </div>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>

                            {/* Payment and Cancellation Policies */}
                            <Card>
                                <CardHeader>
                                    <CardTitle>Payment & Cancellation</CardTitle>
                                    <CardDescription>Set payment options and cancellation policies.</CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-6">
                                    <div className="space-y-4">
                                        <Label className="font-medium">Payment Options</Label>
                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="flex items-center justify-between border rounded-md p-3">
                                                <Label htmlFor="payNow" className="font-normal">
                                                    Pay Online
                                                </Label>
                                                <Switch
                                                    id="payNow"
                                                    checked={formData.payNow}
                                                    onCheckedChange={(checked) =>
                                                        handleSwitchChange("payNow", checked)
                                                    }
                                                />
                                            </div>
                                            <div className="flex items-center justify-between border rounded-md p-3">
                                                <Label htmlFor="payAtHotel" className="font-normal">
                                                    Pay at Hotel
                                                </Label>
                                                <Switch
                                                    id="payAtHotel"
                                                    checked={formData.payAtHotel}
                                                    onCheckedChange={(checked) =>
                                                        handleSwitchChange("payAtHotel", checked)
                                                    }
                                                />
                                            </div>
                                        </div>
                                    </div>

                                    <Separator />

                                    <div className="space-y-4">
                                        <div className="flex items-center justify-between">
                                            <Label htmlFor="isRefundable" className="font-medium">
                                                Refundable
                                            </Label>
                                            <FormField
                                                control={form.control}
                                                name="isRefundable"
                                                render={({ field }) => (
                                                    <Switch
                                                        id="isRefundable"
                                                        checked={field.value}
                                                        onCheckedChange={field.onChange}
                                                    />
                                                )}
                                            />
                                        </div>

                                        <FormField
                                            control={form.control}
                                            name="refundPolicy"
                                            render={({ field }) => (
                                                <FormItem>
                                                    <FormLabel>Refund Policy</FormLabel>
                                                    <FormControl>
                                                        <ReactQuill
                                                            theme="snow"
                                                            value={field.value}
                                                            onChange={field.onChange}
                                                            modules={{
                                                                toolbar: [
                                                                    ['bold', 'italic', 'underline'],
                                                                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                                                                    ['clean']
                                                                ],
                                                            }}
                                                            style={{ height: '150px', marginBottom: '50px' }}
                                                            readOnly={!form.watch("isRefundable")}
                                                        />
                                                    </FormControl>
                                                    <FormMessage />
                                                </FormItem>
                                            )}
                                        />
                                    </div>

                                    <div className="space-y-4">
                                        <Label className="font-medium">Cancellation Policy</Label>
                                        <RadioGroup
                                            value={formData.cancellationPolicy}
                                            onValueChange={(value) => handleSelectChange("cancellationPolicy", value)}
                                        >
                                            <div className="flex items-start space-x-2">
                                                <RadioGroupItem value="flexible" id="flexible" />
                                                <Label htmlFor="flexible" className="font-normal">
                                                    <span className="block font-medium">Flexible</span>
                                                    <span className="block text-sm text-gray-500">Free cancellation up to 24 hours before check-in</span>
                                                </Label>
                                            </div>
                                            <div className="flex items-start space-x-2">
                                                <RadioGroupItem value="moderate" id="moderate" />
                                                <Label htmlFor="moderate" className="font-normal">
                                                    <span className="block font-medium">Moderate</span>
                                                    <span className="block text-sm text-gray-500">Free cancellation up to 5 days before check-in</span>
                                                </Label>
                                            </div>
                                            <div className="flex items-start space-x-2">
                                                <RadioGroupItem value="strict" id="strict" />
                                                <Label htmlFor="strict" className="font-normal">
                                                    <span className="block font-medium">Strict</span>
                                                    <span className="block text-sm text-gray-500">No refunds for cancellations</span>
                                                </Label>
                                            </div>
                                        </RadioGroup>
                                    </div>
                                </CardContent>
                            </Card>

                            {/* Discounts Card */}
                            <Card>
                                <CardHeader>
                                    <CardTitle>Discounts</CardTitle>
                                    <CardDescription>Set promotional discounts for this room.</CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="flex items-center justify-between">
                                        <Label className="font-medium">Enable Discount</Label>
                                        <Switch
                                            checked={formData.discount.active}
                                            onCheckedChange={(checked) => {
                                                setFormData({
                                                    ...formData,
                                                    discount: {
                                                        ...formData.discount,
                                                        active: checked
                                                    }
                                                });
                                            }}
                                        />
                                    </div>

                                    {formData.discount.active && (
                                        <div className="space-y-4 mt-4">
                                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                                <div className="space-y-2">
                                                    <Label htmlFor="discountName">Discount Name</Label>
                                                    <Input
                                                        id="discountName"
                                                        placeholder="e.g., Summer Special"
                                                        value={formData.discount.name}
                                                        onChange={(e) => {
                                                            setFormData({
                                                                ...formData,
                                                                discount: {
                                                                    ...formData.discount,
                                                                    name: e.target.value
                                                                }
                                                            });
                                                        }}
                                                    />
                                                </div>
                                                <div className="space-y-2">
                                                    <Label htmlFor="discountType">Discount Type</Label>
                                                    <Select
                                                        value={formData.discount.type}
                                                        onValueChange={(value) => {
                                                            setFormData({
                                                                ...formData,
                                                                discount: {
                                                                    ...formData.discount,
                                                                    type: value
                                                                }
                                                            });
                                                        }}
                                                    >
                                                        <SelectTrigger id="discountType">
                                                            <SelectValue placeholder="Select discount type" />
                                                        </SelectTrigger>
                                                        <SelectContent>
                                                            <SelectItem value="percentage">Percentage (%)</SelectItem>
                                                            <SelectItem value="fixed">Fixed Amount ($)</SelectItem>
                                                        </SelectContent>
                                                    </Select>
                                                </div>
                                            </div>

                                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                                <div className="space-y-2">
                                                    <Label htmlFor="discountValue">
                                                        {formData.discount.type === "percentage" ? "Percentage (%)" : "Amount ($)"}
                                                    </Label>
                                                    <Input
                                                        id="discountValue"
                                                        type="number"
                                                        min="0"
                                                        max={formData.discount.type === "percentage" ? "100" : undefined}
                                                        placeholder={formData.discount.type === "percentage" ? "10" : "50"}
                                                        value={formData.discount.value}
                                                        onChange={(e) => {
                                                            setFormData({
                                                                ...formData,
                                                                discount: {
                                                                    ...formData.discount,
                                                                    value: parseFloat(e.target.value) || 0
                                                                }
                                                            });
                                                        }}
                                                    />
                                                </div>
                                                <div className="space-y-2">
                                                    <Label htmlFor="discountCapacity">Rooms Available at Discount</Label>
                                                    <Input
                                                        id="discountCapacity"
                                                        type="number"
                                                        min="0"
                                                        placeholder="5"
                                                        value={formData.discount.capacity}
                                                        onChange={(e) => {
                                                            setFormData({
                                                                ...formData,
                                                                discount: {
                                                                    ...formData.discount,
                                                                    capacity: parseInt(e.target.value) || 0
                                                                }
                                                            });
                                                        }}
                                                    />
                                                    <p className="text-xs text-gray-500">Set to 0 for unlimited</p>
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </CardContent>
                            </Card>
                        </div>

                        {/* Right side column with room images */}
                        <div className="space-y-6">
                            <Card>
                                <CardHeader>
                                    <CardTitle>Room Images</CardTitle>
                                    <CardDescription>Upload photos of the room.</CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div
                                        className={`border-2 border-dashed rounded-lg p-4 text-center cursor-pointer transition-colors ${isDragging ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-blue-400 hover:bg-gray-50'
                                            }`}
                                        onClick={handleFileSelect}
                                        onDragOver={handleDragOver}
                                        onDragLeave={handleDragLeave}
                                        onDrop={handleDrop}
                                    >
                                        <input
                                            ref={fileInputRef}
                                            type="file"
                                            multiple
                                            accept="image/*"
                                            className="hidden"
                                            onChange={handleFileChange}
                                        />
                                        <Upload className="h-8 w-8 mx-auto mb-2 text-gray-400" />
                                        <p className="text-sm text-gray-500">
                                            Drag and drop your images here, or click to browse
                                        </p>
                                        <p className="text-xs text-gray-400 mt-1">
                                            Supported formats: JPEG, PNG, WebP
                                        </p>
                                    </div>

                                    {formData.images.length > 0 && (
                                        <div className="grid grid-cols-2 gap-2 mt-4">
                                            {formData.images.map((image, index) => (
                                                <div key={index} className="relative group">
                                                    <img
                                                        src={typeof image === 'string' ? getImageUrl(image) : image}
                                                        alt={`Room preview ${index + 1}`}
                                                        className="h-24 w-full object-cover rounded"
                                                    />
                                                    <button
                                                        type="button"
                                                        className="absolute top-1 right-1 bg-white rounded-full p-1 shadow-sm opacity-0 group-hover:opacity-100 transition-opacity"
                                                        onClick={() => removeImage(index)}
                                                    >
                                                        <X className="h-4 w-4 text-red-500" />
                                                    </button>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </CardContent>
                            </Card>

                            {/* Publishing Settings */}
                            <Card>
                                <CardHeader>
                                    <CardTitle>Publishing Settings</CardTitle>
                                    <CardDescription>Control where this room is displayed.</CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <Label htmlFor="publishWebsite" className="font-medium">
                                                Website
                                            </Label>
                                            <p className="text-sm text-gray-500">
                                                Show this room on the hotel website
                                            </p>
                                        </div>
                                        <Switch
                                            id="publishWebsite"
                                            checked={formData.publishWebsite}
                                            onCheckedChange={(checked) =>
                                                handleSwitchChange("publishWebsite", checked)
                                            }
                                        />
                                    </div>

                                    <div className="flex items-center justify-between">
                                        <div>
                                            <Label htmlFor="publishApp" className="font-medium">
                                                Mobile App
                                            </Label>
                                            <p className="text-sm text-gray-500">
                                                Show this room on the mobile app
                                            </p>
                                        </div>
                                        <Switch
                                            id="publishApp"
                                            checked={formData.publishApp}
                                            onCheckedChange={(checked) =>
                                                handleSwitchChange("publishApp", checked)
                                            }
                                        />
                                    </div>

                                    <div className="flex items-center justify-between">
                                        <div>
                                            <Label htmlFor="active" className="font-medium">
                                                Active
                                            </Label>
                                            <p className="text-sm text-gray-500">
                                                Room is available for booking
                                            </p>
                                        </div>
                                        <Switch
                                            id="active"
                                            checked={formData.active}
                                            onCheckedChange={(checked) =>
                                                handleSwitchChange("active", checked)
                                            }
                                        />
                                    </div>
                                </CardContent>
                            </Card>
                        </div>
                    </div>

                    <div className="mt-8 border-t pt-6">
                        <Card className="bg-gray-50">
                            <CardContent className="p-6">
                                <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
                                    <div>
                                        <h3 className="text-lg font-semibold">Ready to update this room?</h3>
                                        <p className="text-sm text-gray-500">Save your changes to update this room in your inventory.</p>
                                    </div>
                                    <div className="flex gap-4">
                                        <Button
                                            type="button"
                                            variant="outline"
                                            onClick={() => navigate("/admin/rooms")}
                                        >
                                            Cancel
                                        </Button>
                                        <Button
                                            type="submit"
                                            size="lg"
                                            className="bg-hotel-primary hover:bg-opacity-90"
                                        >
                                            <Check className="mr-2 h-4 w-4" /> Update Room
                                        </Button>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>
                    </div>
                </form>
            </Form>

            {/* Amenity Dialog */}
            <Dialog open={amenityDialogOpen} onOpenChange={setAmenityDialogOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>
                            {isEditingAmenity ? "Edit Amenity" : "Add New Amenity"}
                        </DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4 py-4">
                        <div className="space-y-2">
                            <Label htmlFor="amenityId">ID</Label>
                            <Input
                                id="amenityId"
                                value={currentAmenity.id}
                                onChange={(e) => setCurrentAmenity({ ...currentAmenity, id: e.target.value })}
                                placeholder="e.g., wifi"
                                disabled={isEditingAmenity}
                            />
                            <p className="text-xs text-gray-500">
                                A unique identifier for this amenity (no spaces).
                            </p>
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="amenityLabel">Label</Label>
                            <Input
                                id="amenityLabel"
                                value={currentAmenity.label}
                                onChange={(e) => setCurrentAmenity({ ...currentAmenity, label: e.target.value })}
                                placeholder="e.g., Free Wi-Fi"
                            />
                            <p className="text-xs text-gray-500">
                                The display name shown to users.
                            </p>
                        </div>
                    </div>
                    <DialogFooter>
                        <Button
                            variant="outline"
                            onClick={() => setAmenityDialogOpen(false)}
                        >
                            Cancel
                        </Button>
                        <Button onClick={saveAmenity}>
                            {isEditingAmenity ? "Save Changes" : "Add Amenity"}
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default EditRoomPage;
</file>

<file path="src/pages/Admin/Rooms/RoomBookingsPage.tsx">
import { useState } from "react";
import { DateRangePicker } from "@/components/ui/date-range-picker";
import { DateRange } from "react-day-picker";
import { format } from "date-fns";
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter
} from "@/components/ui/dialog";
import { toast } from "sonner";
import { 
  Search, 
  Filter, 
  RefreshCw, 
  Eye, 
  Edit, 
  Trash2, 
  RotateCcw,
  CheckCircle,
  XCircle,
  Globe,
  Smartphone
} from "lucide-react";

const RoomBookingsPage = () => {
  const [dateRange, setDateRange] = useState<DateRange | undefined>();
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [showRefundDialog, setShowRefundDialog] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [showDetailsDialog, setShowDetailsDialog] = useState(false);

  // Mock data for bookings
  const bookings = [
    {
      id: "BK001",
      guestName: "John Smith",
      roomName: "Classic Room",
      checkIn: new Date("2025-04-12"),
      checkOut: new Date("2025-04-15"),
      totalAmount: 597,
      status: "confirmed",
      guests: 2,
      specialRequests: "High floor if possible",
      isRefundable: true,
      refundPolicy: "Full refund if cancelled up to 48 hours before check-in. 50% refund if cancelled up to 24 hours before check-in.",
      email: "john.smith@example.com",
      phone: "+1-555-123-4567",
      source: "website"
    },
    {
      id: "BK002",
      guestName: "Sarah Johnson",
      roomName: "Deluxe Suite",
      checkIn: new Date("2025-04-15"),
      checkOut: new Date("2025-04-20"),
      totalAmount: 1745,
      status: "confirmed",
      guests: 3,
      specialRequests: "Early check-in requested",
      isRefundable: true,
      refundPolicy: "Full refund if cancelled up to 72 hours before check-in. No refund after that.",
      email: "sarah.johnson@example.com",
      phone: "+1-555-987-6543",
      source: "app"
    },
    {
      id: "BK003",
      guestName: "Michael Davis",
      roomName: "Presidential Suite",
      checkIn: new Date("2025-04-20"),
      checkOut: new Date("2025-04-25"),
      totalAmount: 2995,
      status: "pending",
      guests: 2,
      specialRequests: "",
      isRefundable: false,
      refundPolicy: "This is a non-refundable booking. No refunds will be provided for cancellations.",
      email: "michael.davis@example.com",
      phone: "+1-555-456-7890",
      source: "website"
    },
    {
      id: "BK004",
      guestName: "Emma Wilson",
      roomName: "Family Room",
      checkIn: new Date("2025-04-20"),
      checkOut: new Date("2025-04-23"),
      totalAmount: 897,
      status: "cancelled",
      guests: 4,
      specialRequests: "Baby crib needed",
      isRefundable: true,
      refundPolicy: "Full refund if cancelled up to 48 hours before check-in. 50% refund if cancelled up to 24 hours before check-in.",
      email: "emma.wilson@example.com",
      phone: "+1-555-789-0123",
      source: "app"
    }
  ];

  // Filter bookings based on search query, date range, and status
  const filteredBookings = bookings.filter(booking => {
    // Filter by search query
    const matchesSearch = booking.guestName.toLowerCase().includes(searchQuery.toLowerCase()) || 
                           booking.roomName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           booking.id.toLowerCase().includes(searchQuery.toLowerCase());
    
    // Filter by date range
    const matchesDateRange = !dateRange?.from || !dateRange?.to || 
                           (booking.checkIn >= dateRange.from && booking.checkOut <= (dateRange.to || dateRange.from));
    
    // Filter by status
    const matchesStatus = statusFilter === "all" || booking.status === statusFilter;
    
    return matchesSearch && matchesDateRange && matchesStatus;
  });

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case "confirmed":
        return "bg-green-100 text-green-800";
      case "pending":
        return "bg-yellow-100 text-yellow-800";
      case "cancelled":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const handleRefundRequest = (booking) => {
    setSelectedBooking(booking);
    setShowRefundDialog(true);
  };

  const handleProcessRefund = () => {
    toast.success(`Refund request for booking ${selectedBooking?.id} has been initiated`);
    setShowRefundDialog(false);
  };

  const handleViewDetails = (booking) => {
    setSelectedBooking(booking);
    setShowDetailsDialog(true);
  };

  const getSourceIcon = (source) => {
    if (source === "website") {
      return <Globe className="h-4 w-4 text-blue-500" />;
    } else if (source === "app") {
      return <Smartphone className="h-4 w-4 text-green-500" />;
    }
    return null;
  };

  // Check if user is super admin (for simplicity, just checking if we have access to the refund page)
  const [isSuperAdmin, setIsSuperAdmin] = useState(() => {
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const userData = JSON.parse(userDataString);
      return userData.role === "Administrator" || userData.accessLevel === "Full Access";
    }
    return false;
  });

  return (
    <div className="container mx-auto py-6">
      <h1 className="text-2xl font-semibold mb-6">Room Bookings</h1>
      
      <div className="bg-white rounded-lg shadow p-6 mb-6">
        <div className="flex flex-col md:flex-row gap-4 mb-6">
          <div className="flex-1">
            <Label htmlFor="date-range">Date Range</Label>
            <DateRangePicker 
              value={dateRange} 
              onValueChange={setDateRange} 
              className="w-full" 
            />
          </div>
          
          <div className="flex-1">
            <Label htmlFor="status">Booking Status</Label>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger id="status">
                <SelectValue placeholder="All Statuses" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="confirmed">Confirmed</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
                <SelectItem value="cancelled">Cancelled</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="flex-1">
            <Label htmlFor="search">Search</Label>
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input 
                id="search"
                placeholder="Search by guest name or room..." 
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
        </div>
        
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm">
              <Filter className="h-4 w-4 mr-2" />
              More Filters
            </Button>
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </Button>
          </div>
          <div>
            <span className="text-sm text-gray-500">
              Showing {filteredBookings.length} of {bookings.length} bookings
            </span>
          </div>
        </div>
        
        <Table>
          <TableCaption>List of room bookings</TableCaption>
          <TableHeader>
            <TableRow>
              <TableHead>Booking ID</TableHead>
              <TableHead>Guest</TableHead>
              <TableHead>Room</TableHead>
              <TableHead>Check-in</TableHead>
              <TableHead>Check-out</TableHead>
              <TableHead>Guests</TableHead>
              <TableHead>Amount</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Refundable</TableHead>
              {isSuperAdmin && <TableHead>Source</TableHead>}
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredBookings.length > 0 ? (
              filteredBookings.map((booking) => (
                <TableRow key={booking.id}>
                  <TableCell className="font-medium">{booking.id}</TableCell>
                  <TableCell>{booking.guestName}</TableCell>
                  <TableCell>{booking.roomName}</TableCell>
                  <TableCell>{format(booking.checkIn, "MMM dd, yyyy")}</TableCell>
                  <TableCell>{format(booking.checkOut, "MMM dd, yyyy")}</TableCell>
                  <TableCell>{booking.guests}</TableCell>
                  <TableCell>${booking.totalAmount}</TableCell>
                  <TableCell>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeClass(booking.status)}`}>
                      {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                    </span>
                  </TableCell>
                  <TableCell>
                    {booking.isRefundable ? (
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    ) : (
                      <XCircle className="h-4 w-4 text-red-500" />
                    )}
                  </TableCell>
                  {isSuperAdmin && (
                    <TableCell>
                      <div className="flex items-center gap-1.5">
                        {getSourceIcon(booking.source)}
                        <span className="text-xs capitalize">{booking.source}</span>
                      </div>
                    </TableCell>
                  )}
                  <TableCell className="text-right">
                    <div className="flex justify-end space-x-2">
                      <Button variant="ghost" size="sm" onClick={() => handleViewDetails(booking)}>
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <Edit className="h-4 w-4" />
                      </Button>
                      {isSuperAdmin && booking.status !== "cancelled" && booking.isRefundable && (
                        <Button 
                          size="sm" 
                          variant="outline" 
                          className="text-blue-500 hover:text-blue-700"
                          onClick={() => handleRefundRequest(booking)}
                        >
                          <RotateCcw className="h-4 w-4 mr-1" /> Refund
                        </Button>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={isSuperAdmin ? 11 : 10} className="text-center py-8 text-gray-500">
                  No bookings found matching your criteria
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <Dialog open={showRefundDialog} onOpenChange={setShowRefundDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Process Refund</DialogTitle>
            <DialogDescription>
              {selectedBooking?.isRefundable 
                ? "Are you sure you want to process a refund for this booking?" 
                : "This booking is marked as non-refundable."}
            </DialogDescription>
          </DialogHeader>
          
          {selectedBooking && (
            <div className="py-4">
              <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                <h3 className="text-sm font-medium mb-2">Refund Policy:</h3>
                <p className="text-sm text-gray-700">{selectedBooking.refundPolicy}</p>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-sm font-medium">Booking ID:</p>
                  <p className="text-sm">{selectedBooking.id}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Guest:</p>
                  <p className="text-sm">{selectedBooking.guestName}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Amount:</p>
                  <p className="text-sm">${selectedBooking.totalAmount}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">Contact:</p>
                  <p className="text-sm">{selectedBooking.email}</p>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowRefundDialog(false)}>Cancel</Button>
            <Button 
              disabled={selectedBooking && !selectedBooking.isRefundable} 
              onClick={handleProcessRefund}
            >
              Process Refund
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Booking Details</DialogTitle>
            <DialogDescription>
              Complete information about the booking
            </DialogDescription>
          </DialogHeader>
          
          {selectedBooking && (
            <div className="mt-4 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Booking Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Booking ID:</span>
                      <span className="text-sm">{selectedBooking.id}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Status:</span>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadgeClass(selectedBooking.status)}`}>
                        {selectedBooking.status.charAt(0).toUpperCase() + selectedBooking.status.slice(1)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Check-in:</span>
                      <span className="text-sm">{format(selectedBooking.checkIn, "MMM dd, yyyy")}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Check-out:</span>
                      <span className="text-sm">{format(selectedBooking.checkOut, "MMM dd, yyyy")}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Room:</span>
                      <span className="text-sm">{selectedBooking.roomName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Guests:</span>
                      <span className="text-sm">{selectedBooking.guests}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Amount:</span>
                      <span className="text-sm">${selectedBooking.totalAmount}</span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-muted-foreground mb-2">Guest Information</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Name:</span>
                      <span className="text-sm">{selectedBooking.guestName}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Email:</span>
                      <span className="text-sm">{selectedBooking.email}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Phone:</span>
                      <span className="text-sm">{selectedBooking.phone}</span>
                    </div>
                    <div className="flex justify-between items-start">
                      <span className="text-sm font-medium">Special Requests:</span>
                      <span className="text-sm text-right">{selectedBooking.specialRequests || "None"}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div>
                <div className="flex items-center justify-between mb-2">
                  <h4 className="text-sm font-medium text-muted-foreground">Refund Policy</h4>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm">Refundable:</span>
                    <Switch checked={selectedBooking.isRefundable} id="refundable-toggle" disabled />
                  </div>
                </div>
                <p className="text-sm p-3 bg-gray-50 rounded-md">{selectedBooking.refundPolicy}</p>
              </div>
              
              {isSuperAdmin && selectedBooking.status !== "cancelled" && selectedBooking.isRefundable && (
                <div className="flex justify-end">
                  <Button onClick={() => {
                    setShowDetailsDialog(false);
                    setTimeout(() => handleRefundRequest(selectedBooking), 100);
                  }}>
                    <RotateCcw className="h-4 w-4 mr-2" />
                    Process Refund
                  </Button>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default RoomBookingsPage;
</file>

<file path="src/pages/Admin/Rooms/RoomsManagementPage.tsx">
import { useState, useEffect } from "react";
import { Eye, Edit, Trash, Plus, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, Search } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import axios from "axios";
import { useToast } from "@/components/ui/use-toast";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useSearch } from "@/contexts/SearchContext";
import 'react-quill/dist/quill.snow.css';

interface Room {
  _id: string;
  name: string;
  type: string;
  category: string;
  bedType: string;
  capacity: number;
  price: number;
  totalRooms: number;
  availableRooms: number;
  description: string;
  isRefundable: boolean;
  refundPolicy: string;
  breakfastIncluded: boolean;
  checkInTime: string;
  checkOutTime: string;
  amenities: string[];
  payNow: boolean;
  payAtHotel: boolean;
  discount: {
    name: string;
    type: string;
    value: number;
    capacity: number;
    active: boolean;
    publishWebsite: boolean;
    publishApp: boolean;
  };
  cancellationPolicy: string;
  publishWebsite: boolean;
  publishApp: boolean;
  active: boolean;
  images: string[];
}

const roomFormSchema = z.object({
  name: z.string().min(2, { message: "Room name is required" }),
  type: z.string().min(1, { message: "Room type is required" }),
  category: z.string().min(1, { message: "Room category is required" }),
  bedType: z.string().min(1, { message: "Bed type is required" }),
  capacity: z.number().min(1, { message: "Capacity must be at least 1" }),
  price: z.number().min(0, { message: "Price must be a positive number" }),
  totalRooms: z.number().min(1, { message: "Must have at least 1 room" }),
  description: z.string().min(10, { message: "Description must be at least 10 characters" }),
  isRefundable: z.boolean().default(true),
  refundPolicy: z.string().optional(),
  breakfastIncluded: z.boolean().default(false),
  checkInTime: z.string().optional(),
  checkOutTime: z.string().optional(),
  amenities: z.array(z.string()).default([]),
  payNow: z.boolean().default(true),
  payAtHotel: z.boolean().default(true),
  discount: z.record(z.any()).optional(),
  cancellationPolicy: z.string().optional(),
  publishWebsite: z.boolean().default(true),
  publishApp: z.boolean().default(true),
  active: z.boolean().default(true),
  images: z.array(z.string()).default([]),
});

type RoomFormValues = z.infer<typeof roomFormSchema>;

const RoomsManagementPage = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { searchQuery, setSearchQuery, searchTarget, setSearchTarget } = useSearch();
  const [rooms, setRooms] = useState<Room[]>([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState<Room | null>(null);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [filterStatus, setFilterStatus] = useState<"all" | "active" | "inactive">("all");
  const [sortOrder, setSortOrder] = useState<"none" | "lowToHigh" | "highToLow">("none");
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [formData, setFormData] = useState({});

  const form = useForm<RoomFormValues>({
    resolver: zodResolver(roomFormSchema),
    defaultValues: {
      name: "",
      type: "",
      category: "",
      bedType: "",
      capacity: 2,
      price: 0,
      totalRooms: 1,
      description: "",
      isRefundable: true,
      refundPolicy: "Full refund if cancelled up to 48 hours before check-in. 50% refund if cancelled up to 24 hours before check-in.",
      breakfastIncluded: false,
      checkInTime: "14:00",
      checkOutTime: "12:00",
      amenities: [],
      payNow: true,
      payAtHotel: true,
      discount: {
        name: "",
        type: "percentage",
        value: 0,
        capacity: 0,
        active: false,
        publishWebsite: true,
        publishApp: true
      },
      cancellationPolicy: "flexible",
      publishWebsite: true,
      publishApp: true,
      active: true,
      images: []
    }
  });

  const fetchRooms = async () => {
    try {
      const response = await axios.get("http://localhost:4000/api/rooms");
      if (response.data.success) {
        const roomsWithAvailability = response.data.data.map(room => ({
          ...room,
          availableRooms: room.availableRooms !== undefined ? room.availableRooms : room.totalRooms
        }));
        setRooms(roomsWithAvailability);
      }
    } catch (error) {
      console.error("Error fetching rooms:", error);
      toast({
        title: "Error",
        description: "Failed to fetch rooms",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Set the search target when component mounts
    setSearchTarget('rooms');

    // Clean up when component unmounts
    return () => {
      setSearchTarget('');
      setSearchQuery('');
    };
  }, [setSearchTarget, setSearchQuery]);

  useEffect(() => {
    fetchRooms();
  }, []);

  const handleDeleteRoom = async (id: string) => {
    try {
      const response = await axios.delete(`http://localhost:4000/api/rooms/${id}`);
      if (response.data.success) {
        setRooms(rooms.filter(room => room._id !== id));
        toast({
          title: "Success",
          description: "Room deleted successfully",
        });
      }
    } catch (error) {
      console.error("Error deleting room:", error);
      toast({
        title: "Error",
        description: "Failed to delete room",
        variant: "destructive",
      });
    }
  };

  const handleViewRoom = (room: Room) => {
    setSelectedRoom(room);
    setShowModal(true);
  };

  const handleNextImage = () => {
    if (selectedRoom?.images) {
      setCurrentImageIndex((prev) =>
        prev === selectedRoom.images.length - 1 ? 0 : prev + 1
      );
    }
  };

  const handlePrevImage = () => {
    if (selectedRoom?.images) {
      setCurrentImageIndex((prev) =>
        prev === 0 ? selectedRoom.images.length - 1 : prev - 1
      );
    }
  };

  const getFilteredAndSortedRooms = () => {
    let filteredRooms = [...rooms];

    // Apply status filter
    if (filterStatus !== "all") {
      filteredRooms = filteredRooms.filter(room =>
        filterStatus === "active" ? room.active : !room.active
      );
    }

    // Apply search filter across multiple fields
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filteredRooms = filteredRooms.filter(room => {
        // Room Type (name)
        if (room.name.toLowerCase().includes(query)) return true;
        // Category
        if (room.category.toLowerCase().includes(query)) return true;
        // Room Type
        if (room.type.toLowerCase().includes(query)) return true;
        // Capacity
        if (room.capacity.toString().includes(query)) return true;
        // Price/Night
        if (room.price.toString().includes(query)) return true;

        // Status - more explicit matching
        if (room.active && "active".toLowerCase().includes(query)) return true;
        if (!room.active && "inactive".toLowerCase().includes(query)) return true;
        if (!room.active && "maintenance".toLowerCase().includes(query)) return true;

        // Availability - search by numbers
        const availStr = `${room.availableRooms || 0}/${room.totalRooms}`;
        if (availStr.includes(query)) return true;

        return false;
      });
    }

    // Apply price sort
    if (sortOrder !== "none") {
      filteredRooms.sort((a, b) => {
        if (sortOrder === "lowToHigh") {
          return a.price - b.price;
        } else {
          return b.price - a.price;
        }
      });
    }

    return filteredRooms;
  };

  const filteredRooms = getFilteredAndSortedRooms();

  const handleSortChange = (order: "none" | "lowToHigh" | "highToLow") => {
    setSortOrder(order);
  };

  const getImageUrl = (imagePath: string) => {
    if (!imagePath) return 'https://via.placeholder.com/800x600?text=No+Image+Available';
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    // Construct the image URL by adding the rooms folder path
    return `http://localhost:4000/uploads/rooms/${imagePath}`;
  };

  const getAmenityColor = (index: number) => {
    const colors = [
      'bg-blue-100 text-blue-800',
      'bg-green-100 text-green-800',
      'bg-purple-100 text-purple-800',
      'bg-yellow-100 text-yellow-800',
      'bg-pink-100 text-pink-800',
      'bg-indigo-100 text-indigo-800',
    ];
    return colors[index % colors.length];
  };

  const handleUpdateRoom = (room: Room) => {
    navigate(`/admin/rooms/edit/${room._id}`);
  };

  const onSubmit = async (values: RoomFormValues) => {
    try {
      const formDataObj = new FormData();

      // Append form values from react-hook-form
      Object.entries(values).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          formDataObj.append(key, String(value));
        }
      });

      // Append additional form data
      Object.entries(formData).forEach(([key, value]) => {
        if (key !== 'images' && value !== undefined && value !== null) {
          if (typeof value === 'object') {
            formDataObj.append(key, JSON.stringify(value));
          } else {
            formDataObj.append(key, String(value));
          }
        }
      });

      // Append files
      selectedFiles.forEach(file => {
        formDataObj.append('images', file);
      });

      const response = await axios.put(
        `http://localhost:4000/api/rooms/${selectedRoom?._id}`,
        formDataObj,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      if (response.data.success) {
        toast({
          title: "Room Updated Successfully",
          description: `${values.name} has been updated.`
        });
        fetchRooms();
      }
    } catch (error) {
      console.error("Error updating room:", error);
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to update room",
        variant: "destructive"
      });
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <h1 className="text-2xl font-bold">Room Management</h1>
        <div className="flex gap-4 w-full md:w-auto">
          <Link to="/admin/rooms/add">
            <Button className="bg-hotel-primary hover:bg-opacity-90 whitespace-nowrap">
              <Plus className="mr-2 h-4 w-4" />
              Add New Room
            </Button>
          </Link>
        </div>
      </div>

      <Card>
        <CardHeader className="pb-2">
          <CardTitle>Room Inventory</CardTitle>
          <CardDescription>
            Manage your hotel's room types and availability
            {searchQuery && (
              <span className="ml-2 font-medium text-primary">
                Showing results for "{searchQuery}"
              </span>
            )}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex justify-between items-center mb-4">
            <div className="flex gap-2">
              <Button
                variant={filterStatus === "all" ? "default" : "outline"}
                size="sm"
                onClick={() => setFilterStatus("all")}
              >
                All
              </Button>
              <Button
                variant={filterStatus === "active" ? "default" : "outline"}
                size="sm"
                onClick={() => setFilterStatus("active")}
              >
                Active
              </Button>
              <Button
                variant={filterStatus === "inactive" ? "default" : "outline"}
                size="sm"
                onClick={() => setFilterStatus("inactive")}
              >
                Inactive
              </Button>
            </div>

            <div className="flex gap-2 items-center">
              <span className="text-sm text-gray-500">Price:</span>
              <Button
                variant={sortOrder === "none" ? "default" : "outline"}
                size="sm"
                onClick={() => handleSortChange("none")}
              >
                <ArrowUpDown className="h-4 w-4 mr-1" />
                Default
              </Button>
              <Button
                variant={sortOrder === "lowToHigh" ? "default" : "outline"}
                size="sm"
                onClick={() => handleSortChange("lowToHigh")}
              >
                <ArrowUp className="h-4 w-4 mr-1" />
                Low to High
              </Button>
              <Button
                variant={sortOrder === "highToLow" ? "default" : "outline"}
                size="sm"
                onClick={() => handleSortChange("highToLow")}
              >
                <ArrowDown className="h-4 w-4 mr-1" />
                High to Low
              </Button>
            </div>
          </div>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Room Type</TableHead>
                <TableHead>Category</TableHead>
                <TableHead>Capacity</TableHead>
                <TableHead>Price/Night</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Availability</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredRooms.map((room) => (
                <TableRow key={room._id}>
                  <TableCell className="font-medium">{room.name}</TableCell>
                  <TableCell>{room.category}</TableCell>
                  <TableCell>{room.capacity} guests</TableCell>
                  <TableCell>${room.price}</TableCell>
                  <TableCell>
                    <Badge variant={room.active ? "outline" : "secondary"}>
                      {room.active ? "Active" : "Maintenance"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <span>{room.availableRooms !== undefined ? room.availableRooms : room.totalRooms}/{room.totalRooms} rooms</span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => handleViewRoom(room)}
                      >
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => handleUpdateRoom(room)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="icon"
                        className="text-red-500 hover:text-red-700"
                        onClick={() => handleDeleteRoom(room._id)}
                      >
                        <Trash className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium text-gray-500">Total Rooms</p>
                <p className="text-2xl font-bold">{rooms.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium text-gray-500">Available Rooms</p>
                <p className="text-2xl font-bold">{rooms.filter(room => room.active).length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium text-gray-500">Rooms under Maintenance</p>
                <p className="text-2xl font-bold">{rooms.filter(room => !room.active).length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Room Details Modal */}
      <Dialog open={showModal} onOpenChange={setShowModal}>
        <DialogContent className="max-w-4xl p-0 overflow-auto max-h-[90vh]">
          {selectedRoom && (
            <div className="flex flex-col md:flex-row">
              {/* Image Gallery */}
              <div className="w-full md:w-1/2 relative max-h-[80vh] overflow-hidden">
                {selectedRoom.images && selectedRoom.images.length > 0 ? (
                  <>
                    <div className="relative h-full">
                      <img
                        src={getImageUrl(selectedRoom.images[currentImageIndex])}
                        alt={selectedRoom.name}
                        className="w-full h-full object-contain max-h-[70vh]"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = 'https://via.placeholder.com/800x600?text=No+Image+Available';
                        }}
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-30" />
                    </div>
                    <div className="absolute bottom-4 left-4 right-4 flex justify-between items-center">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="bg-white/80 hover:bg-white"
                        onClick={handlePrevImage}
                      >
                        <ChevronLeft className="h-6 w-6" />
                      </Button>
                      <div className="flex gap-2">
                        {selectedRoom.images.map((_, index) => (
                          <div
                            key={index}
                            className={`w-2 h-2 rounded-full ${index === currentImageIndex
                              ? "bg-white"
                              : "bg-white/50"
                              }`}
                          />
                        ))}
                      </div>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="bg-white/80 hover:bg-white"
                        onClick={handleNextImage}
                      >
                        <ChevronRight className="h-6 w-6" />
                      </Button>
                    </div>
                  </>
                ) : (
                  <div className="h-64 md:h-full bg-gray-100 flex items-center justify-center">
                    <span className="text-gray-400">No images available</span>
                  </div>
                )}
              </div>

              {/* Room Details */}
              <div className="w-full md:w-1/2 p-6 space-y-6 overflow-y-auto max-h-[80vh]">
                <DialogHeader className="space-y-2">
                  <DialogTitle className="text-2xl font-bold">
                    {selectedRoom.name}
                  </DialogTitle>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="bg-gray-100">
                      {selectedRoom.category}
                    </Badge>
                    <Badge
                      variant="outline"
                      className={selectedRoom.active ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}
                    >
                      {selectedRoom.active ? "Active" : "Maintenance"}
                    </Badge>
                  </div>
                </DialogHeader>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-1">
                    <p className="text-sm text-gray-500">Capacity</p>
                    <p className="font-medium">{selectedRoom.capacity} guests</p>
                  </div>
                  <div className="space-y-1">
                    <p className="text-sm text-gray-500">Price per Night</p>
                    <p className="font-medium">${selectedRoom.price}</p>
                  </div>
                  <div className="space-y-1">
                    <p className="text-sm text-gray-500">Total Rooms</p>
                    <p className="font-medium">{selectedRoom.totalRooms}</p>
                  </div>
                  <div className="space-y-1">
                    <p className="text-sm text-gray-500">Available Rooms</p>
                    <p className="font-medium">{selectedRoom.availableRooms !== undefined ? selectedRoom.availableRooms : selectedRoom.totalRooms}</p>
                  </div>
                </div>

                {selectedRoom.description && (
                  <div className="space-y-2">
                    <h3 className="font-semibold">Description</h3>
                    <div 
                      className="text-gray-600 rich-text-content"
                      dangerouslySetInnerHTML={{ __html: selectedRoom.description }}
                    />
                  </div>
                )}

                {selectedRoom.amenities && selectedRoom.amenities.length > 0 && (
                  <div className="space-y-2">
                    <h3 className="font-semibold">Amenities</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedRoom.amenities.map((amenity, index) => (
                        <Badge
                          key={index}
                          variant="outline"
                          className={`${getAmenityColor(index)}`}
                        >
                          {amenity}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {(selectedRoom.checkInTime || selectedRoom.checkOutTime) && (
                  <div className="grid grid-cols-2 gap-4">
                    {selectedRoom.checkInTime && (
                      <div className="space-y-1">
                        <p className="text-sm text-gray-500">Check-in Time</p>
                        <p className="font-medium text-blue-600">{selectedRoom.checkInTime}</p>
                      </div>
                    )}
                    {selectedRoom.checkOutTime && (
                      <div className="space-y-1">
                        <p className="text-sm text-gray-500">Check-out Time</p>
                        <p className="font-medium text-blue-600">{selectedRoom.checkOutTime}</p>
                      </div>
                    )}
                  </div>
                )}

                {selectedRoom.isRefundable && selectedRoom.refundPolicy && (
                  <div className="space-y-2">
                    <h3 className="font-semibold">Refund Policy</h3>
                    <div 
                      className="text-gray-600 rich-text-content"
                      dangerouslySetInnerHTML={{ __html: selectedRoom.refundPolicy }}
                    />
                  </div>
                )}

                {selectedRoom.cancellationPolicy && (
                  <div className="space-y-2">
                    <h3 className="font-semibold">Cancellation Policy</h3>
                    <p className="text-gray-600">{selectedRoom.cancellationPolicy}</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default RoomsManagementPage;
</file>

<file path="src/pages/Admin/Rooms/RoomsReportsPage.tsx">
import RoomsReportsContent from "@/components/Admin/Rooms/RoomsReportsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const RoomsReportsPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Front Office", "Housekeeping"]}>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold mb-6">Room Analytics & Reports</h1>
        <RoomsReportsContent />
      </div>
    </AuthGuard>
  );
};

export default RoomsReportsPage;
</file>

<file path="src/pages/Admin/Settings/SettingsPage.tsx">
import SettingsContent from "@/components/Admin/Settings/SettingsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const SettingsPage = () => {
  return (
    <AuthGuard requiredRoles={["Administrator"]} requiredDepartments={["Management"]}>
      <div className="container mx-auto">
        <SettingsContent />
      </div>
    </AuthGuard>
  );
};

export default SettingsPage;
</file>

<file path="src/pages/Admin/Spa/AddServicePage.tsx">
import React from 'react';
import AddSpaServiceForm from "@/components/Admin/Spa/AddSpaServiceForm";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const AddServicePage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Spa & Wellness"]}>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold mb-6">Add New Service</h1>
        <AddSpaServiceForm />
      </div>
    </AuthGuard>
  );
};

export default AddServicePage;
</file>

<file path="src/pages/Admin/Spa/AddSpecialistPage.tsx">
import AddSpecialistForm from "@/components/Admin/Spa/AddSpecialistForm";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const AddSpecialistPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Spa & Wellness", "Human Resources"]}>
      <div className="container mx-auto">
        <h1 className="text-2xl font-bold text-gray-800 mb-6">Add Spa Specialist</h1>
        <AddSpecialistForm />
      </div>
    </AuthGuard>
  );
};

export default AddSpecialistPage;
</file>

<file path="src/pages/Admin/Spa/EditServicePage.tsx">
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import AddSpaServiceForm from "@/components/Admin/Spa/AddSpaServiceForm";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";
import { toast } from 'sonner';
import { Loader2 } from 'lucide-react';

const EditServicePage = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const [isLoading, setIsLoading] = useState(true);
    const [service, setService] = useState(null);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchService = async () => {
            try {
                setIsLoading(true);
                const response = await axios.get(`http://localhost:4000/api/spa/services/${id}`);

                if (response.data.success) {
                    setService(response.data.data);
                    console.log("Service data loaded:", response.data.data);
                } else {
                    setError('Failed to load service details');
                    toast.error('Failed to load service details');
                }
            } catch (error) {
                console.error("Error fetching service:", error);
                setError('Error fetching service details');
                toast.error('Error fetching service details');
            } finally {
                setIsLoading(false);
            }
        };

        if (id) {
            fetchService();
        }
    }, [id]);

    if (isLoading) {
        return (
            <div className="flex justify-center items-center h-48">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <span className="ml-2">Loading service details...</span>
            </div>
        );
    }

    if (error || !service) {
        return (
            <div className="container mx-auto p-4">
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                    <p>{error || 'Service not found'}</p>
                    <button
                        className="mt-2 text-blue-600 hover:underline"
                        onClick={() => navigate('/admin/spa')}
                    >
                        Return to Spa Management
                    </button>
                </div>
            </div>
        );
    }

    return (
        <AuthGuard requiredDepartments={["Management", "Spa & Wellness"]}>
            <div className="container mx-auto">
                <h1 className="text-2xl font-bold mb-6">Edit Service</h1>
                <AddSpaServiceForm serviceToEdit={service} />
            </div>
        </AuthGuard>
    );
};

export default EditServicePage;
</file>

<file path="src/pages/Admin/Spa/SpaBookingsPage.tsx">
import SpaBookingsContent from "@/components/Admin/Spa/SpaBookingsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const SpaBookingsPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Spa & Wellness"]}>
      <div className="container mx-auto">
        <SpaBookingsContent />
      </div>
    </AuthGuard>
  );
};

export default SpaBookingsPage;
</file>

<file path="src/pages/Admin/Spa/SpaCategoriesPage.tsx">
import React from 'react';
import SpaCategoriesContent from "@/components/Admin/Spa/SpaCategoriesContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const SpaCategoriesPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Spa & Wellness"]}>
      <div className="container mx-auto">
        <SpaCategoriesContent />
      </div>
    </AuthGuard>
  );
};

export default SpaCategoriesPage;
</file>

<file path="src/pages/Admin/Spa/SpaManagementPage.tsx">
import SpaManagementContent from "@/components/Admin/Spa/SpaManagementContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const SpaManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Spa & Wellness"]}>
      <div className="container mx-auto">
        <SpaManagementContent />
      </div>
    </AuthGuard>
  );
};

export default SpaManagementPage;
</file>

<file path="src/pages/Admin/Spa/SpaReportsPage.tsx">
import React from 'react';
import SpaReportsContent from "@/components/Admin/Spa/SpaReportsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const SpaReportsPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Spa & Wellness"]}>
      <div className="container mx-auto">
        <SpaReportsContent />
      </div>
    </AuthGuard>
  );
};

export default SpaReportsPage;
</file>

<file path="src/pages/Admin/Staff/AddAccessLevelPage.tsx">
import AddAccessLevelContent from "@/components/Admin/Staff/AddAccessLevelContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const AddAccessLevelPage = () => {
    return (
        <AuthGuard requiredDepartments={["Management", "Human Resources"]}>
            <div className="container mx-auto">
                <AddAccessLevelContent />
            </div>
        </AuthGuard>
    );
};

export default AddAccessLevelPage;
</file>

<file path="src/pages/Admin/Staff/AddDepartmentPage.tsx">
import AddDepartmentContent from "@/components/Admin/Staff/AddDepartmentContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const AddDepartmentPage = () => {
    return (
        <AuthGuard requiredDepartments={["Management", "Human Resources"]}>
            <div className="container mx-auto">
                <AddDepartmentContent />
            </div>
        </AuthGuard>
    );
};

export default AddDepartmentPage;
</file>

<file path="src/pages/Admin/Staff/AddRolePage.tsx">
import AddRoleContent from "@/components/Admin/Staff/AddRoleContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const AddRolePage = () => {
    return (
        <AuthGuard requiredDepartments={["Management", "Human Resources"]}>
            <div className="container mx-auto">
                <AddRoleContent />
            </div>
        </AuthGuard>
    );
};

export default AddRolePage;
</file>

<file path="src/pages/Admin/Staff/AddStaffMemberPage.tsx">
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import AddStaffMemberForm from "@/components/Admin/Staff/AddStaffMemberForm";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";
import { toast } from "sonner";

interface CurrentUser {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

const AddStaffMemberPage = () => {
  const navigate = useNavigate();
  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
  
  useEffect(() => {
    // Get current user from localStorage
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      setCurrentUser(JSON.parse(userDataString));
    }
    
    // Check if user can add staff members
    const checkPermission = () => {
      if (!userDataString) {
        toast.error("You must be logged in");
        navigate("/admin-login");
        return;
      }
      
      const userData: CurrentUser = JSON.parse(userDataString);
      
      // Only administrators, managers, or users with Administrative access can add staff
      if (
        userData.accessLevel !== "Full Access" && 
        userData.accessLevel !== "Administrative" && 
        userData.role !== "Administrator" && 
        userData.role !== "Manager"
      ) {
        toast.error("You don't have permission to add staff members");
        navigate("/admin");
        return;
      }
    };
    
    checkPermission();
  }, [navigate]);

  return (
    <AuthGuard requiredRoles={["Administrator", "Manager"]} requiredDepartments={["Management", "Human Resources"]}>
      <div className="container mx-auto">
        {currentUser && <AddStaffMemberForm currentUserDepartment={currentUser.department} currentUserRole={currentUser.role} />}
      </div>
    </AuthGuard>
  );
};

export default AddStaffMemberPage;
</file>

<file path="src/pages/Admin/Staff/StaffManagementPage.tsx">
import StaffManagementContent from "@/components/Admin/Staff/StaffManagementContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const StaffManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Human Resources"]}>
      <div className="container mx-auto">
        <StaffManagementContent />
      </div>
    </AuthGuard>
  );
};

export default StaffManagementPage;
</file>

<file path="src/pages/Admin/Tax/TaxSettingsPage.tsx">
import TaxSettingsContent from "@/components/Admin/Tax/TaxSettingsContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const TaxSettingsPage = () => {
  return (
    <AuthGuard requiredRoles={["Administrator"]} requiredDepartments={["Management", "Finance"]}>
      <div className="container mx-auto">
        <TaxSettingsContent />
      </div>
    </AuthGuard>
  );
};

export default TaxSettingsPage;
</file>

<file path="src/pages/Admin/Users/UsersManagementPage.tsx">
import UsersManagementContent from "@/components/Admin/Users/UsersManagementContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";

const UsersManagementPage = () => {
  return (
    <AuthGuard requiredDepartments={["Management", "Human Resources"]}>
      <div className="container mx-auto">
        <UsersManagementContent />
      </div>
    </AuthGuard>
  );
};

export default UsersManagementPage;
</file>

<file path="src/pages/Admin/AdminDashboardPage.tsx">
import AdminDashboardContent from "@/components/Admin/Dashboard/AdminDashboardContent";
import AuthGuard from "@/components/Admin/Auth/AuthGuard";
import { useEffect, useState } from "react";

interface UserData {
  name: string;
  email: string;
  role: string;
  department: string;
  accessLevel: string;
}

const AdminDashboardPage = () => {
  const [userData, setUserData] = useState<UserData | null>(null);

  useEffect(() => {
    // Get user data from localStorage
    const userDataString = localStorage.getItem("currentUser");
    if (userDataString) {
      const user = JSON.parse(userDataString);
      setUserData(user);
    }
  }, []);

  if (!userData) {
    return (
      <div className="flex justify-center items-center h-64">
        <p>Loading dashboard data...</p>
      </div>
    );
  }

  return (
    <AuthGuard>
      <div className="container mx-auto">
        <AdminDashboardContent departmentFilter={userData.department} />
      </div>
    </AuthGuard>
  );
};

export default AdminDashboardPage;
</file>

<file path="src/pages/Admin/AdminLoginPage.tsx">
import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/components/ui/use-toast";
import { toast } from "sonner";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";

// Mock staff database for demonstration
const mockStaffDatabase = [
  // Management staff - Full access
  { 
    email: "admin@parkside.com", 
    password: "admin123", 
    role: "Administrator",
    name: "Admin User",
    department: "Management",
    accessLevel: "Full Access"
  },
  // Finance staff
  { 
    email: "finance@parkside.com", 
    password: "staff123", 
    role: "Manager",
    name: "Finance Manager",
    department: "Finance",
    accessLevel: "Administrative"
  },
  // Front Office staff
  { 
    email: "frontdesk@parkside.com", 
    password: "staff123", 
    role: "Staff",
    name: "Front Desk Staff",
    department: "Front Office",
    accessLevel: "Limited"
  },
  // Housekeeping staff
  { 
    email: "housekeeping@parkside.com", 
    password: "staff123", 
    role: "Supervisor",
    name: "Housekeeping Lead",
    department: "Housekeeping",
    accessLevel: "Standard"
  },
  // Food & Beverage staff
  { 
    email: "restaurant@parkside.com", 
    password: "staff123", 
    role: "Manager",
    name: "Restaurant Manager",
    department: "Food & Beverage",
    accessLevel: "Administrative"
  },
  // Maintenance staff
  { 
    email: "maintenance@parkside.com", 
    password: "staff123", 
    role: "Staff",
    name: "Maintenance Worker",
    department: "Maintenance",
    accessLevel: "Limited"
  },
  // Spa & Wellness staff
  { 
    email: "spa@parkside.com", 
    password: "staff123", 
    role: "Supervisor",
    name: "Spa Coordinator",
    department: "Spa & Wellness",
    accessLevel: "Standard"
  },
  // Room Service staff
  { 
    email: "rooms@parkside.com", 
    password: "staff123", 
    role: "Staff",
    name: "Room Service Staff",
    department: "Housekeeping",
    accessLevel: "Limited"
  },
  // HR staff
  { 
    email: "hr@parkside.com", 
    password: "staff123", 
    role: "Manager",
    name: "HR Manager",
    department: "Human Resources",
    accessLevel: "Administrative"
  },
  // Sales staff
  { 
    email: "sales@parkside.com", 
    password: "staff123", 
    role: "Staff",
    name: "Sales Representative",
    department: "Sales & Marketing",
    accessLevel: "Standard"
  }
];

interface LocationState {
  from?: string;
  reason?: string;
}

const AdminLoginPage = () => {
  const [adminEmail, setAdminEmail] = useState("");
  const [adminPassword, setAdminPassword] = useState("");
  const [staffEmail, setStaffEmail] = useState("");
  const [staffPassword, setStaffPassword] = useState("");
  const { toast: uiToast } = useToast();
  const navigate = useNavigate();
  const location = useLocation();
  const state = location.state as LocationState;
  const [accessDeniedReason, setAccessDeniedReason] = useState<string | null>(null);
  const [redirectPath, setRedirectPath] = useState<string | null>(null);
  const [loginError, setLoginError] = useState<string | null>(null);

  // Check if redirected due to access denial
  useEffect(() => {
    if (state && state.reason) {
      setAccessDeniedReason(state.reason);
      if (state.from) {
        setRedirectPath(state.from);
      }
    }
  }, [state]);

  const handleAdminLogin = (e: React.FormEvent) => {
    e.preventDefault();
    setLoginError(null);
    
    // Fix: allow any admin account regardless of case sensitivity
    const adminUser = mockStaffDatabase.find(
      staff => staff.email.toLowerCase() === adminEmail.toLowerCase() && 
               staff.password === adminPassword && 
               staff.role === "Administrator"
    );
    
    if (adminUser) {
      // Store user information in localStorage for session management
      localStorage.setItem("currentUser", JSON.stringify({
        name: adminUser.name,
        email: adminUser.email,
        role: adminUser.role,
        department: adminUser.department,
        accessLevel: adminUser.accessLevel
      }));
      
      uiToast({
        title: "Login Successful",
        description: "Welcome to the admin dashboard",
      });
      
      // Redirect to the original path if access was denied, otherwise go to admin
      navigate(redirectPath || "/admin");
    } else {
      setLoginError("Invalid email or password");
      uiToast({
        title: "Login Failed",
        description: "Invalid email or password",
        variant: "destructive",
      });
    }
  };

  const handleStaffLogin = (e: React.FormEvent) => {
    e.preventDefault();
    setLoginError(null);
    
    // Fix: allow any staff account regardless of case sensitivity
    const staffUser = mockStaffDatabase.find(
      staff => staff.email.toLowerCase() === staffEmail.toLowerCase() && 
               staff.password === staffPassword
    );
    
    if (staffUser) {
      // Store user information in localStorage for session management
      localStorage.setItem("currentUser", JSON.stringify({
        name: staffUser.name,
        email: staffUser.email,
        role: staffUser.role,
        department: staffUser.department,
        accessLevel: staffUser.accessLevel
      }));
      
      uiToast({
        title: "Login Successful",
        description: `Welcome, ${staffUser.name}`,
      });
      
      toast.success(`Logged in as ${staffUser.role} in ${staffUser.department}`);
      
      // Redirect to the original path if access was denied, otherwise go to admin
      navigate(redirectPath || "/admin");
    } else {
      setLoginError("Invalid email or password");
      uiToast({
        title: "Login Failed",
        description: "Invalid email or password",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 p-4">
      <div className="max-w-md w-full">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-hotel-primary">Parkside Plaza Hotel</h1>
          <p className="text-gray-600">Admin Portal</p>
        </div>
        
        {accessDeniedReason && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Access Denied</AlertTitle>
            <AlertDescription>
              {accessDeniedReason}
            </AlertDescription>
          </Alert>
        )}
        
        {loginError && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Login Failed</AlertTitle>
            <AlertDescription>
              {loginError}
            </AlertDescription>
          </Alert>
        )}
        
        <Tabs defaultValue="staff" className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="admin">Admin Login</TabsTrigger>
            <TabsTrigger value="staff">Staff Login</TabsTrigger>
          </TabsList>
          
          <TabsContent value="admin">
            <Card>
              <CardHeader>
                <CardTitle>Admin Login</CardTitle>
                <CardDescription>
                  Enter your credentials to access the full admin dashboard.
                </CardDescription>
              </CardHeader>
              <form onSubmit={handleAdminLogin}>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="adminEmail">Email</Label>
                    <Input 
                      id="adminEmail" 
                      type="email" 
                      placeholder="admin@parkside.com"
                      value={adminEmail}
                      onChange={(e) => setAdminEmail(e.target.value)}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="adminPassword">Password</Label>
                      <a href="#" className="text-xs text-hotel-primary hover:underline">
                        Forgot password?
                      </a>
                    </div>
                    <Input 
                      id="adminPassword" 
                      type="password"
                      value={adminPassword}
                      onChange={(e) => setAdminPassword(e.target.value)}
                      required
                    />
                  </div>
                </CardContent>
                <CardFooter>
                  <Button type="submit" className="w-full bg-hotel-primary hover:bg-opacity-90">
                    Sign In
                  </Button>
                </CardFooter>
              </form>
            </Card>
          </TabsContent>
          
          <TabsContent value="staff">
            <Card>
              <CardHeader>
                <CardTitle>Staff Login</CardTitle>
                <CardDescription>
                  Enter your credentials to access the staff dashboard.
                </CardDescription>
              </CardHeader>
              <form onSubmit={handleStaffLogin}>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="staffEmail">Email</Label>
                    <Input 
                      id="staffEmail" 
                      type="email"
                      placeholder="staff@parkside.com"
                      value={staffEmail}
                      onChange={(e) => setStaffEmail(e.target.value)}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="staffPassword">Password</Label>
                      <a href="#" className="text-xs text-hotel-primary hover:underline">
                        Forgot password?
                      </a>
                    </div>
                    <Input 
                      id="staffPassword" 
                      type="password"
                      value={staffPassword}
                      onChange={(e) => setStaffPassword(e.target.value)}
                      required
                    />
                  </div>
                </CardContent>
                <CardFooter>
                  <Button type="submit" className="w-full bg-hotel-primary hover:bg-opacity-90">
                    Sign In
                  </Button>
                </CardFooter>
              </form>
            </Card>
          </TabsContent>
        </Tabs>
        
        <div className="mt-8 bg-white p-4 rounded-md shadow">
          <h2 className="font-medium text-gray-700 mb-2">Available Test Accounts:</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
            <div className="p-2 bg-gray-50 rounded">
              <p><strong>Admin:</strong> admin@parkside.com</p>
              <p><strong>Password:</strong> admin123</p>
              <p className="text-xs text-gray-500 mt-1">Full Access / Management</p>
            </div>
            <div className="p-2 bg-gray-50 rounded">
              <p><strong>Finance:</strong> finance@parkside.com</p>
              <p><strong>Password:</strong> staff123</p>
              <p className="text-xs text-gray-500 mt-1">Administrative / Finance</p>
            </div>
            <div className="p-2 bg-gray-50 rounded">
              <p><strong>Spa:</strong> spa@parkside.com</p>
              <p><strong>Password:</strong> staff123</p>
              <p className="text-xs text-gray-500 mt-1">Standard / Spa & Wellness</p>
            </div>
            <div className="p-2 bg-gray-50 rounded">
              <p><strong>Restaurant:</strong> restaurant@parkside.com</p>
              <p><strong>Password:</strong> staff123</p>
              <p className="text-xs text-gray-500 mt-1">Administrative / Food & Beverage</p>
            </div>
          </div>
        </div>
        
        <p className="text-center mt-4 text-sm text-gray-600">
          © {new Date().getFullYear()} Parkside Plaza Hotel. All rights reserved.
        </p>
      </div>
    </div>
  );
};

export default AdminLoginPage;
</file>

<file path="src/pages/DownloadAppPage.tsx">
import { Button } from "@/components/ui/button";
import { Apple, Smartphone } from "lucide-react";

const DownloadAppPage = () => {
  // In a real app, these would be loaded from an API or context
  const appSettings = {
    appDescription: "Download our Parkside Plaza Hotel app for a seamless booking experience. Manage your reservations, access exclusive deals, and enjoy a personalized stay with features designed to enhance your hotel experience.",
    footerText: "Download the app now and manage your bookings anytime, anywhere.",
    iosAppUrl: "https://apps.apple.com/us/app/parkside-plaza-hotel/id123456789",
    androidAppUrl: "https://play.google.com/store/apps/details?id=com.parksideplaza.hotel"
  };

  return (
    <div className="container mx-auto py-12 px-4">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Download Our Mobile App
          </h1>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto">
            {appSettings.appDescription}
          </p>
        </div>

        <div className="flex flex-col md:flex-row items-center justify-center gap-8 my-12">
          <a 
            href={appSettings.iosAppUrl} 
            target="_blank" 
            rel="noopener noreferrer"
            className="transition-transform hover:scale-105"
          >
            <div className="h-16 w-48 bg-black rounded-lg flex items-center justify-center text-white">
              <Apple className="h-8 w-8 mr-2" />
              <div className="text-left">
                <div className="text-xs">Download on the</div>
                <div className="text-lg font-semibold">App Store</div>
              </div>
            </div>
          </a>
          
          <a 
            href={appSettings.androidAppUrl} 
            target="_blank" 
            rel="noopener noreferrer"
            className="transition-transform hover:scale-105"
          >
            <div className="h-16 w-48 bg-black rounded-lg flex items-center justify-center text-white">
              <Smartphone className="h-8 w-8 mr-2" />
              <div className="text-left">
                <div className="text-xs">GET IT ON</div>
                <div className="text-lg font-semibold">Google Play</div>
              </div>
            </div>
          </a>
        </div>

        <div className="bg-gray-50 rounded-xl p-8 shadow-sm">
          <div className="md:flex items-center justify-between">
            <div className="md:w-2/3 mb-6 md:mb-0">
              <h2 className="text-2xl font-bold text-gray-800 mb-4">Key Features</h2>
              <ul className="space-y-2">
                <li className="flex items-start">
                  <div className="h-5 w-5 rounded-full bg-green-500 text-white flex items-center justify-center mr-2 mt-1">✓</div>
                  <span>Easy booking and reservation management</span>
                </li>
                <li className="flex items-start">
                  <div className="h-5 w-5 rounded-full bg-green-500 text-white flex items-center justify-center mr-2 mt-1">✓</div>
                  <span>Exclusive in-app offers and discounts</span>
                </li>
                <li className="flex items-start">
                  <div className="h-5 w-5 rounded-full bg-green-500 text-white flex items-center justify-center mr-2 mt-1">✓</div>
                  <span>Digital room key and contactless check-in</span>
                </li>
                <li className="flex items-start">
                  <div className="h-5 w-5 rounded-full bg-green-500 text-white flex items-center justify-center mr-2 mt-1">✓</div>
                  <span>Real-time service requests and support</span>
                </li>
                <li className="flex items-start">
                  <div className="h-5 w-5 rounded-full bg-green-500 text-white flex items-center justify-center mr-2 mt-1">✓</div>
                  <span>Loyalty program tracking and rewards</span>
                </li>
              </ul>
            </div>
            
            <div className="md:w-1/3 flex justify-center">
              <div className="w-48 h-96 bg-gray-200 rounded-3xl shadow-lg overflow-hidden">
                {/* App screenshot would go here */}
                <div className="h-full flex items-center justify-center">
                  <p className="text-gray-400 text-center">App Screenshot</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="text-center my-12">
          <p className="text-xl text-gray-700 font-medium mb-8">{appSettings.footerText}</p>
          
          <div className="flex flex-col md:flex-row items-center justify-center gap-8">
            <a 
              href={appSettings.iosAppUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              className="transition-transform hover:scale-105"
            >
              <div className="h-16 w-48 bg-black rounded-lg flex items-center justify-center text-white">
                <Apple className="h-8 w-8 mr-2" />
                <div className="text-left">
                  <div className="text-xs">Download on the</div>
                  <div className="text-lg font-semibold">App Store</div>
                </div>
              </div>
            </a>
            
            <a 
              href={appSettings.androidAppUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              className="transition-transform hover:scale-105"
            >
              <div className="h-16 w-48 bg-black rounded-lg flex items-center justify-center text-white">
                <Smartphone className="h-8 w-8 mr-2" />
                <div className="text-left">
                  <div className="text-xs">GET IT ON</div>
                  <div className="text-lg font-semibold">Google Play</div>
                </div>
              </div>
            </a>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DownloadAppPage;
</file>

<file path="src/pages/EventsPage.tsx">
import EventsList from "@/components/Events/EventsList";

const EventsPage = () => {
  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-2xl font-serif font-semibold text-gray-800 mb-6">Hotel Events</h1>
      <EventsList />
    </div>
  );
};

export default EventsPage;
</file>

<file path="src/pages/Index.tsx">
import HomeScreen from "@/components/Home/HomeScreen";

const Index = () => {
  return <HomeScreen />;
};

export default Index;
</file>

<file path="src/pages/LoyaltyPage.tsx">
import LoyaltyDashboard from "@/components/Loyalty/LoyaltyDashboard";

const LoyaltyPage = () => {
  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-2xl font-serif font-semibold text-gray-800 mb-6">Loyalty Program</h1>
      <LoyaltyDashboard />
    </div>
  );
};

export default LoyaltyPage;
</file>

<file path="src/pages/NotFound.tsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
</file>

<file path="src/pages/RestaurantPage.tsx">
import MenuCategories from "@/components/Restaurant/MenuCategories";
import { AlertCircle } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const RestaurantPage = () => {
  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-2xl font-serif font-semibold text-gray-800 mb-6">Hotel Restaurant</h1>
      
      <Alert className="mb-6">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Mobile App Feature</AlertTitle>
        <AlertDescription>
          Restaurant ordering is only available in the mobile app version, not on the website.
        </AlertDescription>
      </Alert>
      
      <MenuCategories />
    </div>
  );
};

export default RestaurantPage;
</file>

<file path="src/pages/RoomsPage.tsx">
import RoomsList from "@/components/Rooms/RoomsList";

const RoomsPage = () => {
  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-2xl font-serif font-semibold text-gray-800 mb-6">Room Selection</h1>
      <RoomsList />
    </div>
  );
};

export default RoomsPage;
</file>

<file path="src/pages/SpaPage.tsx">
import SpaServicesList from "@/components/Spa/SpaServicesList";

const SpaPage = () => {
  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-2xl font-serif font-semibold text-gray-800 mb-6">Spa Services</h1>
      <SpaServicesList />
    </div>
  );
};

export default SpaPage;
</file>

<file path="src/services/contentService.ts">
import axios from 'axios';

const API_URL = 'http://localhost:4000/api/content';

// Types for the content data
export interface HeroSection {
    title: string;
    subtitle: string;
    backgroundImage?: string;
}

export interface WelcomeSection {
    message: string;
}

export interface AboutSection {
    content: string;
}

export interface FeaturedService {
    title: string;
    description: string;
    icon?: string;
    order: number;
}

export interface HomePageContent {
    hero: HeroSection;
    welcome: WelcomeSection;
    about: AboutSection;
    featuredServices: FeaturedService[];
}

export interface RoomCategory {
    name: string;
    description: string;
    order: number;
}

export interface RoomsPageContent {
    title: string;
    description: string;
    coverImage?: string;
    categories: RoomCategory[];
}

export interface SpaService {
    name: string;
    description: string;
    price: string;
    duration: string;
    order: number;
}

export interface SpaPageContent {
    title: string;
    description: string;
    coverImage?: string;
    services: SpaService[];
}

export interface FeaturedDish {
    name: string;
    description: string;
    price: string;
    image?: string;
    order: number;
}

export interface RestaurantPageContent {
    title: string;
    description: string;
    headChef: string;
    cuisineType: string;
    openingHours: string;
    coverImage?: string;
    featuredDishes: FeaturedDish[];
    menuItemsPDF?: string;
}

export interface FeaturedEvent {
    name: string;
    description: string;
    image?: string;
    order: number;
}

export interface EventsPageContent {
    title: string;
    description: string;
    coverImage?: string;
    featuredEvents: FeaturedEvent[];
}

export interface MeetingHallPageContent {
    title: string;
    description: string;
    coverImage?: string;
}

export interface NavigationItem {
    label: string;
    path: string;
    order: number;
}

export interface NavigationContent {
    main: NavigationItem[];
    footer: NavigationItem[];
}

export interface SocialMediaLink {
    platform: string;
    url: string;
    icon?: string;
}

export interface ContactInfo {
    address: string;
    phone: string;
    email: string;
}

export interface FooterContent {
    aboutText: string;
    contactInfo: ContactInfo;
    copyrightText: string;
    socialMedia: SocialMediaLink[];
}

export interface ContentData {
    homePage: HomePageContent;
    roomsPage: RoomsPageContent;
    spaPage: SpaPageContent;
    restaurantPage: RestaurantPageContent;
    eventsPage: EventsPageContent;
    meetingHallPage: MeetingHallPageContent;
    navigation: NavigationContent;
    footer: FooterContent;
    lastUpdated: Date;
}

// Get all content
export const getAllContent = async (): Promise<ContentData> => {
    const response = await axios.get(API_URL);
    return response.data.data;
};

// Home page content
export const getHomePageContent = async (): Promise<HomePageContent> => {
    const response = await axios.get(`${API_URL}/home`);
    return response.data.data;
};

export const updateHomePageContent = async (data: Partial<HomePageContent>): Promise<HomePageContent> => {
    try {
        console.log('Calling API:', `${API_URL}/home`);
        console.log('With data:', JSON.stringify(data, null, 2));
        
        const response = await axios.put(`${API_URL}/home`, data);
        console.log('API Response:', response.data);
        
        return response.data.data;
    } catch (error) {
        console.error('API Error in updateHomePageContent:', error);
        if (axios.isAxiosError(error)) {
            console.error('Request:', error.config);
            console.error('Response:', error.response?.data);
        }
        throw error;
    }
};

// Rooms page content
export const getRoomsPageContent = async (): Promise<RoomsPageContent> => {
    const response = await axios.get(`${API_URL}/rooms`);
    return response.data.data;
};

export const updateRoomsPageContent = async (data: Partial<RoomsPageContent>): Promise<RoomsPageContent> => {
    const response = await axios.put(`${API_URL}/rooms`, data);
    return response.data.data;
};

// Spa page content
export const getSpaPageContent = async (): Promise<SpaPageContent> => {
    const response = await axios.get(`${API_URL}/spa`);
    return response.data.data;
};

export const updateSpaPageContent = async (data: Partial<SpaPageContent>): Promise<SpaPageContent> => {
    const response = await axios.put(`${API_URL}/spa`, data);
    return response.data.data;
};

// Restaurant page content
export const getRestaurantPageContent = async (): Promise<RestaurantPageContent> => {
    const response = await axios.get(`${API_URL}/restaurant`);
    return response.data.data;
};

export const updateRestaurantPageContent = async (data: Partial<RestaurantPageContent>): Promise<RestaurantPageContent> => {
    const response = await axios.put(`${API_URL}/restaurant`, data);
    return response.data.data;
};

// Events page content
export const getEventsPageContent = async (): Promise<EventsPageContent> => {
    const response = await axios.get(`${API_URL}/events`);
    return response.data.data;
};

export const updateEventsPageContent = async (data: Partial<EventsPageContent>): Promise<EventsPageContent> => {
    const response = await axios.put(`${API_URL}/events`, data);
    return response.data.data;
};

// Meeting Hall page content
export const getMeetingHallPageContent = async (): Promise<MeetingHallPageContent> => {
    const response = await axios.get(`${API_URL}/meeting-hall`);
    return response.data.data;
};

export const updateMeetingHallPageContent = async (data: Partial<MeetingHallPageContent>): Promise<MeetingHallPageContent> => {
    const response = await axios.put(`${API_URL}/meeting-hall`, data);
    return response.data.data;
};

// Navigation content
export const getNavigationContent = async (): Promise<NavigationContent> => {
    const response = await axios.get(`${API_URL}/navigation`);
    return response.data.data;
};

export const updateNavigationContent = async (data: Partial<NavigationContent>): Promise<NavigationContent> => {
    const response = await axios.put(`${API_URL}/navigation`, data);
    return response.data.data;
};

// Footer content
export const getFooterContent = async (): Promise<FooterContent> => {
    const response = await axios.get(`${API_URL}/footer`);
    return response.data.data;
};

export const updateFooterContent = async (data: Partial<FooterContent>): Promise<FooterContent> => {
    const response = await axios.put(`${API_URL}/footer`, data);
    return response.data.data;
};
</file>

<file path="src/services/loyaltyService.ts">
import axios from 'axios';

const API_BASE_URL = 'http://localhost:4000/api/loyalty';

// Types
export interface LoyaltyTier {
    _id: string;
    name: string;
    pointsRequired: number;
    benefits: string[];
    color: string;
    createdAt?: string;
    updatedAt?: string;
}

export interface LoyaltyReward {
    _id: string;
    name: string;
    pointsCost: number;
    description: string;
    category: string;
    status: string;
    createdAt?: string;
    updatedAt?: string;
}

export interface LoyaltySettings {
    _id: string;
    pointsExpiration: number;
    pointsPerDollar: number;
    welcomeBonus: number;
    birthdayBonus: number;
    promoCodesApplicable: boolean;
    discountAvailable: boolean;
    createdAt?: string;
    updatedAt?: string;
}

// Tiers API
export const getAllTiers = async (): Promise<LoyaltyTier[]> => {
    try {
        const response = await axios.get(`${API_BASE_URL}/tiers`);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to fetch tiers');
    } catch (error) {
        console.error('Error fetching loyalty tiers:', error);
        throw error;
    }
};

export const getTierById = async (id: string): Promise<LoyaltyTier> => {
    try {
        const response = await axios.get(`${API_BASE_URL}/tiers/${id}`);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to fetch tier');
    } catch (error) {
        console.error('Error fetching loyalty tier:', error);
        throw error;
    }
};

export const createTier = async (tier: Omit<LoyaltyTier, '_id'>): Promise<LoyaltyTier> => {
    try {
        const response = await axios.post(`${API_BASE_URL}/tiers`, tier);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to create tier');
    } catch (error) {
        console.error('Error creating loyalty tier:', error);
        throw error;
    }
};

export const updateTier = async (id: string, tier: Partial<LoyaltyTier>): Promise<LoyaltyTier> => {
    try {
        const response = await axios.put(`${API_BASE_URL}/tiers/${id}`, tier);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to update tier');
    } catch (error) {
        console.error('Error updating loyalty tier:', error);
        throw error;
    }
};

export const deleteTier = async (id: string): Promise<void> => {
    try {
        const response = await axios.delete(`${API_BASE_URL}/tiers/${id}`);
        if (!response.data.success) {
            throw new Error(response.data.message || 'Failed to delete tier');
        }
    } catch (error) {
        console.error('Error deleting loyalty tier:', error);
        throw error;
    }
};

// Rewards API
export const getAllRewards = async (filters?: { category?: string; status?: string; search?: string }): Promise<LoyaltyReward[]> => {
    try {
        const queryParams = new URLSearchParams();
        if (filters?.category) queryParams.append('category', filters.category);
        if (filters?.status) queryParams.append('status', filters.status);
        if (filters?.search) queryParams.append('search', filters.search);

        const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';
        const response = await axios.get(`${API_BASE_URL}/rewards${queryString}`);

        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to fetch rewards');
    } catch (error) {
        console.error('Error fetching loyalty rewards:', error);
        throw error;
    }
};

export const getRewardById = async (id: string): Promise<LoyaltyReward> => {
    try {
        const response = await axios.get(`${API_BASE_URL}/rewards/${id}`);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to fetch reward');
    } catch (error) {
        console.error('Error fetching loyalty reward:', error);
        throw error;
    }
};

export const createReward = async (reward: Omit<LoyaltyReward, '_id'>): Promise<LoyaltyReward> => {
    try {
        const response = await axios.post(`${API_BASE_URL}/rewards`, reward);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to create reward');
    } catch (error) {
        console.error('Error creating loyalty reward:', error);
        throw error;
    }
};

export const updateReward = async (id: string, reward: Partial<LoyaltyReward>): Promise<LoyaltyReward> => {
    try {
        const response = await axios.put(`${API_BASE_URL}/rewards/${id}`, reward);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to update reward');
    } catch (error) {
        console.error('Error updating loyalty reward:', error);
        throw error;
    }
};

export const deleteReward = async (id: string): Promise<void> => {
    try {
        const response = await axios.delete(`${API_BASE_URL}/rewards/${id}`);
        if (!response.data.success) {
            throw new Error(response.data.message || 'Failed to delete reward');
        }
    } catch (error) {
        console.error('Error deleting loyalty reward:', error);
        throw error;
    }
};

// Settings API
export const getSettings = async (): Promise<LoyaltySettings> => {
    try {
        const response = await axios.get(`${API_BASE_URL}/settings`);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to fetch settings');
    } catch (error) {
        console.error('Error fetching loyalty settings:', error);
        throw error;
    }
};

export const updateSettings = async (settings: Partial<LoyaltySettings>): Promise<LoyaltySettings> => {
    try {
        const response = await axios.put(`${API_BASE_URL}/settings`, settings);
        if (response.data.success) {
            return response.data.data;
        }
        throw new Error(response.data.message || 'Failed to update settings');
    } catch (error) {
        console.error('Error updating loyalty settings:', error);
        throw error;
    }
};
</file>

<file path="src/services/menuItemService.ts">
import { MenuItem } from "@/types/restaurant"; // You'll need to create this type

const API_URL = import.meta.env.VITE_API_URL;
const MENU_ITEMS_ENDPOINT = `${API_URL}/api/restaurant/menu-items`;

// Get all menu items
export const getAllMenuItems = async (): Promise<MenuItem[]> => {
    try {
        const response = await fetch(MENU_ITEMS_ENDPOINT);

        if (!response.ok) {
            throw new Error('Failed to fetch menu items');
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error('Error fetching menu items:', error);
        throw error;
    }
};

// Get menu item by ID
export const getMenuItemById = async (id: string): Promise<MenuItem> => {
    try {
        const response = await fetch(`${MENU_ITEMS_ENDPOINT}/${id}`);

        if (!response.ok) {
            throw new Error('Failed to fetch menu item');
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error('Error fetching menu item:', error);
        throw error;
    }
};

// Create a new menu item
export const createMenuItem = async (formData: FormData): Promise<MenuItem> => {
    try {
        const response = await fetch(MENU_ITEMS_ENDPOINT, {
            method: 'POST',
            body: formData,
            // No need to set Content-Type as it's automatically set with FormData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to create menu item');
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error('Error creating menu item:', error);
        throw error;
    }
};

// Update a menu item
export const updateMenuItem = async (id: string, formData: FormData): Promise<MenuItem> => {
    try {
        const response = await fetch(`${MENU_ITEMS_ENDPOINT}/${id}`, {
            method: 'PUT',
            body: formData,
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to update menu item');
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error('Error updating menu item:', error);
        throw error;
    }
};

// Delete a menu item
export const deleteMenuItem = async (id: string): Promise<void> => {
    try {
        const response = await fetch(`${MENU_ITEMS_ENDPOINT}/${id}`, {
            method: 'DELETE',
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to delete menu item');
        }
    } catch (error) {
        console.error('Error deleting menu item:', error);
        throw error;
    }
};
</file>

<file path="src/services/restaurantService.ts">
import axios from 'axios';

// Define API base URL with hardcoded value
const API_URL = 'http://localhost:4000/api';

// Restaurant Table interface
export interface RestaurantSection {
    _id: string;
    number: number;
    capacity: number;
    status: string;
    reservationTime: string | null;
    customerName: string | null;
    name?: string; // Added for UI display purposes
}

// Get all restaurant tables
export const getAllRestaurantSections = async (): Promise<RestaurantSection[]> => {
    try {
        const response = await axios.get(`${API_URL}/restaurant/tables`);
        if (response.data.success) {
            return response.data.data.map((table: any) => ({
                ...table,
                name: `Table ${table.number} (${table.capacity} seats)`
            }));
        }
        return [];
    } catch (error) {
        console.error('Error fetching restaurant tables:', error);
        // Using static data as fallback for now
        return [
            { _id: "1", number: 1, capacity: 4, status: "available", reservationTime: null, customerName: null, name: "Table 1 (4 seats)" },
            { _id: "2", number: 2, capacity: 2, status: "available", reservationTime: null, customerName: null, name: "Table 2 (2 seats)" },
            { _id: "3", number: 3, capacity: 6, status: "available", reservationTime: null, customerName: null, name: "Table 3 (6 seats)" },
            { _id: "4", number: 4, capacity: 8, status: "available", reservationTime: null, customerName: null, name: "Table 4 (8 seats)" },
            { _id: "5", number: 5, capacity: 4, status: "available", reservationTime: null, customerName: null, name: "Table 5 (4 seats)" }
        ];
    }
};
</file>

<file path="src/services/roomService.ts">
import axios from 'axios';

// Define API base URL using environment variable or fallback to localhost
const API_URL = 'http://localhost:4000/api';

// Room interface
export interface Room {
    _id: string;
    name: string;
    type: string;
    category: string;
    bedType: string;
    capacity: number;
    price: number;
    totalRooms: number;
    availableRooms: number;
    description: string;
    isRefundable: boolean;
    refundPolicy: string;
    breakfastIncluded: boolean;
    checkInTime: string;
    checkOutTime: string;
    amenities: string[];
    payNow: boolean;
    payAtHotel: boolean;
    discount: {
        name: string;
        type: string;
        value: number;
        capacity: number;
        active: boolean;
        publishWebsite: boolean;
        publishApp: boolean;
    };
    cancellationPolicy: string;
    publishWebsite: boolean;
    publishApp: boolean;
    active: boolean;
    images: string[];
}

// Get all rooms
export const getAllRooms = async (): Promise<Room[]> => {
    try {
        const response = await axios.get(`${API_URL}/rooms`);
        if (response.data.success) {
            return response.data.data;
        }
        return [];
    } catch (error) {
        console.error('Error fetching rooms:', error);
        return [];
    }
};

// Get room by ID
export const getRoomById = async (id: string): Promise<Room | null> => {
    try {
        const response = await axios.get(`${API_URL}/rooms/${id}`);
        if (response.data.success) {
            return response.data.data;
        }
        return null;
    } catch (error) {
        console.error(`Error fetching room with ID ${id}:`, error);
        return null;
    }
};
</file>

<file path="src/services/spaService.ts">
import axios from 'axios';

// Define API base URL with hardcoded value
const API_URL = 'http://localhost:4000/api';

// Spa Service interface (simplified)
export interface SpaService {
    _id: string;
    title: string;
    description: string;
    categoryId: string;
    status: string;
    displayStatus: string;
    specialist: string;
    specialistId: string;
    availability: string;
    durations: { duration: string; price: number; }[];
    addons?: { name: string; price: number; selected: boolean; }[];
    isRefundable: boolean;
    isPopular: boolean;
    images: string[];
    capacity?: number; // Added for availability purposes
    name?: string; // Added for backwards compatibility with UI
}

// Spa Specialist interface (simplified)
export interface SpaSpecialist {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    bio: string;
    status: string;
    languages: string;
    specializations?: { id: number; name: string; }[];
    photo: string;
    experienceYears: string;
    nationality: string;
    capacity?: number; // Added for availability purposes
    role?: string; // Added for backwards compatibility with UI
    name?: string; // Added for backwards compatibility with UI
}

// Get all spa services
export const getAllSpaServices = async (): Promise<SpaService[]> => {
    try {
        const response = await axios.get(`${API_URL}/spa/services`);
        if (response.data.success) {
            // Transform the data to include name and capacity for UI
            return response.data.data.map((service: SpaService) => ({
                ...service,
                name: service.title,
                // Estimate capacity based on service type - replace with actual calculation if needed
                capacity: 5
            }));
        }
        return [];
    } catch (error) {
        console.error('Error fetching spa services:', error);
        // Using static data as fallback for now
        return [
            { _id: "1", title: "Swedish Massage", name: "Swedish Massage", description: "Relaxing massage", specialist: "Emily Wilson", specialistId: "1", status: "active", displayStatus: "available", categoryId: "1", availability: "Daily", durations: [{ duration: "60 min", price: 80 }], isRefundable: true, isPopular: true, images: [], capacity: 5 },
            { _id: "2", title: "Deep Tissue Massage", name: "Deep Tissue Massage", description: "Therapeutic massage", specialist: "Michael Chen", specialistId: "2", status: "active", displayStatus: "available", categoryId: "1", availability: "Daily", durations: [{ duration: "60 min", price: 90 }], isRefundable: true, isPopular: false, images: [], capacity: 3 },
            { _id: "3", title: "Hot Stone Therapy", name: "Hot Stone Therapy", description: "Therapeutic massage with hot stones", specialist: "Sophia Rodriguez", specialistId: "3", status: "active", displayStatus: "available", categoryId: "1", availability: "Mon-Fri", durations: [{ duration: "90 min", price: 110 }], isRefundable: true, isPopular: true, images: [], capacity: 2 },
            { _id: "4", title: "Facial Treatment", name: "Facial Treatment", description: "Facial cleaning and massage", specialist: "Olivia Johnson", specialistId: "4", status: "active", displayStatus: "available", categoryId: "2", availability: "Daily", durations: [{ duration: "45 min", price: 65 }], isRefundable: true, isPopular: false, images: [], capacity: 4 },
            { _id: "5", title: "Body Scrub", name: "Body Scrub", description: "Full body exfoliation", specialist: "Thomas Martin", specialistId: "5", status: "active", displayStatus: "available", categoryId: "3", availability: "Weekends", durations: [{ duration: "50 min", price: 75 }], isRefundable: true, isPopular: true, images: [], capacity: 3 }
        ];
    }
};

// Get all spa specialists
export const getAllSpaSpecialists = async (): Promise<SpaSpecialist[]> => {
    try {
        const response = await axios.get(`${API_URL}/specialists`);
        if (response.data.success) {
            // Transform the data to include name, role and capacity for UI
            return response.data.data.map((specialist: SpaSpecialist) => ({
                ...specialist,
                name: `${specialist.firstName} ${specialist.lastName}`,
                role: specialist.specializations?.length ? specialist.specializations[0].name : "Therapist",
                // Estimate capacity based on specialist - replace with actual calculation if needed
                capacity: 8
            }));
        }
        return [];
    } catch (error) {
        console.error('Error fetching spa specialists:', error);
        // Using static data as fallback for now
        return [
            { _id: "1", firstName: "Emily", lastName: "Wilson", name: "Emily Wilson", role: "Senior Massage Therapist", bio: "Experienced therapist with over 10 years of practice", email: "emily@example.com", phone: "123-456-7890", status: "active", languages: "English, Spanish", nationality: "USA", experienceYears: "10", photo: "", capacity: 8 },
            { _id: "2", firstName: "Michael", lastName: "Chen", name: "Michael Chen", role: "Massage Therapist", bio: "Specialized in traditional Chinese massage techniques", email: "michael@example.com", phone: "123-456-7891", status: "active", languages: "English, Chinese", nationality: "China", experienceYears: "8", photo: "", capacity: 8 },
            { _id: "3", firstName: "Sophia", lastName: "Rodriguez", name: "Sophia Rodriguez", role: "Wellness Specialist", bio: "Holistic wellness expert focusing on mind-body balance", email: "sophia@example.com", phone: "123-456-7892", status: "active", languages: "English, Spanish", nationality: "Mexico", experienceYears: "6", photo: "", capacity: 6 },
            { _id: "4", firstName: "Olivia", lastName: "Johnson", name: "Olivia Johnson", role: "Esthetician", bio: "Certified esthetician specialized in facial treatments", email: "olivia@example.com", phone: "123-456-7893", status: "active", languages: "English", nationality: "Canada", experienceYears: "7", photo: "", capacity: 7 },
            { _id: "5", firstName: "Thomas", lastName: "Martin", name: "Thomas Martin", role: "Body Treatment Specialist", bio: "Expert in exfoliation and body wraps", email: "thomas@example.com", phone: "123-456-7894", status: "active", languages: "English, French", nationality: "France", experienceYears: "5", photo: "", capacity: 5 }
        ];
    }
};
</file>

<file path="src/services/staffService.ts">
import { StaffMember } from "@/types/staff"; // You'll need to create this type

const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const STAFF_ENDPOINT = `${API_URL}/api/staff`;

// Get all staff members
export const getAllStaff = async (): Promise<StaffMember[]> => {
    try {
        const response = await fetch(STAFF_ENDPOINT);

        if (!response.ok) {
            throw new Error("Failed to fetch staff members");
        }

        const data = await response.json();
        console.log("API Response:", data);

        // Check the response structure and return the array properly
        if (data.data && Array.isArray(data.data)) {
            return data.data;
        } else if (Array.isArray(data)) {
            return data;
        } else {
            console.error("Unexpected API response format:", data);
            return [];
        }
    } catch (error) {
        console.error("Error fetching staff members:", error);
        throw error;
    }
};

// Get staff member by ID
export const getStaffById = async (id: string): Promise<StaffMember> => {
    try {
        const response = await fetch(`${STAFF_ENDPOINT}/${id}`);

        if (!response.ok) {
            throw new Error("Failed to fetch staff member");
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error("Error fetching staff member:", error);
        throw error;
    }
};

// Create a new staff member
export const createStaffMember = async (formData: FormData): Promise<StaffMember> => {
    try {
        const response = await fetch(STAFF_ENDPOINT, {
            method: "POST",
            body: formData,
            // No need to set Content-Type as it's automatically set with FormData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || "Failed to create staff member");
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error("Error creating staff member:", error);
        throw error;
    }
};

// Update a staff member
export const updateStaffMember = async (id: string, formData: FormData): Promise<StaffMember> => {
    try {
        const response = await fetch(`${STAFF_ENDPOINT}/${id}`, {
            method: "PATCH",
            body: formData,
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || "Failed to update staff member");
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error("Error updating staff member:", error);
        throw error;
    }
};

// Delete a staff member
export const deleteStaffMember = async (id: string): Promise<void> => {
    try {
        const response = await fetch(`${STAFF_ENDPOINT}/${id}`, {
            method: "DELETE",
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || "Failed to delete staff member");
        }
    } catch (error) {
        console.error("Error deleting staff member:", error);
        throw error;
    }
};
</file>

<file path="src/services/userService.ts">
import { User } from "@/types/user"; // We'll create this type next

const API_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";
const USERS_ENDPOINT = `${API_URL}/api/users`;

// Get all guest users
export const getAllGuests = async (): Promise<User[]> => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/guests`);

        if (!response.ok) {
            throw new Error("Failed to fetch guest users");
        }

        const data = await response.json();
        return data.data || [];
    } catch (error) {
        console.error("Error fetching guest users:", error);
        throw error;
    }
};

// Get all staff users
export const getAllStaffUsers = async (): Promise<User[]> => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/staff`);

        if (!response.ok) {
            throw new Error("Failed to fetch staff users");
        }

        const data = await response.json();
        return data.data || [];
    } catch (error) {
        console.error("Error fetching staff users:", error);
        throw error;
    }
};

// Get all users
export const getAllUsers = async (): Promise<User[]> => {
    try {
        const response = await fetch(USERS_ENDPOINT);

        if (!response.ok) {
            throw new Error("Failed to fetch users");
        }

        const data = await response.json();
        return data.data || [];
    } catch (error) {
        console.error("Error fetching users:", error);
        throw error;
    }
};

// Get user by ID
export const getUserById = async (id: string): Promise<User> => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/${id}`);

        if (!response.ok) {
            throw new Error("Failed to fetch user");
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error("Error fetching user:", error);
        throw error;
    }
};

// Create a new user
export const createUser = async (userData: Partial<User>): Promise<User> => {
    try {
        const response = await fetch(USERS_ENDPOINT, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(userData),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Failed to create user");
        }

        const data = await response.json();
        return data.data || data.user;
    } catch (error) {
        console.error("Error creating user:", error);
        throw error;
    }
};

// Update a user
export const updateUser = async (id: string, userData: Partial<User>): Promise<User> => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/${id}`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(userData),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Failed to update user");
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error("Error updating user:", error);
        throw error;
    }
};

// Delete a user
export const deleteUser = async (id: string): Promise<void> => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/${id}`, {
            method: "DELETE",
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Failed to delete user");
        }
    } catch (error) {
        console.error("Error deleting user:", error);
        throw error;
    }
};

// Update user status
export const updateUserStatus = async (id: string, status: "Active" | "Inactive"): Promise<User> => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/${id}/status`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ status }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Failed to update user status");
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error("Error updating user status:", error);
        throw error;
    }
};

// Update loyalty points
export const updateLoyaltyPoints = async (id: string, points: number): Promise<User> => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/${id}/loyalty`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ points }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Failed to update loyalty points");
        }

        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error("Error updating loyalty points:", error);
        throw error;
    }
};

// Login user
export const loginUser = async (userName: string, password: string) => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/login`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ userName, password }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Login failed");
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Error logging in:", error);
        throw error;
    }
};

// Signup user
export const signupUser = async (userData: {
    fullName: string;
    userName: string;
    email: string;
    password: string;
    role?: string;
    phone?: string;
    isStaff?: boolean;
    department?: string;
}) => {
    try {
        const response = await fetch(`${USERS_ENDPOINT}/signup`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(userData),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Signup failed");
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Error signing up:", error);
        throw error;
    }
};
</file>

<file path="src/types/restaurant.ts">
export interface MenuItem {
    _id: string;
    name: string;
    description: string;
    category: 'breakfast' | 'lunch' | 'dinner' | 'dessert';
    price: number;
    preparationTime: number;
    ingredients: string;
    available: boolean;
    images: string[];
    createdAt: string;
    updatedAt: string;
}

export interface MenuItemFormData {
    name: string;
    description: string;
    category: string;
    price: number;
    preparationTime: number;
    ingredients: string;
    available: boolean;
}
</file>

<file path="src/types/staff.ts">
export interface StaffMember {
    _id: string;
    name: string;
    position: string;
    department: string;
    email: string;
    phone: string;
    role: string;
    status: string;
    accessLevel: string;
    startDate: string;
    emergencyContact?: string;
    address?: string;
    photo: string;
    active?: boolean;
    createdAt: string;
    updatedAt: string;
    employmentLength?: string;
}
</file>

<file path="src/types/user.ts">
export interface User {
    _id: string;
    fullName: string;
    userName: string;
    email: string;
    phone: string;
    status: "Active" | "Inactive";
    role: "Guest" | "VIP Guest" | "Administrator" | "Manager" | "Front Desk";
    department?: string;
    registeredDate: Date | string;
    lastVisit?: Date | string | null;
    lastLogin?: Date | string | null;
    loyaltyPoints: number;
    isStaff: boolean;
    createdAt: Date | string;
    updatedAt: Date | string;
}
</file>

<file path="src/types/utils.d.ts">
// Generic utility types
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { SearchProvider } from "@/contexts/SearchContext";
import AdminLoginPage from "./pages/Admin/AdminLoginPage";
import AdminDashboardPage from "./pages/Admin/AdminDashboardPage";
import AdminLayout from "./components/Admin/Layout/AdminLayout";
import RoomsManagementPage from "./pages/Admin/Rooms/RoomsManagementPage";
import AddRoomPage from "./pages/Admin/Rooms/AddRoomPage";
import RoomBookingsPage from "./pages/Admin/Rooms/RoomBookingsPage";
import RoomsReportsPage from "./pages/Admin/Rooms/RoomsReportsPage";
import StaffManagementPage from "./pages/Admin/Staff/StaffManagementPage";
import AddStaffMemberPage from "./pages/Admin/Staff/AddStaffMemberPage";
import AddDepartmentPage from "./pages/Admin/Staff/AddDepartmentPage";
import AddRolePage from "./pages/Admin/Staff/AddRolePage";
import AddAccessLevelPage from "./pages/Admin/Staff/AddAccessLevelPage";
import AddSpecialistPage from "./pages/Admin/Spa/AddSpecialistPage";
import LoyaltyManagementPage from "./pages/Admin/Loyalty/LoyaltyManagementPage";
import PromoCodePage from "./pages/Admin/PromoCode/PromoCodePage";
import RefundsPage from "./pages/Admin/Refunds/RefundsPage";
import ReportsPage from "./pages/Admin/Reports/ReportsPage";
import MeetingHallPage from "./pages/Admin/MeetingHall/MeetingHallPage";
import SettingsPage from "./pages/Admin/Settings/SettingsPage";
import UsersManagementPage from "./pages/Admin/Users/UsersManagementPage";
import ContentManagementPage from "./pages/Admin/ContentManagement/ContentManagementPage";
import AvailabilityManagementPage from "./pages/Admin/Availability/AvailabilityManagementPage";
import SpaManagementPage from "./pages/Admin/Spa/SpaManagementPage";
import SpaBookingsPage from "./pages/Admin/Spa/SpaBookingsPage";
import SpaReportsPage from "./pages/Admin/Spa/SpaReportsPage";
import SpaCategoriesPage from "./pages/Admin/Spa/SpaCategoriesPage";
import AddServicePage from "./pages/Admin/Spa/AddServicePage";
import RestaurantManagementPage from "./pages/Admin/Restaurant/RestaurantManagementPage";
import AddMenuItemPage from "./pages/Admin/Restaurant/AddMenuItemPage";
import MenuCategoriesPage from "./pages/Admin/Restaurant/MenuCategoriesPage";
import RestaurantOrdersPage from "./pages/Admin/Restaurant/RestaurantOrdersPage";
import RestaurantTablesPage from "./pages/Admin/Restaurant/RestaurantTablesPage";
import RestaurantReportsPage from "./pages/Admin/Restaurant/RestaurantReportsPage";
import EventsManagementPage from "./pages/Admin/Events/EventsManagementPage";
import AddEventPage from "./pages/Admin/Events/AddEventPage";
// import EditEventPage from "./pages/Admin/Events/EditEventPage";
import EventsReportsPage from "./pages/Admin/Events/EventsReportsPage";
import EventsScannerPage from "./pages/Admin/Events/EventsScannerPage";
import EventsBookingsPage from "./pages/Admin/Events/EventsBookingsPage";
import TaxSettingsPage from "./pages/Admin/Tax/TaxSettingsPage";
import SpaPage from "./pages/SpaPage";
import EventsPage from "./pages/EventsPage";
import RoomsPage from "./pages/RoomsPage";
import LoyaltyPage from "./pages/LoyaltyPage";
import DownloadAppPage from "./pages/DownloadAppPage";
import NotFound from "./pages/NotFound";
import HousekeepingPage from "./pages/Admin/Housekeeping/HousekeepingPage";
import TaskManagementPage from "./pages/Admin/Housekeeping/TaskManagementPage";
import { default as HousekeepingStaffPage } from "./pages/Admin/Housekeeping/StaffManagementPage";
import HousekeepingSuppliesPage from "./pages/Admin/Housekeeping/SuppliesPage";
import HousekeepingSchedulePage from "./pages/Admin/Housekeeping/SchedulePage";
import HousekeepingReportsPage from "./pages/Admin/Housekeeping/ReportsPage";
import EditRoomPage from "./pages/Admin/Rooms/EditRoomPage";
import EditServicePage from "./pages/Admin/Spa/EditServicePage";

const queryClient = new QueryClient();

const App = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <SearchProvider>
          <TooltipProvider>
            <Toaster />
            <Sonner />
            <Routes>
              <Route path="/" element={<Navigate to="/admin-login" replace />} />

              <Route path="/admin-login" element={<AdminLoginPage />} />
              <Route path="/admin" element={<AdminLayout />}>
                <Route index element={<AdminDashboardPage />} />
                <Route path="rooms" element={<RoomsManagementPage />} />
                <Route path="rooms/add" element={<AddRoomPage />} />
                <Route path="rooms/edit/:id" element={<EditRoomPage />} />
                <Route path="rooms/bookings" element={<RoomBookingsPage />} />
                <Route path="rooms/reports" element={<RoomsReportsPage />} />

                <Route path="housekeeping" element={<HousekeepingPage />} />
                <Route path="housekeeping/tasks" element={<TaskManagementPage />} />
                <Route path="housekeeping/staff" element={<HousekeepingStaffPage />} />
                <Route path="housekeeping/supplies" element={<HousekeepingSuppliesPage />} />
                <Route path="housekeeping/schedule" element={<HousekeepingSchedulePage />} />
                <Route path="housekeeping/reports" element={<HousekeepingReportsPage />} />

                <Route path="spa" element={<SpaManagementPage />} />
                <Route path="spa/add-specialist" element={<AddSpecialistPage />} />
                <Route path="spa/add-service" element={<AddServicePage />} />
                <Route path="spa/edit-service/:id" element={<EditServicePage />} />
                <Route path="spa/bookings" element={<SpaBookingsPage />} />
                <Route path="spa/categories" element={<SpaCategoriesPage />} />
                <Route path="spa/reports" element={<SpaReportsPage />} />
                <Route path="staff" element={<StaffManagementPage />} />
                <Route path="staff/add" element={<AddStaffMemberPage />} />
                <Route path="staff/add-department" element={<AddDepartmentPage />} />
                <Route path="staff/add-role" element={<AddRolePage />} />
                <Route path="staff/add-access-level" element={<AddAccessLevelPage />} />
                <Route path="events" element={<EventsManagementPage />} />
                <Route path="events/add" element={<AddEventPage />} />
                {/* <Route path="events/edit/:id" element={<EditEventPage />} /> */}
                <Route path="events/reports" element={<EventsReportsPage />} />
                <Route path="events/scanner" element={<EventsScannerPage />} />
                <Route path="events/bookings" element={<EventsBookingsPage />} />
                <Route path="restaurant" element={<RestaurantManagementPage />} />
                <Route path="restaurant/add-item" element={<AddMenuItemPage />} />
                <Route path="restaurant/categories" element={<MenuCategoriesPage />} />
                <Route path="restaurant/orders" element={<RestaurantOrdersPage />} />
                <Route path="restaurant/tables" element={<RestaurantTablesPage />} />
                <Route path="restaurant/reports" element={<RestaurantReportsPage />} />
                <Route path="loyalty" element={<LoyaltyManagementPage />} />
                <Route path="meeting-hall" element={<MeetingHallPage />} />
                <Route path="availability" element={<AvailabilityManagementPage />} />
                <Route path="availability/meeting-hall" element={<Navigate to="/admin/meeting-hall" replace />} />
                <Route path="promo-codes" element={<PromoCodePage />} />
                <Route path="refunds" element={<RefundsPage />} />
                <Route path="reports" element={<ReportsPage />} />
                <Route path="settings" element={<SettingsPage />} />
                <Route path="tax-settings" element={<TaxSettingsPage />} />
                <Route path="users" element={<UsersManagementPage />} />
                <Route path="content" element={<ContentManagementPage />} />
              </Route>

              <Route path="/spa" element={<SpaPage />} />
              <Route path="/events" element={<EventsPage />} />
              <Route path="/rooms" element={<RoomsPage />} />
              <Route path="/loyalty" element={<LoyaltyPage />} />
              <Route path="/download-app" element={<DownloadAppPage />} />

              <Route path="*" element={<NotFound />} />
            </Routes>
          </TooltipProvider>
        </SearchProvider>
      </BrowserRouter>
    </QueryClientProvider>
  );
};

export default App;
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 221 47% 28%;
    --primary-foreground: 210 40% 98%;

    --secondary: 36 42% 59%;
    --secondary-foreground: 210 40% 98%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 39 55% 86%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221 47% 28%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 36 42% 59%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 39 55% 86%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-serif;
  }

  p,
  a,
  button,
  input,
  textarea,
  select,
  li,
  span {
    @apply font-sans;
  }
}

.hotel-gradient {
  background: linear-gradient(135deg, #0F4C81 0%, #2C3E50 100%);
}

/* Rich Text Content Styles */
.rich-text-content {
  @apply text-sm leading-relaxed;
}

.rich-text-content p {
  @apply mb-2;
}

.rich-text-content ul,
.rich-text-content ol {
  @apply pl-6 mb-3;
}

.rich-text-content ul {
  @apply list-disc;
}

.rich-text-content ol {
  @apply list-decimal;
}

.rich-text-content li {
  @apply mb-1;
}

.rich-text-content h1,
.rich-text-content h2,
.rich-text-content h3,
.rich-text-content h4 {
  @apply font-serif font-medium mb-2;
}

.rich-text-content h1 {
  @apply text-xl;
}

.rich-text-content h2 {
  @apply text-lg;
}

.rich-text-content h3 {
  @apply text-base;
}

.rich-text-content strong,
.rich-text-content b {
  @apply font-semibold;
}

.rich-text-content em,
.rich-text-content i {
  @apply italic;
}

.rich-text-content a {
  @apply text-blue-600 underline hover:text-blue-800;
}

/* Remove Quill editor styles from the view modal */
.rich-text-content .ql-editor {
  @apply p-0;
}

.rich-text-content .ql-container {
  @apply border-none;
}
</file>

<file path="src/main.tsx">
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>parkside-plaza-connect</title>
    <meta name="description" content="Lovable Generated Project" />
    <meta name="author" content="Lovable" />

    <meta property="og:title" content="parkside-plaza-connect" />
    <meta property="og:description" content="Lovable Generated Project" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "axios": "^1.8.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "html5-qrcode": "^2.3.8",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-qr-code": "^2.0.15",
    "react-quill": "^2.0.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/0702f4c7-be8e-4b36-8f4c-699ea89f1af0

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/0702f4c7-be8e-4b36-8f4c-699ea89f1af0) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/0702f4c7-be8e-4b36-8f4c-699ea89f1af0) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes it is!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			fontFamily: {
				sans: ['Inter', 'sans-serif'],
				serif: ['Playfair Display', 'serif'],
			},
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				hotel: {
					primary: '#0F4C81',     // Deep blue
					secondary: '#C19A6B',   // Gold accent
					accent: '#E5D3B3',      // Light gold
					dark: '#2C3E50',        // Dark blue-gray
					light: '#F5F5F5',       // Light gray
				},
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					'0%': {
						opacity: '0',
						transform: 'translateY(10px)'
					},
					'100%': {
						opacity: '1',
						transform: 'translateY(0)'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.3s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));
</file>

</files>
